// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
windows_core::imp::define_interface!(
    IFabricApplicationHealthResult,
    IFabricApplicationHealthResult_Vtbl,
    0x41612fab_e615_4a48_98e7_4abcc93b6049
);
impl core::ops::Deref for IFabricApplicationHealthResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricApplicationHealthResult, windows_core::IUnknown);
impl IFabricApplicationHealthResult {
    pub unsafe fn get_ApplicationHealth(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_HEALTH {
        (windows_core::Interface::vtable(self).get_ApplicationHealth)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricApplicationHealthResult {}
unsafe impl Sync for IFabricApplicationHealthResult {}
#[repr(C)]
pub struct IFabricApplicationHealthResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ApplicationHealth:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_APPLICATION_HEALTH,
}
windows_core::imp::define_interface!(
    IFabricApplicationManagementClient,
    IFabricApplicationManagementClient_Vtbl,
    0x7c219ae9_e58d_431f_8b30_92a40281faac
);
impl core::ops::Deref for IFabricApplicationManagementClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricApplicationManagementClient, windows_core::IUnknown);
impl IFabricApplicationManagementClient {
    pub unsafe fn BeginProvisionApplicationType<P0, P1>(
        &self,
        applicationbuildpath: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginProvisionApplicationType)(
            windows_core::Interface::as_raw(self),
            applicationbuildpath.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndProvisionApplicationType<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndProvisionApplicationType)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginCreateApplication<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_APPLICATION_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCreateApplication)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCreateApplication<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndCreateApplication)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginUpgradeApplication<P0>(
        &self,
        upgradedescription: *const super::FabricTypes::FABRIC_APPLICATION_UPGRADE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpgradeApplication)(
            windows_core::Interface::as_raw(self),
            upgradedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpgradeApplication<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUpgradeApplication)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetApplicationUpgradeProgress<P0, P1>(
        &self,
        applicationname: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetApplicationUpgradeProgress)(
            windows_core::Interface::as_raw(self),
            applicationname.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationUpgradeProgress<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricApplicationUpgradeProgressResult2>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationUpgradeProgress)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginMoveNextApplicationUpgradeDomain<P0, P1>(
        &self,
        progress: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<IFabricApplicationUpgradeProgressResult2>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginMoveNextApplicationUpgradeDomain)(
            windows_core::Interface::as_raw(self),
            progress.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndMoveNextApplicationUpgradeDomain<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndMoveNextApplicationUpgradeDomain)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginDeleteApplication<P0, P1>(
        &self,
        applicationname: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeleteApplication)(
            windows_core::Interface::as_raw(self),
            applicationname.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeleteApplication<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeleteApplication)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginUnprovisionApplicationType<P0, P1, P2>(
        &self,
        applicationtypename: P0,
        applicationtypeversion: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUnprovisionApplicationType)(
            windows_core::Interface::as_raw(self),
            applicationtypename.param().abi(),
            applicationtypeversion.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUnprovisionApplicationType<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUnprovisionApplicationType)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricApplicationManagementClient {}
unsafe impl Sync for IFabricApplicationManagementClient {}
#[repr(C)]
pub struct IFabricApplicationManagementClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginProvisionApplicationType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndProvisionApplicationType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginCreateApplication: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_APPLICATION_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCreateApplication: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginUpgradeApplication: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_APPLICATION_UPGRADE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpgradeApplication: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetApplicationUpgradeProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationUpgradeProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginMoveNextApplicationUpgradeDomain: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndMoveNextApplicationUpgradeDomain: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub BeginDeleteApplication: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeleteApplication: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginUnprovisionApplicationType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUnprovisionApplicationType: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationManagementClient10,
    IFabricApplicationManagementClient10_Vtbl,
    0x67001225_d106_41ae_8bd4_5a0a119c5c01
);
impl core::ops::Deref for IFabricApplicationManagementClient10 {
    type Target = IFabricApplicationManagementClient9;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationManagementClient10,
    windows_core::IUnknown,
    IFabricApplicationManagementClient,
    IFabricApplicationManagementClient2,
    IFabricApplicationManagementClient3,
    IFabricApplicationManagementClient4,
    IFabricApplicationManagementClient5,
    IFabricApplicationManagementClient6,
    IFabricApplicationManagementClient7,
    IFabricApplicationManagementClient8,
    IFabricApplicationManagementClient9
);
impl IFabricApplicationManagementClient10 {
    pub unsafe fn BeginProvisionApplicationType3<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginProvisionApplicationType3)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndProvisionApplicationType3<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndProvisionApplicationType3)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricApplicationManagementClient10 {}
unsafe impl Sync for IFabricApplicationManagementClient10 {}
#[repr(C)]
pub struct IFabricApplicationManagementClient10_Vtbl {
    pub base__: IFabricApplicationManagementClient9_Vtbl,
    pub BeginProvisionApplicationType3: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndProvisionApplicationType3: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationManagementClient2,
    IFabricApplicationManagementClient2_Vtbl,
    0xf873516f_9bfe_47e5_93b9_3667aaf19324
);
impl core::ops::Deref for IFabricApplicationManagementClient2 {
    type Target = IFabricApplicationManagementClient;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationManagementClient2,
    windows_core::IUnknown,
    IFabricApplicationManagementClient
);
impl IFabricApplicationManagementClient2 {
    pub unsafe fn BeginGetApplicationManifest<P0, P1, P2>(
        &self,
        applicationtypename: P0,
        applicationtypeversion: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetApplicationManifest)(
            windows_core::Interface::as_raw(self),
            applicationtypename.param().abi(),
            applicationtypeversion.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationManifest<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationManifest)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginMoveNextApplicationUpgradeDomain2<P0, P1, P2>(
        &self,
        applicationname: P0,
        nextupgradedomain: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginMoveNextApplicationUpgradeDomain2)(
            windows_core::Interface::as_raw(self),
            applicationname.param().abi(),
            nextupgradedomain.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndMoveNextApplicationUpgradeDomain2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndMoveNextApplicationUpgradeDomain2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricApplicationManagementClient2 {}
unsafe impl Sync for IFabricApplicationManagementClient2 {}
#[repr(C)]
pub struct IFabricApplicationManagementClient2_Vtbl {
    pub base__: IFabricApplicationManagementClient_Vtbl,
    pub BeginGetApplicationManifest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationManifest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginMoveNextApplicationUpgradeDomain2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndMoveNextApplicationUpgradeDomain2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationManagementClient3,
    IFabricApplicationManagementClient3_Vtbl,
    0x108c7735_97e1_4af8_8c2d_9080b1b29d33
);
impl core::ops::Deref for IFabricApplicationManagementClient3 {
    type Target = IFabricApplicationManagementClient2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationManagementClient3,
    windows_core::IUnknown,
    IFabricApplicationManagementClient,
    IFabricApplicationManagementClient2
);
impl IFabricApplicationManagementClient3 {
    pub unsafe fn BeginUpdateApplicationUpgrade<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpdateApplicationUpgrade)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpdateApplicationUpgrade<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUpdateApplicationUpgrade)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginRestartDeployedCodePackage<P0>(
        &self,
        restartcodepackagedescription : *const super::FabricTypes:: FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRestartDeployedCodePackage)(
            windows_core::Interface::as_raw(self),
            restartcodepackagedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRestartDeployedCodePackage<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRestartDeployedCodePackage)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn CopyApplicationPackage<P0, P1, P2>(
        &self,
        imagestoreconnectionstring: P0,
        applicationpackagepath: P1,
        applicationpackagepathinimagestore: P2,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).CopyApplicationPackage)(
            windows_core::Interface::as_raw(self),
            imagestoreconnectionstring.param().abi(),
            applicationpackagepath.param().abi(),
            applicationpackagepathinimagestore.param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveApplicationPackage<P0, P1>(
        &self,
        imagestoreconnectionstring: P0,
        applicationpackagepathinimagestore: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).RemoveApplicationPackage)(
            windows_core::Interface::as_raw(self),
            imagestoreconnectionstring.param().abi(),
            applicationpackagepathinimagestore.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricApplicationManagementClient3 {}
unsafe impl Sync for IFabricApplicationManagementClient3 {}
#[repr(C)]
pub struct IFabricApplicationManagementClient3_Vtbl {
    pub base__: IFabricApplicationManagementClient2_Vtbl,
    pub BeginUpdateApplicationUpgrade: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpdateApplicationUpgrade: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRestartDeployedCodePackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRestartDeployedCodePackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CopyApplicationPackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
    pub RemoveApplicationPackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationManagementClient4,
    IFabricApplicationManagementClient4_Vtbl,
    0x82c41b22_dbcb_4f7a_8d2f_f9bb94add446
);
impl core::ops::Deref for IFabricApplicationManagementClient4 {
    type Target = IFabricApplicationManagementClient3;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationManagementClient4,
    windows_core::IUnknown,
    IFabricApplicationManagementClient,
    IFabricApplicationManagementClient2,
    IFabricApplicationManagementClient3
);
impl IFabricApplicationManagementClient4 {
    pub unsafe fn BeginDeployServicePackageToNode<P0, P1, P2, P3, P4>(
        &self,
        applicationtypename: P0,
        applicationtypeversion: P1,
        servicemanifestname: P2,
        sharingpolicy: *const super::FabricTypes::FABRIC_PACKAGE_SHARING_POLICY_LIST,
        nodename: P3,
        timeoutmilliseconds: u32,
        callback: P4,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<windows_core::PCWSTR>,
        P3: windows_core::Param<windows_core::PCWSTR>,
        P4: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeployServicePackageToNode)(
            windows_core::Interface::as_raw(self),
            applicationtypename.param().abi(),
            applicationtypeversion.param().abi(),
            servicemanifestname.param().abi(),
            sharingpolicy,
            nodename.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeployServicePackageToNode<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeployServicePackageToNode)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricApplicationManagementClient4 {}
unsafe impl Sync for IFabricApplicationManagementClient4 {}
#[repr(C)]
pub struct IFabricApplicationManagementClient4_Vtbl {
    pub base__: IFabricApplicationManagementClient3_Vtbl,
    pub BeginDeployServicePackageToNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        *const super::FabricTypes::FABRIC_PACKAGE_SHARING_POLICY_LIST,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeployServicePackageToNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationManagementClient5,
    IFabricApplicationManagementClient5_Vtbl,
    0xd7490e43_2217_4158_93e1_9ce4dd6f724a
);
impl core::ops::Deref for IFabricApplicationManagementClient5 {
    type Target = IFabricApplicationManagementClient4;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationManagementClient5,
    windows_core::IUnknown,
    IFabricApplicationManagementClient,
    IFabricApplicationManagementClient2,
    IFabricApplicationManagementClient3,
    IFabricApplicationManagementClient4
);
impl IFabricApplicationManagementClient5 {
    pub unsafe fn BeginRollbackApplicationUpgrade<P0, P1>(
        &self,
        applicationname: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRollbackApplicationUpgrade)(
            windows_core::Interface::as_raw(self),
            applicationname.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRollbackApplicationUpgrade<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRollbackApplicationUpgrade)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricApplicationManagementClient5 {}
unsafe impl Sync for IFabricApplicationManagementClient5 {}
#[repr(C)]
pub struct IFabricApplicationManagementClient5_Vtbl {
    pub base__: IFabricApplicationManagementClient4_Vtbl,
    pub BeginRollbackApplicationUpgrade: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRollbackApplicationUpgrade: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationManagementClient6,
    IFabricApplicationManagementClient6_Vtbl,
    0xb01e63ee_1ea4_4181_95c7_983b32e16848
);
impl core::ops::Deref for IFabricApplicationManagementClient6 {
    type Target = IFabricApplicationManagementClient5;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationManagementClient6,
    windows_core::IUnknown,
    IFabricApplicationManagementClient,
    IFabricApplicationManagementClient2,
    IFabricApplicationManagementClient3,
    IFabricApplicationManagementClient4,
    IFabricApplicationManagementClient5
);
impl IFabricApplicationManagementClient6 {
    pub unsafe fn BeginUpdateApplication<P0>(
        &self,
        applicationupdatedescription : *const super::FabricTypes:: FABRIC_APPLICATION_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpdateApplication)(
            windows_core::Interface::as_raw(self),
            applicationupdatedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpdateApplication<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUpdateApplication)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricApplicationManagementClient6 {}
unsafe impl Sync for IFabricApplicationManagementClient6 {}
#[repr(C)]
pub struct IFabricApplicationManagementClient6_Vtbl {
    pub base__: IFabricApplicationManagementClient5_Vtbl,
    pub BeginUpdateApplication: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_APPLICATION_UPDATE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpdateApplication: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationManagementClient7,
    IFabricApplicationManagementClient7_Vtbl,
    0x26844276_25b1_4f8c_adbe_b1b3a3083c17
);
impl core::ops::Deref for IFabricApplicationManagementClient7 {
    type Target = IFabricApplicationManagementClient6;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationManagementClient7,
    windows_core::IUnknown,
    IFabricApplicationManagementClient,
    IFabricApplicationManagementClient2,
    IFabricApplicationManagementClient3,
    IFabricApplicationManagementClient4,
    IFabricApplicationManagementClient5,
    IFabricApplicationManagementClient6
);
impl IFabricApplicationManagementClient7 {
    pub unsafe fn BeginDeleteApplication2<P0>(
        &self,
        deletedescription: *const super::FabricTypes::FABRIC_DELETE_APPLICATION_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeleteApplication2)(
            windows_core::Interface::as_raw(self),
            deletedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeleteApplication2<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeleteApplication2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricApplicationManagementClient7 {}
unsafe impl Sync for IFabricApplicationManagementClient7 {}
#[repr(C)]
pub struct IFabricApplicationManagementClient7_Vtbl {
    pub base__: IFabricApplicationManagementClient6_Vtbl,
    pub BeginDeleteApplication2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DELETE_APPLICATION_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeleteApplication2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationManagementClient8,
    IFabricApplicationManagementClient8_Vtbl,
    0x97b38e85_7329_47ff_a8d2_b7cbf1603689
);
impl core::ops::Deref for IFabricApplicationManagementClient8 {
    type Target = IFabricApplicationManagementClient7;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationManagementClient8,
    windows_core::IUnknown,
    IFabricApplicationManagementClient,
    IFabricApplicationManagementClient2,
    IFabricApplicationManagementClient3,
    IFabricApplicationManagementClient4,
    IFabricApplicationManagementClient5,
    IFabricApplicationManagementClient6,
    IFabricApplicationManagementClient7
);
impl IFabricApplicationManagementClient8 {
    pub unsafe fn BeginProvisionApplicationType2<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginProvisionApplicationType2)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndProvisionApplicationType2<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndProvisionApplicationType2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricApplicationManagementClient8 {}
unsafe impl Sync for IFabricApplicationManagementClient8 {}
#[repr(C)]
pub struct IFabricApplicationManagementClient8_Vtbl {
    pub base__: IFabricApplicationManagementClient7_Vtbl,
    pub BeginProvisionApplicationType2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndProvisionApplicationType2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationManagementClient9,
    IFabricApplicationManagementClient9_Vtbl,
    0x26617b63_1350_4d7f_830c_2200978d31bb
);
impl core::ops::Deref for IFabricApplicationManagementClient9 {
    type Target = IFabricApplicationManagementClient8;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationManagementClient9,
    windows_core::IUnknown,
    IFabricApplicationManagementClient,
    IFabricApplicationManagementClient2,
    IFabricApplicationManagementClient3,
    IFabricApplicationManagementClient4,
    IFabricApplicationManagementClient5,
    IFabricApplicationManagementClient6,
    IFabricApplicationManagementClient7,
    IFabricApplicationManagementClient8
);
impl IFabricApplicationManagementClient9 {
    pub unsafe fn BeginUnprovisionApplicationType2<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUnprovisionApplicationType2)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUnprovisionApplicationType2<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUnprovisionApplicationType2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricApplicationManagementClient9 {}
unsafe impl Sync for IFabricApplicationManagementClient9 {}
#[repr(C)]
pub struct IFabricApplicationManagementClient9_Vtbl {
    pub base__: IFabricApplicationManagementClient8_Vtbl,
    pub BeginUnprovisionApplicationType2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUnprovisionApplicationType2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationUpgradeProgressResult,
    IFabricApplicationUpgradeProgressResult_Vtbl,
    0x1e4670f8_ede5_48ab_881f_c45a0f38413a
);
impl core::ops::Deref for IFabricApplicationUpgradeProgressResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationUpgradeProgressResult,
    windows_core::IUnknown
);
impl IFabricApplicationUpgradeProgressResult {
    pub unsafe fn get_ApplicationName(&self) -> super::FabricTypes::FABRIC_URI {
        (windows_core::Interface::vtable(self).get_ApplicationName)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_ApplicationTypeName(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_ApplicationTypeName)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_TargetApplicationTypeVersion(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_TargetApplicationTypeVersion)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_UpgradeState(&self) -> super::FabricTypes::FABRIC_APPLICATION_UPGRADE_STATE {
        (windows_core::Interface::vtable(self).get_UpgradeState)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn GetUpgradeDomains(
        &self,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION>
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetUpgradeDomains)(
            windows_core::Interface::as_raw(self),
            itemcount,
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetChangedUpgradeDomains<P0>(
        &self,
        previousprogress: P0,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION>
    where
        P0: windows_core::Param<IFabricApplicationUpgradeProgressResult>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetChangedUpgradeDomains)(
            windows_core::Interface::as_raw(self),
            previousprogress.param().abi(),
            itemcount,
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricApplicationUpgradeProgressResult {}
unsafe impl Sync for IFabricApplicationUpgradeProgressResult {}
#[repr(C)]
pub struct IFabricApplicationUpgradeProgressResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ApplicationName:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> super::FabricTypes::FABRIC_URI,
    pub get_ApplicationTypeName:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
    pub get_TargetApplicationTypeVersion:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
    pub get_UpgradeState:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_APPLICATION_UPGRADE_STATE,
    pub GetUpgradeDomains: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION,
    ) -> windows_core::HRESULT,
    pub GetChangedUpgradeDomains: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricApplicationUpgradeProgressResult2,
    IFabricApplicationUpgradeProgressResult2_Vtbl,
    0x62707ee5_b625_4489_aa4d_2e54b06ea248
);
impl core::ops::Deref for IFabricApplicationUpgradeProgressResult2 {
    type Target = IFabricApplicationUpgradeProgressResult;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationUpgradeProgressResult2,
    windows_core::IUnknown,
    IFabricApplicationUpgradeProgressResult
);
impl IFabricApplicationUpgradeProgressResult2 {
    pub unsafe fn get_RollingUpgradeMode(&self) -> super::FabricTypes::FABRIC_ROLLING_UPGRADE_MODE {
        (windows_core::Interface::vtable(self).get_RollingUpgradeMode)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_NextUpgradeDomain(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_NextUpgradeDomain)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricApplicationUpgradeProgressResult2 {}
unsafe impl Sync for IFabricApplicationUpgradeProgressResult2 {}
#[repr(C)]
pub struct IFabricApplicationUpgradeProgressResult2_Vtbl {
    pub base__: IFabricApplicationUpgradeProgressResult_Vtbl,
    pub get_RollingUpgradeMode:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_ROLLING_UPGRADE_MODE,
    pub get_NextUpgradeDomain:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
}
windows_core::imp::define_interface!(
    IFabricApplicationUpgradeProgressResult3,
    IFabricApplicationUpgradeProgressResult3_Vtbl,
    0x1bc1d9c3_eef5_41fe_b8a2_abb97a8ba8e2
);
impl core::ops::Deref for IFabricApplicationUpgradeProgressResult3 {
    type Target = IFabricApplicationUpgradeProgressResult2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricApplicationUpgradeProgressResult3,
    windows_core::IUnknown,
    IFabricApplicationUpgradeProgressResult,
    IFabricApplicationUpgradeProgressResult2
);
impl IFabricApplicationUpgradeProgressResult3 {
    pub unsafe fn get_UpgradeProgress(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_UPGRADE_PROGRESS {
        (windows_core::Interface::vtable(self).get_UpgradeProgress)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricApplicationUpgradeProgressResult3 {}
unsafe impl Sync for IFabricApplicationUpgradeProgressResult3 {}
#[repr(C)]
pub struct IFabricApplicationUpgradeProgressResult3_Vtbl {
    pub base__: IFabricApplicationUpgradeProgressResult2_Vtbl,
    pub get_UpgradeProgress:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_APPLICATION_UPGRADE_PROGRESS,
}
windows_core::imp::define_interface!(
    IFabricChaosDescriptionResult,
    IFabricChaosDescriptionResult_Vtbl,
    0xfa8aa86e_f0fa_4a14_bed7_1dcfa0980b5b
);
impl core::ops::Deref for IFabricChaosDescriptionResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricChaosDescriptionResult, windows_core::IUnknown);
impl IFabricChaosDescriptionResult {
    pub unsafe fn get_ChaosDescriptionResult(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_CHAOS_DESCRIPTION {
        (windows_core::Interface::vtable(self).get_ChaosDescriptionResult)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricChaosDescriptionResult {}
unsafe impl Sync for IFabricChaosDescriptionResult {}
#[repr(C)]
pub struct IFabricChaosDescriptionResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ChaosDescriptionResult:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CHAOS_DESCRIPTION,
}
windows_core::imp::define_interface!(
    IFabricChaosEventsSegmentResult,
    IFabricChaosEventsSegmentResult_Vtbl,
    0xde148299_c48a_4540_877b_5b1daa518d76
);
impl core::ops::Deref for IFabricChaosEventsSegmentResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricChaosEventsSegmentResult, windows_core::IUnknown);
impl IFabricChaosEventsSegmentResult {
    pub unsafe fn get_ChaosEventsSegmentResult(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_CHAOS_EVENTS_SEGMENT {
        (windows_core::Interface::vtable(self).get_ChaosEventsSegmentResult)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricChaosEventsSegmentResult {}
unsafe impl Sync for IFabricChaosEventsSegmentResult {}
#[repr(C)]
pub struct IFabricChaosEventsSegmentResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ChaosEventsSegmentResult:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CHAOS_EVENTS_SEGMENT,
}
windows_core::imp::define_interface!(
    IFabricChaosReportResult,
    IFabricChaosReportResult_Vtbl,
    0x8952e931_b2b3_470a_b982_6b415f30dbc0
);
impl core::ops::Deref for IFabricChaosReportResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricChaosReportResult, windows_core::IUnknown);
impl IFabricChaosReportResult {
    pub unsafe fn get_ChaosReportResult(&self) -> *mut super::FabricTypes::FABRIC_CHAOS_REPORT {
        (windows_core::Interface::vtable(self).get_ChaosReportResult)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricChaosReportResult {}
unsafe impl Sync for IFabricChaosReportResult {}
#[repr(C)]
pub struct IFabricChaosReportResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ChaosReportResult:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CHAOS_REPORT,
}
windows_core::imp::define_interface!(
    IFabricChaosScheduleDescriptionResult,
    IFabricChaosScheduleDescriptionResult_Vtbl,
    0x3b93f0d9_c0a9_4df5_9b09_b2365de89d84
);
impl core::ops::Deref for IFabricChaosScheduleDescriptionResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricChaosScheduleDescriptionResult,
    windows_core::IUnknown
);
impl IFabricChaosScheduleDescriptionResult {
    pub unsafe fn get_ChaosScheduleDescriptionResult(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_CHAOS_SCHEDULE_DESCRIPTION {
        (windows_core::Interface::vtable(self).get_ChaosScheduleDescriptionResult)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricChaosScheduleDescriptionResult {}
unsafe impl Sync for IFabricChaosScheduleDescriptionResult {}
#[repr(C)]
pub struct IFabricChaosScheduleDescriptionResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ChaosScheduleDescriptionResult:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_CHAOS_SCHEDULE_DESCRIPTION,
}
windows_core::imp::define_interface!(
    IFabricClientConnectionEventHandler,
    IFabricClientConnectionEventHandler_Vtbl,
    0x2bd21f94_d962_4bb4_84b8_5a4b3e9d4d4d
);
impl core::ops::Deref for IFabricClientConnectionEventHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClientConnectionEventHandler,
    windows_core::IUnknown
);
impl IFabricClientConnectionEventHandler {
    pub unsafe fn OnConnected<P0>(
        &self,
        __midl__ifabricclientconnectioneventhandler0000: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricGatewayInformationResult>,
    {
        (windows_core::Interface::vtable(self).OnConnected)(
            windows_core::Interface::as_raw(self),
            __midl__ifabricclientconnectioneventhandler0000
                .param()
                .abi(),
        )
        .ok()
    }
    pub unsafe fn OnDisconnected<P0>(
        &self,
        __midl__ifabricclientconnectioneventhandler0001: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricGatewayInformationResult>,
    {
        (windows_core::Interface::vtable(self).OnDisconnected)(
            windows_core::Interface::as_raw(self),
            __midl__ifabricclientconnectioneventhandler0001
                .param()
                .abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricClientConnectionEventHandler {}
unsafe impl Sync for IFabricClientConnectionEventHandler {}
#[repr(C)]
pub struct IFabricClientConnectionEventHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnConnected: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OnDisconnected: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClientConnectionEventHandler2,
    IFabricClientConnectionEventHandler2_Vtbl,
    0x6b5dbd26_7d7a_4a3f_b8ea_1f049105e897
);
impl core::ops::Deref for IFabricClientConnectionEventHandler2 {
    type Target = IFabricClientConnectionEventHandler;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClientConnectionEventHandler2,
    windows_core::IUnknown,
    IFabricClientConnectionEventHandler
);
impl IFabricClientConnectionEventHandler2 {
    pub unsafe fn OnClaimsRetrieval(
        &self,
        metadata: *const super::FabricTypes::FABRIC_CLAIMS_RETRIEVAL_METADATA,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).OnClaimsRetrieval)(
            windows_core::Interface::as_raw(self),
            metadata,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricClientConnectionEventHandler2 {}
unsafe impl Sync for IFabricClientConnectionEventHandler2 {}
#[repr(C)]
pub struct IFabricClientConnectionEventHandler2_Vtbl {
    pub base__: IFabricClientConnectionEventHandler_Vtbl,
    pub OnClaimsRetrieval: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_CLAIMS_RETRIEVAL_METADATA,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClientSettings,
    IFabricClientSettings_Vtbl,
    0xb0e7dee0_cf64_11e0_9572_0800200c9a66
);
impl core::ops::Deref for IFabricClientSettings {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricClientSettings, windows_core::IUnknown);
impl IFabricClientSettings {
    pub unsafe fn SetSecurityCredentials(
        &self,
        securitycredentials: *const super::FabricTypes::FABRIC_SECURITY_CREDENTIALS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).SetSecurityCredentials)(
            windows_core::Interface::as_raw(self),
            securitycredentials,
        )
        .ok()
    }
    pub unsafe fn SetKeepAlive(&self, keepaliveintervalinseconds: u32) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).SetKeepAlive)(
            windows_core::Interface::as_raw(self),
            keepaliveintervalinseconds,
        )
        .ok()
    }
}
unsafe impl Send for IFabricClientSettings {}
unsafe impl Sync for IFabricClientSettings {}
#[repr(C)]
pub struct IFabricClientSettings_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub SetSecurityCredentials: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SECURITY_CREDENTIALS,
    ) -> windows_core::HRESULT,
    pub SetKeepAlive:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClientSettings2,
    IFabricClientSettings2_Vtbl,
    0xc6fb97f7_82f3_4e6c_a80a_021e8ffca425
);
impl core::ops::Deref for IFabricClientSettings2 {
    type Target = IFabricClientSettings;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClientSettings2,
    windows_core::IUnknown,
    IFabricClientSettings
);
impl IFabricClientSettings2 {
    pub unsafe fn GetSettings(&self) -> windows_core::Result<IFabricClientSettingsResult> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetSettings)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn SetSettings(
        &self,
        fabricclientsettings: *const super::FabricTypes::FABRIC_CLIENT_SETTINGS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).SetSettings)(
            windows_core::Interface::as_raw(self),
            fabricclientsettings,
        )
        .ok()
    }
}
unsafe impl Send for IFabricClientSettings2 {}
unsafe impl Sync for IFabricClientSettings2 {}
#[repr(C)]
pub struct IFabricClientSettings2_Vtbl {
    pub base__: IFabricClientSettings_Vtbl,
    pub GetSettings: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetSettings: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_CLIENT_SETTINGS,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClientSettingsResult,
    IFabricClientSettingsResult_Vtbl,
    0x3b825afd_cb31_4589_961e_e3778aa23a60
);
impl core::ops::Deref for IFabricClientSettingsResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricClientSettingsResult, windows_core::IUnknown);
impl IFabricClientSettingsResult {
    pub unsafe fn get_Settings(&self) -> *mut super::FabricTypes::FABRIC_CLIENT_SETTINGS {
        (windows_core::Interface::vtable(self).get_Settings)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricClientSettingsResult {}
unsafe impl Sync for IFabricClientSettingsResult {}
#[repr(C)]
pub struct IFabricClientSettingsResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Settings: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    )
        -> *mut super::FabricTypes::FABRIC_CLIENT_SETTINGS,
}
windows_core::imp::define_interface!(
    IFabricClusterHealthResult,
    IFabricClusterHealthResult_Vtbl,
    0x6b9b0f2c_6782_4a31_a256_570fa8ba32d3
);
impl core::ops::Deref for IFabricClusterHealthResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricClusterHealthResult, windows_core::IUnknown);
impl IFabricClusterHealthResult {
    pub unsafe fn get_ClusterHealth(&self) -> *mut super::FabricTypes::FABRIC_CLUSTER_HEALTH {
        (windows_core::Interface::vtable(self).get_ClusterHealth)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricClusterHealthResult {}
unsafe impl Sync for IFabricClusterHealthResult {}
#[repr(C)]
pub struct IFabricClusterHealthResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ClusterHealth:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CLUSTER_HEALTH,
}
windows_core::imp::define_interface!(
    IFabricClusterManagementClient,
    IFabricClusterManagementClient_Vtbl,
    0xa3cf17e0_cf84_4ae0_b720_1785c0fb4ace
);
impl core::ops::Deref for IFabricClusterManagementClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricClusterManagementClient, windows_core::IUnknown);
impl IFabricClusterManagementClient {
    pub unsafe fn BeginNodeStateRemoved<P0, P1>(
        &self,
        nodename: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginNodeStateRemoved)(
            windows_core::Interface::as_raw(self),
            nodename.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndNodeStateRemoved<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndNodeStateRemoved)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginRecoverPartitions<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRecoverPartitions)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRecoverPartitions<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRecoverPartitions)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricClusterManagementClient {}
unsafe impl Sync for IFabricClusterManagementClient {}
#[repr(C)]
pub struct IFabricClusterManagementClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginNodeStateRemoved: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndNodeStateRemoved: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRecoverPartitions: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRecoverPartitions: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClusterManagementClient10,
    IFabricClusterManagementClient10_Vtbl,
    0xa4aceb4f_2e2b_4be1_9d12_44fe8cb5fb20
);
impl core::ops::Deref for IFabricClusterManagementClient10 {
    type Target = IFabricClusterManagementClient9;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClusterManagementClient10,
    windows_core::IUnknown,
    IFabricClusterManagementClient,
    IFabricClusterManagementClient2,
    IFabricClusterManagementClient3,
    IFabricClusterManagementClient4,
    IFabricClusterManagementClient5,
    IFabricClusterManagementClient6,
    IFabricClusterManagementClient7,
    IFabricClusterManagementClient8,
    IFabricClusterManagementClient9
);
impl IFabricClusterManagementClient10 {
    pub unsafe fn BeginGetClusterConfiguration2<P0, P1>(
        &self,
        apiversion: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetClusterConfiguration2)(
            windows_core::Interface::as_raw(self),
            apiversion.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetClusterConfiguration2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetClusterConfiguration2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricClusterManagementClient10 {}
unsafe impl Sync for IFabricClusterManagementClient10 {}
#[repr(C)]
pub struct IFabricClusterManagementClient10_Vtbl {
    pub base__: IFabricClusterManagementClient9_Vtbl,
    pub BeginGetClusterConfiguration2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetClusterConfiguration2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClusterManagementClient2,
    IFabricClusterManagementClient2_Vtbl,
    0xf9493e16_6a49_4d79_8695_5a6826b504c5
);
impl core::ops::Deref for IFabricClusterManagementClient2 {
    type Target = IFabricClusterManagementClient;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClusterManagementClient2,
    windows_core::IUnknown,
    IFabricClusterManagementClient
);
impl IFabricClusterManagementClient2 {
    pub unsafe fn BeginDeactivateNode<P0, P1>(
        &self,
        nodename: P0,
        intent: super::FabricTypes::FABRIC_NODE_DEACTIVATION_INTENT,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeactivateNode)(
            windows_core::Interface::as_raw(self),
            nodename.param().abi(),
            intent,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeactivateNode<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeactivateNode)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginActivateNode<P0, P1>(
        &self,
        nodename: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginActivateNode)(
            windows_core::Interface::as_raw(self),
            nodename.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndActivateNode<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndActivateNode)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginProvisionFabric<P0, P1, P2>(
        &self,
        codefilepath: P0,
        clustermanifestfilepath: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginProvisionFabric)(
            windows_core::Interface::as_raw(self),
            codefilepath.param().abi(),
            clustermanifestfilepath.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndProvisionFabric<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndProvisionFabric)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginUpgradeFabric<P0>(
        &self,
        upgradedescription: *const super::FabricTypes::FABRIC_UPGRADE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpgradeFabric)(
            windows_core::Interface::as_raw(self),
            upgradedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpgradeFabric<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUpgradeFabric)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetFabricUpgradeProgress<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetFabricUpgradeProgress)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetFabricUpgradeProgress<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricUpgradeProgressResult2>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetFabricUpgradeProgress)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginMoveNextFabricUpgradeDomain<P0, P1>(
        &self,
        progress: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<IFabricUpgradeProgressResult2>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginMoveNextFabricUpgradeDomain)(
            windows_core::Interface::as_raw(self),
            progress.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndMoveNextFabricUpgradeDomain<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndMoveNextFabricUpgradeDomain)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginMoveNextFabricUpgradeDomain2<P0, P1>(
        &self,
        nextupgradedomain: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginMoveNextFabricUpgradeDomain2)(
            windows_core::Interface::as_raw(self),
            nextupgradedomain.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndMoveNextFabricUpgradeDomain2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndMoveNextFabricUpgradeDomain2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginUnprovisionFabric<P0, P1, P2>(
        &self,
        codeversion: P0,
        configversion: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUnprovisionFabric)(
            windows_core::Interface::as_raw(self),
            codeversion.param().abi(),
            configversion.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUnprovisionFabric<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUnprovisionFabric)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetClusterManifest<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetClusterManifest)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetClusterManifest<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetClusterManifest)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginRecoverPartition<P0>(
        &self,
        partitionid: windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRecoverPartition)(
            windows_core::Interface::as_raw(self),
            core::mem::transmute(partitionid),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRecoverPartition<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRecoverPartition)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginRecoverServicePartitions<P0, P1>(
        &self,
        servicename: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRecoverServicePartitions)(
            windows_core::Interface::as_raw(self),
            servicename.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRecoverServicePartitions<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRecoverServicePartitions)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginRecoverSystemPartitions<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRecoverSystemPartitions)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRecoverSystemPartitions<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRecoverSystemPartitions)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricClusterManagementClient2 {}
unsafe impl Sync for IFabricClusterManagementClient2 {}
#[repr(C)]
pub struct IFabricClusterManagementClient2_Vtbl {
    pub base__: IFabricClusterManagementClient_Vtbl,
    pub BeginDeactivateNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        super::FabricTypes::FABRIC_NODE_DEACTIVATION_INTENT,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeactivateNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginActivateNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndActivateNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginProvisionFabric: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndProvisionFabric: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginUpgradeFabric: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_UPGRADE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpgradeFabric: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetFabricUpgradeProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetFabricUpgradeProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginMoveNextFabricUpgradeDomain: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndMoveNextFabricUpgradeDomain: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginMoveNextFabricUpgradeDomain2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndMoveNextFabricUpgradeDomain2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginUnprovisionFabric: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUnprovisionFabric: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetClusterManifest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetClusterManifest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRecoverPartition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::GUID,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRecoverPartition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRecoverServicePartitions: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRecoverServicePartitions: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRecoverSystemPartitions: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRecoverSystemPartitions: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClusterManagementClient3,
    IFabricClusterManagementClient3_Vtbl,
    0xc3001d74_92b6_44cb_ac2f_2ffc4a56287c
);
impl core::ops::Deref for IFabricClusterManagementClient3 {
    type Target = IFabricClusterManagementClient2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClusterManagementClient3,
    windows_core::IUnknown,
    IFabricClusterManagementClient,
    IFabricClusterManagementClient2
);
impl IFabricClusterManagementClient3 {
    pub unsafe fn BeginUpdateFabricUpgrade<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_UPGRADE_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpdateFabricUpgrade)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpdateFabricUpgrade<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUpdateFabricUpgrade)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginStopNode<P0>(
        &self,
        stopnodedescription: *const super::FabricTypes::FABRIC_STOP_NODE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStopNode)(
            windows_core::Interface::as_raw(self),
            stopnodedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStopNode<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndStopNode)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginRestartNode<P0>(
        &self,
        restartnodedescription: *const super::FabricTypes::FABRIC_RESTART_NODE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRestartNode)(
            windows_core::Interface::as_raw(self),
            restartnodedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRestartNode<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRestartNode)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginStartNode<P0>(
        &self,
        startnodedescription: *const super::FabricTypes::FABRIC_START_NODE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStartNode)(
            windows_core::Interface::as_raw(self),
            startnodedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStartNode<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndStartNode)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn CopyClusterPackage<P0, P1, P2, P3, P4>(
        &self,
        imagestoreconnectionstring: P0,
        clustermanifestpath: P1,
        clustermanifestpathinimagestore: P2,
        codepackagepath: P3,
        codepackagepathinimagestore: P4,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<windows_core::PCWSTR>,
        P3: windows_core::Param<windows_core::PCWSTR>,
        P4: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).CopyClusterPackage)(
            windows_core::Interface::as_raw(self),
            imagestoreconnectionstring.param().abi(),
            clustermanifestpath.param().abi(),
            clustermanifestpathinimagestore.param().abi(),
            codepackagepath.param().abi(),
            codepackagepathinimagestore.param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveClusterPackage<P0, P1, P2>(
        &self,
        imagestoreconnectionstring: P0,
        clustermanifestpathinimagestore: P1,
        codepackagepathinimagestore: P2,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).RemoveClusterPackage)(
            windows_core::Interface::as_raw(self),
            imagestoreconnectionstring.param().abi(),
            clustermanifestpathinimagestore.param().abi(),
            codepackagepathinimagestore.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricClusterManagementClient3 {}
unsafe impl Sync for IFabricClusterManagementClient3 {}
#[repr(C)]
pub struct IFabricClusterManagementClient3_Vtbl {
    pub base__: IFabricClusterManagementClient2_Vtbl,
    pub BeginUpdateFabricUpgrade: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_UPGRADE_UPDATE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpdateFabricUpgrade: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginStopNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_STOP_NODE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStopNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRestartNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_RESTART_NODE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRestartNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginStartNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_START_NODE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStartNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CopyClusterPackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
    pub RemoveClusterPackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClusterManagementClient4,
    IFabricClusterManagementClient4_Vtbl,
    0xb6b12671_f283_4d71_a818_0260549bc83e
);
impl core::ops::Deref for IFabricClusterManagementClient4 {
    type Target = IFabricClusterManagementClient3;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClusterManagementClient4,
    windows_core::IUnknown,
    IFabricClusterManagementClient,
    IFabricClusterManagementClient2,
    IFabricClusterManagementClient3
);
impl IFabricClusterManagementClient4 {
    pub unsafe fn BeginRollbackFabricUpgrade<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRollbackFabricUpgrade)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRollbackFabricUpgrade<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRollbackFabricUpgrade)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricClusterManagementClient4 {}
unsafe impl Sync for IFabricClusterManagementClient4 {}
#[repr(C)]
pub struct IFabricClusterManagementClient4_Vtbl {
    pub base__: IFabricClusterManagementClient3_Vtbl,
    pub BeginRollbackFabricUpgrade: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRollbackFabricUpgrade: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClusterManagementClient5,
    IFabricClusterManagementClient5_Vtbl,
    0xa6ddd816_a100_11e4_89d3_123b93f75cba
);
impl core::ops::Deref for IFabricClusterManagementClient5 {
    type Target = IFabricClusterManagementClient4;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClusterManagementClient5,
    windows_core::IUnknown,
    IFabricClusterManagementClient,
    IFabricClusterManagementClient2,
    IFabricClusterManagementClient3,
    IFabricClusterManagementClient4
);
impl IFabricClusterManagementClient5 {
    pub unsafe fn BeginResetPartitionLoad<P0>(
        &self,
        partitionid: windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginResetPartitionLoad)(
            windows_core::Interface::as_raw(self),
            core::mem::transmute(partitionid),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndResetPartitionLoad<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndResetPartitionLoad)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricClusterManagementClient5 {}
unsafe impl Sync for IFabricClusterManagementClient5 {}
#[repr(C)]
pub struct IFabricClusterManagementClient5_Vtbl {
    pub base__: IFabricClusterManagementClient4_Vtbl,
    pub BeginResetPartitionLoad: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::GUID,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndResetPartitionLoad: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClusterManagementClient6,
    IFabricClusterManagementClient6_Vtbl,
    0x9e454ae8_4b8c_4136_884a_37b0b92cc855
);
impl core::ops::Deref for IFabricClusterManagementClient6 {
    type Target = IFabricClusterManagementClient5;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClusterManagementClient6,
    windows_core::IUnknown,
    IFabricClusterManagementClient,
    IFabricClusterManagementClient2,
    IFabricClusterManagementClient3,
    IFabricClusterManagementClient4,
    IFabricClusterManagementClient5
);
impl IFabricClusterManagementClient6 {
    pub unsafe fn BeginToggleVerboseServicePlacementHealthReporting<P0, P1>(
        &self,
        enabled: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows::Win32::Foundation::BOOLEAN>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginToggleVerboseServicePlacementHealthReporting)(
            windows_core::Interface::as_raw(self),
            enabled.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndToggleVerboseServicePlacementHealthReporting<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndToggleVerboseServicePlacementHealthReporting)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricClusterManagementClient6 {}
unsafe impl Sync for IFabricClusterManagementClient6 {}
#[repr(C)]
pub struct IFabricClusterManagementClient6_Vtbl {
    pub base__: IFabricClusterManagementClient5_Vtbl,
    pub BeginToggleVerboseServicePlacementHealthReporting:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows::Win32::Foundation::BOOLEAN,
            u32,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub EndToggleVerboseServicePlacementHealthReporting:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClusterManagementClient7,
    IFabricClusterManagementClient7_Vtbl,
    0x9b9105ac_d595_4f59_9c94_1ffdbf92a876
);
impl core::ops::Deref for IFabricClusterManagementClient7 {
    type Target = IFabricClusterManagementClient6;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClusterManagementClient7,
    windows_core::IUnknown,
    IFabricClusterManagementClient,
    IFabricClusterManagementClient2,
    IFabricClusterManagementClient3,
    IFabricClusterManagementClient4,
    IFabricClusterManagementClient5,
    IFabricClusterManagementClient6
);
impl IFabricClusterManagementClient7 {
    pub unsafe fn BeginUpgradeConfiguration<P0>(
        &self,
        startupgradedescription: *const super::FabricTypes::FABRIC_START_UPGRADE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpgradeConfiguration)(
            windows_core::Interface::as_raw(self),
            startupgradedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpgradeConfiguration<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUpgradeConfiguration)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetClusterConfigurationUpgradeStatus<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetClusterConfigurationUpgradeStatus)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetClusterConfigurationUpgradeStatus<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricOrchestrationUpgradeStatusResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetClusterConfigurationUpgradeStatus)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetClusterConfiguration<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetClusterConfiguration)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetClusterConfiguration<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetClusterConfiguration)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetUpgradesPendingApproval<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetUpgradesPendingApproval)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetUpgradesPendingApproval<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndGetUpgradesPendingApproval)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginStartApprovedUpgrades<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStartApprovedUpgrades)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStartApprovedUpgrades<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndStartApprovedUpgrades)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricClusterManagementClient7 {}
unsafe impl Sync for IFabricClusterManagementClient7 {}
#[repr(C)]
pub struct IFabricClusterManagementClient7_Vtbl {
    pub base__: IFabricClusterManagementClient6_Vtbl,
    pub BeginUpgradeConfiguration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_START_UPGRADE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpgradeConfiguration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetClusterConfigurationUpgradeStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub EndGetClusterConfigurationUpgradeStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub BeginGetClusterConfiguration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetClusterConfiguration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetUpgradesPendingApproval: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetUpgradesPendingApproval: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginStartApprovedUpgrades: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStartApprovedUpgrades: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClusterManagementClient8,
    IFabricClusterManagementClient8_Vtbl,
    0x0b79641c_79a6_4162_904a_840babd08381
);
impl core::ops::Deref for IFabricClusterManagementClient8 {
    type Target = IFabricClusterManagementClient7;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClusterManagementClient8,
    windows_core::IUnknown,
    IFabricClusterManagementClient,
    IFabricClusterManagementClient2,
    IFabricClusterManagementClient3,
    IFabricClusterManagementClient4,
    IFabricClusterManagementClient5,
    IFabricClusterManagementClient6,
    IFabricClusterManagementClient7
);
impl IFabricClusterManagementClient8 {
    pub unsafe fn BeginGetClusterManifest2<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetClusterManifest2)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetClusterManifest2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetClusterManifest2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricClusterManagementClient8 {}
unsafe impl Sync for IFabricClusterManagementClient8 {}
#[repr(C)]
pub struct IFabricClusterManagementClient8_Vtbl {
    pub base__: IFabricClusterManagementClient7_Vtbl,
    pub BeginGetClusterManifest2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetClusterManifest2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricClusterManagementClient9,
    IFabricClusterManagementClient9_Vtbl,
    0xc0f57578_538c_4cbe_bb55_8098b6a7cd4e
);
impl core::ops::Deref for IFabricClusterManagementClient9 {
    type Target = IFabricClusterManagementClient8;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricClusterManagementClient9,
    windows_core::IUnknown,
    IFabricClusterManagementClient,
    IFabricClusterManagementClient2,
    IFabricClusterManagementClient3,
    IFabricClusterManagementClient4,
    IFabricClusterManagementClient5,
    IFabricClusterManagementClient6,
    IFabricClusterManagementClient7,
    IFabricClusterManagementClient8
);
impl IFabricClusterManagementClient9 {
    pub unsafe fn BeginGetUpgradeOrchestrationServiceState<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetUpgradeOrchestrationServiceState)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetUpgradeOrchestrationServiceState<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetUpgradeOrchestrationServiceState)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginSetUpgradeOrchestrationServiceState<P0, P1>(
        &self,
        state: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginSetUpgradeOrchestrationServiceState)(
            windows_core::Interface::as_raw(self),
            state.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndSetUpgradeOrchestrationServiceState<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricUpgradeOrchestrationServiceStateResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndSetUpgradeOrchestrationServiceState)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricClusterManagementClient9 {}
unsafe impl Sync for IFabricClusterManagementClient9 {}
#[repr(C)]
pub struct IFabricClusterManagementClient9_Vtbl {
    pub base__: IFabricClusterManagementClient8_Vtbl,
    pub BeginGetUpgradeOrchestrationServiceState:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            u32,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub EndGetUpgradeOrchestrationServiceState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub BeginSetUpgradeOrchestrationServiceState:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            windows_core::PCWSTR,
            u32,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub EndSetUpgradeOrchestrationServiceState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricDeployedApplicationHealthResult,
    IFabricDeployedApplicationHealthResult_Vtbl,
    0x4df50bf4_7c28_4210_94f7_50625df6c942
);
impl core::ops::Deref for IFabricDeployedApplicationHealthResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricDeployedApplicationHealthResult,
    windows_core::IUnknown
);
impl IFabricDeployedApplicationHealthResult {
    pub unsafe fn get_DeployedApplicationHealth(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_HEALTH {
        (windows_core::Interface::vtable(self).get_DeployedApplicationHealth)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricDeployedApplicationHealthResult {}
unsafe impl Sync for IFabricDeployedApplicationHealthResult {}
#[repr(C)]
pub struct IFabricDeployedApplicationHealthResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_DeployedApplicationHealth:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_HEALTH,
}
windows_core::imp::define_interface!(
    IFabricDeployedServicePackageHealthResult,
    IFabricDeployedServicePackageHealthResult_Vtbl,
    0x40991ce0_cdbb_44e9_9cdc_b14a5d5ea4c1
);
impl core::ops::Deref for IFabricDeployedServicePackageHealthResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricDeployedServicePackageHealthResult,
    windows_core::IUnknown
);
impl IFabricDeployedServicePackageHealthResult {
    pub unsafe fn get_DeployedServicePackageHealth(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH {
        (windows_core::Interface::vtable(self).get_DeployedServicePackageHealth)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricDeployedServicePackageHealthResult {}
unsafe impl Sync for IFabricDeployedServicePackageHealthResult {}
#[repr(C)]
pub struct IFabricDeployedServicePackageHealthResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_DeployedServicePackageHealth :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH , }
windows_core::imp::define_interface!(
    IFabricFaultManagementClient,
    IFabricFaultManagementClient_Vtbl,
    0x769e1838_8726_4dcd_a3c0_211673a6967a
);
impl core::ops::Deref for IFabricFaultManagementClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricFaultManagementClient, windows_core::IUnknown);
impl IFabricFaultManagementClient {
    pub unsafe fn BeginRestartNode<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_RESTART_NODE_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRestartNode)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRestartNode<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricRestartNodeResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndRestartNode)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginStartNode<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_START_NODE_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStartNode)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStartNode<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricStartNodeResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndStartNode)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginStopNode<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_STOP_NODE_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStopNode)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStopNode<P0>(&self, context: P0) -> windows_core::Result<IFabricStopNodeResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndStopNode)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginRestartDeployedCodePackage<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRestartDeployedCodePackage)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRestartDeployedCodePackage<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricRestartDeployedCodePackageResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndRestartDeployedCodePackage)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginMovePrimary<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_MOVE_PRIMARY_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginMovePrimary)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndMovePrimary<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricMovePrimaryResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndMovePrimary)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginMoveSecondary<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_MOVE_SECONDARY_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginMoveSecondary)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndMoveSecondary<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricMoveSecondaryResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndMoveSecondary)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricFaultManagementClient {}
unsafe impl Sync for IFabricFaultManagementClient {}
#[repr(C)]
pub struct IFabricFaultManagementClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginRestartNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_RESTART_NODE_DESCRIPTION2,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRestartNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginStartNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_START_NODE_DESCRIPTION2,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStartNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginStopNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_STOP_NODE_DESCRIPTION2,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStopNode: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRestartDeployedCodePackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRestartDeployedCodePackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginMovePrimary: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_MOVE_PRIMARY_DESCRIPTION2,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndMovePrimary: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginMoveSecondary: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_MOVE_SECONDARY_DESCRIPTION2,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndMoveSecondary: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricGatewayInformationResult,
    IFabricGatewayInformationResult_Vtbl,
    0xa57e7740_fa33_448e_9f35_8bf802a713aa
);
impl core::ops::Deref for IFabricGatewayInformationResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGatewayInformationResult, windows_core::IUnknown);
impl IFabricGatewayInformationResult {
    pub unsafe fn get_GatewayInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_GATEWAY_INFORMATION {
        (windows_core::Interface::vtable(self).get_GatewayInformation)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGatewayInformationResult {}
unsafe impl Sync for IFabricGatewayInformationResult {}
#[repr(C)]
pub struct IFabricGatewayInformationResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_GatewayInformation:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_GATEWAY_INFORMATION,
}
windows_core::imp::define_interface!(
    IFabricGetApplicationListResult,
    IFabricGetApplicationListResult_Vtbl,
    0xf038c61e_7059_41b6_8dea_d304a2080f46
);
impl core::ops::Deref for IFabricGetApplicationListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetApplicationListResult, windows_core::IUnknown);
impl IFabricGetApplicationListResult {
    pub unsafe fn get_ApplicationList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ApplicationList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetApplicationListResult {}
unsafe impl Sync for IFabricGetApplicationListResult {}
#[repr(C)]
pub struct IFabricGetApplicationListResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ApplicationList:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_APPLICATION_QUERY_RESULT_LIST,
}
windows_core::imp::define_interface!(
    IFabricGetApplicationListResult2,
    IFabricGetApplicationListResult2_Vtbl,
    0x6637a860_26bc_4f1a_902f_f418fcfe1e51
);
impl core::ops::Deref for IFabricGetApplicationListResult2 {
    type Target = IFabricGetApplicationListResult;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetApplicationListResult2,
    windows_core::IUnknown,
    IFabricGetApplicationListResult
);
impl IFabricGetApplicationListResult2 {
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetApplicationListResult2 {}
unsafe impl Sync for IFabricGetApplicationListResult2 {}
#[repr(C)]
pub struct IFabricGetApplicationListResult2_Vtbl {
    pub base__: IFabricGetApplicationListResult_Vtbl,
    pub get_PagingStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS,
}
windows_core::imp::define_interface!(
    IFabricGetApplicationLoadInformationResult,
    IFabricGetApplicationLoadInformationResult_Vtbl,
    0x38fd0512_7586_4bd5_9616_b7070cf025c0
);
impl core::ops::Deref for IFabricGetApplicationLoadInformationResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetApplicationLoadInformationResult,
    windows_core::IUnknown
);
impl IFabricGetApplicationLoadInformationResult {
    pub unsafe fn get_ApplicationLoadInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_LOAD_INFORMATION {
        (windows_core::Interface::vtable(self).get_ApplicationLoadInformation)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetApplicationLoadInformationResult {}
unsafe impl Sync for IFabricGetApplicationLoadInformationResult {}
#[repr(C)]
pub struct IFabricGetApplicationLoadInformationResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ApplicationLoadInformation:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_APPLICATION_LOAD_INFORMATION,
}
windows_core::imp::define_interface!(
    IFabricGetApplicationNameResult,
    IFabricGetApplicationNameResult_Vtbl,
    0x258dbcc8_ac9a_47ff_838b_57ff506c73b1
);
impl core::ops::Deref for IFabricGetApplicationNameResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetApplicationNameResult, windows_core::IUnknown);
impl IFabricGetApplicationNameResult {
    pub unsafe fn get_ApplicationName(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_NAME_QUERY_RESULT {
        (windows_core::Interface::vtable(self).get_ApplicationName)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetApplicationNameResult {}
unsafe impl Sync for IFabricGetApplicationNameResult {}
#[repr(C)]
pub struct IFabricGetApplicationNameResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ApplicationName:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_APPLICATION_NAME_QUERY_RESULT,
}
windows_core::imp::define_interface!(
    IFabricGetApplicationNetworkListResult,
    IFabricGetApplicationNetworkListResult_Vtbl,
    0x4f9d0390_aa08_4dee_ba49_62891eb47c37
);
impl core::ops::Deref for IFabricGetApplicationNetworkListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetApplicationNetworkListResult,
    windows_core::IUnknown
);
impl IFabricGetApplicationNetworkListResult {
    pub unsafe fn get_ApplicationNetworkList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ApplicationNetworkList)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetApplicationNetworkListResult {}
unsafe impl Sync for IFabricGetApplicationNetworkListResult {}
#[repr(C)]
pub struct IFabricGetApplicationNetworkListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_ApplicationNetworkList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST , pub get_PagingStatus :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_PAGING_STATUS , }
windows_core::imp::define_interface!(
    IFabricGetApplicationTypeListResult,
    IFabricGetApplicationTypeListResult_Vtbl,
    0x944f7a70_224e_4191_8dd1_bba46dc88dd2
);
impl core::ops::Deref for IFabricGetApplicationTypeListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetApplicationTypeListResult,
    windows_core::IUnknown
);
impl IFabricGetApplicationTypeListResult {
    pub unsafe fn get_ApplicationTypeList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ApplicationTypeList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetApplicationTypeListResult {}
unsafe impl Sync for IFabricGetApplicationTypeListResult {}
#[repr(C)]
pub struct IFabricGetApplicationTypeListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_ApplicationTypeList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetApplicationTypePagedListResult,
    IFabricGetApplicationTypePagedListResult_Vtbl,
    0x5d8dde9c_05e8_428d_b494_43873d7c2db8
);
impl core::ops::Deref for IFabricGetApplicationTypePagedListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetApplicationTypePagedListResult,
    windows_core::IUnknown
);
impl IFabricGetApplicationTypePagedListResult {
    pub unsafe fn get_ApplicationTypePagedList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ApplicationTypePagedList)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetApplicationTypePagedListResult {}
unsafe impl Sync for IFabricGetApplicationTypePagedListResult {}
#[repr(C)]
pub struct IFabricGetApplicationTypePagedListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_ApplicationTypePagedList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST , pub get_PagingStatus :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_PAGING_STATUS , }
windows_core::imp::define_interface!(
    IFabricGetClusterHealthChunkResult,
    IFabricGetClusterHealthChunkResult_Vtbl,
    0x7fefcf06_c840_4d8a_9cc7_36f080e0e121
);
impl core::ops::Deref for IFabricGetClusterHealthChunkResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetClusterHealthChunkResult, windows_core::IUnknown);
impl IFabricGetClusterHealthChunkResult {
    pub unsafe fn get_ClusterHealthChunk(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_CLUSTER_HEALTH_CHUNK {
        (windows_core::Interface::vtable(self).get_ClusterHealthChunk)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetClusterHealthChunkResult {}
unsafe impl Sync for IFabricGetClusterHealthChunkResult {}
#[repr(C)]
pub struct IFabricGetClusterHealthChunkResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ClusterHealthChunk:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CLUSTER_HEALTH_CHUNK,
}
windows_core::imp::define_interface!(
    IFabricGetClusterLoadInformationResult,
    IFabricGetClusterLoadInformationResult_Vtbl,
    0x7cc3eb08_0e69_4e52_81fc_0190ab997dbf
);
impl core::ops::Deref for IFabricGetClusterLoadInformationResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetClusterLoadInformationResult,
    windows_core::IUnknown
);
impl IFabricGetClusterLoadInformationResult {
    pub unsafe fn get_ClusterLoadInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_CLUSTER_LOAD_INFORMATION {
        (windows_core::Interface::vtable(self).get_ClusterLoadInformation)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetClusterLoadInformationResult {}
unsafe impl Sync for IFabricGetClusterLoadInformationResult {}
#[repr(C)]
pub struct IFabricGetClusterLoadInformationResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ClusterLoadInformation:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_CLUSTER_LOAD_INFORMATION,
}
windows_core::imp::define_interface!(
    IFabricGetDeployedApplicationListResult,
    IFabricGetDeployedApplicationListResult_Vtbl,
    0x5722b789_3936_4c33_9f7a_342967457612
);
impl core::ops::Deref for IFabricGetDeployedApplicationListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetDeployedApplicationListResult,
    windows_core::IUnknown
);
impl IFabricGetDeployedApplicationListResult {
    pub unsafe fn get_DeployedApplicationList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_DeployedApplicationList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetDeployedApplicationListResult {}
unsafe impl Sync for IFabricGetDeployedApplicationListResult {}
#[repr(C)]
pub struct IFabricGetDeployedApplicationListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_DeployedApplicationList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetDeployedApplicationPagedListResult,
    IFabricGetDeployedApplicationPagedListResult_Vtbl,
    0xebd76f6f_508e_43ea_9ca2_a98ea2c0e846
);
impl core::ops::Deref for IFabricGetDeployedApplicationPagedListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetDeployedApplicationPagedListResult,
    windows_core::IUnknown
);
impl IFabricGetDeployedApplicationPagedListResult {
    pub unsafe fn get_DeployedApplicationPagedList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_DeployedApplicationPagedList)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetDeployedApplicationPagedListResult {}
unsafe impl Sync for IFabricGetDeployedApplicationPagedListResult {}
#[repr(C)]
pub struct IFabricGetDeployedApplicationPagedListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_DeployedApplicationPagedList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST , pub get_PagingStatus :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_PAGING_STATUS , }
windows_core::imp::define_interface!(
    IFabricGetDeployedCodePackageListResult,
    IFabricGetDeployedCodePackageListResult_Vtbl,
    0x3f390652_c0dc_4919_8a7f_8ae1e827de0c
);
impl core::ops::Deref for IFabricGetDeployedCodePackageListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetDeployedCodePackageListResult,
    windows_core::IUnknown
);
impl IFabricGetDeployedCodePackageListResult {
    pub unsafe fn get_DeployedCodePackageList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_DeployedCodePackageList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetDeployedCodePackageListResult {}
unsafe impl Sync for IFabricGetDeployedCodePackageListResult {}
#[repr(C)]
pub struct IFabricGetDeployedCodePackageListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_DeployedCodePackageList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetDeployedNetworkCodePackageListResult,
    IFabricGetDeployedNetworkCodePackageListResult_Vtbl,
    0x6586d264_a96e_4f46_9388_189de5d61d6d
);
impl core::ops::Deref for IFabricGetDeployedNetworkCodePackageListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetDeployedNetworkCodePackageListResult,
    windows_core::IUnknown
);
impl IFabricGetDeployedNetworkCodePackageListResult {
    pub unsafe fn get_DeployedNetworkCodePackageList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_DeployedNetworkCodePackageList)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetDeployedNetworkCodePackageListResult {}
unsafe impl Sync for IFabricGetDeployedNetworkCodePackageListResult {}
#[repr(C)]
pub struct IFabricGetDeployedNetworkCodePackageListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_DeployedNetworkCodePackageList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST , pub get_PagingStatus :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_PAGING_STATUS , }
windows_core::imp::define_interface!(
    IFabricGetDeployedNetworkListResult,
    IFabricGetDeployedNetworkListResult_Vtbl,
    0x347f5d8c_1abd_48e1_a7d1_9083556dafd3
);
impl core::ops::Deref for IFabricGetDeployedNetworkListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetDeployedNetworkListResult,
    windows_core::IUnknown
);
impl IFabricGetDeployedNetworkListResult {
    pub unsafe fn get_DeployedNetworkList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_DeployedNetworkList)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetDeployedNetworkListResult {}
unsafe impl Sync for IFabricGetDeployedNetworkListResult {}
#[repr(C)]
pub struct IFabricGetDeployedNetworkListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_DeployedNetworkList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST , pub get_PagingStatus :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_PAGING_STATUS , }
windows_core::imp::define_interface!(
    IFabricGetDeployedReplicaListResult,
    IFabricGetDeployedReplicaListResult_Vtbl,
    0x29e064bf_5d78_49e5_baa6_acfc24a4a8b5
);
impl core::ops::Deref for IFabricGetDeployedReplicaListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetDeployedReplicaListResult,
    windows_core::IUnknown
);
impl IFabricGetDeployedReplicaListResult {
    pub unsafe fn get_DeployedReplicaList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_DeployedReplicaList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetDeployedReplicaListResult {}
unsafe impl Sync for IFabricGetDeployedReplicaListResult {}
#[repr(C)]
pub struct IFabricGetDeployedReplicaListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_DeployedReplicaList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetDeployedServicePackageListResult,
    IFabricGetDeployedServicePackageListResult_Vtbl,
    0x65851388_0421_4107_977b_39f4e15440d4
);
impl core::ops::Deref for IFabricGetDeployedServicePackageListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetDeployedServicePackageListResult,
    windows_core::IUnknown
);
impl IFabricGetDeployedServicePackageListResult {
    pub unsafe fn get_DeployedServicePackageList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_DeployedServicePackageList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetDeployedServicePackageListResult {}
unsafe impl Sync for IFabricGetDeployedServicePackageListResult {}
#[repr(C)]
pub struct IFabricGetDeployedServicePackageListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_DeployedServicePackageList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetDeployedServiceReplicaDetailResult,
    IFabricGetDeployedServiceReplicaDetailResult_Vtbl,
    0x6d9d355e_89cf_4928_b758_b11ca4664fbe
);
impl core::ops::Deref for IFabricGetDeployedServiceReplicaDetailResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetDeployedServiceReplicaDetailResult,
    windows_core::IUnknown
);
impl IFabricGetDeployedServiceReplicaDetailResult {
    pub unsafe fn get_ReplicaDetail(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
        (windows_core::Interface::vtable(self).get_ReplicaDetail)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetDeployedServiceReplicaDetailResult {}
unsafe impl Sync for IFabricGetDeployedServiceReplicaDetailResult {}
#[repr(C)]
pub struct IFabricGetDeployedServiceReplicaDetailResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_ReplicaDetail :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM , }
windows_core::imp::define_interface!(
    IFabricGetDeployedServiceTypeListResult,
    IFabricGetDeployedServiceTypeListResult_Vtbl,
    0xdba68c7a_3f77_49bb_b611_ff94df062b8d
);
impl core::ops::Deref for IFabricGetDeployedServiceTypeListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetDeployedServiceTypeListResult,
    windows_core::IUnknown
);
impl IFabricGetDeployedServiceTypeListResult {
    pub unsafe fn get_DeployedServiceTypeList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_DeployedServiceTypeList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetDeployedServiceTypeListResult {}
unsafe impl Sync for IFabricGetDeployedServiceTypeListResult {}
#[repr(C)]
pub struct IFabricGetDeployedServiceTypeListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_DeployedServiceTypeList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetNetworkApplicationListResult,
    IFabricGetNetworkApplicationListResult_Vtbl,
    0xad1f51ff_e244_498e_9f72_609b01124b84
);
impl core::ops::Deref for IFabricGetNetworkApplicationListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetNetworkApplicationListResult,
    windows_core::IUnknown
);
impl IFabricGetNetworkApplicationListResult {
    pub unsafe fn get_NetworkApplicationList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_NetworkApplicationList)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetNetworkApplicationListResult {}
unsafe impl Sync for IFabricGetNetworkApplicationListResult {}
#[repr(C)]
pub struct IFabricGetNetworkApplicationListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_NetworkApplicationList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST , pub get_PagingStatus :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_PAGING_STATUS , }
windows_core::imp::define_interface!(
    IFabricGetNetworkListResult,
    IFabricGetNetworkListResult_Vtbl,
    0xbd777a0f_2020_40bb_8f23_8756649cce47
);
impl core::ops::Deref for IFabricGetNetworkListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetNetworkListResult, windows_core::IUnknown);
impl IFabricGetNetworkListResult {
    pub unsafe fn get_NetworkList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_NETWORK_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_NetworkList)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetNetworkListResult {}
unsafe impl Sync for IFabricGetNetworkListResult {}
#[repr(C)]
pub struct IFabricGetNetworkListResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_NetworkList:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_NETWORK_QUERY_RESULT_LIST,
    pub get_PagingStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS,
}
windows_core::imp::define_interface!(
    IFabricGetNetworkNodeListResult,
    IFabricGetNetworkNodeListResult_Vtbl,
    0x3ba780e9_58eb_478d_bc89_42c89e19d083
);
impl core::ops::Deref for IFabricGetNetworkNodeListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetNetworkNodeListResult, windows_core::IUnknown);
impl IFabricGetNetworkNodeListResult {
    pub unsafe fn get_NetworkNodeList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_NETWORK_NODE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_NetworkNodeList)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetNetworkNodeListResult {}
unsafe impl Sync for IFabricGetNetworkNodeListResult {}
#[repr(C)]
pub struct IFabricGetNetworkNodeListResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_NetworkNodeList:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_NETWORK_NODE_QUERY_RESULT_LIST,
    pub get_PagingStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS,
}
windows_core::imp::define_interface!(
    IFabricGetNodeListResult,
    IFabricGetNodeListResult_Vtbl,
    0x7cc3eb08_0e69_4e52_81fc_0190ab997dbe
);
impl core::ops::Deref for IFabricGetNodeListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetNodeListResult, windows_core::IUnknown);
impl IFabricGetNodeListResult {
    pub unsafe fn get_NodeList(&self) -> *mut super::FabricTypes::FABRIC_NODE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_NodeList)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricGetNodeListResult {}
unsafe impl Sync for IFabricGetNodeListResult {}
#[repr(C)]
pub struct IFabricGetNodeListResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_NodeList:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_NODE_QUERY_RESULT_LIST,
}
windows_core::imp::define_interface!(
    IFabricGetNodeListResult2,
    IFabricGetNodeListResult2_Vtbl,
    0x4a0f2da7_f851_44e5_8e12_aa521076097a
);
impl core::ops::Deref for IFabricGetNodeListResult2 {
    type Target = IFabricGetNodeListResult;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetNodeListResult2,
    windows_core::IUnknown,
    IFabricGetNodeListResult
);
impl IFabricGetNodeListResult2 {
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetNodeListResult2 {}
unsafe impl Sync for IFabricGetNodeListResult2 {}
#[repr(C)]
pub struct IFabricGetNodeListResult2_Vtbl {
    pub base__: IFabricGetNodeListResult_Vtbl,
    pub get_PagingStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS,
}
windows_core::imp::define_interface!(
    IFabricGetNodeLoadInformationResult,
    IFabricGetNodeLoadInformationResult_Vtbl,
    0x4332eb3a_aed6_86fe_c2fa_653123dea09b
);
impl core::ops::Deref for IFabricGetNodeLoadInformationResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetNodeLoadInformationResult,
    windows_core::IUnknown
);
impl IFabricGetNodeLoadInformationResult {
    pub unsafe fn get_NodeLoadInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_NODE_LOAD_INFORMATION {
        (windows_core::Interface::vtable(self).get_NodeLoadInformation)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetNodeLoadInformationResult {}
unsafe impl Sync for IFabricGetNodeLoadInformationResult {}
#[repr(C)]
pub struct IFabricGetNodeLoadInformationResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_NodeLoadInformation:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NODE_LOAD_INFORMATION,
}
windows_core::imp::define_interface!(
    IFabricGetPartitionListResult,
    IFabricGetPartitionListResult_Vtbl,
    0xafc1266c_967b_4769_9f8a_b249c5887ee6
);
impl core::ops::Deref for IFabricGetPartitionListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetPartitionListResult, windows_core::IUnknown);
impl IFabricGetPartitionListResult {
    pub unsafe fn get_PartitionList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_PartitionList)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetPartitionListResult {}
unsafe impl Sync for IFabricGetPartitionListResult {}
#[repr(C)]
pub struct IFabricGetPartitionListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_PartitionList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetPartitionListResult2,
    IFabricGetPartitionListResult2_Vtbl,
    0xb131b99a_d251_47b2_9d08_24ddd6793206
);
impl core::ops::Deref for IFabricGetPartitionListResult2 {
    type Target = IFabricGetPartitionListResult;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetPartitionListResult2,
    windows_core::IUnknown,
    IFabricGetPartitionListResult
);
impl IFabricGetPartitionListResult2 {
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetPartitionListResult2 {}
unsafe impl Sync for IFabricGetPartitionListResult2 {}
#[repr(C)]
pub struct IFabricGetPartitionListResult2_Vtbl {
    pub base__: IFabricGetPartitionListResult_Vtbl,
    pub get_PagingStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS,
}
windows_core::imp::define_interface!(
    IFabricGetPartitionLoadInformationResult,
    IFabricGetPartitionLoadInformationResult_Vtbl,
    0x46f1a40c_a4f3_409e_a7ec_6fd115f7acc7
);
impl core::ops::Deref for IFabricGetPartitionLoadInformationResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetPartitionLoadInformationResult,
    windows_core::IUnknown
);
impl IFabricGetPartitionLoadInformationResult {
    pub unsafe fn get_PartitionLoadInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_PARTITION_LOAD_INFORMATION {
        (windows_core::Interface::vtable(self).get_PartitionLoadInformation)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetPartitionLoadInformationResult {}
unsafe impl Sync for IFabricGetPartitionLoadInformationResult {}
#[repr(C)]
pub struct IFabricGetPartitionLoadInformationResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_PartitionLoadInformation:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_PARTITION_LOAD_INFORMATION,
}
windows_core::imp::define_interface!(
    IFabricGetProvisionedCodeVersionListResult,
    IFabricGetProvisionedCodeVersionListResult_Vtbl,
    0xd042bdb6_4364_4818_b395_0e6b1a22cb11
);
impl core::ops::Deref for IFabricGetProvisionedCodeVersionListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetProvisionedCodeVersionListResult,
    windows_core::IUnknown
);
impl IFabricGetProvisionedCodeVersionListResult {
    pub unsafe fn get_ProvisionedCodeVersionList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ProvisionedCodeVersionList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetProvisionedCodeVersionListResult {}
unsafe impl Sync for IFabricGetProvisionedCodeVersionListResult {}
#[repr(C)]
pub struct IFabricGetProvisionedCodeVersionListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_ProvisionedCodeVersionList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetProvisionedConfigVersionListResult,
    IFabricGetProvisionedConfigVersionListResult_Vtbl,
    0x1bbb9f78_e883_49d1_a998_7eb864fd4a0e
);
impl core::ops::Deref for IFabricGetProvisionedConfigVersionListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetProvisionedConfigVersionListResult,
    windows_core::IUnknown
);
impl IFabricGetProvisionedConfigVersionListResult {
    pub unsafe fn get_ProvisionedConfigVersionList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ProvisionedConfigVersionList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetProvisionedConfigVersionListResult {}
unsafe impl Sync for IFabricGetProvisionedConfigVersionListResult {}
#[repr(C)]
pub struct IFabricGetProvisionedConfigVersionListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_ProvisionedConfigVersionList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetRepairTaskListResult,
    IFabricGetRepairTaskListResult_Vtbl,
    0x576b2462_5f69_4351_87c7_3ec2d1654a22
);
impl core::ops::Deref for IFabricGetRepairTaskListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetRepairTaskListResult, windows_core::IUnknown);
impl IFabricGetRepairTaskListResult {
    pub unsafe fn get_Tasks(&self) -> *mut super::FabricTypes::FABRIC_REPAIR_TASK_LIST {
        (windows_core::Interface::vtable(self).get_Tasks)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricGetRepairTaskListResult {}
unsafe impl Sync for IFabricGetRepairTaskListResult {}
#[repr(C)]
pub struct IFabricGetRepairTaskListResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Tasks: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    )
        -> *mut super::FabricTypes::FABRIC_REPAIR_TASK_LIST,
}
windows_core::imp::define_interface!(
    IFabricGetReplicaListResult,
    IFabricGetReplicaListResult_Vtbl,
    0xe00d3761_3ac5_407d_a04f_1b59486217cf
);
impl core::ops::Deref for IFabricGetReplicaListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetReplicaListResult, windows_core::IUnknown);
impl IFabricGetReplicaListResult {
    pub unsafe fn get_ReplicaList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ReplicaList)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetReplicaListResult {}
unsafe impl Sync for IFabricGetReplicaListResult {}
#[repr(C)]
pub struct IFabricGetReplicaListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_ReplicaList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetReplicaListResult2,
    IFabricGetReplicaListResult2_Vtbl,
    0x0bc12f86_c157_4c0d_b274_01fb09145934
);
impl core::ops::Deref for IFabricGetReplicaListResult2 {
    type Target = IFabricGetReplicaListResult;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetReplicaListResult2,
    windows_core::IUnknown,
    IFabricGetReplicaListResult
);
impl IFabricGetReplicaListResult2 {
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetReplicaListResult2 {}
unsafe impl Sync for IFabricGetReplicaListResult2 {}
#[repr(C)]
pub struct IFabricGetReplicaListResult2_Vtbl {
    pub base__: IFabricGetReplicaListResult_Vtbl,
    pub get_PagingStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS,
}
windows_core::imp::define_interface!(
    IFabricGetReplicaLoadInformationResult,
    IFabricGetReplicaLoadInformationResult_Vtbl,
    0xe4190ca0_225c_11e4_8c21_0800200c9a66
);
impl core::ops::Deref for IFabricGetReplicaLoadInformationResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetReplicaLoadInformationResult,
    windows_core::IUnknown
);
impl IFabricGetReplicaLoadInformationResult {
    pub unsafe fn get_ReplicaLoadInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_REPLICA_LOAD_INFORMATION {
        (windows_core::Interface::vtable(self).get_ReplicaLoadInformation)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetReplicaLoadInformationResult {}
unsafe impl Sync for IFabricGetReplicaLoadInformationResult {}
#[repr(C)]
pub struct IFabricGetReplicaLoadInformationResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ReplicaLoadInformation:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_REPLICA_LOAD_INFORMATION,
}
windows_core::imp::define_interface!(
    IFabricGetRollingUpgradeMonitoringPolicyResult,
    IFabricGetRollingUpgradeMonitoringPolicyResult_Vtbl,
    0x02bd6674_9c5a_4262_89a8_ac1a6a2fb5e9
);
impl core::ops::Deref for IFabricGetRollingUpgradeMonitoringPolicyResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetRollingUpgradeMonitoringPolicyResult,
    windows_core::IUnknown
);
impl IFabricGetRollingUpgradeMonitoringPolicyResult {
    pub unsafe fn get_Policy(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_ROLLING_UPGRADE_MONITORING_POLICY {
        (windows_core::Interface::vtable(self).get_Policy)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricGetRollingUpgradeMonitoringPolicyResult {}
unsafe impl Sync for IFabricGetRollingUpgradeMonitoringPolicyResult {}
#[repr(C)]
pub struct IFabricGetRollingUpgradeMonitoringPolicyResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_Policy :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_ROLLING_UPGRADE_MONITORING_POLICY , }
windows_core::imp::define_interface!(
    IFabricGetServiceGroupMemberListResult,
    IFabricGetServiceGroupMemberListResult_Vtbl,
    0xe9f7f574_fd07_4a71_9f22_9cf9ccf3c166
);
impl core::ops::Deref for IFabricGetServiceGroupMemberListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetServiceGroupMemberListResult,
    windows_core::IUnknown
);
impl IFabricGetServiceGroupMemberListResult {
    pub unsafe fn get_ServiceGroupMemberList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ServiceGroupMemberList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetServiceGroupMemberListResult {}
unsafe impl Sync for IFabricGetServiceGroupMemberListResult {}
#[repr(C)]
pub struct IFabricGetServiceGroupMemberListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_ServiceGroupMemberList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetServiceGroupMemberTypeListResult,
    IFabricGetServiceGroupMemberTypeListResult_Vtbl,
    0x5e572763_29a9_463a_b602_1332c0f60e6b
);
impl core::ops::Deref for IFabricGetServiceGroupMemberTypeListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetServiceGroupMemberTypeListResult,
    windows_core::IUnknown
);
impl IFabricGetServiceGroupMemberTypeListResult {
    pub unsafe fn get_ServiceGroupMemberTypeList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ServiceGroupMemberTypeList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetServiceGroupMemberTypeListResult {}
unsafe impl Sync for IFabricGetServiceGroupMemberTypeListResult {}
#[repr(C)]
pub struct IFabricGetServiceGroupMemberTypeListResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_ServiceGroupMemberTypeList :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST , }
windows_core::imp::define_interface!(
    IFabricGetServiceListResult,
    IFabricGetServiceListResult_Vtbl,
    0x9953e19a_ea1e_4a1f_bda4_ab42fdb77185
);
impl core::ops::Deref for IFabricGetServiceListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetServiceListResult, windows_core::IUnknown);
impl IFabricGetServiceListResult {
    pub unsafe fn get_ServiceList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ServiceList)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetServiceListResult {}
unsafe impl Sync for IFabricGetServiceListResult {}
#[repr(C)]
pub struct IFabricGetServiceListResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ServiceList:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_SERVICE_QUERY_RESULT_LIST,
}
windows_core::imp::define_interface!(
    IFabricGetServiceListResult2,
    IFabricGetServiceListResult2_Vtbl,
    0x30263683_4b25_4ec3_86d7_94ed86e7a8bf
);
impl core::ops::Deref for IFabricGetServiceListResult2 {
    type Target = IFabricGetServiceListResult;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetServiceListResult2,
    windows_core::IUnknown,
    IFabricGetServiceListResult
);
impl IFabricGetServiceListResult2 {
    pub unsafe fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS {
        (windows_core::Interface::vtable(self).get_PagingStatus)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetServiceListResult2 {}
unsafe impl Sync for IFabricGetServiceListResult2 {}
#[repr(C)]
pub struct IFabricGetServiceListResult2_Vtbl {
    pub base__: IFabricGetServiceListResult_Vtbl,
    pub get_PagingStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS,
}
windows_core::imp::define_interface!(
    IFabricGetServiceNameResult,
    IFabricGetServiceNameResult_Vtbl,
    0xb64fb70c_fe53_4ca1_b6d9_23d1150fe76c
);
impl core::ops::Deref for IFabricGetServiceNameResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetServiceNameResult, windows_core::IUnknown);
impl IFabricGetServiceNameResult {
    pub unsafe fn get_ServiceName(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_NAME_QUERY_RESULT {
        (windows_core::Interface::vtable(self).get_ServiceName)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricGetServiceNameResult {}
unsafe impl Sync for IFabricGetServiceNameResult {}
#[repr(C)]
pub struct IFabricGetServiceNameResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ServiceName:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_SERVICE_NAME_QUERY_RESULT,
}
windows_core::imp::define_interface!(
    IFabricGetServiceTypeListResult,
    IFabricGetServiceTypeListResult_Vtbl,
    0x886e4ad2_edb8_4734_9dd4_0e9a2be5238b
);
impl core::ops::Deref for IFabricGetServiceTypeListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetServiceTypeListResult, windows_core::IUnknown);
impl IFabricGetServiceTypeListResult {
    pub unsafe fn get_ServiceTypeList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_ServiceTypeList)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetServiceTypeListResult {}
unsafe impl Sync for IFabricGetServiceTypeListResult {}
#[repr(C)]
pub struct IFabricGetServiceTypeListResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ServiceTypeList:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST,
}
windows_core::imp::define_interface!(
    IFabricGetUnplacedReplicaInformationResult,
    IFabricGetUnplacedReplicaInformationResult_Vtbl,
    0x9d86a611_3fd3_451b_9495_6a831f417473
);
impl core::ops::Deref for IFabricGetUnplacedReplicaInformationResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricGetUnplacedReplicaInformationResult,
    windows_core::IUnknown
);
impl IFabricGetUnplacedReplicaInformationResult {
    pub unsafe fn get_UnplacedReplicaInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_UNPLACED_REPLICA_INFORMATION {
        (windows_core::Interface::vtable(self).get_UnplacedReplicaInformation)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetUnplacedReplicaInformationResult {}
unsafe impl Sync for IFabricGetUnplacedReplicaInformationResult {}
#[repr(C)]
pub struct IFabricGetUnplacedReplicaInformationResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_UnplacedReplicaInformation:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_UNPLACED_REPLICA_INFORMATION,
}
windows_core::imp::define_interface!(
    IFabricHealthClient,
    IFabricHealthClient_Vtbl,
    0x3d00d0be_7014_41da_9c5b_0a9ef46e2a43
);
impl core::ops::Deref for IFabricHealthClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricHealthClient, windows_core::IUnknown);
impl IFabricHealthClient {
    pub unsafe fn ReportHealth(
        &self,
        healthreport: *const super::FabricTypes::FABRIC_HEALTH_REPORT,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportHealth)(
            windows_core::Interface::as_raw(self),
            healthreport,
        )
        .ok()
    }
    pub unsafe fn BeginGetClusterHealth<P0>(
        &self,
        healthpolicy: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetClusterHealth)(
            windows_core::Interface::as_raw(self),
            healthpolicy,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetClusterHealth<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricClusterHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetClusterHealth)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetNodeHealth<P0, P1>(
        &self,
        nodename: P0,
        healthpolicy: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetNodeHealth)(
            windows_core::Interface::as_raw(self),
            nodename.param().abi(),
            healthpolicy,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetNodeHealth<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricNodeHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetNodeHealth)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetApplicationHealth<P0, P1>(
        &self,
        applicationname: P0,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetApplicationHealth)(
            windows_core::Interface::as_raw(self),
            applicationname.param().abi(),
            healthpolicy,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationHealth<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricApplicationHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationHealth)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetServiceHealth<P0, P1>(
        &self,
        servicename: P0,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetServiceHealth)(
            windows_core::Interface::as_raw(self),
            servicename.param().abi(),
            healthpolicy,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceHealth<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricServiceHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceHealth)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetPartitionHealth<P0>(
        &self,
        partitionid: windows_core::GUID,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetPartitionHealth)(
            windows_core::Interface::as_raw(self),
            core::mem::transmute(partitionid),
            healthpolicy,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetPartitionHealth<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricPartitionHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetPartitionHealth)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetReplicaHealth<P0>(
        &self,
        partitionid: windows_core::GUID,
        replicaid: i64,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetReplicaHealth)(
            windows_core::Interface::as_raw(self),
            core::mem::transmute(partitionid),
            replicaid,
            healthpolicy,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetReplicaHealth<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricReplicaHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetReplicaHealth)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedApplicationHealth<P0, P1, P2>(
        &self,
        applicationname: P0,
        nodename: P1,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedApplicationHealth)(
            windows_core::Interface::as_raw(self),
            applicationname.param().abi(),
            nodename.param().abi(),
            healthpolicy,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedApplicationHealth<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricDeployedApplicationHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedApplicationHealth)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedServicePackageHealth<P0, P1, P2, P3>(
        &self,
        applicationname: P0,
        servicemanifestname: P1,
        nodename: P2,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: P3,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<windows_core::PCWSTR>,
        P3: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedServicePackageHealth)(
            windows_core::Interface::as_raw(self),
            applicationname.param().abi(),
            servicemanifestname.param().abi(),
            nodename.param().abi(),
            healthpolicy,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedServicePackageHealth<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricDeployedServicePackageHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedServicePackageHealth)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricHealthClient {}
unsafe impl Sync for IFabricHealthClient {}
#[repr(C)]
pub struct IFabricHealthClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub ReportHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_REPORT,
    ) -> windows_core::HRESULT,
    pub BeginGetClusterHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_POLICY,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetClusterHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetNodeHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_POLICY,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetNodeHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetApplicationHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetServiceHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetPartitionHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::GUID,
        *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetPartitionHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetReplicaHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::GUID,
        i64,
        *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetReplicaHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedApplicationHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetDeployedApplicationHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedServicePackageHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndGetDeployedServicePackageHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricHealthClient2,
    IFabricHealthClient2_Vtbl,
    0x66cbc014_d7b3_4f81_a498_e580feb9a1f5
);
impl core::ops::Deref for IFabricHealthClient2 {
    type Target = IFabricHealthClient;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricHealthClient2,
    windows_core::IUnknown,
    IFabricHealthClient
);
impl IFabricHealthClient2 {
    pub unsafe fn BeginGetClusterHealth2<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetClusterHealth2)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetClusterHealth2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricClusterHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetClusterHealth2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetNodeHealth2<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NODE_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetNodeHealth2)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetNodeHealth2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricNodeHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetNodeHealth2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetApplicationHealth2<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetApplicationHealth2)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationHealth2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricApplicationHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationHealth2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetServiceHealth2<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetServiceHealth2)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceHealth2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricServiceHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceHealth2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetPartitionHealth2<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetPartitionHealth2)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetPartitionHealth2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricPartitionHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetPartitionHealth2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetReplicaHealth2<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetReplicaHealth2)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetReplicaHealth2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricReplicaHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetReplicaHealth2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedApplicationHealth2<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedApplicationHealth2)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedApplicationHealth2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricDeployedApplicationHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedApplicationHealth2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedServicePackageHealth2<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedServicePackageHealth2)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedServicePackageHealth2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricDeployedServicePackageHealthResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedServicePackageHealth2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricHealthClient2 {}
unsafe impl Sync for IFabricHealthClient2 {}
#[repr(C)]
pub struct IFabricHealthClient2_Vtbl {
    pub base__: IFabricHealthClient_Vtbl,
    pub BeginGetClusterHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetClusterHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetNodeHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_NODE_HEALTH_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetNodeHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetApplicationHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetServiceHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetPartitionHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetPartitionHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetReplicaHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetReplicaHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedApplicationHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetDeployedApplicationHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedServicePackageHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndGetDeployedServicePackageHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricHealthClient3,
    IFabricHealthClient3_Vtbl,
    0xdd3e4497_3373_458d_ad22_c88ebd27493e
);
impl core::ops::Deref for IFabricHealthClient3 {
    type Target = IFabricHealthClient2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricHealthClient3,
    windows_core::IUnknown,
    IFabricHealthClient,
    IFabricHealthClient2
);
impl IFabricHealthClient3 {
    pub unsafe fn BeginGetClusterHealthChunk<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetClusterHealthChunk)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetClusterHealthChunk<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetClusterHealthChunkResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetClusterHealthChunk)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricHealthClient3 {}
unsafe impl Sync for IFabricHealthClient3 {}
#[repr(C)]
pub struct IFabricHealthClient3_Vtbl {
    pub base__: IFabricHealthClient2_Vtbl,
    pub BeginGetClusterHealthChunk: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetClusterHealthChunk: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricHealthClient4,
    IFabricHealthClient4_Vtbl,
    0x9f0401af_4909_404f_8696_0a71bd753e98
);
impl core::ops::Deref for IFabricHealthClient4 {
    type Target = IFabricHealthClient3;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricHealthClient4,
    windows_core::IUnknown,
    IFabricHealthClient,
    IFabricHealthClient2,
    IFabricHealthClient3
);
impl IFabricHealthClient4 {
    pub unsafe fn ReportHealth2(
        &self,
        healthreport: *const super::FabricTypes::FABRIC_HEALTH_REPORT,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportHealth2)(
            windows_core::Interface::as_raw(self),
            healthreport,
            sendoptions,
        )
        .ok()
    }
}
unsafe impl Send for IFabricHealthClient4 {}
unsafe impl Sync for IFabricHealthClient4 {}
#[repr(C)]
pub struct IFabricHealthClient4_Vtbl {
    pub base__: IFabricHealthClient3_Vtbl,
    pub ReportHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_REPORT,
        *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricInfrastructureServiceClient,
    IFabricInfrastructureServiceClient_Vtbl,
    0xa0cfbc71_184b_443b_b102_4b6d0a7cbc49
);
impl core::ops::Deref for IFabricInfrastructureServiceClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricInfrastructureServiceClient, windows_core::IUnknown);
impl IFabricInfrastructureServiceClient {
    pub unsafe fn BeginInvokeInfrastructureCommand<P0, P1, P2>(
        &self,
        servicename: P0,
        command: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginInvokeInfrastructureCommand)(
            windows_core::Interface::as_raw(self),
            servicename.param().abi(),
            command.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndInvokeInfrastructureCommand<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndInvokeInfrastructureCommand)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginInvokeInfrastructureQuery<P0, P1, P2>(
        &self,
        servicename: P0,
        command: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginInvokeInfrastructureQuery)(
            windows_core::Interface::as_raw(self),
            servicename.param().abi(),
            command.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndInvokeInfrastructureQuery<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndInvokeInfrastructureQuery)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricInfrastructureServiceClient {}
unsafe impl Sync for IFabricInfrastructureServiceClient {}
#[repr(C)]
pub struct IFabricInfrastructureServiceClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginInvokeInfrastructureCommand: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndInvokeInfrastructureCommand: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginInvokeInfrastructureQuery: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndInvokeInfrastructureQuery: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricMovePrimaryResult,
    IFabricMovePrimaryResult_Vtbl,
    0x66ac03f5_e61c_47a2_80fe_49309a02c92c
);
impl core::ops::Deref for IFabricMovePrimaryResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricMovePrimaryResult, windows_core::IUnknown);
impl IFabricMovePrimaryResult {
    pub unsafe fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_MOVE_PRIMARY_RESULT {
        (windows_core::Interface::vtable(self).get_Result)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricMovePrimaryResult {}
unsafe impl Sync for IFabricMovePrimaryResult {}
#[repr(C)]
pub struct IFabricMovePrimaryResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Result:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_MOVE_PRIMARY_RESULT,
}
windows_core::imp::define_interface!(
    IFabricMoveSecondaryResult,
    IFabricMoveSecondaryResult_Vtbl,
    0x60fe896a_b690_4abb_94fd_86c615d29bee
);
impl core::ops::Deref for IFabricMoveSecondaryResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricMoveSecondaryResult, windows_core::IUnknown);
impl IFabricMoveSecondaryResult {
    pub unsafe fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_MOVE_SECONDARY_RESULT {
        (windows_core::Interface::vtable(self).get_Result)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricMoveSecondaryResult {}
unsafe impl Sync for IFabricMoveSecondaryResult {}
#[repr(C)]
pub struct IFabricMoveSecondaryResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Result:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_MOVE_SECONDARY_RESULT,
}
windows_core::imp::define_interface!(
    IFabricNameEnumerationResult,
    IFabricNameEnumerationResult_Vtbl,
    0x557e8105_f4f4_4fd3_9d21_075f34e2f98c
);
impl core::ops::Deref for IFabricNameEnumerationResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricNameEnumerationResult, windows_core::IUnknown);
impl IFabricNameEnumerationResult {
    pub unsafe fn get_EnumerationStatus(&self) -> super::FabricTypes::FABRIC_ENUMERATION_STATUS {
        (windows_core::Interface::vtable(self).get_EnumerationStatus)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn GetNames(
        &self,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_URI> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetNames)(
            windows_core::Interface::as_raw(self),
            itemcount,
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricNameEnumerationResult {}
unsafe impl Sync for IFabricNameEnumerationResult {}
#[repr(C)]
pub struct IFabricNameEnumerationResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_EnumerationStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_ENUMERATION_STATUS,
    pub GetNames: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut super::FabricTypes::FABRIC_URI,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricNetworkManagementClient,
    IFabricNetworkManagementClient_Vtbl,
    0xfdb754c6_69c5_4bcf_bba5_cb70c84a4398
);
impl core::ops::Deref for IFabricNetworkManagementClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricNetworkManagementClient, windows_core::IUnknown);
impl IFabricNetworkManagementClient {
    pub unsafe fn BeginCreateNetwork<P0, P1>(
        &self,
        networkname: P0,
        description: *const super::FabricTypes::FABRIC_NETWORK_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCreateNetwork)(
            windows_core::Interface::as_raw(self),
            networkname.param().abi(),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCreateNetwork<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndCreateNetwork)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginDeleteNetwork<P0>(
        &self,
        deletedescription: *const super::FabricTypes::FABRIC_DELETE_NETWORK_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeleteNetwork)(
            windows_core::Interface::as_raw(self),
            deletedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeleteNetwork<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeleteNetwork)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetNetworkList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NETWORK_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetNetworkList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetNetworkList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetNetworkListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetNetworkList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetNetworkApplicationList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetNetworkApplicationList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetNetworkApplicationList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetNetworkApplicationListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetNetworkApplicationList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetNetworkNodeList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NETWORK_NODE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetNetworkNodeList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetNetworkNodeList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetNetworkNodeListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetNetworkNodeList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetApplicationNetworkList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetApplicationNetworkList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationNetworkList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetApplicationNetworkListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationNetworkList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedNetworkList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedNetworkList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedNetworkList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetDeployedNetworkListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedNetworkList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedNetworkCodePackageList<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedNetworkCodePackageList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedNetworkCodePackageList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetDeployedNetworkCodePackageListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedNetworkCodePackageList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricNetworkManagementClient {}
unsafe impl Sync for IFabricNetworkManagementClient {}
#[repr(C)]
pub struct IFabricNetworkManagementClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginCreateNetwork: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *const super::FabricTypes::FABRIC_NETWORK_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCreateNetwork: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginDeleteNetwork: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DELETE_NETWORK_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeleteNetwork: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetNetworkList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_NETWORK_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetNetworkList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetNetworkApplicationList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetNetworkApplicationList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetNetworkNodeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_NETWORK_NODE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetNetworkNodeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetApplicationNetworkList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationNetworkList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedNetworkList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetDeployedNetworkList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedNetworkCodePackageList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndGetDeployedNetworkCodePackageList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricNodeHealthResult,
    IFabricNodeHealthResult_Vtbl,
    0xe461f70b_51b8_4b73_9f35_e38e5ac68719
);
impl core::ops::Deref for IFabricNodeHealthResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricNodeHealthResult, windows_core::IUnknown);
impl IFabricNodeHealthResult {
    pub unsafe fn get_NodeHealth(&self) -> *mut super::FabricTypes::FABRIC_NODE_HEALTH {
        (windows_core::Interface::vtable(self).get_NodeHealth)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricNodeHealthResult {}
unsafe impl Sync for IFabricNodeHealthResult {}
#[repr(C)]
pub struct IFabricNodeHealthResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_NodeHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    )
        -> *mut super::FabricTypes::FABRIC_NODE_HEALTH,
}
windows_core::imp::define_interface!(
    IFabricNodeTransitionProgressResult,
    IFabricNodeTransitionProgressResult_Vtbl,
    0x68a98626_6a1b_4dd8_ad93_74c0936e86aa
);
impl core::ops::Deref for IFabricNodeTransitionProgressResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricNodeTransitionProgressResult,
    windows_core::IUnknown
);
impl IFabricNodeTransitionProgressResult {
    pub unsafe fn get_Progress(&self) -> *mut super::FabricTypes::FABRIC_NODE_TRANSITION_PROGRESS {
        (windows_core::Interface::vtable(self).get_Progress)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricNodeTransitionProgressResult {}
unsafe impl Sync for IFabricNodeTransitionProgressResult {}
#[repr(C)]
pub struct IFabricNodeTransitionProgressResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Progress:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_NODE_TRANSITION_PROGRESS,
}
windows_core::imp::define_interface!(
    IFabricOrchestrationUpgradeStatusResult,
    IFabricOrchestrationUpgradeStatusResult_Vtbl,
    0x95a56e4a_490d_445e_865c_ef0a62f15504
);
impl core::ops::Deref for IFabricOrchestrationUpgradeStatusResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricOrchestrationUpgradeStatusResult,
    windows_core::IUnknown
);
impl IFabricOrchestrationUpgradeStatusResult {
    pub unsafe fn get_Progress(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_ORCHESTRATION_UPGRADE_PROGRESS {
        (windows_core::Interface::vtable(self).get_Progress)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricOrchestrationUpgradeStatusResult {}
unsafe impl Sync for IFabricOrchestrationUpgradeStatusResult {}
#[repr(C)]
pub struct IFabricOrchestrationUpgradeStatusResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Progress:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_ORCHESTRATION_UPGRADE_PROGRESS,
}
windows_core::imp::define_interface!(
    IFabricPartitionDataLossProgressResult,
    IFabricPartitionDataLossProgressResult_Vtbl,
    0x614921e6_75f1_44e7_9107_ab88819136b8
);
impl core::ops::Deref for IFabricPartitionDataLossProgressResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricPartitionDataLossProgressResult,
    windows_core::IUnknown
);
impl IFabricPartitionDataLossProgressResult {
    pub unsafe fn get_Progress(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_PARTITION_DATA_LOSS_PROGRESS {
        (windows_core::Interface::vtable(self).get_Progress)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricPartitionDataLossProgressResult {}
unsafe impl Sync for IFabricPartitionDataLossProgressResult {}
#[repr(C)]
pub struct IFabricPartitionDataLossProgressResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Progress:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_PARTITION_DATA_LOSS_PROGRESS,
}
windows_core::imp::define_interface!(
    IFabricPartitionHealthResult,
    IFabricPartitionHealthResult_Vtbl,
    0x10c9e99d_bb3f_4263_a7f7_abbaf3c03576
);
impl core::ops::Deref for IFabricPartitionHealthResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricPartitionHealthResult, windows_core::IUnknown);
impl IFabricPartitionHealthResult {
    pub unsafe fn get_PartitionHealth(&self) -> *mut super::FabricTypes::FABRIC_PARTITION_HEALTH {
        (windows_core::Interface::vtable(self).get_PartitionHealth)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricPartitionHealthResult {}
unsafe impl Sync for IFabricPartitionHealthResult {}
#[repr(C)]
pub struct IFabricPartitionHealthResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_PartitionHealth:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PARTITION_HEALTH,
}
windows_core::imp::define_interface!(
    IFabricPartitionQuorumLossProgressResult,
    IFabricPartitionQuorumLossProgressResult_Vtbl,
    0x36d8e378_3706_403d_8d99_2afd1a120687
);
impl core::ops::Deref for IFabricPartitionQuorumLossProgressResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricPartitionQuorumLossProgressResult,
    windows_core::IUnknown
);
impl IFabricPartitionQuorumLossProgressResult {
    pub unsafe fn get_Progress(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_PARTITION_QUORUM_LOSS_PROGRESS {
        (windows_core::Interface::vtable(self).get_Progress)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricPartitionQuorumLossProgressResult {}
unsafe impl Sync for IFabricPartitionQuorumLossProgressResult {}
#[repr(C)]
pub struct IFabricPartitionQuorumLossProgressResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Progress:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_PARTITION_QUORUM_LOSS_PROGRESS,
}
windows_core::imp::define_interface!(
    IFabricPartitionRestartProgressResult,
    IFabricPartitionRestartProgressResult_Vtbl,
    0xd2cb2ee1_a1ba_4cbd_80f7_14fd3d55bb61
);
impl core::ops::Deref for IFabricPartitionRestartProgressResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricPartitionRestartProgressResult,
    windows_core::IUnknown
);
impl IFabricPartitionRestartProgressResult {
    pub unsafe fn get_Progress(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_PARTITION_RESTART_PROGRESS {
        (windows_core::Interface::vtable(self).get_Progress)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricPartitionRestartProgressResult {}
unsafe impl Sync for IFabricPartitionRestartProgressResult {}
#[repr(C)]
pub struct IFabricPartitionRestartProgressResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Progress:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_PARTITION_RESTART_PROGRESS,
}
windows_core::imp::define_interface!(
    IFabricPropertyBatchResult,
    IFabricPropertyBatchResult_Vtbl,
    0xee747ff5_3fbb_46a8_adbc_47ce09c48bbe
);
impl core::ops::Deref for IFabricPropertyBatchResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricPropertyBatchResult, windows_core::IUnknown);
impl IFabricPropertyBatchResult {
    pub unsafe fn GetProperty(
        &self,
        operationindexinrequest: u32,
    ) -> windows_core::Result<IFabricPropertyValueResult> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetProperty)(
            windows_core::Interface::as_raw(self),
            operationindexinrequest,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricPropertyBatchResult {}
unsafe impl Sync for IFabricPropertyBatchResult {}
#[repr(C)]
pub struct IFabricPropertyBatchResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricPropertyEnumerationResult,
    IFabricPropertyEnumerationResult_Vtbl,
    0xa42da40d_a637_478d_83f3_2813871234cf
);
impl core::ops::Deref for IFabricPropertyEnumerationResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricPropertyEnumerationResult, windows_core::IUnknown);
impl IFabricPropertyEnumerationResult {
    pub unsafe fn get_EnumerationStatus(&self) -> super::FabricTypes::FABRIC_ENUMERATION_STATUS {
        (windows_core::Interface::vtable(self).get_EnumerationStatus)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_PropertyCount(&self) -> u32 {
        (windows_core::Interface::vtable(self).get_PropertyCount)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn GetProperty(
        &self,
        index: u32,
    ) -> windows_core::Result<IFabricPropertyValueResult> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetProperty)(
            windows_core::Interface::as_raw(self),
            index,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricPropertyEnumerationResult {}
unsafe impl Sync for IFabricPropertyEnumerationResult {}
#[repr(C)]
pub struct IFabricPropertyEnumerationResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_EnumerationStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_ENUMERATION_STATUS,
    pub get_PropertyCount: unsafe extern "system" fn(*mut core::ffi::c_void) -> u32,
    pub GetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricPropertyManagementClient,
    IFabricPropertyManagementClient_Vtbl,
    0x26e58816_b5d5_4f08_9770_dbf0410c99d6
);
impl core::ops::Deref for IFabricPropertyManagementClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricPropertyManagementClient, windows_core::IUnknown);
impl IFabricPropertyManagementClient {
    pub unsafe fn BeginCreateName<P0, P1>(
        &self,
        name: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCreateName)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCreateName<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndCreateName)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginDeleteName<P0, P1>(
        &self,
        name: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeleteName)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeleteName<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeleteName)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginNameExists<P0, P1>(
        &self,
        name: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginNameExists)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndNameExists<P0>(&self, context: P0) -> windows_core::Result<u8>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndNameExists)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn BeginEnumerateSubNames<P0, P1, P2, P3>(
        &self,
        name: P0,
        previousresult: P1,
        recursive: P2,
        timeoutmilliseconds: u32,
        callback: P3,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<IFabricNameEnumerationResult>,
        P2: windows_core::Param<windows::Win32::Foundation::BOOLEAN>,
        P3: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginEnumerateSubNames)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            previousresult.param().abi(),
            recursive.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndEnumerateSubNames<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricNameEnumerationResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndEnumerateSubNames)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginPutPropertyBinary<P0, P1, P2>(
        &self,
        name: P0,
        propertyname: P1,
        data: &[u8],
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginPutPropertyBinary)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            propertyname.param().abi(),
            data.len().try_into().unwrap(),
            core::mem::transmute(data.as_ptr()),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndPutPropertyBinary<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndPutPropertyBinary)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginPutPropertyInt64<P0, P1, P2>(
        &self,
        name: P0,
        propertyname: P1,
        data: i64,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginPutPropertyInt64)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            propertyname.param().abi(),
            data,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndPutPropertyInt64<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndPutPropertyInt64)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginPutPropertyDouble<P0, P1, P2>(
        &self,
        name: P0,
        propertyname: P1,
        data: f64,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginPutPropertyDouble)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            propertyname.param().abi(),
            data,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndPutPropertyDouble<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndPutPropertyDouble)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginPutPropertyWString<P0, P1, P2, P3>(
        &self,
        name: P0,
        propertyname: P1,
        data: P2,
        timeoutmilliseconds: u32,
        callback: P3,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<windows_core::PCWSTR>,
        P3: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginPutPropertyWString)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            propertyname.param().abi(),
            data.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndPutPropertyWString<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndPutPropertyWString)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginPutPropertyGuid<P0, P1, P2>(
        &self,
        name: P0,
        propertyname: P1,
        data: *const windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginPutPropertyGuid)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            propertyname.param().abi(),
            data,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndPutPropertyGuid<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndPutPropertyGuid)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginDeleteProperty<P0, P1, P2>(
        &self,
        name: P0,
        propertyname: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeleteProperty)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            propertyname.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeleteProperty<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeleteProperty)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetPropertyMetadata<P0, P1, P2>(
        &self,
        name: P0,
        propertyname: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetPropertyMetadata)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            propertyname.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetPropertyMetadata<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricPropertyMetadataResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetPropertyMetadata)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetProperty<P0, P1, P2>(
        &self,
        name: P0,
        propertyname: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetProperty)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            propertyname.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetProperty<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricPropertyValueResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetProperty)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginSubmitPropertyBatch<P0, P1>(
        &self,
        name: P0,
        operations: &[super::FabricTypes::FABRIC_PROPERTY_BATCH_OPERATION],
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginSubmitPropertyBatch)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            operations.len().try_into().unwrap(),
            core::mem::transmute(operations.as_ptr()),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndSubmitPropertyBatch<P0>(
        &self,
        context: P0,
        failedoperationindexinrequest: *mut u32,
    ) -> windows_core::Result<IFabricPropertyBatchResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndSubmitPropertyBatch)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            failedoperationindexinrequest,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginEnumerateProperties<P0, P1, P2, P3>(
        &self,
        name: P0,
        includevalues: P1,
        previousresult: P2,
        timeoutmilliseconds: u32,
        callback: P3,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<windows::Win32::Foundation::BOOLEAN>,
        P2: windows_core::Param<IFabricPropertyEnumerationResult>,
        P3: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginEnumerateProperties)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            includevalues.param().abi(),
            previousresult.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndEnumerateProperties<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricPropertyEnumerationResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndEnumerateProperties)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricPropertyManagementClient {}
unsafe impl Sync for IFabricPropertyManagementClient {}
#[repr(C)]
pub struct IFabricPropertyManagementClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginCreateName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCreateName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginDeleteName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeleteName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginNameExists: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndNameExists: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u8,
    ) -> windows_core::HRESULT,
    pub BeginEnumerateSubNames: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        *mut core::ffi::c_void,
        windows::Win32::Foundation::BOOLEAN,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndEnumerateSubNames: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginPutPropertyBinary: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        u32,
        *const u8,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndPutPropertyBinary: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginPutPropertyInt64: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        i64,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndPutPropertyInt64: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginPutPropertyDouble: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        f64,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndPutPropertyDouble: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginPutPropertyWString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndPutPropertyWString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginPutPropertyGuid: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        *const windows_core::GUID,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndPutPropertyGuid: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginDeleteProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeleteProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetPropertyMetadata: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetPropertyMetadata: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetProperty: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginSubmitPropertyBatch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *const super::FabricTypes::FABRIC_PROPERTY_BATCH_OPERATION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndSubmitPropertyBatch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginEnumerateProperties: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        windows::Win32::Foundation::BOOLEAN,
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndEnumerateProperties: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricPropertyManagementClient2,
    IFabricPropertyManagementClient2_Vtbl,
    0x04991c28_3f9d_4a49_9322_a56d308965fd
);
impl core::ops::Deref for IFabricPropertyManagementClient2 {
    type Target = IFabricPropertyManagementClient;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricPropertyManagementClient2,
    windows_core::IUnknown,
    IFabricPropertyManagementClient
);
impl IFabricPropertyManagementClient2 {
    pub unsafe fn BeginPutCustomPropertyOperation<P0, P1>(
        &self,
        name: P0,
        propertyoperation: *const super::FabricTypes::FABRIC_PUT_CUSTOM_PROPERTY_OPERATION,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginPutCustomPropertyOperation)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            propertyoperation,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndPutCustomPropertyOperation<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndPutCustomPropertyOperation)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricPropertyManagementClient2 {}
unsafe impl Sync for IFabricPropertyManagementClient2 {}
#[repr(C)]
pub struct IFabricPropertyManagementClient2_Vtbl {
    pub base__: IFabricPropertyManagementClient_Vtbl,
    pub BeginPutCustomPropertyOperation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        *const super::FabricTypes::FABRIC_PUT_CUSTOM_PROPERTY_OPERATION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndPutCustomPropertyOperation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricPropertyMetadataResult,
    IFabricPropertyMetadataResult_Vtbl,
    0x33302306_fb8d_4831_b493_57efcc772462
);
impl core::ops::Deref for IFabricPropertyMetadataResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricPropertyMetadataResult, windows_core::IUnknown);
impl IFabricPropertyMetadataResult {
    pub unsafe fn get_Metadata(&self) -> *mut super::FabricTypes::FABRIC_NAMED_PROPERTY_METADATA {
        (windows_core::Interface::vtable(self).get_Metadata)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricPropertyMetadataResult {}
unsafe impl Sync for IFabricPropertyMetadataResult {}
#[repr(C)]
pub struct IFabricPropertyMetadataResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Metadata:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_NAMED_PROPERTY_METADATA,
}
windows_core::imp::define_interface!(
    IFabricPropertyValueResult,
    IFabricPropertyValueResult_Vtbl,
    0x9a518b49_9903_4b8f_834e_1979e9c6745e
);
impl core::ops::Deref for IFabricPropertyValueResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricPropertyValueResult, windows_core::IUnknown);
impl IFabricPropertyValueResult {
    pub unsafe fn get_Property(&self) -> *mut super::FabricTypes::FABRIC_NAMED_PROPERTY {
        (windows_core::Interface::vtable(self).get_Property)(windows_core::Interface::as_raw(self))
    }
    pub unsafe fn GetValueAsBinary(&self, bytecount: *mut u32) -> windows_core::Result<*mut u8> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetValueAsBinary)(
            windows_core::Interface::as_raw(self),
            bytecount,
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetValueAsInt64(&self) -> windows_core::Result<i64> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetValueAsInt64)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetValueAsDouble(&self) -> windows_core::Result<f64> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetValueAsDouble)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetValueAsWString(&self) -> windows_core::Result<windows_core::PCWSTR> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetValueAsWString)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetValueAsGuid(&self) -> windows_core::Result<windows_core::GUID> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetValueAsGuid)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricPropertyValueResult {}
unsafe impl Sync for IFabricPropertyValueResult {}
#[repr(C)]
pub struct IFabricPropertyValueResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Property: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    )
        -> *mut super::FabricTypes::FABRIC_NAMED_PROPERTY,
    pub GetValueAsBinary: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut u8,
    ) -> windows_core::HRESULT,
    pub GetValueAsInt64:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i64) -> windows_core::HRESULT,
    pub GetValueAsDouble:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut f64) -> windows_core::HRESULT,
    pub GetValueAsWString: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
    pub GetValueAsGuid: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut windows_core::GUID,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricQueryClient,
    IFabricQueryClient_Vtbl,
    0xc629e422_90ba_4efd_8f64_cecf51bc3df0
);
impl core::ops::Deref for IFabricQueryClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricQueryClient, windows_core::IUnknown);
impl IFabricQueryClient {
    pub unsafe fn BeginGetNodeList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NODE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetNodeList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetNodeList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetNodeListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetNodeList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetApplicationTypeList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetApplicationTypeList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationTypeList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetApplicationTypeListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationTypeList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetServiceTypeList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetServiceTypeList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceTypeList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetServiceTypeListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceTypeList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetApplicationList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_APPLICATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetApplicationList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetApplicationListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetServiceList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetServiceList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetServiceListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetPartitionList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetPartitionList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetPartitionList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetPartitionListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetPartitionList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetReplicaList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetReplicaList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetReplicaList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetReplicaListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetReplicaList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedApplicationList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedApplicationList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedApplicationList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetDeployedApplicationListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedApplicationList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedServicePackageList<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedServicePackageList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedServicePackageList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetDeployedServicePackageListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedServicePackageList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedServiceTypeList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedServiceTypeList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedServiceTypeList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetDeployedServiceTypeListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedServiceTypeList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedCodePackageList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedCodePackageList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedCodePackageList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetDeployedCodePackageListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedCodePackageList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetDeployedReplicaList<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedReplicaList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedReplicaList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetDeployedReplicaListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedReplicaList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricQueryClient {}
unsafe impl Sync for IFabricQueryClient {}
#[repr(C)]
pub struct IFabricQueryClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginGetNodeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_NODE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetNodeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetApplicationTypeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationTypeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetServiceTypeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceTypeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetApplicationList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_APPLICATION_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetServiceList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetPartitionList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetPartitionList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetReplicaList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetReplicaList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedApplicationList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetDeployedApplicationList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedServicePackageList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetDeployedServicePackageList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedServiceTypeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetDeployedServiceTypeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedCodePackageList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetDeployedCodePackageList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetDeployedReplicaList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetDeployedReplicaList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricQueryClient10,
    IFabricQueryClient10_Vtbl,
    0x02139da8_7140_42ae_8403_79a551600e63
);
impl core::ops::Deref for IFabricQueryClient10 {
    type Target = IFabricQueryClient9;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricQueryClient10,
    windows_core::IUnknown,
    IFabricQueryClient,
    IFabricQueryClient2,
    IFabricQueryClient3,
    IFabricQueryClient4,
    IFabricQueryClient5,
    IFabricQueryClient6,
    IFabricQueryClient7,
    IFabricQueryClient8,
    IFabricQueryClient9
);
impl IFabricQueryClient10 {
    pub unsafe fn BeginGetDeployedApplicationPagedList<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedApplicationPagedList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedApplicationPagedList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetDeployedApplicationPagedListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedApplicationPagedList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricQueryClient10 {}
unsafe impl Sync for IFabricQueryClient10 {}
#[repr(C)]
pub struct IFabricQueryClient10_Vtbl {
    pub base__: IFabricQueryClient9_Vtbl,
    pub BeginGetDeployedApplicationPagedList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndGetDeployedApplicationPagedList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricQueryClient2,
    IFabricQueryClient2_Vtbl,
    0x4e6d5d61_24c8_4240_a2e8_bcb1fc15d9af
);
impl core::ops::Deref for IFabricQueryClient2 {
    type Target = IFabricQueryClient;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricQueryClient2,
    windows_core::IUnknown,
    IFabricQueryClient
);
impl IFabricQueryClient2 {
    pub unsafe fn BeginGetDeployedReplicaDetail<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetDeployedReplicaDetail)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetDeployedReplicaDetail<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetDeployedServiceReplicaDetailResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetDeployedReplicaDetail)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetClusterLoadInformation<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetClusterLoadInformation)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetClusterLoadInformation<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetClusterLoadInformationResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetClusterLoadInformation)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetPartitionLoadInformation<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetPartitionLoadInformation)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetPartitionLoadInformation<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetPartitionLoadInformationResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetPartitionLoadInformation)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetProvisionedFabricCodeVersionList<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetProvisionedFabricCodeVersionList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetProvisionedFabricCodeVersionList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetProvisionedCodeVersionListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetProvisionedFabricCodeVersionList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetProvisionedFabricConfigVersionList<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetProvisionedFabricConfigVersionList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetProvisionedFabricConfigVersionList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetProvisionedConfigVersionListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetProvisionedFabricConfigVersionList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricQueryClient2 {}
unsafe impl Sync for IFabricQueryClient2 {}
#[repr(C)]
pub struct IFabricQueryClient2_Vtbl {
    pub base__: IFabricQueryClient_Vtbl,
    pub BeginGetDeployedReplicaDetail: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetDeployedReplicaDetail: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetClusterLoadInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetClusterLoadInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetPartitionLoadInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetPartitionLoadInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetProvisionedFabricCodeVersionList:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *const super::FabricTypes::FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION,
            u32,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub EndGetProvisionedFabricCodeVersionList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub BeginGetProvisionedFabricConfigVersionList:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *const super::FabricTypes::FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION,
            u32,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub EndGetProvisionedFabricConfigVersionList:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricQueryClient3,
    IFabricQueryClient3_Vtbl,
    0x16f563f3_4017_496e_b0e7_2650de5774b3
);
impl core::ops::Deref for IFabricQueryClient3 {
    type Target = IFabricQueryClient2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricQueryClient3,
    windows_core::IUnknown,
    IFabricQueryClient,
    IFabricQueryClient2
);
impl IFabricQueryClient3 {
    pub unsafe fn BeginGetNodeLoadInformation<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetNodeLoadInformation)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetNodeLoadInformation<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetNodeLoadInformationResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetNodeLoadInformation)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetReplicaLoadInformation<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetReplicaLoadInformation)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetReplicaLoadInformation<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetReplicaLoadInformationResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetReplicaLoadInformation)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricQueryClient3 {}
unsafe impl Sync for IFabricQueryClient3 {}
#[repr(C)]
pub struct IFabricQueryClient3_Vtbl {
    pub base__: IFabricQueryClient2_Vtbl,
    pub BeginGetNodeLoadInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetNodeLoadInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetReplicaLoadInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetReplicaLoadInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricQueryClient4,
    IFabricQueryClient4_Vtbl,
    0xab92081d_0d78_410b_9777_0846dba24c10
);
impl core::ops::Deref for IFabricQueryClient4 {
    type Target = IFabricQueryClient3;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricQueryClient4,
    windows_core::IUnknown,
    IFabricQueryClient,
    IFabricQueryClient2,
    IFabricQueryClient3
);
impl IFabricQueryClient4 {
    pub unsafe fn BeginGetServiceGroupMemberList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetServiceGroupMemberList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceGroupMemberList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetServiceGroupMemberListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceGroupMemberList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetServiceGroupMemberTypeList<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetServiceGroupMemberTypeList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceGroupMemberTypeList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetServiceGroupMemberTypeListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceGroupMemberTypeList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricQueryClient4 {}
unsafe impl Sync for IFabricQueryClient4 {}
#[repr(C)]
pub struct IFabricQueryClient4_Vtbl {
    pub base__: IFabricQueryClient3_Vtbl,
    pub BeginGetServiceGroupMemberList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceGroupMemberList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetServiceGroupMemberTypeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceGroupMemberTypeList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricQueryClient5,
    IFabricQueryClient5_Vtbl,
    0x75c35e8c_87a2_4810_a401_b50da858fe34
);
impl core::ops::Deref for IFabricQueryClient5 {
    type Target = IFabricQueryClient4;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricQueryClient5,
    windows_core::IUnknown,
    IFabricQueryClient,
    IFabricQueryClient2,
    IFabricQueryClient3,
    IFabricQueryClient4
);
impl IFabricQueryClient5 {
    pub unsafe fn BeginGetUnplacedReplicaInformation<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetUnplacedReplicaInformation)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetUnplacedReplicaInformation<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetUnplacedReplicaInformationResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetUnplacedReplicaInformation)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricQueryClient5 {}
unsafe impl Sync for IFabricQueryClient5 {}
#[repr(C)]
pub struct IFabricQueryClient5_Vtbl {
    pub base__: IFabricQueryClient4_Vtbl,
    pub BeginGetUnplacedReplicaInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetUnplacedReplicaInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricQueryClient6,
    IFabricQueryClient6_Vtbl,
    0x173b2bb4_09c6_42fb_8754_caa8d43cf1b2
);
impl core::ops::Deref for IFabricQueryClient6 {
    type Target = IFabricQueryClient5;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricQueryClient6,
    windows_core::IUnknown,
    IFabricQueryClient,
    IFabricQueryClient2,
    IFabricQueryClient3,
    IFabricQueryClient4,
    IFabricQueryClient5
);
impl IFabricQueryClient6 {
    pub unsafe fn EndGetNodeList2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetNodeListResult2>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetNodeList2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationList2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetApplicationListResult2>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationList2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceList2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetServiceListResult2>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceList2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetPartitionList2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetPartitionListResult2>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetPartitionList2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetReplicaList2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetReplicaListResult2>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetReplicaList2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricQueryClient6 {}
unsafe impl Sync for IFabricQueryClient6 {}
#[repr(C)]
pub struct IFabricQueryClient6_Vtbl {
    pub base__: IFabricQueryClient5_Vtbl,
    pub EndGetNodeList2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationList2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceList2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetPartitionList2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetReplicaList2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricQueryClient7,
    IFabricQueryClient7_Vtbl,
    0x538baa81_ba97_46da_95ac_e1cdd184cc74
);
impl core::ops::Deref for IFabricQueryClient7 {
    type Target = IFabricQueryClient6;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricQueryClient7,
    windows_core::IUnknown,
    IFabricQueryClient,
    IFabricQueryClient2,
    IFabricQueryClient3,
    IFabricQueryClient4,
    IFabricQueryClient5,
    IFabricQueryClient6
);
impl IFabricQueryClient7 {
    pub unsafe fn BeginGetApplicationLoadInformation<P0>(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetApplicationLoadInformation)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationLoadInformation<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetApplicationLoadInformationResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationLoadInformation)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricQueryClient7 {}
unsafe impl Sync for IFabricQueryClient7 {}
#[repr(C)]
pub struct IFabricQueryClient7_Vtbl {
    pub base__: IFabricQueryClient6_Vtbl,
    pub BeginGetApplicationLoadInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationLoadInformation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricQueryClient8,
    IFabricQueryClient8_Vtbl,
    0x2c850629_6a83_4fc3_8468_c868b87e9a17
);
impl core::ops::Deref for IFabricQueryClient8 {
    type Target = IFabricQueryClient7;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricQueryClient8,
    windows_core::IUnknown,
    IFabricQueryClient,
    IFabricQueryClient2,
    IFabricQueryClient3,
    IFabricQueryClient4,
    IFabricQueryClient5,
    IFabricQueryClient6,
    IFabricQueryClient7
);
impl IFabricQueryClient8 {
    pub unsafe fn BeginGetServiceName<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_NAME_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetServiceName)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceName<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetServiceNameResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceName)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetApplicationName<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetApplicationName)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationName<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetApplicationNameResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationName)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricQueryClient8 {}
unsafe impl Sync for IFabricQueryClient8 {}
#[repr(C)]
pub struct IFabricQueryClient8_Vtbl {
    pub base__: IFabricQueryClient7_Vtbl,
    pub BeginGetServiceName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_NAME_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetApplicationName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricQueryClient9,
    IFabricQueryClient9_Vtbl,
    0x76f0b4a5_4941_49d7_993c_ad7afc37c6af
);
impl core::ops::Deref for IFabricQueryClient9 {
    type Target = IFabricQueryClient8;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricQueryClient9,
    windows_core::IUnknown,
    IFabricQueryClient,
    IFabricQueryClient2,
    IFabricQueryClient3,
    IFabricQueryClient4,
    IFabricQueryClient5,
    IFabricQueryClient6,
    IFabricQueryClient7,
    IFabricQueryClient8
);
impl IFabricQueryClient9 {
    pub unsafe fn BeginGetApplicationTypePagedList<P0>(
        &self,
        querydescription : *const super::FabricTypes:: PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetApplicationTypePagedList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetApplicationTypePagedList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetApplicationTypePagedListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetApplicationTypePagedList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricQueryClient9 {}
unsafe impl Sync for IFabricQueryClient9 {}
#[repr(C)]
pub struct IFabricQueryClient9_Vtbl {
    pub base__: IFabricQueryClient8_Vtbl,
    pub BeginGetApplicationTypePagedList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetApplicationTypePagedList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricRepairManagementClient,
    IFabricRepairManagementClient_Vtbl,
    0xee483ba5_9018_4c99_9804_be6185db88e6
);
impl core::ops::Deref for IFabricRepairManagementClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricRepairManagementClient, windows_core::IUnknown);
impl IFabricRepairManagementClient {
    pub unsafe fn BeginCreateRepairTask<P0>(
        &self,
        repairtask: *const super::FabricTypes::FABRIC_REPAIR_TASK,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCreateRepairTask)(
            windows_core::Interface::as_raw(self),
            repairtask,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCreateRepairTask<P0>(&self, context: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndCreateRepairTask)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn BeginCancelRepairTask<P0>(
        &self,
        requestdescription: *const super::FabricTypes::FABRIC_REPAIR_CANCEL_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCancelRepairTask)(
            windows_core::Interface::as_raw(self),
            requestdescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCancelRepairTask<P0>(&self, context: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndCancelRepairTask)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn BeginForceApproveRepairTask<P0>(
        &self,
        requestdescription: *const super::FabricTypes::FABRIC_REPAIR_APPROVE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginForceApproveRepairTask)(
            windows_core::Interface::as_raw(self),
            requestdescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndForceApproveRepairTask<P0>(&self, context: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndForceApproveRepairTask)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn BeginDeleteRepairTask<P0>(
        &self,
        requestdescription: *const super::FabricTypes::FABRIC_REPAIR_DELETE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeleteRepairTask)(
            windows_core::Interface::as_raw(self),
            requestdescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeleteRepairTask<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeleteRepairTask)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginUpdateRepairExecutionState<P0>(
        &self,
        repairtask: *const super::FabricTypes::FABRIC_REPAIR_TASK,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpdateRepairExecutionState)(
            windows_core::Interface::as_raw(self),
            repairtask,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpdateRepairExecutionState<P0>(&self, context: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndUpdateRepairExecutionState)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn BeginGetRepairTaskList<P0>(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_REPAIR_TASK_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetRepairTaskList)(
            windows_core::Interface::as_raw(self),
            querydescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetRepairTaskList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricGetRepairTaskListResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetRepairTaskList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricRepairManagementClient {}
unsafe impl Sync for IFabricRepairManagementClient {}
#[repr(C)]
pub struct IFabricRepairManagementClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginCreateRepairTask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPAIR_TASK,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCreateRepairTask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub BeginCancelRepairTask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPAIR_CANCEL_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCancelRepairTask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub BeginForceApproveRepairTask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPAIR_APPROVE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndForceApproveRepairTask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub BeginDeleteRepairTask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPAIR_DELETE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeleteRepairTask: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginUpdateRepairExecutionState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPAIR_TASK,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpdateRepairExecutionState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub BeginGetRepairTaskList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPAIR_TASK_QUERY_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetRepairTaskList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricRepairManagementClient2,
    IFabricRepairManagementClient2_Vtbl,
    0x5067d775_3baa_48e4_8c72_bb5573cc3fb8
);
impl core::ops::Deref for IFabricRepairManagementClient2 {
    type Target = IFabricRepairManagementClient;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricRepairManagementClient2,
    windows_core::IUnknown,
    IFabricRepairManagementClient
);
impl IFabricRepairManagementClient2 {
    pub unsafe fn BeginUpdateRepairTaskHealthPolicy<P0>(
        &self,
        updatedescription : *const super::FabricTypes:: FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpdateRepairTaskHealthPolicy)(
            windows_core::Interface::as_raw(self),
            updatedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpdateRepairTaskHealthPolicy<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndUpdateRepairTaskHealthPolicy)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricRepairManagementClient2 {}
unsafe impl Sync for IFabricRepairManagementClient2 {}
#[repr(C)]
pub struct IFabricRepairManagementClient2_Vtbl {
    pub base__: IFabricRepairManagementClient_Vtbl,
    pub BeginUpdateRepairTaskHealthPolicy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpdateRepairTaskHealthPolicy: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricReplicaHealthResult,
    IFabricReplicaHealthResult_Vtbl,
    0xb4d5f2d9_e5cc_49ae_a6c8_89e8df7b6c15
);
impl core::ops::Deref for IFabricReplicaHealthResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricReplicaHealthResult, windows_core::IUnknown);
impl IFabricReplicaHealthResult {
    pub unsafe fn get_ReplicaHealth(&self) -> *mut super::FabricTypes::FABRIC_REPLICA_HEALTH {
        (windows_core::Interface::vtable(self).get_ReplicaHealth)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricReplicaHealthResult {}
unsafe impl Sync for IFabricReplicaHealthResult {}
#[repr(C)]
pub struct IFabricReplicaHealthResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ReplicaHealth:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_REPLICA_HEALTH,
}
windows_core::imp::define_interface!(
    IFabricResolvedServicePartitionResult,
    IFabricResolvedServicePartitionResult_Vtbl,
    0xfd0fe113_cdf8_4803_b4a0_32b1b3ef3716
);
impl core::ops::Deref for IFabricResolvedServicePartitionResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricResolvedServicePartitionResult,
    windows_core::IUnknown
);
impl IFabricResolvedServicePartitionResult {
    pub unsafe fn get_Partition(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_RESOLVED_SERVICE_PARTITION {
        (windows_core::Interface::vtable(self).get_Partition)(windows_core::Interface::as_raw(self))
    }
    pub unsafe fn GetEndpoint(
        &self,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_RESOLVED_SERVICE_ENDPOINT> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetEndpoint)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn CompareVersion<P0>(&self, other: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<IFabricResolvedServicePartitionResult>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).CompareVersion)(
            windows_core::Interface::as_raw(self),
            other.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricResolvedServicePartitionResult {}
unsafe impl Sync for IFabricResolvedServicePartitionResult {}
#[repr(C)]
pub struct IFabricResolvedServicePartitionResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Partition:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_RESOLVED_SERVICE_PARTITION,
    pub GetEndpoint: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut super::FabricTypes::FABRIC_RESOLVED_SERVICE_ENDPOINT,
    ) -> windows_core::HRESULT,
    pub CompareVersion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricRestartDeployedCodePackageResult,
    IFabricRestartDeployedCodePackageResult_Vtbl,
    0xfe087dc4_7a6a_41e3_90e9_b734a4cef41f
);
impl core::ops::Deref for IFabricRestartDeployedCodePackageResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricRestartDeployedCodePackageResult,
    windows_core::IUnknown
);
impl IFabricRestartDeployedCodePackageResult {
    pub unsafe fn get_Result(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_CODE_PACKAGE_RESULT {
        (windows_core::Interface::vtable(self).get_Result)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricRestartDeployedCodePackageResult {}
unsafe impl Sync for IFabricRestartDeployedCodePackageResult {}
#[repr(C)]
pub struct IFabricRestartDeployedCodePackageResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Result:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_DEPLOYED_CODE_PACKAGE_RESULT,
}
windows_core::imp::define_interface!(
    IFabricRestartNodeResult,
    IFabricRestartNodeResult_Vtbl,
    0x2f7e9d57_fe07_4e34_93e1_01d5a6298ca9
);
impl core::ops::Deref for IFabricRestartNodeResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricRestartNodeResult, windows_core::IUnknown);
impl IFabricRestartNodeResult {
    pub unsafe fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_NODE_RESULT {
        (windows_core::Interface::vtable(self).get_Result)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricRestartNodeResult {}
unsafe impl Sync for IFabricRestartNodeResult {}
#[repr(C)]
pub struct IFabricRestartNodeResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Result: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    ) -> *mut super::FabricTypes::FABRIC_NODE_RESULT,
}
windows_core::imp::define_interface!(
    IFabricSecretReferencesResult,
    IFabricSecretReferencesResult_Vtbl,
    0xbb8f69de_f667_4fab_820d_274cf4303ab4
);
impl core::ops::Deref for IFabricSecretReferencesResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricSecretReferencesResult, windows_core::IUnknown);
impl IFabricSecretReferencesResult {
    pub unsafe fn get_SecretReferences(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST {
        (windows_core::Interface::vtable(self).get_SecretReferences)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricSecretReferencesResult {}
unsafe impl Sync for IFabricSecretReferencesResult {}
#[repr(C)]
pub struct IFabricSecretReferencesResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_SecretReferences:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
}
windows_core::imp::define_interface!(
    IFabricSecretStoreClient,
    IFabricSecretStoreClient_Vtbl,
    0x38c4c723_3815_49d8_bdf2_68bfb536b8c9
);
impl core::ops::Deref for IFabricSecretStoreClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricSecretStoreClient, windows_core::IUnknown);
impl IFabricSecretStoreClient {
    pub unsafe fn BeginGetSecrets<P0, P1>(
        &self,
        secretreferences: *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
        includevalue: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows::Win32::Foundation::BOOLEAN>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetSecrets)(
            windows_core::Interface::as_raw(self),
            secretreferences,
            includevalue.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetSecrets<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricSecretsResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetSecrets)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginSetSecrets<P0>(
        &self,
        secrets: *const super::FabricTypes::FABRIC_SECRET_LIST,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginSetSecrets)(
            windows_core::Interface::as_raw(self),
            secrets,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndSetSecrets<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricSecretsResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndSetSecrets)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginRemoveSecrets<P0>(
        &self,
        secretreferences: *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRemoveSecrets)(
            windows_core::Interface::as_raw(self),
            secretreferences,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRemoveSecrets<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricSecretReferencesResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndRemoveSecrets)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetSecretVersions<P0>(
        &self,
        secretreferences: *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetSecretVersions)(
            windows_core::Interface::as_raw(self),
            secretreferences,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetSecretVersions<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricSecretReferencesResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetSecretVersions)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricSecretStoreClient {}
unsafe impl Sync for IFabricSecretStoreClient {}
#[repr(C)]
pub struct IFabricSecretStoreClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginGetSecrets: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
        windows::Win32::Foundation::BOOLEAN,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetSecrets: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginSetSecrets: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SECRET_LIST,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndSetSecrets: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRemoveSecrets: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRemoveSecrets: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetSecretVersions: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetSecretVersions: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricSecretsResult,
    IFabricSecretsResult_Vtbl,
    0xfe15a879_0dbe_4841_9cc6_6e92077cd669
);
impl core::ops::Deref for IFabricSecretsResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricSecretsResult, windows_core::IUnknown);
impl IFabricSecretsResult {
    pub unsafe fn get_Secrets(&self) -> *mut super::FabricTypes::FABRIC_SECRET_LIST {
        (windows_core::Interface::vtable(self).get_Secrets)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricSecretsResult {}
unsafe impl Sync for IFabricSecretsResult {}
#[repr(C)]
pub struct IFabricSecretsResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Secrets: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    ) -> *mut super::FabricTypes::FABRIC_SECRET_LIST,
}
windows_core::imp::define_interface!(
    IFabricServiceDescriptionResult,
    IFabricServiceDescriptionResult_Vtbl,
    0x86b4f744_38c7_4dab_b6b4_11c23734c269
);
impl core::ops::Deref for IFabricServiceDescriptionResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricServiceDescriptionResult, windows_core::IUnknown);
impl IFabricServiceDescriptionResult {
    pub unsafe fn get_Description(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_DESCRIPTION {
        (windows_core::Interface::vtable(self).get_Description)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricServiceDescriptionResult {}
unsafe impl Sync for IFabricServiceDescriptionResult {}
#[repr(C)]
pub struct IFabricServiceDescriptionResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Description:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_DESCRIPTION,
}
windows_core::imp::define_interface!(
    IFabricServiceEndpointsVersion,
    IFabricServiceEndpointsVersion_Vtbl,
    0x0a673dc5_2297_4fc5_a38f_482d29144fa5
);
impl core::ops::Deref for IFabricServiceEndpointsVersion {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricServiceEndpointsVersion, windows_core::IUnknown);
impl IFabricServiceEndpointsVersion {
    pub unsafe fn Compare<P0>(&self, other: P0) -> windows_core::Result<i32>
    where
        P0: windows_core::Param<IFabricServiceEndpointsVersion>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).Compare)(
            windows_core::Interface::as_raw(self),
            other.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricServiceEndpointsVersion {}
unsafe impl Sync for IFabricServiceEndpointsVersion {}
#[repr(C)]
pub struct IFabricServiceEndpointsVersion_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub Compare: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i32,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceGroupDescriptionResult,
    IFabricServiceGroupDescriptionResult_Vtbl,
    0x3ca814d4_e067_48b7_9bdc_9be33810416d
);
impl core::ops::Deref for IFabricServiceGroupDescriptionResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceGroupDescriptionResult,
    windows_core::IUnknown
);
impl IFabricServiceGroupDescriptionResult {
    pub unsafe fn get_Description(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_DESCRIPTION {
        (windows_core::Interface::vtable(self).get_Description)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricServiceGroupDescriptionResult {}
unsafe impl Sync for IFabricServiceGroupDescriptionResult {}
#[repr(C)]
pub struct IFabricServiceGroupDescriptionResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Description:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_DESCRIPTION,
}
windows_core::imp::define_interface!(
    IFabricServiceGroupManagementClient,
    IFabricServiceGroupManagementClient_Vtbl,
    0x2061227e_0281_4baf_9b19_b2dfb2e63bbe
);
impl core::ops::Deref for IFabricServiceGroupManagementClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceGroupManagementClient,
    windows_core::IUnknown
);
impl IFabricServiceGroupManagementClient {
    pub unsafe fn BeginCreateServiceGroup<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_SERVICE_GROUP_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCreateServiceGroup)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCreateServiceGroup<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndCreateServiceGroup)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginDeleteServiceGroup<P0, P1>(
        &self,
        name: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeleteServiceGroup)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeleteServiceGroup<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeleteServiceGroup)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetServiceGroupDescription<P0, P1>(
        &self,
        name: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetServiceGroupDescription)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceGroupDescription<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricServiceGroupDescriptionResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceGroupDescription)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricServiceGroupManagementClient {}
unsafe impl Sync for IFabricServiceGroupManagementClient {}
#[repr(C)]
pub struct IFabricServiceGroupManagementClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginCreateServiceGroup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_GROUP_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCreateServiceGroup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginDeleteServiceGroup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeleteServiceGroup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetServiceGroupDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceGroupDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceGroupManagementClient2,
    IFabricServiceGroupManagementClient2_Vtbl,
    0x4f0dc42d_8fec_4ea9_a96b_5be1fa1e1d64
);
impl core::ops::Deref for IFabricServiceGroupManagementClient2 {
    type Target = IFabricServiceGroupManagementClient;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceGroupManagementClient2,
    windows_core::IUnknown,
    IFabricServiceGroupManagementClient
);
impl IFabricServiceGroupManagementClient2 {
    pub unsafe fn BeginUpdateServiceGroup<P0, P1>(
        &self,
        name: P0,
        servicegroupupdatedescription : *const super::FabricTypes:: FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpdateServiceGroup)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            servicegroupupdatedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpdateServiceGroup<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUpdateServiceGroup)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricServiceGroupManagementClient2 {}
unsafe impl Sync for IFabricServiceGroupManagementClient2 {}
#[repr(C)]
pub struct IFabricServiceGroupManagementClient2_Vtbl {
    pub base__: IFabricServiceGroupManagementClient_Vtbl,
    pub BeginUpdateServiceGroup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        *const super::FabricTypes::FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpdateServiceGroup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceGroupManagementClient3,
    IFabricServiceGroupManagementClient3_Vtbl,
    0xcbee0e12_b5a0_44dc_8c3c_c067958f82f6
);
impl core::ops::Deref for IFabricServiceGroupManagementClient3 {
    type Target = IFabricServiceGroupManagementClient2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceGroupManagementClient3,
    windows_core::IUnknown,
    IFabricServiceGroupManagementClient,
    IFabricServiceGroupManagementClient2
);
impl IFabricServiceGroupManagementClient3 {
    pub unsafe fn BeginCreateServiceGroupFromTemplate<P0, P1, P2, P3>(
        &self,
        applicationname: P0,
        servicename: P1,
        servicetypename: P2,
        initializationdata: &[u8],
        timeoutmilliseconds: u32,
        callback: P3,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P2: windows_core::Param<windows_core::PCWSTR>,
        P3: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCreateServiceGroupFromTemplate)(
            windows_core::Interface::as_raw(self),
            applicationname.param().abi(),
            servicename.param().abi(),
            servicetypename.param().abi(),
            initializationdata.len().try_into().unwrap(),
            core::mem::transmute(initializationdata.as_ptr()),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCreateServiceGroupFromTemplate<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndCreateServiceGroupFromTemplate)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricServiceGroupManagementClient3 {}
unsafe impl Sync for IFabricServiceGroupManagementClient3 {}
#[repr(C)]
pub struct IFabricServiceGroupManagementClient3_Vtbl {
    pub base__: IFabricServiceGroupManagementClient2_Vtbl,
    pub BeginCreateServiceGroupFromTemplate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        u32,
        *const u8,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndCreateServiceGroupFromTemplate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceGroupManagementClient4,
    IFabricServiceGroupManagementClient4_Vtbl,
    0x3c73b32e_9a08_48ca_b3a3_993a2029e37a
);
impl core::ops::Deref for IFabricServiceGroupManagementClient4 {
    type Target = IFabricServiceGroupManagementClient3;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceGroupManagementClient4,
    windows_core::IUnknown,
    IFabricServiceGroupManagementClient,
    IFabricServiceGroupManagementClient2,
    IFabricServiceGroupManagementClient3
);
impl IFabricServiceGroupManagementClient4 {
    pub unsafe fn BeginCreateServiceGroupFromTemplate2<P0>(
        &self,
        servicegroupfromtemplatedescription : *const super::FabricTypes:: FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCreateServiceGroupFromTemplate2)(
            windows_core::Interface::as_raw(self),
            servicegroupfromtemplatedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCreateServiceGroupFromTemplate2<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndCreateServiceGroupFromTemplate2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricServiceGroupManagementClient4 {}
unsafe impl Sync for IFabricServiceGroupManagementClient4 {}
#[repr(C)]
pub struct IFabricServiceGroupManagementClient4_Vtbl {
    pub base__: IFabricServiceGroupManagementClient3_Vtbl,
    pub BeginCreateServiceGroupFromTemplate2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndCreateServiceGroupFromTemplate2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceHealthResult,
    IFabricServiceHealthResult_Vtbl,
    0x52040bd9_a78e_4308_a30e_7114e3684e76
);
impl core::ops::Deref for IFabricServiceHealthResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricServiceHealthResult, windows_core::IUnknown);
impl IFabricServiceHealthResult {
    pub unsafe fn get_ServiceHealth(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_HEALTH {
        (windows_core::Interface::vtable(self).get_ServiceHealth)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricServiceHealthResult {}
unsafe impl Sync for IFabricServiceHealthResult {}
#[repr(C)]
pub struct IFabricServiceHealthResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ServiceHealth:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_HEALTH,
}
windows_core::imp::define_interface!(
    IFabricServiceManagementClient,
    IFabricServiceManagementClient_Vtbl,
    0xf7368189_fd1f_437c_888d_8c89cecc57a0
);
impl core::ops::Deref for IFabricServiceManagementClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricServiceManagementClient, windows_core::IUnknown);
impl IFabricServiceManagementClient {
    pub unsafe fn BeginCreateService<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_SERVICE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCreateService)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCreateService<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndCreateService)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginCreateServiceFromTemplate<P0, P1, P2, P3>(
        &self,
        applicationname: P0,
        servicename: P1,
        servicetypename: P2,
        initializationdata: &[u8],
        timeoutmilliseconds: u32,
        callback: P3,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P2: windows_core::Param<windows_core::PCWSTR>,
        P3: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCreateServiceFromTemplate)(
            windows_core::Interface::as_raw(self),
            applicationname.param().abi(),
            servicename.param().abi(),
            servicetypename.param().abi(),
            initializationdata.len().try_into().unwrap(),
            core::mem::transmute(initializationdata.as_ptr()),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCreateServiceFromTemplate<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndCreateServiceFromTemplate)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginDeleteService<P0, P1>(
        &self,
        name: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeleteService)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeleteService<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeleteService)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetServiceDescription<P0, P1>(
        &self,
        name: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetServiceDescription)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceDescription<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricServiceDescriptionResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceDescription)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn RegisterServicePartitionResolutionChangeHandler<P0, P1>(
        &self,
        name: P0,
        keytype: super::FabricTypes::FABRIC_PARTITION_KEY_TYPE,
        partitionkey: *const core::ffi::c_void,
        callback: P1,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<IFabricServicePartitionResolutionChangeHandler>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).RegisterServicePartitionResolutionChangeHandler)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            keytype,
            partitionkey,
            callback.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn UnregisterServicePartitionResolutionChangeHandler(
        &self,
        callbackhandle: i64,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).UnregisterServicePartitionResolutionChangeHandler)(
            windows_core::Interface::as_raw(self),
            callbackhandle,
        )
        .ok()
    }
    pub unsafe fn BeginResolveServicePartition<P0, P1, P2>(
        &self,
        name: P0,
        partitionkeytype: super::FabricTypes::FABRIC_PARTITION_KEY_TYPE,
        partitionkey: *const core::ffi::c_void,
        previousresult: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<IFabricResolvedServicePartitionResult>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginResolveServicePartition)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            partitionkeytype,
            partitionkey,
            previousresult.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndResolveServicePartition<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricResolvedServicePartitionResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndResolveServicePartition)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricServiceManagementClient {}
unsafe impl Sync for IFabricServiceManagementClient {}
#[repr(C)]
pub struct IFabricServiceManagementClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginCreateService: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCreateService: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginCreateServiceFromTemplate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        super::FabricTypes::FABRIC_URI,
        windows_core::PCWSTR,
        u32,
        *const u8,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCreateServiceFromTemplate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginDeleteService: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeleteService: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetServiceDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceDescription: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RegisterServicePartitionResolutionChangeHandler:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            super::FabricTypes::FABRIC_URI,
            super::FabricTypes::FABRIC_PARTITION_KEY_TYPE,
            *const core::ffi::c_void,
            *mut core::ffi::c_void,
            *mut i64,
        ) -> windows_core::HRESULT,
    pub UnregisterServicePartitionResolutionChangeHandler:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
    pub BeginResolveServicePartition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        super::FabricTypes::FABRIC_PARTITION_KEY_TYPE,
        *const core::ffi::c_void,
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndResolveServicePartition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceManagementClient2,
    IFabricServiceManagementClient2_Vtbl,
    0x9933ed08_5d0c_4aed_bab6_f676bf5be8aa
);
impl core::ops::Deref for IFabricServiceManagementClient2 {
    type Target = IFabricServiceManagementClient;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceManagementClient2,
    windows_core::IUnknown,
    IFabricServiceManagementClient
);
impl IFabricServiceManagementClient2 {
    pub unsafe fn BeginGetServiceManifest<P0, P1, P2, P3>(
        &self,
        applicationtypename: P0,
        applicationtypeversion: P1,
        servicemanifestname: P2,
        timeoutmilliseconds: u32,
        callback: P3,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<windows_core::PCWSTR>,
        P3: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetServiceManifest)(
            windows_core::Interface::as_raw(self),
            applicationtypename.param().abi(),
            applicationtypeversion.param().abi(),
            servicemanifestname.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetServiceManifest<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetServiceManifest)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginUpdateService<P0, P1>(
        &self,
        name: P0,
        serviceupdatedescription: *const super::FabricTypes::FABRIC_SERVICE_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpdateService)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            serviceupdatedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpdateService<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUpdateService)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricServiceManagementClient2 {}
unsafe impl Sync for IFabricServiceManagementClient2 {}
#[repr(C)]
pub struct IFabricServiceManagementClient2_Vtbl {
    pub base__: IFabricServiceManagementClient_Vtbl,
    pub BeginGetServiceManifest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetServiceManifest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginUpdateService: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        *const super::FabricTypes::FABRIC_SERVICE_UPDATE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpdateService: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceManagementClient3,
    IFabricServiceManagementClient3_Vtbl,
    0x98ec1156_c249_4f66_8d7c_9a5fa88e8e6d
);
impl core::ops::Deref for IFabricServiceManagementClient3 {
    type Target = IFabricServiceManagementClient2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceManagementClient3,
    windows_core::IUnknown,
    IFabricServiceManagementClient,
    IFabricServiceManagementClient2
);
impl IFabricServiceManagementClient3 {
    pub unsafe fn BeginRemoveReplica<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_REMOVE_REPLICA_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRemoveReplica)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRemoveReplica<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRemoveReplica)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginRestartReplica<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_RESTART_REPLICA_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRestartReplica)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRestartReplica<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRestartReplica)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricServiceManagementClient3 {}
unsafe impl Sync for IFabricServiceManagementClient3 {}
#[repr(C)]
pub struct IFabricServiceManagementClient3_Vtbl {
    pub base__: IFabricServiceManagementClient2_Vtbl,
    pub BeginRemoveReplica: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REMOVE_REPLICA_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRemoveReplica: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRestartReplica: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_RESTART_REPLICA_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRestartReplica: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceManagementClient4,
    IFabricServiceManagementClient4_Vtbl,
    0x8180db27_7d0b_43b0_82e0_4a8e022fc238
);
impl core::ops::Deref for IFabricServiceManagementClient4 {
    type Target = IFabricServiceManagementClient3;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceManagementClient4,
    windows_core::IUnknown,
    IFabricServiceManagementClient,
    IFabricServiceManagementClient2,
    IFabricServiceManagementClient3
);
impl IFabricServiceManagementClient4 {
    pub unsafe fn BeginRegisterServiceNotificationFilter<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRegisterServiceNotificationFilter)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRegisterServiceNotificationFilter<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndRegisterServiceNotificationFilter)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn BeginUnregisterServiceNotificationFilter<P0>(
        &self,
        filterid: i64,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUnregisterServiceNotificationFilter)(
            windows_core::Interface::as_raw(self),
            filterid,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUnregisterServiceNotificationFilter<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUnregisterServiceNotificationFilter)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricServiceManagementClient4 {}
unsafe impl Sync for IFabricServiceManagementClient4 {}
#[repr(C)]
pub struct IFabricServiceManagementClient4_Vtbl {
    pub base__: IFabricServiceManagementClient3_Vtbl,
    pub BeginRegisterServiceNotificationFilter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndRegisterServiceNotificationFilter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    )
        -> windows_core::HRESULT,
    pub BeginUnregisterServiceNotificationFilter:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
            i64,
            u32,
            *mut core::ffi::c_void,
            *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT,
    pub EndUnregisterServiceNotificationFilter: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceManagementClient5,
    IFabricServiceManagementClient5_Vtbl,
    0xf9a70679_8ca3_4e27_9411_483e0c89b1fa
);
impl core::ops::Deref for IFabricServiceManagementClient5 {
    type Target = IFabricServiceManagementClient4;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceManagementClient5,
    windows_core::IUnknown,
    IFabricServiceManagementClient,
    IFabricServiceManagementClient2,
    IFabricServiceManagementClient3,
    IFabricServiceManagementClient4
);
impl IFabricServiceManagementClient5 {
    pub unsafe fn BeginDeleteService2<P0>(
        &self,
        deletedescription: *const super::FabricTypes::FABRIC_DELETE_SERVICE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeleteService2)(
            windows_core::Interface::as_raw(self),
            deletedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeleteService2<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeleteService2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricServiceManagementClient5 {}
unsafe impl Sync for IFabricServiceManagementClient5 {}
#[repr(C)]
pub struct IFabricServiceManagementClient5_Vtbl {
    pub base__: IFabricServiceManagementClient4_Vtbl,
    pub BeginDeleteService2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_DELETE_SERVICE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeleteService2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceManagementClient6,
    IFabricServiceManagementClient6_Vtbl,
    0x23e4ee1b_049a_48f5_8dd7_b601eace47de
);
impl core::ops::Deref for IFabricServiceManagementClient6 {
    type Target = IFabricServiceManagementClient5;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceManagementClient6,
    windows_core::IUnknown,
    IFabricServiceManagementClient,
    IFabricServiceManagementClient2,
    IFabricServiceManagementClient3,
    IFabricServiceManagementClient4,
    IFabricServiceManagementClient5
);
impl IFabricServiceManagementClient6 {
    pub unsafe fn BeginCreateServiceFromTemplate2<P0>(
        &self,
        servicefromtemplatedescription : *const super::FabricTypes:: FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCreateServiceFromTemplate2)(
            windows_core::Interface::as_raw(self),
            servicefromtemplatedescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCreateServiceFromTemplate2<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndCreateServiceFromTemplate2)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricServiceManagementClient6 {}
unsafe impl Sync for IFabricServiceManagementClient6 {}
#[repr(C)]
pub struct IFabricServiceManagementClient6_Vtbl {
    pub base__: IFabricServiceManagementClient5_Vtbl,
    pub BeginCreateServiceFromTemplate2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCreateServiceFromTemplate2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceNotification,
    IFabricServiceNotification_Vtbl,
    0x8222c825_08ad_4639_afce_a8988cbd6db3
);
impl core::ops::Deref for IFabricServiceNotification {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricServiceNotification, windows_core::IUnknown);
impl IFabricServiceNotification {
    pub unsafe fn get_Notification(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_NOTIFICATION {
        (windows_core::Interface::vtable(self).get_Notification)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn GetVersion(&self) -> windows_core::Result<IFabricServiceEndpointsVersion> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetVersion)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricServiceNotification {}
unsafe impl Sync for IFabricServiceNotification {}
#[repr(C)]
pub struct IFabricServiceNotification_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Notification:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_NOTIFICATION,
    pub GetVersion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceNotificationEventHandler,
    IFabricServiceNotificationEventHandler_Vtbl,
    0xa04b7e9a_daab_45d4_8da3_95ef3ab5dbac
);
impl core::ops::Deref for IFabricServiceNotificationEventHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServiceNotificationEventHandler,
    windows_core::IUnknown
);
impl IFabricServiceNotificationEventHandler {
    pub unsafe fn OnNotification<P0>(
        &self,
        __midl__ifabricservicenotificationeventhandler0000: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricServiceNotification>,
    {
        (windows_core::Interface::vtable(self).OnNotification)(
            windows_core::Interface::as_raw(self),
            __midl__ifabricservicenotificationeventhandler0000
                .param()
                .abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricServiceNotificationEventHandler {}
unsafe impl Sync for IFabricServiceNotificationEventHandler {}
#[repr(C)]
pub struct IFabricServiceNotificationEventHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnNotification: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServicePartitionResolutionChangeHandler,
    IFabricServicePartitionResolutionChangeHandler_Vtbl,
    0xf495715d_8e03_4232_b8d6_1227b39984fc
);
impl core::ops::Deref for IFabricServicePartitionResolutionChangeHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricServicePartitionResolutionChangeHandler,
    windows_core::IUnknown
);
impl IFabricServicePartitionResolutionChangeHandler {
    pub unsafe fn OnChange<P0, P1>(
        &self,
        source: P0,
        handlerid: i64,
        partition: P1,
        error: windows_core::HRESULT,
    ) where
        P0: windows_core::Param<IFabricServiceManagementClient>,
        P1: windows_core::Param<IFabricResolvedServicePartitionResult>,
    {
        (windows_core::Interface::vtable(self).OnChange)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            handlerid,
            partition.param().abi(),
            error,
        )
    }
}
unsafe impl Send for IFabricServicePartitionResolutionChangeHandler {}
unsafe impl Sync for IFabricServicePartitionResolutionChangeHandler {}
#[repr(C)]
pub struct IFabricServicePartitionResolutionChangeHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnChange: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        i64,
        *mut core::ffi::c_void,
        windows_core::HRESULT,
    ),
}
windows_core::imp::define_interface!(
    IFabricStartNodeResult,
    IFabricStartNodeResult_Vtbl,
    0x7e9f51a5_88ac_49b8_958d_329e3334802e
);
impl core::ops::Deref for IFabricStartNodeResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStartNodeResult, windows_core::IUnknown);
impl IFabricStartNodeResult {
    pub unsafe fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_NODE_RESULT {
        (windows_core::Interface::vtable(self).get_Result)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricStartNodeResult {}
unsafe impl Sync for IFabricStartNodeResult {}
#[repr(C)]
pub struct IFabricStartNodeResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Result: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    ) -> *mut super::FabricTypes::FABRIC_NODE_RESULT,
}
windows_core::imp::define_interface!(
    IFabricStopNodeResult,
    IFabricStopNodeResult_Vtbl,
    0x711d60a6_9623_476c_970c_83059a0b4d55
);
impl core::ops::Deref for IFabricStopNodeResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStopNodeResult, windows_core::IUnknown);
impl IFabricStopNodeResult {
    pub unsafe fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_NODE_RESULT {
        (windows_core::Interface::vtable(self).get_Result)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricStopNodeResult {}
unsafe impl Sync for IFabricStopNodeResult {}
#[repr(C)]
pub struct IFabricStopNodeResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Result: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    ) -> *mut super::FabricTypes::FABRIC_NODE_RESULT,
}
windows_core::imp::define_interface!(
    IFabricTestCommandStatusResult,
    IFabricTestCommandStatusResult_Vtbl,
    0x87798f5c_e600_493a_a926_16b6807378e6
);
impl core::ops::Deref for IFabricTestCommandStatusResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTestCommandStatusResult, windows_core::IUnknown);
impl IFabricTestCommandStatusResult {
    pub unsafe fn get_Result(&self) -> *mut super::FabricTypes::TEST_COMMAND_QUERY_RESULT_LIST {
        (windows_core::Interface::vtable(self).get_Result)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricTestCommandStatusResult {}
unsafe impl Sync for IFabricTestCommandStatusResult {}
#[repr(C)]
pub struct IFabricTestCommandStatusResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Result:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::TEST_COMMAND_QUERY_RESULT_LIST,
}
windows_core::imp::define_interface!(
    IFabricTestManagementClient,
    IFabricTestManagementClient_Vtbl,
    0x0df0f63a_4da0_44fe_81e8_f80cd28e9b28
);
impl core::ops::Deref for IFabricTestManagementClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTestManagementClient, windows_core::IUnknown);
impl IFabricTestManagementClient {
    pub unsafe fn BeginStartPartitionDataLoss<P0>(
        &self,
        invokedatalossdescription : *const super::FabricTypes:: FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStartPartitionDataLoss)(
            windows_core::Interface::as_raw(self),
            invokedatalossdescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStartPartitionDataLoss<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndStartPartitionDataLoss)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetPartitionDataLossProgress<P0>(
        &self,
        operationid: windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetPartitionDataLossProgress)(
            windows_core::Interface::as_raw(self),
            core::mem::transmute(operationid),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetPartitionDataLossProgress<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricPartitionDataLossProgressResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetPartitionDataLossProgress)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginStartPartitionQuorumLoss<P0>(
        &self,
        invokequorumlossdescription : *const super::FabricTypes:: FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStartPartitionQuorumLoss)(
            windows_core::Interface::as_raw(self),
            invokequorumlossdescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStartPartitionQuorumLoss<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndStartPartitionQuorumLoss)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetPartitionQuorumLossProgress<P0>(
        &self,
        operationid: windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetPartitionQuorumLossProgress)(
            windows_core::Interface::as_raw(self),
            core::mem::transmute(operationid),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetPartitionQuorumLossProgress<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricPartitionQuorumLossProgressResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetPartitionQuorumLossProgress)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginStartPartitionRestart<P0>(
        &self,
        restartpartitiondescription : *const super::FabricTypes:: FABRIC_START_PARTITION_RESTART_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStartPartitionRestart)(
            windows_core::Interface::as_raw(self),
            restartpartitiondescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStartPartitionRestart<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndStartPartitionRestart)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetPartitionRestartProgress<P0>(
        &self,
        operationid: windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetPartitionRestartProgress)(
            windows_core::Interface::as_raw(self),
            core::mem::transmute(operationid),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetPartitionRestartProgress<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricPartitionRestartProgressResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetPartitionRestartProgress)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetTestCommandStatusList<P0>(
        &self,
        operationid: *const super::FabricTypes::FABRIC_TEST_COMMAND_LIST_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetTestCommandStatusList)(
            windows_core::Interface::as_raw(self),
            operationid,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetTestCommandStatusList<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricTestCommandStatusResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetTestCommandStatusList)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginCancelTestCommand<P0>(
        &self,
        invokedatalossdescription : *const super::FabricTypes:: FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCancelTestCommand)(
            windows_core::Interface::as_raw(self),
            invokedatalossdescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCancelTestCommand<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndCancelTestCommand)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricTestManagementClient {}
unsafe impl Sync for IFabricTestManagementClient {}
#[repr(C)]
pub struct IFabricTestManagementClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginStartPartitionDataLoss: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStartPartitionDataLoss: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetPartitionDataLossProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::GUID,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetPartitionDataLossProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginStartPartitionQuorumLoss: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStartPartitionQuorumLoss: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetPartitionQuorumLossProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::GUID,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndGetPartitionQuorumLossProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginStartPartitionRestart: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_START_PARTITION_RESTART_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStartPartitionRestart: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetPartitionRestartProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::GUID,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetPartitionRestartProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetTestCommandStatusList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_TEST_COMMAND_LIST_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetTestCommandStatusList: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginCancelTestCommand: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCancelTestCommand: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricTestManagementClient2,
    IFabricTestManagementClient2_Vtbl,
    0x1222b1ff_ae51_43b3_bbdf_439e7f61ca1a
);
impl core::ops::Deref for IFabricTestManagementClient2 {
    type Target = IFabricTestManagementClient;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricTestManagementClient2,
    windows_core::IUnknown,
    IFabricTestManagementClient
);
impl IFabricTestManagementClient2 {
    pub unsafe fn BeginStartChaos<P0>(
        &self,
        restartpartitiondescription: *const super::FabricTypes::FABRIC_START_CHAOS_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStartChaos)(
            windows_core::Interface::as_raw(self),
            restartpartitiondescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStartChaos<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndStartChaos)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginStopChaos<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStopChaos)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStopChaos<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndStopChaos)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetChaosReport<P0>(
        &self,
        getchaosreportdescription: *const super::FabricTypes::FABRIC_GET_CHAOS_REPORT_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetChaosReport)(
            windows_core::Interface::as_raw(self),
            getchaosreportdescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetChaosReport<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricChaosReportResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetChaosReport)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricTestManagementClient2 {}
unsafe impl Sync for IFabricTestManagementClient2 {}
#[repr(C)]
pub struct IFabricTestManagementClient2_Vtbl {
    pub base__: IFabricTestManagementClient_Vtbl,
    pub BeginStartChaos: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_START_CHAOS_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStartChaos: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginStopChaos: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStopChaos: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetChaosReport: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_GET_CHAOS_REPORT_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetChaosReport: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricTestManagementClient3,
    IFabricTestManagementClient3_Vtbl,
    0xa4b94afd_0cb5_4010_8995_e58e9b6ca373
);
impl core::ops::Deref for IFabricTestManagementClient3 {
    type Target = IFabricTestManagementClient2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricTestManagementClient3,
    windows_core::IUnknown,
    IFabricTestManagementClient,
    IFabricTestManagementClient2
);
impl IFabricTestManagementClient3 {
    pub unsafe fn BeginStartNodeTransition<P0>(
        &self,
        description: *const super::FabricTypes::FABRIC_NODE_TRANSITION_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginStartNodeTransition)(
            windows_core::Interface::as_raw(self),
            description,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndStartNodeTransition<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndStartNodeTransition)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetNodeTransitionProgress<P0>(
        &self,
        operationid: windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetNodeTransitionProgress)(
            windows_core::Interface::as_raw(self),
            core::mem::transmute(operationid),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetNodeTransitionProgress<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricNodeTransitionProgressResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetNodeTransitionProgress)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricTestManagementClient3 {}
unsafe impl Sync for IFabricTestManagementClient3 {}
#[repr(C)]
pub struct IFabricTestManagementClient3_Vtbl {
    pub base__: IFabricTestManagementClient2_Vtbl,
    pub BeginStartNodeTransition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_NODE_TRANSITION_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndStartNodeTransition: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetNodeTransitionProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::GUID,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetNodeTransitionProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricTestManagementClient4,
    IFabricTestManagementClient4_Vtbl,
    0xb96aa7d4_acc0_4814_89dc_561b0cbb6028
);
impl core::ops::Deref for IFabricTestManagementClient4 {
    type Target = IFabricTestManagementClient3;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricTestManagementClient4,
    windows_core::IUnknown,
    IFabricTestManagementClient,
    IFabricTestManagementClient2,
    IFabricTestManagementClient3
);
impl IFabricTestManagementClient4 {
    pub unsafe fn BeginGetChaos<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetChaos)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetChaos<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricChaosDescriptionResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetChaos)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginGetChaosSchedule<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetChaosSchedule)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetChaosSchedule<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricChaosScheduleDescriptionResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetChaosSchedule)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginSetChaosSchedule<P0>(
        &self,
        setchaosscheduledescription : *const super::FabricTypes:: FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginSetChaosSchedule)(
            windows_core::Interface::as_raw(self),
            setchaosscheduledescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndSetChaosSchedule<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndSetChaosSchedule)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginGetChaosEvents<P0>(
        &self,
        chaoseventsdescription: *const super::FabricTypes::FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetChaosEvents)(
            windows_core::Interface::as_raw(self),
            chaoseventsdescription,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetChaosEvents<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricChaosEventsSegmentResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetChaosEvents)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricTestManagementClient4 {}
unsafe impl Sync for IFabricTestManagementClient4 {}
#[repr(C)]
pub struct IFabricTestManagementClient4_Vtbl {
    pub base__: IFabricTestManagementClient3_Vtbl,
    pub BeginGetChaos: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetChaos: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetChaosSchedule: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetChaosSchedule: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginSetChaosSchedule: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndSetChaosSchedule: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginGetChaosEvents: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetChaosEvents: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricUpgradeOrchestrationServiceStateResult,
    IFabricUpgradeOrchestrationServiceStateResult_Vtbl,
    0x413968aa_2eb7_4023_b9dc_0f2160b76a6d
);
impl core::ops::Deref for IFabricUpgradeOrchestrationServiceStateResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricUpgradeOrchestrationServiceStateResult,
    windows_core::IUnknown
);
impl IFabricUpgradeOrchestrationServiceStateResult {
    pub unsafe fn get_State(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE {
        (windows_core::Interface::vtable(self).get_State)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricUpgradeOrchestrationServiceStateResult {}
unsafe impl Sync for IFabricUpgradeOrchestrationServiceStateResult {}
#[repr(C)]
pub struct IFabricUpgradeOrchestrationServiceStateResult_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_State :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE , }
windows_core::imp::define_interface!(
    IFabricUpgradeProgressResult,
    IFabricUpgradeProgressResult_Vtbl,
    0x2adb07db_f7db_4621_9afc_daabe1e53bf8
);
impl core::ops::Deref for IFabricUpgradeProgressResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricUpgradeProgressResult, windows_core::IUnknown);
impl IFabricUpgradeProgressResult {
    pub unsafe fn get_TargetCodeVersion(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_TargetCodeVersion)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_TargetConfigVersion(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_TargetConfigVersion)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_UpgradeState(&self) -> super::FabricTypes::FABRIC_UPGRADE_STATE {
        (windows_core::Interface::vtable(self).get_UpgradeState)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn GetUpgradeDomains(
        &self,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION>
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetUpgradeDomains)(
            windows_core::Interface::as_raw(self),
            itemcount,
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetChangedUpgradeDomains<P0>(
        &self,
        previousprogress: P0,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION>
    where
        P0: windows_core::Param<IFabricUpgradeProgressResult>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetChangedUpgradeDomains)(
            windows_core::Interface::as_raw(self),
            previousprogress.param().abi(),
            itemcount,
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricUpgradeProgressResult {}
unsafe impl Sync for IFabricUpgradeProgressResult {}
#[repr(C)]
pub struct IFabricUpgradeProgressResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_TargetCodeVersion:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
    pub get_TargetConfigVersion:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
    pub get_UpgradeState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    )
        -> super::FabricTypes::FABRIC_UPGRADE_STATE,
    pub GetUpgradeDomains: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION,
    ) -> windows_core::HRESULT,
    pub GetChangedUpgradeDomains: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricUpgradeProgressResult2,
    IFabricUpgradeProgressResult2_Vtbl,
    0x9cc0aaf3_0f6c_40a3_85ac_38338dd36d75
);
impl core::ops::Deref for IFabricUpgradeProgressResult2 {
    type Target = IFabricUpgradeProgressResult;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricUpgradeProgressResult2,
    windows_core::IUnknown,
    IFabricUpgradeProgressResult
);
impl IFabricUpgradeProgressResult2 {
    pub unsafe fn get_RollingUpgradeMode(&self) -> super::FabricTypes::FABRIC_ROLLING_UPGRADE_MODE {
        (windows_core::Interface::vtable(self).get_RollingUpgradeMode)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_NextUpgradeDomain(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_NextUpgradeDomain)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricUpgradeProgressResult2 {}
unsafe impl Sync for IFabricUpgradeProgressResult2 {}
#[repr(C)]
pub struct IFabricUpgradeProgressResult2_Vtbl {
    pub base__: IFabricUpgradeProgressResult_Vtbl,
    pub get_RollingUpgradeMode:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_ROLLING_UPGRADE_MODE,
    pub get_NextUpgradeDomain:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
}
windows_core::imp::define_interface!(
    IFabricUpgradeProgressResult3,
    IFabricUpgradeProgressResult3_Vtbl,
    0xdc3346ef_d2ef_40c1_807b_1ca8d2388b47
);
impl core::ops::Deref for IFabricUpgradeProgressResult3 {
    type Target = IFabricUpgradeProgressResult2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricUpgradeProgressResult3,
    windows_core::IUnknown,
    IFabricUpgradeProgressResult,
    IFabricUpgradeProgressResult2
);
impl IFabricUpgradeProgressResult3 {
    pub unsafe fn get_UpgradeProgress(&self) -> *mut super::FabricTypes::FABRIC_UPGRADE_PROGRESS {
        (windows_core::Interface::vtable(self).get_UpgradeProgress)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricUpgradeProgressResult3 {}
unsafe impl Sync for IFabricUpgradeProgressResult3 {}
#[repr(C)]
pub struct IFabricUpgradeProgressResult3_Vtbl {
    pub base__: IFabricUpgradeProgressResult2_Vtbl,
    pub get_UpgradeProgress:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_UPGRADE_PROGRESS,
}
pub const FabricClient: windows_core::GUID =
    windows_core::GUID::from_u128(0x75f087fa_37f1_4984_b513_724da5b02197);
pub trait IFabricApplicationHealthResult_Impl: Sized {
    fn get_ApplicationHealth(&self) -> *mut super::FabricTypes::FABRIC_APPLICATION_HEALTH;
}
impl windows_core::RuntimeName for IFabricApplicationHealthResult {}
impl IFabricApplicationHealthResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationHealthResult_Vtbl
    where
        Identity: IFabricApplicationHealthResult_Impl,
    {
        unsafe extern "system" fn get_ApplicationHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_APPLICATION_HEALTH
        where
            Identity: IFabricApplicationHealthResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationHealthResult_Impl::get_ApplicationHealth(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ApplicationHealth: get_ApplicationHealth::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationHealthResult as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationManagementClient_Impl: Sized {
    fn BeginProvisionApplicationType(
        &self,
        applicationbuildpath: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndProvisionApplicationType(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginCreateApplication(
        &self,
        description: *const super::FabricTypes::FABRIC_APPLICATION_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCreateApplication(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginUpgradeApplication(
        &self,
        upgradedescription: *const super::FabricTypes::FABRIC_APPLICATION_UPGRADE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpgradeApplication(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetApplicationUpgradeProgress(
        &self,
        applicationname: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetApplicationUpgradeProgress(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricApplicationUpgradeProgressResult2>;
    fn BeginMoveNextApplicationUpgradeDomain(
        &self,
        progress: Option<&IFabricApplicationUpgradeProgressResult2>,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndMoveNextApplicationUpgradeDomain(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginDeleteApplication(
        &self,
        applicationname: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeleteApplication(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginUnprovisionApplicationType(
        &self,
        applicationtypename: &windows_core::PCWSTR,
        applicationtypeversion: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUnprovisionApplicationType(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricApplicationManagementClient {}
impl IFabricApplicationManagementClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationManagementClient_Vtbl
    where
        Identity: IFabricApplicationManagementClient_Impl,
    {
        unsafe extern "system" fn BeginProvisionApplicationType<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationbuildpath: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient_Impl::BeginProvisionApplicationType(
                this,
                core::mem::transmute(&applicationbuildpath),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProvisionApplicationType<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient_Impl::EndProvisionApplicationType(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginCreateApplication<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_APPLICATION_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient_Impl::BeginCreateApplication(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCreateApplication<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient_Impl::EndCreateApplication(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginUpgradeApplication<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            upgradedescription: *const super::FabricTypes::FABRIC_APPLICATION_UPGRADE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient_Impl::BeginUpgradeApplication(
                this,
                core::mem::transmute_copy(&upgradedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpgradeApplication<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient_Impl::EndUpgradeApplication(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetApplicationUpgradeProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationname: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient_Impl::BeginGetApplicationUpgradeProgress(
                this,
                core::mem::transmute_copy(&applicationname),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationUpgradeProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient_Impl::EndGetApplicationUpgradeProgress(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginMoveNextApplicationUpgradeDomain<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            progress: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient_Impl::BeginMoveNextApplicationUpgradeDomain(
                this,
                windows_core::from_raw_borrowed(&progress),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndMoveNextApplicationUpgradeDomain<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient_Impl::EndMoveNextApplicationUpgradeDomain(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginDeleteApplication<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationname: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient_Impl::BeginDeleteApplication(
                this,
                core::mem::transmute_copy(&applicationname),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeleteApplication<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient_Impl::EndDeleteApplication(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginUnprovisionApplicationType<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationtypename: windows_core::PCWSTR,
            applicationtypeversion: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient_Impl::BeginUnprovisionApplicationType(
                this,
                core::mem::transmute(&applicationtypename),
                core::mem::transmute(&applicationtypeversion),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUnprovisionApplicationType<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient_Impl::EndUnprovisionApplicationType(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginProvisionApplicationType: BeginProvisionApplicationType::<Identity, OFFSET>,
            EndProvisionApplicationType: EndProvisionApplicationType::<Identity, OFFSET>,
            BeginCreateApplication: BeginCreateApplication::<Identity, OFFSET>,
            EndCreateApplication: EndCreateApplication::<Identity, OFFSET>,
            BeginUpgradeApplication: BeginUpgradeApplication::<Identity, OFFSET>,
            EndUpgradeApplication: EndUpgradeApplication::<Identity, OFFSET>,
            BeginGetApplicationUpgradeProgress: BeginGetApplicationUpgradeProgress::<
                Identity,
                OFFSET,
            >,
            EndGetApplicationUpgradeProgress: EndGetApplicationUpgradeProgress::<Identity, OFFSET>,
            BeginMoveNextApplicationUpgradeDomain: BeginMoveNextApplicationUpgradeDomain::<
                Identity,
                OFFSET,
            >,
            EndMoveNextApplicationUpgradeDomain: EndMoveNextApplicationUpgradeDomain::<
                Identity,
                OFFSET,
            >,
            BeginDeleteApplication: BeginDeleteApplication::<Identity, OFFSET>,
            EndDeleteApplication: EndDeleteApplication::<Identity, OFFSET>,
            BeginUnprovisionApplicationType: BeginUnprovisionApplicationType::<Identity, OFFSET>,
            EndUnprovisionApplicationType: EndUnprovisionApplicationType::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationManagementClient10_Impl:
    Sized + IFabricApplicationManagementClient9_Impl
{
    fn BeginProvisionApplicationType3(
        &self,
        description: *const super::FabricTypes::FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndProvisionApplicationType3(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricApplicationManagementClient10 {}
impl IFabricApplicationManagementClient10_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationManagementClient10_Vtbl
    where
        Identity: IFabricApplicationManagementClient10_Impl,
    {
        unsafe extern "system" fn BeginProvisionApplicationType3<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description : *const super::FabricTypes:: FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient10_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient10_Impl::BeginProvisionApplicationType3(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProvisionApplicationType3<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient10_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient10_Impl::EndProvisionApplicationType3(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricApplicationManagementClient9_Vtbl::new::<Identity, OFFSET>(),
            BeginProvisionApplicationType3: BeginProvisionApplicationType3::<Identity, OFFSET>,
            EndProvisionApplicationType3: EndProvisionApplicationType3::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationManagementClient10 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient6 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient7 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient8 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient9 as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationManagementClient2_Impl:
    Sized + IFabricApplicationManagementClient_Impl
{
    fn BeginGetApplicationManifest(
        &self,
        applicationtypename: &windows_core::PCWSTR,
        applicationtypeversion: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetApplicationManifest(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn BeginMoveNextApplicationUpgradeDomain2(
        &self,
        applicationname: super::FabricTypes::FABRIC_URI,
        nextupgradedomain: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndMoveNextApplicationUpgradeDomain2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricApplicationManagementClient2 {}
impl IFabricApplicationManagementClient2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationManagementClient2_Vtbl
    where
        Identity: IFabricApplicationManagementClient2_Impl,
    {
        unsafe extern "system" fn BeginGetApplicationManifest<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationtypename: windows_core::PCWSTR,
            applicationtypeversion: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient2_Impl::BeginGetApplicationManifest(
                this,
                core::mem::transmute(&applicationtypename),
                core::mem::transmute(&applicationtypeversion),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationManifest<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient2_Impl::EndGetApplicationManifest(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginMoveNextApplicationUpgradeDomain2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationname: super::FabricTypes::FABRIC_URI,
            nextupgradedomain: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient2_Impl::BeginMoveNextApplicationUpgradeDomain2(
                this,
                core::mem::transmute_copy(&applicationname),
                core::mem::transmute(&nextupgradedomain),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndMoveNextApplicationUpgradeDomain2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient2_Impl::EndMoveNextApplicationUpgradeDomain2(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricApplicationManagementClient_Vtbl::new::<Identity, OFFSET>(),
            BeginGetApplicationManifest: BeginGetApplicationManifest::<Identity, OFFSET>,
            EndGetApplicationManifest: EndGetApplicationManifest::<Identity, OFFSET>,
            BeginMoveNextApplicationUpgradeDomain2: BeginMoveNextApplicationUpgradeDomain2::<
                Identity,
                OFFSET,
            >,
            EndMoveNextApplicationUpgradeDomain2: EndMoveNextApplicationUpgradeDomain2::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationManagementClient3_Impl:
    Sized + IFabricApplicationManagementClient2_Impl
{
    fn BeginUpdateApplicationUpgrade(
        &self,
        description: *const super::FabricTypes::FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpdateApplicationUpgrade(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginRestartDeployedCodePackage(
        &self,
        restartcodepackagedescription : *const super::FabricTypes:: FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRestartDeployedCodePackage(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn CopyApplicationPackage(
        &self,
        imagestoreconnectionstring: &windows_core::PCWSTR,
        applicationpackagepath: &windows_core::PCWSTR,
        applicationpackagepathinimagestore: &windows_core::PCWSTR,
    ) -> windows_core::Result<()>;
    fn RemoveApplicationPackage(
        &self,
        imagestoreconnectionstring: &windows_core::PCWSTR,
        applicationpackagepathinimagestore: &windows_core::PCWSTR,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricApplicationManagementClient3 {}
impl IFabricApplicationManagementClient3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationManagementClient3_Vtbl
    where
        Identity: IFabricApplicationManagementClient3_Impl,
    {
        unsafe extern "system" fn BeginUpdateApplicationUpgrade<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient3_Impl::BeginUpdateApplicationUpgrade(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpdateApplicationUpgrade<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient3_Impl::EndUpdateApplicationUpgrade(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginRestartDeployedCodePackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            restartcodepackagedescription : *const super::FabricTypes:: FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient3_Impl::BeginRestartDeployedCodePackage(
                this,
                core::mem::transmute_copy(&restartcodepackagedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRestartDeployedCodePackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient3_Impl::EndRestartDeployedCodePackage(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn CopyApplicationPackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            imagestoreconnectionstring: windows_core::PCWSTR,
            applicationpackagepath: windows_core::PCWSTR,
            applicationpackagepathinimagestore: windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient3_Impl::CopyApplicationPackage(
                this,
                core::mem::transmute(&imagestoreconnectionstring),
                core::mem::transmute(&applicationpackagepath),
                core::mem::transmute(&applicationpackagepathinimagestore),
            )
            .into()
        }
        unsafe extern "system" fn RemoveApplicationPackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            imagestoreconnectionstring: windows_core::PCWSTR,
            applicationpackagepathinimagestore: windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient3_Impl::RemoveApplicationPackage(
                this,
                core::mem::transmute(&imagestoreconnectionstring),
                core::mem::transmute(&applicationpackagepathinimagestore),
            )
            .into()
        }
        Self {
            base__: IFabricApplicationManagementClient2_Vtbl::new::<Identity, OFFSET>(),
            BeginUpdateApplicationUpgrade: BeginUpdateApplicationUpgrade::<Identity, OFFSET>,
            EndUpdateApplicationUpgrade: EndUpdateApplicationUpgrade::<Identity, OFFSET>,
            BeginRestartDeployedCodePackage: BeginRestartDeployedCodePackage::<Identity, OFFSET>,
            EndRestartDeployedCodePackage: EndRestartDeployedCodePackage::<Identity, OFFSET>,
            CopyApplicationPackage: CopyApplicationPackage::<Identity, OFFSET>,
            RemoveApplicationPackage: RemoveApplicationPackage::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient2 as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationManagementClient4_Impl:
    Sized + IFabricApplicationManagementClient3_Impl
{
    fn BeginDeployServicePackageToNode(
        &self,
        applicationtypename: &windows_core::PCWSTR,
        applicationtypeversion: &windows_core::PCWSTR,
        servicemanifestname: &windows_core::PCWSTR,
        sharingpolicy: *const super::FabricTypes::FABRIC_PACKAGE_SHARING_POLICY_LIST,
        nodename: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeployServicePackageToNode(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricApplicationManagementClient4 {}
impl IFabricApplicationManagementClient4_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationManagementClient4_Vtbl
    where
        Identity: IFabricApplicationManagementClient4_Impl,
    {
        unsafe extern "system" fn BeginDeployServicePackageToNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationtypename: windows_core::PCWSTR,
            applicationtypeversion: windows_core::PCWSTR,
            servicemanifestname: windows_core::PCWSTR,
            sharingpolicy: *const super::FabricTypes::FABRIC_PACKAGE_SHARING_POLICY_LIST,
            nodename: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient4_Impl::BeginDeployServicePackageToNode(
                this,
                core::mem::transmute(&applicationtypename),
                core::mem::transmute(&applicationtypeversion),
                core::mem::transmute(&servicemanifestname),
                core::mem::transmute_copy(&sharingpolicy),
                core::mem::transmute(&nodename),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeployServicePackageToNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient4_Impl::EndDeployServicePackageToNode(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricApplicationManagementClient3_Vtbl::new::<Identity, OFFSET>(),
            BeginDeployServicePackageToNode: BeginDeployServicePackageToNode::<Identity, OFFSET>,
            EndDeployServicePackageToNode: EndDeployServicePackageToNode::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient3 as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationManagementClient5_Impl:
    Sized + IFabricApplicationManagementClient4_Impl
{
    fn BeginRollbackApplicationUpgrade(
        &self,
        applicationname: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRollbackApplicationUpgrade(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricApplicationManagementClient5 {}
impl IFabricApplicationManagementClient5_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationManagementClient5_Vtbl
    where
        Identity: IFabricApplicationManagementClient5_Impl,
    {
        unsafe extern "system" fn BeginRollbackApplicationUpgrade<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationname: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient5_Impl::BeginRollbackApplicationUpgrade(
                this,
                core::mem::transmute_copy(&applicationname),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRollbackApplicationUpgrade<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient5_Impl::EndRollbackApplicationUpgrade(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricApplicationManagementClient4_Vtbl::new::<Identity, OFFSET>(),
            BeginRollbackApplicationUpgrade: BeginRollbackApplicationUpgrade::<Identity, OFFSET>,
            EndRollbackApplicationUpgrade: EndRollbackApplicationUpgrade::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient4 as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationManagementClient6_Impl:
    Sized + IFabricApplicationManagementClient5_Impl
{
    fn BeginUpdateApplication(
        &self,
        applicationupdatedescription : *const super::FabricTypes:: FABRIC_APPLICATION_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpdateApplication(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricApplicationManagementClient6 {}
impl IFabricApplicationManagementClient6_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationManagementClient6_Vtbl
    where
        Identity: IFabricApplicationManagementClient6_Impl,
    {
        unsafe extern "system" fn BeginUpdateApplication<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationupdatedescription : *const super::FabricTypes:: FABRIC_APPLICATION_UPDATE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient6_Impl::BeginUpdateApplication(
                this,
                core::mem::transmute_copy(&applicationupdatedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpdateApplication<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient6_Impl::EndUpdateApplication(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricApplicationManagementClient5_Vtbl::new::<Identity, OFFSET>(),
            BeginUpdateApplication: BeginUpdateApplication::<Identity, OFFSET>,
            EndUpdateApplication: EndUpdateApplication::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationManagementClient6 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient5 as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationManagementClient7_Impl:
    Sized + IFabricApplicationManagementClient6_Impl
{
    fn BeginDeleteApplication2(
        &self,
        deletedescription: *const super::FabricTypes::FABRIC_DELETE_APPLICATION_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeleteApplication2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricApplicationManagementClient7 {}
impl IFabricApplicationManagementClient7_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationManagementClient7_Vtbl
    where
        Identity: IFabricApplicationManagementClient7_Impl,
    {
        unsafe extern "system" fn BeginDeleteApplication2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            deletedescription: *const super::FabricTypes::FABRIC_DELETE_APPLICATION_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient7_Impl::BeginDeleteApplication2(
                this,
                core::mem::transmute_copy(&deletedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeleteApplication2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient7_Impl::EndDeleteApplication2(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricApplicationManagementClient6_Vtbl::new::<Identity, OFFSET>(),
            BeginDeleteApplication2: BeginDeleteApplication2::<Identity, OFFSET>,
            EndDeleteApplication2: EndDeleteApplication2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationManagementClient7 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient6 as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationManagementClient8_Impl:
    Sized + IFabricApplicationManagementClient7_Impl
{
    fn BeginProvisionApplicationType2(
        &self,
        description: *const super::FabricTypes::FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndProvisionApplicationType2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricApplicationManagementClient8 {}
impl IFabricApplicationManagementClient8_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationManagementClient8_Vtbl
    where
        Identity: IFabricApplicationManagementClient8_Impl,
    {
        unsafe extern "system" fn BeginProvisionApplicationType2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient8_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient8_Impl::BeginProvisionApplicationType2(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProvisionApplicationType2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient8_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient8_Impl::EndProvisionApplicationType2(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricApplicationManagementClient7_Vtbl::new::<Identity, OFFSET>(),
            BeginProvisionApplicationType2: BeginProvisionApplicationType2::<Identity, OFFSET>,
            EndProvisionApplicationType2: EndProvisionApplicationType2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationManagementClient8 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient6 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient7 as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationManagementClient9_Impl:
    Sized + IFabricApplicationManagementClient8_Impl
{
    fn BeginUnprovisionApplicationType2(
        &self,
        description: *const super::FabricTypes::FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUnprovisionApplicationType2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricApplicationManagementClient9 {}
impl IFabricApplicationManagementClient9_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationManagementClient9_Vtbl
    where
        Identity: IFabricApplicationManagementClient9_Impl,
    {
        unsafe extern "system" fn BeginUnprovisionApplicationType2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient9_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationManagementClient9_Impl::BeginUnprovisionApplicationType2(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUnprovisionApplicationType2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationManagementClient9_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationManagementClient9_Impl::EndUnprovisionApplicationType2(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricApplicationManagementClient8_Vtbl::new::<Identity, OFFSET>(),
            BeginUnprovisionApplicationType2: BeginUnprovisionApplicationType2::<Identity, OFFSET>,
            EndUnprovisionApplicationType2: EndUnprovisionApplicationType2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationManagementClient9 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient6 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient7 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationManagementClient8 as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationUpgradeProgressResult_Impl: Sized {
    fn get_ApplicationName(&self) -> super::FabricTypes::FABRIC_URI;
    fn get_ApplicationTypeName(&self) -> windows_core::PCWSTR;
    fn get_TargetApplicationTypeVersion(&self) -> windows_core::PCWSTR;
    fn get_UpgradeState(&self) -> super::FabricTypes::FABRIC_APPLICATION_UPGRADE_STATE;
    fn GetUpgradeDomains(
        &self,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION>;
    fn GetChangedUpgradeDomains(
        &self,
        previousprogress: Option<&IFabricApplicationUpgradeProgressResult>,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION>;
}
impl windows_core::RuntimeName for IFabricApplicationUpgradeProgressResult {}
impl IFabricApplicationUpgradeProgressResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationUpgradeProgressResult_Vtbl
    where
        Identity: IFabricApplicationUpgradeProgressResult_Impl,
    {
        unsafe extern "system" fn get_ApplicationName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_URI
        where
            Identity: IFabricApplicationUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationUpgradeProgressResult_Impl::get_ApplicationName(this)
        }
        unsafe extern "system" fn get_ApplicationTypeName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricApplicationUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationUpgradeProgressResult_Impl::get_ApplicationTypeName(this)
        }
        unsafe extern "system" fn get_TargetApplicationTypeVersion<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricApplicationUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationUpgradeProgressResult_Impl::get_TargetApplicationTypeVersion(this)
        }
        unsafe extern "system" fn get_UpgradeState<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_APPLICATION_UPGRADE_STATE
        where
            Identity: IFabricApplicationUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationUpgradeProgressResult_Impl::get_UpgradeState(this)
        }
        unsafe extern "system" fn GetUpgradeDomains<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            itemcount: *mut u32,
            buffereditems: *mut *mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationUpgradeProgressResult_Impl::GetUpgradeDomains(
                this,
                core::mem::transmute_copy(&itemcount),
            ) {
                Ok(ok__) => {
                    buffereditems.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetChangedUpgradeDomains<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            previousprogress: *mut core::ffi::c_void,
            itemcount: *mut u32,
            buffereditems: *mut *mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricApplicationUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricApplicationUpgradeProgressResult_Impl::GetChangedUpgradeDomains(
                this,
                windows_core::from_raw_borrowed(&previousprogress),
                core::mem::transmute_copy(&itemcount),
            ) {
                Ok(ok__) => {
                    buffereditems.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ApplicationName: get_ApplicationName::<Identity, OFFSET>,
            get_ApplicationTypeName: get_ApplicationTypeName::<Identity, OFFSET>,
            get_TargetApplicationTypeVersion: get_TargetApplicationTypeVersion::<Identity, OFFSET>,
            get_UpgradeState: get_UpgradeState::<Identity, OFFSET>,
            GetUpgradeDomains: GetUpgradeDomains::<Identity, OFFSET>,
            GetChangedUpgradeDomains: GetChangedUpgradeDomains::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationUpgradeProgressResult as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationUpgradeProgressResult2_Impl:
    Sized + IFabricApplicationUpgradeProgressResult_Impl
{
    fn get_RollingUpgradeMode(&self) -> super::FabricTypes::FABRIC_ROLLING_UPGRADE_MODE;
    fn get_NextUpgradeDomain(&self) -> windows_core::PCWSTR;
}
impl windows_core::RuntimeName for IFabricApplicationUpgradeProgressResult2 {}
impl IFabricApplicationUpgradeProgressResult2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationUpgradeProgressResult2_Vtbl
    where
        Identity: IFabricApplicationUpgradeProgressResult2_Impl,
    {
        unsafe extern "system" fn get_RollingUpgradeMode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_ROLLING_UPGRADE_MODE
        where
            Identity: IFabricApplicationUpgradeProgressResult2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationUpgradeProgressResult2_Impl::get_RollingUpgradeMode(this)
        }
        unsafe extern "system" fn get_NextUpgradeDomain<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricApplicationUpgradeProgressResult2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationUpgradeProgressResult2_Impl::get_NextUpgradeDomain(this)
        }
        Self {
            base__: IFabricApplicationUpgradeProgressResult_Vtbl::new::<Identity, OFFSET>(),
            get_RollingUpgradeMode: get_RollingUpgradeMode::<Identity, OFFSET>,
            get_NextUpgradeDomain: get_NextUpgradeDomain::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationUpgradeProgressResult2 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationUpgradeProgressResult as windows_core::Interface>::IID
    }
}
pub trait IFabricApplicationUpgradeProgressResult3_Impl:
    Sized + IFabricApplicationUpgradeProgressResult2_Impl
{
    fn get_UpgradeProgress(&self) -> *mut super::FabricTypes::FABRIC_APPLICATION_UPGRADE_PROGRESS;
}
impl windows_core::RuntimeName for IFabricApplicationUpgradeProgressResult3 {}
impl IFabricApplicationUpgradeProgressResult3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricApplicationUpgradeProgressResult3_Vtbl
    where
        Identity: IFabricApplicationUpgradeProgressResult3_Impl,
    {
        unsafe extern "system" fn get_UpgradeProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_APPLICATION_UPGRADE_PROGRESS
        where
            Identity: IFabricApplicationUpgradeProgressResult3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricApplicationUpgradeProgressResult3_Impl::get_UpgradeProgress(this)
        }
        Self {
            base__: IFabricApplicationUpgradeProgressResult2_Vtbl::new::<Identity, OFFSET>(),
            get_UpgradeProgress: get_UpgradeProgress::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricApplicationUpgradeProgressResult3 as windows_core::Interface>::IID
            || iid == &<IFabricApplicationUpgradeProgressResult as windows_core::Interface>::IID
            || iid == &<IFabricApplicationUpgradeProgressResult2 as windows_core::Interface>::IID
    }
}
pub trait IFabricChaosDescriptionResult_Impl: Sized {
    fn get_ChaosDescriptionResult(&self) -> *mut super::FabricTypes::FABRIC_CHAOS_DESCRIPTION;
}
impl windows_core::RuntimeName for IFabricChaosDescriptionResult {}
impl IFabricChaosDescriptionResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricChaosDescriptionResult_Vtbl
    where
        Identity: IFabricChaosDescriptionResult_Impl,
    {
        unsafe extern "system" fn get_ChaosDescriptionResult<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CHAOS_DESCRIPTION
        where
            Identity: IFabricChaosDescriptionResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricChaosDescriptionResult_Impl::get_ChaosDescriptionResult(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ChaosDescriptionResult: get_ChaosDescriptionResult::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricChaosDescriptionResult as windows_core::Interface>::IID
    }
}
pub trait IFabricChaosEventsSegmentResult_Impl: Sized {
    fn get_ChaosEventsSegmentResult(&self) -> *mut super::FabricTypes::FABRIC_CHAOS_EVENTS_SEGMENT;
}
impl windows_core::RuntimeName for IFabricChaosEventsSegmentResult {}
impl IFabricChaosEventsSegmentResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricChaosEventsSegmentResult_Vtbl
    where
        Identity: IFabricChaosEventsSegmentResult_Impl,
    {
        unsafe extern "system" fn get_ChaosEventsSegmentResult<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CHAOS_EVENTS_SEGMENT
        where
            Identity: IFabricChaosEventsSegmentResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricChaosEventsSegmentResult_Impl::get_ChaosEventsSegmentResult(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ChaosEventsSegmentResult: get_ChaosEventsSegmentResult::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricChaosEventsSegmentResult as windows_core::Interface>::IID
    }
}
pub trait IFabricChaosReportResult_Impl: Sized {
    fn get_ChaosReportResult(&self) -> *mut super::FabricTypes::FABRIC_CHAOS_REPORT;
}
impl windows_core::RuntimeName for IFabricChaosReportResult {}
impl IFabricChaosReportResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricChaosReportResult_Vtbl
    where
        Identity: IFabricChaosReportResult_Impl,
    {
        unsafe extern "system" fn get_ChaosReportResult<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CHAOS_REPORT
        where
            Identity: IFabricChaosReportResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricChaosReportResult_Impl::get_ChaosReportResult(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ChaosReportResult: get_ChaosReportResult::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricChaosReportResult as windows_core::Interface>::IID
    }
}
pub trait IFabricChaosScheduleDescriptionResult_Impl: Sized {
    fn get_ChaosScheduleDescriptionResult(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_CHAOS_SCHEDULE_DESCRIPTION;
}
impl windows_core::RuntimeName for IFabricChaosScheduleDescriptionResult {}
impl IFabricChaosScheduleDescriptionResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricChaosScheduleDescriptionResult_Vtbl
    where
        Identity: IFabricChaosScheduleDescriptionResult_Impl,
    {
        unsafe extern "system" fn get_ChaosScheduleDescriptionResult<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CHAOS_SCHEDULE_DESCRIPTION
        where
            Identity: IFabricChaosScheduleDescriptionResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricChaosScheduleDescriptionResult_Impl::get_ChaosScheduleDescriptionResult(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ChaosScheduleDescriptionResult: get_ChaosScheduleDescriptionResult::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricChaosScheduleDescriptionResult as windows_core::Interface>::IID
    }
}
pub trait IFabricClientConnectionEventHandler_Impl: Sized {
    fn OnConnected(
        &self,
        __midl__ifabricclientconnectioneventhandler0000: Option<&IFabricGatewayInformationResult>,
    ) -> windows_core::Result<()>;
    fn OnDisconnected(
        &self,
        __midl__ifabricclientconnectioneventhandler0001: Option<&IFabricGatewayInformationResult>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricClientConnectionEventHandler {}
impl IFabricClientConnectionEventHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClientConnectionEventHandler_Vtbl
    where
        Identity: IFabricClientConnectionEventHandler_Impl,
    {
        unsafe extern "system" fn OnConnected<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            __midl__ifabricclientconnectioneventhandler0000: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClientConnectionEventHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClientConnectionEventHandler_Impl::OnConnected(
                this,
                windows_core::from_raw_borrowed(&__midl__ifabricclientconnectioneventhandler0000),
            )
            .into()
        }
        unsafe extern "system" fn OnDisconnected<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            __midl__ifabricclientconnectioneventhandler0001: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClientConnectionEventHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClientConnectionEventHandler_Impl::OnDisconnected(
                this,
                windows_core::from_raw_borrowed(&__midl__ifabricclientconnectioneventhandler0001),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnConnected: OnConnected::<Identity, OFFSET>,
            OnDisconnected: OnDisconnected::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClientConnectionEventHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricClientConnectionEventHandler2_Impl:
    Sized + IFabricClientConnectionEventHandler_Impl
{
    fn OnClaimsRetrieval(
        &self,
        metadata: *const super::FabricTypes::FABRIC_CLAIMS_RETRIEVAL_METADATA,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
}
impl windows_core::RuntimeName for IFabricClientConnectionEventHandler2 {}
impl IFabricClientConnectionEventHandler2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClientConnectionEventHandler2_Vtbl
    where
        Identity: IFabricClientConnectionEventHandler2_Impl,
    {
        unsafe extern "system" fn OnClaimsRetrieval<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            metadata: *const super::FabricTypes::FABRIC_CLAIMS_RETRIEVAL_METADATA,
            token: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClientConnectionEventHandler2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClientConnectionEventHandler2_Impl::OnClaimsRetrieval(
                this,
                core::mem::transmute_copy(&metadata),
            ) {
                Ok(ok__) => {
                    token.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricClientConnectionEventHandler_Vtbl::new::<Identity, OFFSET>(),
            OnClaimsRetrieval: OnClaimsRetrieval::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClientConnectionEventHandler2 as windows_core::Interface>::IID
            || iid == &<IFabricClientConnectionEventHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricClientSettings_Impl: Sized {
    fn SetSecurityCredentials(
        &self,
        securitycredentials: *const super::FabricTypes::FABRIC_SECURITY_CREDENTIALS,
    ) -> windows_core::Result<()>;
    fn SetKeepAlive(&self, keepaliveintervalinseconds: u32) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricClientSettings {}
impl IFabricClientSettings_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClientSettings_Vtbl
    where
        Identity: IFabricClientSettings_Impl,
    {
        unsafe extern "system" fn SetSecurityCredentials<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            securitycredentials: *const super::FabricTypes::FABRIC_SECURITY_CREDENTIALS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClientSettings_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClientSettings_Impl::SetSecurityCredentials(
                this,
                core::mem::transmute_copy(&securitycredentials),
            )
            .into()
        }
        unsafe extern "system" fn SetKeepAlive<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            keepaliveintervalinseconds: u32,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClientSettings_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClientSettings_Impl::SetKeepAlive(
                this,
                core::mem::transmute_copy(&keepaliveintervalinseconds),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            SetSecurityCredentials: SetSecurityCredentials::<Identity, OFFSET>,
            SetKeepAlive: SetKeepAlive::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClientSettings as windows_core::Interface>::IID
    }
}
pub trait IFabricClientSettings2_Impl: Sized + IFabricClientSettings_Impl {
    fn GetSettings(&self) -> windows_core::Result<IFabricClientSettingsResult>;
    fn SetSettings(
        &self,
        fabricclientsettings: *const super::FabricTypes::FABRIC_CLIENT_SETTINGS,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricClientSettings2 {}
impl IFabricClientSettings2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClientSettings2_Vtbl
    where
        Identity: IFabricClientSettings2_Impl,
    {
        unsafe extern "system" fn GetSettings<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClientSettings2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClientSettings2_Impl::GetSettings(this) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSettings<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            fabricclientsettings: *const super::FabricTypes::FABRIC_CLIENT_SETTINGS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClientSettings2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClientSettings2_Impl::SetSettings(
                this,
                core::mem::transmute_copy(&fabricclientsettings),
            )
            .into()
        }
        Self {
            base__: IFabricClientSettings_Vtbl::new::<Identity, OFFSET>(),
            GetSettings: GetSettings::<Identity, OFFSET>,
            SetSettings: SetSettings::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClientSettings2 as windows_core::Interface>::IID
            || iid == &<IFabricClientSettings as windows_core::Interface>::IID
    }
}
pub trait IFabricClientSettingsResult_Impl: Sized {
    fn get_Settings(&self) -> *mut super::FabricTypes::FABRIC_CLIENT_SETTINGS;
}
impl windows_core::RuntimeName for IFabricClientSettingsResult {}
impl IFabricClientSettingsResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClientSettingsResult_Vtbl
    where
        Identity: IFabricClientSettingsResult_Impl,
    {
        unsafe extern "system" fn get_Settings<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CLIENT_SETTINGS
        where
            Identity: IFabricClientSettingsResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClientSettingsResult_Impl::get_Settings(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Settings: get_Settings::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClientSettingsResult as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterHealthResult_Impl: Sized {
    fn get_ClusterHealth(&self) -> *mut super::FabricTypes::FABRIC_CLUSTER_HEALTH;
}
impl windows_core::RuntimeName for IFabricClusterHealthResult {}
impl IFabricClusterHealthResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterHealthResult_Vtbl
    where
        Identity: IFabricClusterHealthResult_Impl,
    {
        unsafe extern "system" fn get_ClusterHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CLUSTER_HEALTH
        where
            Identity: IFabricClusterHealthResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterHealthResult_Impl::get_ClusterHealth(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ClusterHealth: get_ClusterHealth::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterHealthResult as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterManagementClient_Impl: Sized {
    fn BeginNodeStateRemoved(
        &self,
        nodename: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndNodeStateRemoved(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginRecoverPartitions(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRecoverPartitions(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricClusterManagementClient {}
impl IFabricClusterManagementClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterManagementClient_Vtbl
    where
        Identity: IFabricClusterManagementClient_Impl,
    {
        unsafe extern "system" fn BeginNodeStateRemoved<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            nodename: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient_Impl::BeginNodeStateRemoved(
                this,
                core::mem::transmute(&nodename),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndNodeStateRemoved<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient_Impl::EndNodeStateRemoved(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginRecoverPartitions<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient_Impl::BeginRecoverPartitions(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRecoverPartitions<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient_Impl::EndRecoverPartitions(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginNodeStateRemoved: BeginNodeStateRemoved::<Identity, OFFSET>,
            EndNodeStateRemoved: EndNodeStateRemoved::<Identity, OFFSET>,
            BeginRecoverPartitions: BeginRecoverPartitions::<Identity, OFFSET>,
            EndRecoverPartitions: EndRecoverPartitions::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterManagementClient10_Impl:
    Sized + IFabricClusterManagementClient9_Impl
{
    fn BeginGetClusterConfiguration2(
        &self,
        apiversion: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetClusterConfiguration2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
}
impl windows_core::RuntimeName for IFabricClusterManagementClient10 {}
impl IFabricClusterManagementClient10_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterManagementClient10_Vtbl
    where
        Identity: IFabricClusterManagementClient10_Impl,
    {
        unsafe extern "system" fn BeginGetClusterConfiguration2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            apiversion: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient10_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient10_Impl::BeginGetClusterConfiguration2(
                this,
                core::mem::transmute(&apiversion),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetClusterConfiguration2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient10_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient10_Impl::EndGetClusterConfiguration2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricClusterManagementClient9_Vtbl::new::<Identity, OFFSET>(),
            BeginGetClusterConfiguration2: BeginGetClusterConfiguration2::<Identity, OFFSET>,
            EndGetClusterConfiguration2: EndGetClusterConfiguration2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterManagementClient10 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient6 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient7 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient8 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient9 as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterManagementClient2_Impl:
    Sized + IFabricClusterManagementClient_Impl
{
    fn BeginDeactivateNode(
        &self,
        nodename: &windows_core::PCWSTR,
        intent: super::FabricTypes::FABRIC_NODE_DEACTIVATION_INTENT,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeactivateNode(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginActivateNode(
        &self,
        nodename: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndActivateNode(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginProvisionFabric(
        &self,
        codefilepath: &windows_core::PCWSTR,
        clustermanifestfilepath: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndProvisionFabric(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginUpgradeFabric(
        &self,
        upgradedescription: *const super::FabricTypes::FABRIC_UPGRADE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpgradeFabric(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetFabricUpgradeProgress(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetFabricUpgradeProgress(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricUpgradeProgressResult2>;
    fn BeginMoveNextFabricUpgradeDomain(
        &self,
        progress: Option<&IFabricUpgradeProgressResult2>,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndMoveNextFabricUpgradeDomain(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginMoveNextFabricUpgradeDomain2(
        &self,
        nextupgradedomain: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndMoveNextFabricUpgradeDomain2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginUnprovisionFabric(
        &self,
        codeversion: &windows_core::PCWSTR,
        configversion: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUnprovisionFabric(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetClusterManifest(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetClusterManifest(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn BeginRecoverPartition(
        &self,
        partitionid: &windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRecoverPartition(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginRecoverServicePartitions(
        &self,
        servicename: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRecoverServicePartitions(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginRecoverSystemPartitions(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRecoverSystemPartitions(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricClusterManagementClient2 {}
impl IFabricClusterManagementClient2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterManagementClient2_Vtbl
    where
        Identity: IFabricClusterManagementClient2_Impl,
    {
        unsafe extern "system" fn BeginDeactivateNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            nodename: windows_core::PCWSTR,
            intent: super::FabricTypes::FABRIC_NODE_DEACTIVATION_INTENT,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginDeactivateNode(
                this,
                core::mem::transmute(&nodename),
                core::mem::transmute_copy(&intent),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeactivateNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient2_Impl::EndDeactivateNode(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginActivateNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            nodename: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginActivateNode(
                this,
                core::mem::transmute(&nodename),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndActivateNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient2_Impl::EndActivateNode(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginProvisionFabric<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            codefilepath: windows_core::PCWSTR,
            clustermanifestfilepath: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginProvisionFabric(
                this,
                core::mem::transmute(&codefilepath),
                core::mem::transmute(&clustermanifestfilepath),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProvisionFabric<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient2_Impl::EndProvisionFabric(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginUpgradeFabric<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            upgradedescription: *const super::FabricTypes::FABRIC_UPGRADE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginUpgradeFabric(
                this,
                core::mem::transmute_copy(&upgradedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpgradeFabric<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient2_Impl::EndUpgradeFabric(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetFabricUpgradeProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginGetFabricUpgradeProgress(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetFabricUpgradeProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::EndGetFabricUpgradeProgress(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginMoveNextFabricUpgradeDomain<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            progress: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginMoveNextFabricUpgradeDomain(
                this,
                windows_core::from_raw_borrowed(&progress),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndMoveNextFabricUpgradeDomain<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient2_Impl::EndMoveNextFabricUpgradeDomain(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginMoveNextFabricUpgradeDomain2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            nextupgradedomain: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginMoveNextFabricUpgradeDomain2(
                this,
                core::mem::transmute(&nextupgradedomain),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndMoveNextFabricUpgradeDomain2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient2_Impl::EndMoveNextFabricUpgradeDomain2(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginUnprovisionFabric<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            codeversion: windows_core::PCWSTR,
            configversion: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginUnprovisionFabric(
                this,
                core::mem::transmute(&codeversion),
                core::mem::transmute(&configversion),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUnprovisionFabric<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient2_Impl::EndUnprovisionFabric(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetClusterManifest<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginGetClusterManifest(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetClusterManifest<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::EndGetClusterManifest(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginRecoverPartition<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            partitionid: windows_core::GUID,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginRecoverPartition(
                this,
                core::mem::transmute(&partitionid),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRecoverPartition<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient2_Impl::EndRecoverPartition(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginRecoverServicePartitions<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicename: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginRecoverServicePartitions(
                this,
                core::mem::transmute_copy(&servicename),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRecoverServicePartitions<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient2_Impl::EndRecoverServicePartitions(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginRecoverSystemPartitions<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient2_Impl::BeginRecoverSystemPartitions(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRecoverSystemPartitions<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient2_Impl::EndRecoverSystemPartitions(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricClusterManagementClient_Vtbl::new::<Identity, OFFSET>(),
            BeginDeactivateNode: BeginDeactivateNode::<Identity, OFFSET>,
            EndDeactivateNode: EndDeactivateNode::<Identity, OFFSET>,
            BeginActivateNode: BeginActivateNode::<Identity, OFFSET>,
            EndActivateNode: EndActivateNode::<Identity, OFFSET>,
            BeginProvisionFabric: BeginProvisionFabric::<Identity, OFFSET>,
            EndProvisionFabric: EndProvisionFabric::<Identity, OFFSET>,
            BeginUpgradeFabric: BeginUpgradeFabric::<Identity, OFFSET>,
            EndUpgradeFabric: EndUpgradeFabric::<Identity, OFFSET>,
            BeginGetFabricUpgradeProgress: BeginGetFabricUpgradeProgress::<Identity, OFFSET>,
            EndGetFabricUpgradeProgress: EndGetFabricUpgradeProgress::<Identity, OFFSET>,
            BeginMoveNextFabricUpgradeDomain: BeginMoveNextFabricUpgradeDomain::<Identity, OFFSET>,
            EndMoveNextFabricUpgradeDomain: EndMoveNextFabricUpgradeDomain::<Identity, OFFSET>,
            BeginMoveNextFabricUpgradeDomain2: BeginMoveNextFabricUpgradeDomain2::<Identity, OFFSET>,
            EndMoveNextFabricUpgradeDomain2: EndMoveNextFabricUpgradeDomain2::<Identity, OFFSET>,
            BeginUnprovisionFabric: BeginUnprovisionFabric::<Identity, OFFSET>,
            EndUnprovisionFabric: EndUnprovisionFabric::<Identity, OFFSET>,
            BeginGetClusterManifest: BeginGetClusterManifest::<Identity, OFFSET>,
            EndGetClusterManifest: EndGetClusterManifest::<Identity, OFFSET>,
            BeginRecoverPartition: BeginRecoverPartition::<Identity, OFFSET>,
            EndRecoverPartition: EndRecoverPartition::<Identity, OFFSET>,
            BeginRecoverServicePartitions: BeginRecoverServicePartitions::<Identity, OFFSET>,
            EndRecoverServicePartitions: EndRecoverServicePartitions::<Identity, OFFSET>,
            BeginRecoverSystemPartitions: BeginRecoverSystemPartitions::<Identity, OFFSET>,
            EndRecoverSystemPartitions: EndRecoverSystemPartitions::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterManagementClient3_Impl:
    Sized + IFabricClusterManagementClient2_Impl
{
    fn BeginUpdateFabricUpgrade(
        &self,
        description: *const super::FabricTypes::FABRIC_UPGRADE_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpdateFabricUpgrade(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginStopNode(
        &self,
        stopnodedescription: *const super::FabricTypes::FABRIC_STOP_NODE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStopNode(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginRestartNode(
        &self,
        restartnodedescription: *const super::FabricTypes::FABRIC_RESTART_NODE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRestartNode(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginStartNode(
        &self,
        startnodedescription: *const super::FabricTypes::FABRIC_START_NODE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStartNode(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn CopyClusterPackage(
        &self,
        imagestoreconnectionstring: &windows_core::PCWSTR,
        clustermanifestpath: &windows_core::PCWSTR,
        clustermanifestpathinimagestore: &windows_core::PCWSTR,
        codepackagepath: &windows_core::PCWSTR,
        codepackagepathinimagestore: &windows_core::PCWSTR,
    ) -> windows_core::Result<()>;
    fn RemoveClusterPackage(
        &self,
        imagestoreconnectionstring: &windows_core::PCWSTR,
        clustermanifestpathinimagestore: &windows_core::PCWSTR,
        codepackagepathinimagestore: &windows_core::PCWSTR,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricClusterManagementClient3 {}
impl IFabricClusterManagementClient3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterManagementClient3_Vtbl
    where
        Identity: IFabricClusterManagementClient3_Impl,
    {
        unsafe extern "system" fn BeginUpdateFabricUpgrade<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_UPGRADE_UPDATE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient3_Impl::BeginUpdateFabricUpgrade(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpdateFabricUpgrade<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient3_Impl::EndUpdateFabricUpgrade(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginStopNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            stopnodedescription: *const super::FabricTypes::FABRIC_STOP_NODE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient3_Impl::BeginStopNode(
                this,
                core::mem::transmute_copy(&stopnodedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStopNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient3_Impl::EndStopNode(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginRestartNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            restartnodedescription: *const super::FabricTypes::FABRIC_RESTART_NODE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient3_Impl::BeginRestartNode(
                this,
                core::mem::transmute_copy(&restartnodedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRestartNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient3_Impl::EndRestartNode(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginStartNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            startnodedescription: *const super::FabricTypes::FABRIC_START_NODE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient3_Impl::BeginStartNode(
                this,
                core::mem::transmute_copy(&startnodedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStartNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient3_Impl::EndStartNode(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn CopyClusterPackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            imagestoreconnectionstring: windows_core::PCWSTR,
            clustermanifestpath: windows_core::PCWSTR,
            clustermanifestpathinimagestore: windows_core::PCWSTR,
            codepackagepath: windows_core::PCWSTR,
            codepackagepathinimagestore: windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient3_Impl::CopyClusterPackage(
                this,
                core::mem::transmute(&imagestoreconnectionstring),
                core::mem::transmute(&clustermanifestpath),
                core::mem::transmute(&clustermanifestpathinimagestore),
                core::mem::transmute(&codepackagepath),
                core::mem::transmute(&codepackagepathinimagestore),
            )
            .into()
        }
        unsafe extern "system" fn RemoveClusterPackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            imagestoreconnectionstring: windows_core::PCWSTR,
            clustermanifestpathinimagestore: windows_core::PCWSTR,
            codepackagepathinimagestore: windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient3_Impl::RemoveClusterPackage(
                this,
                core::mem::transmute(&imagestoreconnectionstring),
                core::mem::transmute(&clustermanifestpathinimagestore),
                core::mem::transmute(&codepackagepathinimagestore),
            )
            .into()
        }
        Self {
            base__: IFabricClusterManagementClient2_Vtbl::new::<Identity, OFFSET>(),
            BeginUpdateFabricUpgrade: BeginUpdateFabricUpgrade::<Identity, OFFSET>,
            EndUpdateFabricUpgrade: EndUpdateFabricUpgrade::<Identity, OFFSET>,
            BeginStopNode: BeginStopNode::<Identity, OFFSET>,
            EndStopNode: EndStopNode::<Identity, OFFSET>,
            BeginRestartNode: BeginRestartNode::<Identity, OFFSET>,
            EndRestartNode: EndRestartNode::<Identity, OFFSET>,
            BeginStartNode: BeginStartNode::<Identity, OFFSET>,
            EndStartNode: EndStartNode::<Identity, OFFSET>,
            CopyClusterPackage: CopyClusterPackage::<Identity, OFFSET>,
            RemoveClusterPackage: RemoveClusterPackage::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient2 as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterManagementClient4_Impl:
    Sized + IFabricClusterManagementClient3_Impl
{
    fn BeginRollbackFabricUpgrade(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRollbackFabricUpgrade(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricClusterManagementClient4 {}
impl IFabricClusterManagementClient4_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterManagementClient4_Vtbl
    where
        Identity: IFabricClusterManagementClient4_Impl,
    {
        unsafe extern "system" fn BeginRollbackFabricUpgrade<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient4_Impl::BeginRollbackFabricUpgrade(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRollbackFabricUpgrade<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient4_Impl::EndRollbackFabricUpgrade(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricClusterManagementClient3_Vtbl::new::<Identity, OFFSET>(),
            BeginRollbackFabricUpgrade: BeginRollbackFabricUpgrade::<Identity, OFFSET>,
            EndRollbackFabricUpgrade: EndRollbackFabricUpgrade::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient3 as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterManagementClient5_Impl:
    Sized + IFabricClusterManagementClient4_Impl
{
    fn BeginResetPartitionLoad(
        &self,
        partitionid: &windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndResetPartitionLoad(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricClusterManagementClient5 {}
impl IFabricClusterManagementClient5_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterManagementClient5_Vtbl
    where
        Identity: IFabricClusterManagementClient5_Impl,
    {
        unsafe extern "system" fn BeginResetPartitionLoad<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            partitionid: windows_core::GUID,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient5_Impl::BeginResetPartitionLoad(
                this,
                core::mem::transmute(&partitionid),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndResetPartitionLoad<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient5_Impl::EndResetPartitionLoad(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricClusterManagementClient4_Vtbl::new::<Identity, OFFSET>(),
            BeginResetPartitionLoad: BeginResetPartitionLoad::<Identity, OFFSET>,
            EndResetPartitionLoad: EndResetPartitionLoad::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient4 as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterManagementClient6_Impl:
    Sized + IFabricClusterManagementClient5_Impl
{
    fn BeginToggleVerboseServicePlacementHealthReporting(
        &self,
        enabled: windows::Win32::Foundation::BOOLEAN,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndToggleVerboseServicePlacementHealthReporting(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricClusterManagementClient6 {}
impl IFabricClusterManagementClient6_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterManagementClient6_Vtbl
    where
        Identity: IFabricClusterManagementClient6_Impl,
    {
        unsafe extern "system" fn BeginToggleVerboseServicePlacementHealthReporting<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            enabled: windows::Win32::Foundation::BOOLEAN,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient6_Impl:: BeginToggleVerboseServicePlacementHealthReporting ( this , core::mem::transmute_copy ( & enabled ) , core::mem::transmute_copy ( & timeoutmilliseconds ) , windows_core::from_raw_borrowed ( & callback ) , ) { Ok ( ok__ ) => { context . write ( core::mem::transmute ( ok__ ) ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
        }
        unsafe extern "system" fn EndToggleVerboseServicePlacementHealthReporting<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient6_Impl::EndToggleVerboseServicePlacementHealthReporting(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricClusterManagementClient5_Vtbl::new::<Identity, OFFSET>(),
            BeginToggleVerboseServicePlacementHealthReporting:
                BeginToggleVerboseServicePlacementHealthReporting::<Identity, OFFSET>,
            EndToggleVerboseServicePlacementHealthReporting:
                EndToggleVerboseServicePlacementHealthReporting::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterManagementClient6 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient5 as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterManagementClient7_Impl:
    Sized + IFabricClusterManagementClient6_Impl
{
    fn BeginUpgradeConfiguration(
        &self,
        startupgradedescription: *const super::FabricTypes::FABRIC_START_UPGRADE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpgradeConfiguration(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetClusterConfigurationUpgradeStatus(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetClusterConfigurationUpgradeStatus(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricOrchestrationUpgradeStatusResult>;
    fn BeginGetClusterConfiguration(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetClusterConfiguration(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn BeginGetUpgradesPendingApproval(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetUpgradesPendingApproval(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginStartApprovedUpgrades(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStartApprovedUpgrades(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricClusterManagementClient7 {}
impl IFabricClusterManagementClient7_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterManagementClient7_Vtbl
    where
        Identity: IFabricClusterManagementClient7_Impl,
    {
        unsafe extern "system" fn BeginUpgradeConfiguration<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            startupgradedescription: *const super::FabricTypes::FABRIC_START_UPGRADE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient7_Impl::BeginUpgradeConfiguration(
                this,
                core::mem::transmute_copy(&startupgradedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpgradeConfiguration<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient7_Impl::EndUpgradeConfiguration(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetClusterConfigurationUpgradeStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient7_Impl::BeginGetClusterConfigurationUpgradeStatus(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetClusterConfigurationUpgradeStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient7_Impl::EndGetClusterConfigurationUpgradeStatus(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetClusterConfiguration<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient7_Impl::BeginGetClusterConfiguration(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetClusterConfiguration<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient7_Impl::EndGetClusterConfiguration(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetUpgradesPendingApproval<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient7_Impl::BeginGetUpgradesPendingApproval(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetUpgradesPendingApproval<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient7_Impl::EndGetUpgradesPendingApproval(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginStartApprovedUpgrades<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient7_Impl::BeginStartApprovedUpgrades(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStartApprovedUpgrades<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricClusterManagementClient7_Impl::EndStartApprovedUpgrades(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricClusterManagementClient6_Vtbl::new::<Identity, OFFSET>(),
            BeginUpgradeConfiguration: BeginUpgradeConfiguration::<Identity, OFFSET>,
            EndUpgradeConfiguration: EndUpgradeConfiguration::<Identity, OFFSET>,
            BeginGetClusterConfigurationUpgradeStatus: BeginGetClusterConfigurationUpgradeStatus::<
                Identity,
                OFFSET,
            >,
            EndGetClusterConfigurationUpgradeStatus: EndGetClusterConfigurationUpgradeStatus::<
                Identity,
                OFFSET,
            >,
            BeginGetClusterConfiguration: BeginGetClusterConfiguration::<Identity, OFFSET>,
            EndGetClusterConfiguration: EndGetClusterConfiguration::<Identity, OFFSET>,
            BeginGetUpgradesPendingApproval: BeginGetUpgradesPendingApproval::<Identity, OFFSET>,
            EndGetUpgradesPendingApproval: EndGetUpgradesPendingApproval::<Identity, OFFSET>,
            BeginStartApprovedUpgrades: BeginStartApprovedUpgrades::<Identity, OFFSET>,
            EndStartApprovedUpgrades: EndStartApprovedUpgrades::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterManagementClient7 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient6 as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterManagementClient8_Impl:
    Sized + IFabricClusterManagementClient7_Impl
{
    fn BeginGetClusterManifest2(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetClusterManifest2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
}
impl windows_core::RuntimeName for IFabricClusterManagementClient8 {}
impl IFabricClusterManagementClient8_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterManagementClient8_Vtbl
    where
        Identity: IFabricClusterManagementClient8_Impl,
    {
        unsafe extern "system" fn BeginGetClusterManifest2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient8_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient8_Impl::BeginGetClusterManifest2(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetClusterManifest2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient8_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient8_Impl::EndGetClusterManifest2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricClusterManagementClient7_Vtbl::new::<Identity, OFFSET>(),
            BeginGetClusterManifest2: BeginGetClusterManifest2::<Identity, OFFSET>,
            EndGetClusterManifest2: EndGetClusterManifest2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterManagementClient8 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient6 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient7 as windows_core::Interface>::IID
    }
}
pub trait IFabricClusterManagementClient9_Impl:
    Sized + IFabricClusterManagementClient8_Impl
{
    fn BeginGetUpgradeOrchestrationServiceState(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetUpgradeOrchestrationServiceState(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn BeginSetUpgradeOrchestrationServiceState(
        &self,
        state: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndSetUpgradeOrchestrationServiceState(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricUpgradeOrchestrationServiceStateResult>;
}
impl windows_core::RuntimeName for IFabricClusterManagementClient9 {}
impl IFabricClusterManagementClient9_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricClusterManagementClient9_Vtbl
    where
        Identity: IFabricClusterManagementClient9_Impl,
    {
        unsafe extern "system" fn BeginGetUpgradeOrchestrationServiceState<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient9_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient9_Impl::BeginGetUpgradeOrchestrationServiceState(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetUpgradeOrchestrationServiceState<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient9_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient9_Impl::EndGetUpgradeOrchestrationServiceState(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginSetUpgradeOrchestrationServiceState<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            state: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient9_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient9_Impl::BeginSetUpgradeOrchestrationServiceState(
                this,
                core::mem::transmute(&state),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSetUpgradeOrchestrationServiceState<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricClusterManagementClient9_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricClusterManagementClient9_Impl::EndSetUpgradeOrchestrationServiceState(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricClusterManagementClient8_Vtbl::new::<Identity, OFFSET>(),
            BeginGetUpgradeOrchestrationServiceState: BeginGetUpgradeOrchestrationServiceState::<
                Identity,
                OFFSET,
            >,
            EndGetUpgradeOrchestrationServiceState: EndGetUpgradeOrchestrationServiceState::<
                Identity,
                OFFSET,
            >,
            BeginSetUpgradeOrchestrationServiceState: BeginSetUpgradeOrchestrationServiceState::<
                Identity,
                OFFSET,
            >,
            EndSetUpgradeOrchestrationServiceState: EndSetUpgradeOrchestrationServiceState::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricClusterManagementClient9 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient6 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient7 as windows_core::Interface>::IID
            || iid == &<IFabricClusterManagementClient8 as windows_core::Interface>::IID
    }
}
pub trait IFabricDeployedApplicationHealthResult_Impl: Sized {
    fn get_DeployedApplicationHealth(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_HEALTH;
}
impl windows_core::RuntimeName for IFabricDeployedApplicationHealthResult {}
impl IFabricDeployedApplicationHealthResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricDeployedApplicationHealthResult_Vtbl
    where
        Identity: IFabricDeployedApplicationHealthResult_Impl,
    {
        unsafe extern "system" fn get_DeployedApplicationHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_HEALTH
        where
            Identity: IFabricDeployedApplicationHealthResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricDeployedApplicationHealthResult_Impl::get_DeployedApplicationHealth(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_DeployedApplicationHealth: get_DeployedApplicationHealth::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricDeployedApplicationHealthResult as windows_core::Interface>::IID
    }
}
pub trait IFabricDeployedServicePackageHealthResult_Impl: Sized {
    fn get_DeployedServicePackageHealth(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH;
}
impl windows_core::RuntimeName for IFabricDeployedServicePackageHealthResult {}
impl IFabricDeployedServicePackageHealthResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricDeployedServicePackageHealthResult_Vtbl
    where
        Identity: IFabricDeployedServicePackageHealthResult_Impl,
    {
        unsafe extern "system" fn get_DeployedServicePackageHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH
        where
            Identity: IFabricDeployedServicePackageHealthResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricDeployedServicePackageHealthResult_Impl::get_DeployedServicePackageHealth(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_DeployedServicePackageHealth: get_DeployedServicePackageHealth::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricDeployedServicePackageHealthResult as windows_core::Interface>::IID
    }
}
pub trait IFabricFaultManagementClient_Impl: Sized {
    fn BeginRestartNode(
        &self,
        description: *const super::FabricTypes::FABRIC_RESTART_NODE_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRestartNode(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricRestartNodeResult>;
    fn BeginStartNode(
        &self,
        description: *const super::FabricTypes::FABRIC_START_NODE_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStartNode(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricStartNodeResult>;
    fn BeginStopNode(
        &self,
        description: *const super::FabricTypes::FABRIC_STOP_NODE_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStopNode(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricStopNodeResult>;
    fn BeginRestartDeployedCodePackage(
        &self,
        description: *const super::FabricTypes::FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRestartDeployedCodePackage(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricRestartDeployedCodePackageResult>;
    fn BeginMovePrimary(
        &self,
        description: *const super::FabricTypes::FABRIC_MOVE_PRIMARY_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndMovePrimary(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricMovePrimaryResult>;
    fn BeginMoveSecondary(
        &self,
        description: *const super::FabricTypes::FABRIC_MOVE_SECONDARY_DESCRIPTION2,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndMoveSecondary(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricMoveSecondaryResult>;
}
impl windows_core::RuntimeName for IFabricFaultManagementClient {}
impl IFabricFaultManagementClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricFaultManagementClient_Vtbl
    where
        Identity: IFabricFaultManagementClient_Impl,
    {
        unsafe extern "system" fn BeginRestartNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_RESTART_NODE_DESCRIPTION2,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::BeginRestartNode(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRestartNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::EndRestartNode(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginStartNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_START_NODE_DESCRIPTION2,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::BeginStartNode(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStartNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::EndStartNode(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginStopNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_STOP_NODE_DESCRIPTION2,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::BeginStopNode(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStopNode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::EndStopNode(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginRestartDeployedCodePackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description : *const super::FabricTypes:: FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::BeginRestartDeployedCodePackage(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRestartDeployedCodePackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::EndRestartDeployedCodePackage(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginMovePrimary<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_MOVE_PRIMARY_DESCRIPTION2,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::BeginMovePrimary(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndMovePrimary<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::EndMovePrimary(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginMoveSecondary<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_MOVE_SECONDARY_DESCRIPTION2,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::BeginMoveSecondary(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndMoveSecondary<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricFaultManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricFaultManagementClient_Impl::EndMoveSecondary(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginRestartNode: BeginRestartNode::<Identity, OFFSET>,
            EndRestartNode: EndRestartNode::<Identity, OFFSET>,
            BeginStartNode: BeginStartNode::<Identity, OFFSET>,
            EndStartNode: EndStartNode::<Identity, OFFSET>,
            BeginStopNode: BeginStopNode::<Identity, OFFSET>,
            EndStopNode: EndStopNode::<Identity, OFFSET>,
            BeginRestartDeployedCodePackage: BeginRestartDeployedCodePackage::<Identity, OFFSET>,
            EndRestartDeployedCodePackage: EndRestartDeployedCodePackage::<Identity, OFFSET>,
            BeginMovePrimary: BeginMovePrimary::<Identity, OFFSET>,
            EndMovePrimary: EndMovePrimary::<Identity, OFFSET>,
            BeginMoveSecondary: BeginMoveSecondary::<Identity, OFFSET>,
            EndMoveSecondary: EndMoveSecondary::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricFaultManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricGatewayInformationResult_Impl: Sized {
    fn get_GatewayInformation(&self) -> *mut super::FabricTypes::FABRIC_GATEWAY_INFORMATION;
}
impl windows_core::RuntimeName for IFabricGatewayInformationResult {}
impl IFabricGatewayInformationResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGatewayInformationResult_Vtbl
    where
        Identity: IFabricGatewayInformationResult_Impl,
    {
        unsafe extern "system" fn get_GatewayInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_GATEWAY_INFORMATION
        where
            Identity: IFabricGatewayInformationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGatewayInformationResult_Impl::get_GatewayInformation(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_GatewayInformation: get_GatewayInformation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGatewayInformationResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetApplicationListResult_Impl: Sized {
    fn get_ApplicationList(&self) -> *mut super::FabricTypes::FABRIC_APPLICATION_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetApplicationListResult {}
impl IFabricGetApplicationListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetApplicationListResult_Vtbl
    where
        Identity: IFabricGetApplicationListResult_Impl,
    {
        unsafe extern "system" fn get_ApplicationList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_APPLICATION_QUERY_RESULT_LIST
        where
            Identity: IFabricGetApplicationListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetApplicationListResult_Impl::get_ApplicationList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ApplicationList: get_ApplicationList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetApplicationListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetApplicationListResult2_Impl:
    Sized + IFabricGetApplicationListResult_Impl
{
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetApplicationListResult2 {}
impl IFabricGetApplicationListResult2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetApplicationListResult2_Vtbl
    where
        Identity: IFabricGetApplicationListResult2_Impl,
    {
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetApplicationListResult2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetApplicationListResult2_Impl::get_PagingStatus(this)
        }
        Self {
            base__: IFabricGetApplicationListResult_Vtbl::new::<Identity, OFFSET>(),
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetApplicationListResult2 as windows_core::Interface>::IID
            || iid == &<IFabricGetApplicationListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetApplicationLoadInformationResult_Impl: Sized {
    fn get_ApplicationLoadInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_LOAD_INFORMATION;
}
impl windows_core::RuntimeName for IFabricGetApplicationLoadInformationResult {}
impl IFabricGetApplicationLoadInformationResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetApplicationLoadInformationResult_Vtbl
    where
        Identity: IFabricGetApplicationLoadInformationResult_Impl,
    {
        unsafe extern "system" fn get_ApplicationLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_APPLICATION_LOAD_INFORMATION
        where
            Identity: IFabricGetApplicationLoadInformationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetApplicationLoadInformationResult_Impl::get_ApplicationLoadInformation(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ApplicationLoadInformation: get_ApplicationLoadInformation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetApplicationLoadInformationResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetApplicationNameResult_Impl: Sized {
    fn get_ApplicationName(&self) -> *mut super::FabricTypes::FABRIC_APPLICATION_NAME_QUERY_RESULT;
}
impl windows_core::RuntimeName for IFabricGetApplicationNameResult {}
impl IFabricGetApplicationNameResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetApplicationNameResult_Vtbl
    where
        Identity: IFabricGetApplicationNameResult_Impl,
    {
        unsafe extern "system" fn get_ApplicationName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_APPLICATION_NAME_QUERY_RESULT
        where
            Identity: IFabricGetApplicationNameResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetApplicationNameResult_Impl::get_ApplicationName(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ApplicationName: get_ApplicationName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetApplicationNameResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetApplicationNetworkListResult_Impl: Sized {
    fn get_ApplicationNetworkList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST;
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetApplicationNetworkListResult {}
impl IFabricGetApplicationNetworkListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetApplicationNetworkListResult_Vtbl
    where
        Identity: IFabricGetApplicationNetworkListResult_Impl,
    {
        unsafe extern "system" fn get_ApplicationNetworkList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST
        where
            Identity: IFabricGetApplicationNetworkListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetApplicationNetworkListResult_Impl::get_ApplicationNetworkList(this)
        }
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetApplicationNetworkListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetApplicationNetworkListResult_Impl::get_PagingStatus(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ApplicationNetworkList: get_ApplicationNetworkList::<Identity, OFFSET>,
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetApplicationNetworkListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetApplicationTypeListResult_Impl: Sized {
    fn get_ApplicationTypeList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetApplicationTypeListResult {}
impl IFabricGetApplicationTypeListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetApplicationTypeListResult_Vtbl
    where
        Identity: IFabricGetApplicationTypeListResult_Impl,
    {
        unsafe extern "system" fn get_ApplicationTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetApplicationTypeListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetApplicationTypeListResult_Impl::get_ApplicationTypeList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ApplicationTypeList: get_ApplicationTypeList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetApplicationTypeListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetApplicationTypePagedListResult_Impl: Sized {
    fn get_ApplicationTypePagedList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST;
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetApplicationTypePagedListResult {}
impl IFabricGetApplicationTypePagedListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetApplicationTypePagedListResult_Vtbl
    where
        Identity: IFabricGetApplicationTypePagedListResult_Impl,
    {
        unsafe extern "system" fn get_ApplicationTypePagedList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetApplicationTypePagedListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetApplicationTypePagedListResult_Impl::get_ApplicationTypePagedList(this)
        }
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetApplicationTypePagedListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetApplicationTypePagedListResult_Impl::get_PagingStatus(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ApplicationTypePagedList: get_ApplicationTypePagedList::<Identity, OFFSET>,
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetApplicationTypePagedListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetClusterHealthChunkResult_Impl: Sized {
    fn get_ClusterHealthChunk(&self) -> *mut super::FabricTypes::FABRIC_CLUSTER_HEALTH_CHUNK;
}
impl windows_core::RuntimeName for IFabricGetClusterHealthChunkResult {}
impl IFabricGetClusterHealthChunkResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetClusterHealthChunkResult_Vtbl
    where
        Identity: IFabricGetClusterHealthChunkResult_Impl,
    {
        unsafe extern "system" fn get_ClusterHealthChunk<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CLUSTER_HEALTH_CHUNK
        where
            Identity: IFabricGetClusterHealthChunkResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetClusterHealthChunkResult_Impl::get_ClusterHealthChunk(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ClusterHealthChunk: get_ClusterHealthChunk::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetClusterHealthChunkResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetClusterLoadInformationResult_Impl: Sized {
    fn get_ClusterLoadInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_CLUSTER_LOAD_INFORMATION;
}
impl windows_core::RuntimeName for IFabricGetClusterLoadInformationResult {}
impl IFabricGetClusterLoadInformationResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetClusterLoadInformationResult_Vtbl
    where
        Identity: IFabricGetClusterLoadInformationResult_Impl,
    {
        unsafe extern "system" fn get_ClusterLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CLUSTER_LOAD_INFORMATION
        where
            Identity: IFabricGetClusterLoadInformationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetClusterLoadInformationResult_Impl::get_ClusterLoadInformation(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ClusterLoadInformation: get_ClusterLoadInformation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetClusterLoadInformationResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetDeployedApplicationListResult_Impl: Sized {
    fn get_DeployedApplicationList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetDeployedApplicationListResult {}
impl IFabricGetDeployedApplicationListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetDeployedApplicationListResult_Vtbl
    where
        Identity: IFabricGetDeployedApplicationListResult_Impl,
    {
        unsafe extern "system" fn get_DeployedApplicationList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST
        where
            Identity: IFabricGetDeployedApplicationListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedApplicationListResult_Impl::get_DeployedApplicationList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_DeployedApplicationList: get_DeployedApplicationList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetDeployedApplicationListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetDeployedApplicationPagedListResult_Impl: Sized {
    fn get_DeployedApplicationPagedList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST;
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetDeployedApplicationPagedListResult {}
impl IFabricGetDeployedApplicationPagedListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetDeployedApplicationPagedListResult_Vtbl
    where
        Identity: IFabricGetDeployedApplicationPagedListResult_Impl,
    {
        unsafe extern "system" fn get_DeployedApplicationPagedList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST
        where
            Identity: IFabricGetDeployedApplicationPagedListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedApplicationPagedListResult_Impl::get_DeployedApplicationPagedList(
                this,
            )
        }
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetDeployedApplicationPagedListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedApplicationPagedListResult_Impl::get_PagingStatus(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_DeployedApplicationPagedList: get_DeployedApplicationPagedList::<Identity, OFFSET>,
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetDeployedApplicationPagedListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetDeployedCodePackageListResult_Impl: Sized {
    fn get_DeployedCodePackageList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetDeployedCodePackageListResult {}
impl IFabricGetDeployedCodePackageListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetDeployedCodePackageListResult_Vtbl
    where
        Identity: IFabricGetDeployedCodePackageListResult_Impl,
    {
        unsafe extern "system" fn get_DeployedCodePackageList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetDeployedCodePackageListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedCodePackageListResult_Impl::get_DeployedCodePackageList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_DeployedCodePackageList: get_DeployedCodePackageList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetDeployedCodePackageListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetDeployedNetworkCodePackageListResult_Impl: Sized {
    fn get_DeployedNetworkCodePackageList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST;
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetDeployedNetworkCodePackageListResult {}
impl IFabricGetDeployedNetworkCodePackageListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetDeployedNetworkCodePackageListResult_Vtbl
    where
        Identity: IFabricGetDeployedNetworkCodePackageListResult_Impl,
    {
        unsafe extern "system" fn get_DeployedNetworkCodePackageList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetDeployedNetworkCodePackageListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedNetworkCodePackageListResult_Impl::get_DeployedNetworkCodePackageList(
                this,
            )
        }
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetDeployedNetworkCodePackageListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedNetworkCodePackageListResult_Impl::get_PagingStatus(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_DeployedNetworkCodePackageList: get_DeployedNetworkCodePackageList::<
                Identity,
                OFFSET,
            >,
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetDeployedNetworkCodePackageListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetDeployedNetworkListResult_Impl: Sized {
    fn get_DeployedNetworkList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST;
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetDeployedNetworkListResult {}
impl IFabricGetDeployedNetworkListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetDeployedNetworkListResult_Vtbl
    where
        Identity: IFabricGetDeployedNetworkListResult_Impl,
    {
        unsafe extern "system" fn get_DeployedNetworkList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST
        where
            Identity: IFabricGetDeployedNetworkListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedNetworkListResult_Impl::get_DeployedNetworkList(this)
        }
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetDeployedNetworkListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedNetworkListResult_Impl::get_PagingStatus(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_DeployedNetworkList: get_DeployedNetworkList::<Identity, OFFSET>,
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetDeployedNetworkListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetDeployedReplicaListResult_Impl: Sized {
    fn get_DeployedReplicaList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetDeployedReplicaListResult {}
impl IFabricGetDeployedReplicaListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetDeployedReplicaListResult_Vtbl
    where
        Identity: IFabricGetDeployedReplicaListResult_Impl,
    {
        unsafe extern "system" fn get_DeployedReplicaList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST
        where
            Identity: IFabricGetDeployedReplicaListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedReplicaListResult_Impl::get_DeployedReplicaList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_DeployedReplicaList: get_DeployedReplicaList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetDeployedReplicaListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetDeployedServicePackageListResult_Impl: Sized {
    fn get_DeployedServicePackageList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetDeployedServicePackageListResult {}
impl IFabricGetDeployedServicePackageListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetDeployedServicePackageListResult_Vtbl
    where
        Identity: IFabricGetDeployedServicePackageListResult_Impl,
    {
        unsafe extern "system" fn get_DeployedServicePackageList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetDeployedServicePackageListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedServicePackageListResult_Impl::get_DeployedServicePackageList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_DeployedServicePackageList: get_DeployedServicePackageList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetDeployedServicePackageListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetDeployedServiceReplicaDetailResult_Impl: Sized {
    fn get_ReplicaDetail(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM;
}
impl windows_core::RuntimeName for IFabricGetDeployedServiceReplicaDetailResult {}
impl IFabricGetDeployedServiceReplicaDetailResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetDeployedServiceReplicaDetailResult_Vtbl
    where
        Identity: IFabricGetDeployedServiceReplicaDetailResult_Impl,
    {
        unsafe extern "system" fn get_ReplicaDetail<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM
        where
            Identity: IFabricGetDeployedServiceReplicaDetailResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedServiceReplicaDetailResult_Impl::get_ReplicaDetail(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ReplicaDetail: get_ReplicaDetail::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetDeployedServiceReplicaDetailResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetDeployedServiceTypeListResult_Impl: Sized {
    fn get_DeployedServiceTypeList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetDeployedServiceTypeListResult {}
impl IFabricGetDeployedServiceTypeListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetDeployedServiceTypeListResult_Vtbl
    where
        Identity: IFabricGetDeployedServiceTypeListResult_Impl,
    {
        unsafe extern "system" fn get_DeployedServiceTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetDeployedServiceTypeListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetDeployedServiceTypeListResult_Impl::get_DeployedServiceTypeList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_DeployedServiceTypeList: get_DeployedServiceTypeList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetDeployedServiceTypeListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetNetworkApplicationListResult_Impl: Sized {
    fn get_NetworkApplicationList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST;
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetNetworkApplicationListResult {}
impl IFabricGetNetworkApplicationListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetNetworkApplicationListResult_Vtbl
    where
        Identity: IFabricGetNetworkApplicationListResult_Impl,
    {
        unsafe extern "system" fn get_NetworkApplicationList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST
        where
            Identity: IFabricGetNetworkApplicationListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetNetworkApplicationListResult_Impl::get_NetworkApplicationList(this)
        }
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetNetworkApplicationListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetNetworkApplicationListResult_Impl::get_PagingStatus(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_NetworkApplicationList: get_NetworkApplicationList::<Identity, OFFSET>,
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetNetworkApplicationListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetNetworkListResult_Impl: Sized {
    fn get_NetworkList(&self) -> *mut super::FabricTypes::FABRIC_NETWORK_QUERY_RESULT_LIST;
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetNetworkListResult {}
impl IFabricGetNetworkListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetNetworkListResult_Vtbl
    where
        Identity: IFabricGetNetworkListResult_Impl,
    {
        unsafe extern "system" fn get_NetworkList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NETWORK_QUERY_RESULT_LIST
        where
            Identity: IFabricGetNetworkListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetNetworkListResult_Impl::get_NetworkList(this)
        }
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetNetworkListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetNetworkListResult_Impl::get_PagingStatus(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_NetworkList: get_NetworkList::<Identity, OFFSET>,
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetNetworkListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetNetworkNodeListResult_Impl: Sized {
    fn get_NetworkNodeList(&self)
        -> *mut super::FabricTypes::FABRIC_NETWORK_NODE_QUERY_RESULT_LIST;
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetNetworkNodeListResult {}
impl IFabricGetNetworkNodeListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetNetworkNodeListResult_Vtbl
    where
        Identity: IFabricGetNetworkNodeListResult_Impl,
    {
        unsafe extern "system" fn get_NetworkNodeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NETWORK_NODE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetNetworkNodeListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetNetworkNodeListResult_Impl::get_NetworkNodeList(this)
        }
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetNetworkNodeListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetNetworkNodeListResult_Impl::get_PagingStatus(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_NetworkNodeList: get_NetworkNodeList::<Identity, OFFSET>,
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetNetworkNodeListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetNodeListResult_Impl: Sized {
    fn get_NodeList(&self) -> *mut super::FabricTypes::FABRIC_NODE_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetNodeListResult {}
impl IFabricGetNodeListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetNodeListResult_Vtbl
    where
        Identity: IFabricGetNodeListResult_Impl,
    {
        unsafe extern "system" fn get_NodeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NODE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetNodeListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetNodeListResult_Impl::get_NodeList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_NodeList: get_NodeList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetNodeListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetNodeListResult2_Impl: Sized + IFabricGetNodeListResult_Impl {
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetNodeListResult2 {}
impl IFabricGetNodeListResult2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetNodeListResult2_Vtbl
    where
        Identity: IFabricGetNodeListResult2_Impl,
    {
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetNodeListResult2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetNodeListResult2_Impl::get_PagingStatus(this)
        }
        Self {
            base__: IFabricGetNodeListResult_Vtbl::new::<Identity, OFFSET>(),
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetNodeListResult2 as windows_core::Interface>::IID
            || iid == &<IFabricGetNodeListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetNodeLoadInformationResult_Impl: Sized {
    fn get_NodeLoadInformation(&self) -> *mut super::FabricTypes::FABRIC_NODE_LOAD_INFORMATION;
}
impl windows_core::RuntimeName for IFabricGetNodeLoadInformationResult {}
impl IFabricGetNodeLoadInformationResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetNodeLoadInformationResult_Vtbl
    where
        Identity: IFabricGetNodeLoadInformationResult_Impl,
    {
        unsafe extern "system" fn get_NodeLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NODE_LOAD_INFORMATION
        where
            Identity: IFabricGetNodeLoadInformationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetNodeLoadInformationResult_Impl::get_NodeLoadInformation(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_NodeLoadInformation: get_NodeLoadInformation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetNodeLoadInformationResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetPartitionListResult_Impl: Sized {
    fn get_PartitionList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetPartitionListResult {}
impl IFabricGetPartitionListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetPartitionListResult_Vtbl
    where
        Identity: IFabricGetPartitionListResult_Impl,
    {
        unsafe extern "system" fn get_PartitionList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST
        where
            Identity: IFabricGetPartitionListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetPartitionListResult_Impl::get_PartitionList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_PartitionList: get_PartitionList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetPartitionListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetPartitionListResult2_Impl: Sized + IFabricGetPartitionListResult_Impl {
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetPartitionListResult2 {}
impl IFabricGetPartitionListResult2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetPartitionListResult2_Vtbl
    where
        Identity: IFabricGetPartitionListResult2_Impl,
    {
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetPartitionListResult2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetPartitionListResult2_Impl::get_PagingStatus(this)
        }
        Self {
            base__: IFabricGetPartitionListResult_Vtbl::new::<Identity, OFFSET>(),
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetPartitionListResult2 as windows_core::Interface>::IID
            || iid == &<IFabricGetPartitionListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetPartitionLoadInformationResult_Impl: Sized {
    fn get_PartitionLoadInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_PARTITION_LOAD_INFORMATION;
}
impl windows_core::RuntimeName for IFabricGetPartitionLoadInformationResult {}
impl IFabricGetPartitionLoadInformationResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetPartitionLoadInformationResult_Vtbl
    where
        Identity: IFabricGetPartitionLoadInformationResult_Impl,
    {
        unsafe extern "system" fn get_PartitionLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PARTITION_LOAD_INFORMATION
        where
            Identity: IFabricGetPartitionLoadInformationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetPartitionLoadInformationResult_Impl::get_PartitionLoadInformation(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_PartitionLoadInformation: get_PartitionLoadInformation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetPartitionLoadInformationResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetProvisionedCodeVersionListResult_Impl: Sized {
    fn get_ProvisionedCodeVersionList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetProvisionedCodeVersionListResult {}
impl IFabricGetProvisionedCodeVersionListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetProvisionedCodeVersionListResult_Vtbl
    where
        Identity: IFabricGetProvisionedCodeVersionListResult_Impl,
    {
        unsafe extern "system" fn get_ProvisionedCodeVersionList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST
        where
            Identity: IFabricGetProvisionedCodeVersionListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetProvisionedCodeVersionListResult_Impl::get_ProvisionedCodeVersionList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ProvisionedCodeVersionList: get_ProvisionedCodeVersionList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetProvisionedCodeVersionListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetProvisionedConfigVersionListResult_Impl: Sized {
    fn get_ProvisionedConfigVersionList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetProvisionedConfigVersionListResult {}
impl IFabricGetProvisionedConfigVersionListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetProvisionedConfigVersionListResult_Vtbl
    where
        Identity: IFabricGetProvisionedConfigVersionListResult_Impl,
    {
        unsafe extern "system" fn get_ProvisionedConfigVersionList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST
        where
            Identity: IFabricGetProvisionedConfigVersionListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetProvisionedConfigVersionListResult_Impl::get_ProvisionedConfigVersionList(
                this,
            )
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ProvisionedConfigVersionList: get_ProvisionedConfigVersionList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetProvisionedConfigVersionListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetRepairTaskListResult_Impl: Sized {
    fn get_Tasks(&self) -> *mut super::FabricTypes::FABRIC_REPAIR_TASK_LIST;
}
impl windows_core::RuntimeName for IFabricGetRepairTaskListResult {}
impl IFabricGetRepairTaskListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetRepairTaskListResult_Vtbl
    where
        Identity: IFabricGetRepairTaskListResult_Impl,
    {
        unsafe extern "system" fn get_Tasks<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_REPAIR_TASK_LIST
        where
            Identity: IFabricGetRepairTaskListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetRepairTaskListResult_Impl::get_Tasks(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Tasks: get_Tasks::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetRepairTaskListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetReplicaListResult_Impl: Sized {
    fn get_ReplicaList(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetReplicaListResult {}
impl IFabricGetReplicaListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetReplicaListResult_Vtbl
    where
        Identity: IFabricGetReplicaListResult_Impl,
    {
        unsafe extern "system" fn get_ReplicaList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST
        where
            Identity: IFabricGetReplicaListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetReplicaListResult_Impl::get_ReplicaList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ReplicaList: get_ReplicaList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetReplicaListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetReplicaListResult2_Impl: Sized + IFabricGetReplicaListResult_Impl {
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetReplicaListResult2 {}
impl IFabricGetReplicaListResult2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetReplicaListResult2_Vtbl
    where
        Identity: IFabricGetReplicaListResult2_Impl,
    {
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetReplicaListResult2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetReplicaListResult2_Impl::get_PagingStatus(this)
        }
        Self {
            base__: IFabricGetReplicaListResult_Vtbl::new::<Identity, OFFSET>(),
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetReplicaListResult2 as windows_core::Interface>::IID
            || iid == &<IFabricGetReplicaListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetReplicaLoadInformationResult_Impl: Sized {
    fn get_ReplicaLoadInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_REPLICA_LOAD_INFORMATION;
}
impl windows_core::RuntimeName for IFabricGetReplicaLoadInformationResult {}
impl IFabricGetReplicaLoadInformationResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetReplicaLoadInformationResult_Vtbl
    where
        Identity: IFabricGetReplicaLoadInformationResult_Impl,
    {
        unsafe extern "system" fn get_ReplicaLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_REPLICA_LOAD_INFORMATION
        where
            Identity: IFabricGetReplicaLoadInformationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetReplicaLoadInformationResult_Impl::get_ReplicaLoadInformation(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ReplicaLoadInformation: get_ReplicaLoadInformation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetReplicaLoadInformationResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetRollingUpgradeMonitoringPolicyResult_Impl: Sized {
    fn get_Policy(&self) -> *mut super::FabricTypes::FABRIC_ROLLING_UPGRADE_MONITORING_POLICY;
}
impl windows_core::RuntimeName for IFabricGetRollingUpgradeMonitoringPolicyResult {}
impl IFabricGetRollingUpgradeMonitoringPolicyResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetRollingUpgradeMonitoringPolicyResult_Vtbl
    where
        Identity: IFabricGetRollingUpgradeMonitoringPolicyResult_Impl,
    {
        unsafe extern "system" fn get_Policy<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_ROLLING_UPGRADE_MONITORING_POLICY
        where
            Identity: IFabricGetRollingUpgradeMonitoringPolicyResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetRollingUpgradeMonitoringPolicyResult_Impl::get_Policy(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Policy: get_Policy::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetRollingUpgradeMonitoringPolicyResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetServiceGroupMemberListResult_Impl: Sized {
    fn get_ServiceGroupMemberList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetServiceGroupMemberListResult {}
impl IFabricGetServiceGroupMemberListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetServiceGroupMemberListResult_Vtbl
    where
        Identity: IFabricGetServiceGroupMemberListResult_Impl,
    {
        unsafe extern "system" fn get_ServiceGroupMemberList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST
        where
            Identity: IFabricGetServiceGroupMemberListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetServiceGroupMemberListResult_Impl::get_ServiceGroupMemberList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ServiceGroupMemberList: get_ServiceGroupMemberList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetServiceGroupMemberListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetServiceGroupMemberTypeListResult_Impl: Sized {
    fn get_ServiceGroupMemberTypeList(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetServiceGroupMemberTypeListResult {}
impl IFabricGetServiceGroupMemberTypeListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetServiceGroupMemberTypeListResult_Vtbl
    where
        Identity: IFabricGetServiceGroupMemberTypeListResult_Impl,
    {
        unsafe extern "system" fn get_ServiceGroupMemberTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetServiceGroupMemberTypeListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetServiceGroupMemberTypeListResult_Impl::get_ServiceGroupMemberTypeList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ServiceGroupMemberTypeList: get_ServiceGroupMemberTypeList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetServiceGroupMemberTypeListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetServiceListResult_Impl: Sized {
    fn get_ServiceList(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetServiceListResult {}
impl IFabricGetServiceListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetServiceListResult_Vtbl
    where
        Identity: IFabricGetServiceListResult_Impl,
    {
        unsafe extern "system" fn get_ServiceList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetServiceListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetServiceListResult_Impl::get_ServiceList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ServiceList: get_ServiceList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetServiceListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetServiceListResult2_Impl: Sized + IFabricGetServiceListResult_Impl {
    fn get_PagingStatus(&self) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS;
}
impl windows_core::RuntimeName for IFabricGetServiceListResult2 {}
impl IFabricGetServiceListResult2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetServiceListResult2_Vtbl
    where
        Identity: IFabricGetServiceListResult2_Impl,
    {
        unsafe extern "system" fn get_PagingStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PAGING_STATUS
        where
            Identity: IFabricGetServiceListResult2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetServiceListResult2_Impl::get_PagingStatus(this)
        }
        Self {
            base__: IFabricGetServiceListResult_Vtbl::new::<Identity, OFFSET>(),
            get_PagingStatus: get_PagingStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetServiceListResult2 as windows_core::Interface>::IID
            || iid == &<IFabricGetServiceListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetServiceNameResult_Impl: Sized {
    fn get_ServiceName(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_NAME_QUERY_RESULT;
}
impl windows_core::RuntimeName for IFabricGetServiceNameResult {}
impl IFabricGetServiceNameResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetServiceNameResult_Vtbl
    where
        Identity: IFabricGetServiceNameResult_Impl,
    {
        unsafe extern "system" fn get_ServiceName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_NAME_QUERY_RESULT
        where
            Identity: IFabricGetServiceNameResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetServiceNameResult_Impl::get_ServiceName(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ServiceName: get_ServiceName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetServiceNameResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetServiceTypeListResult_Impl: Sized {
    fn get_ServiceTypeList(&self)
        -> *mut super::FabricTypes::FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricGetServiceTypeListResult {}
impl IFabricGetServiceTypeListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetServiceTypeListResult_Vtbl
    where
        Identity: IFabricGetServiceTypeListResult_Impl,
    {
        unsafe extern "system" fn get_ServiceTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST
        where
            Identity: IFabricGetServiceTypeListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetServiceTypeListResult_Impl::get_ServiceTypeList(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ServiceTypeList: get_ServiceTypeList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetServiceTypeListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricGetUnplacedReplicaInformationResult_Impl: Sized {
    fn get_UnplacedReplicaInformation(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_UNPLACED_REPLICA_INFORMATION;
}
impl windows_core::RuntimeName for IFabricGetUnplacedReplicaInformationResult {}
impl IFabricGetUnplacedReplicaInformationResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetUnplacedReplicaInformationResult_Vtbl
    where
        Identity: IFabricGetUnplacedReplicaInformationResult_Impl,
    {
        unsafe extern "system" fn get_UnplacedReplicaInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_UNPLACED_REPLICA_INFORMATION
        where
            Identity: IFabricGetUnplacedReplicaInformationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetUnplacedReplicaInformationResult_Impl::get_UnplacedReplicaInformation(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_UnplacedReplicaInformation: get_UnplacedReplicaInformation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetUnplacedReplicaInformationResult as windows_core::Interface>::IID
    }
}
pub trait IFabricHealthClient_Impl: Sized {
    fn ReportHealth(
        &self,
        healthreport: *const super::FabricTypes::FABRIC_HEALTH_REPORT,
    ) -> windows_core::Result<()>;
    fn BeginGetClusterHealth(
        &self,
        healthpolicy: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetClusterHealth(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricClusterHealthResult>;
    fn BeginGetNodeHealth(
        &self,
        nodename: &windows_core::PCWSTR,
        healthpolicy: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetNodeHealth(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricNodeHealthResult>;
    fn BeginGetApplicationHealth(
        &self,
        applicationname: super::FabricTypes::FABRIC_URI,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetApplicationHealth(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricApplicationHealthResult>;
    fn BeginGetServiceHealth(
        &self,
        servicename: super::FabricTypes::FABRIC_URI,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetServiceHealth(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricServiceHealthResult>;
    fn BeginGetPartitionHealth(
        &self,
        partitionid: &windows_core::GUID,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetPartitionHealth(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricPartitionHealthResult>;
    fn BeginGetReplicaHealth(
        &self,
        partitionid: &windows_core::GUID,
        replicaid: i64,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetReplicaHealth(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricReplicaHealthResult>;
    fn BeginGetDeployedApplicationHealth(
        &self,
        applicationname: super::FabricTypes::FABRIC_URI,
        nodename: &windows_core::PCWSTR,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedApplicationHealth(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricDeployedApplicationHealthResult>;
    fn BeginGetDeployedServicePackageHealth(
        &self,
        applicationname: super::FabricTypes::FABRIC_URI,
        servicemanifestname: &windows_core::PCWSTR,
        nodename: &windows_core::PCWSTR,
        healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedServicePackageHealth(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricDeployedServicePackageHealthResult>;
}
impl windows_core::RuntimeName for IFabricHealthClient {}
impl IFabricHealthClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricHealthClient_Vtbl
    where
        Identity: IFabricHealthClient_Impl,
    {
        unsafe extern "system" fn ReportHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthreport: *const super::FabricTypes::FABRIC_HEALTH_REPORT,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricHealthClient_Impl::ReportHealth(this, core::mem::transmute_copy(&healthreport))
                .into()
        }
        unsafe extern "system" fn BeginGetClusterHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthpolicy: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_POLICY,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::BeginGetClusterHealth(
                this,
                core::mem::transmute_copy(&healthpolicy),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetClusterHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::EndGetClusterHealth(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetNodeHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            nodename: windows_core::PCWSTR,
            healthpolicy: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_POLICY,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::BeginGetNodeHealth(
                this,
                core::mem::transmute(&nodename),
                core::mem::transmute_copy(&healthpolicy),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetNodeHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::EndGetNodeHealth(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetApplicationHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationname: super::FabricTypes::FABRIC_URI,
            healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::BeginGetApplicationHealth(
                this,
                core::mem::transmute_copy(&applicationname),
                core::mem::transmute_copy(&healthpolicy),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::EndGetApplicationHealth(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetServiceHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicename: super::FabricTypes::FABRIC_URI,
            healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::BeginGetServiceHealth(
                this,
                core::mem::transmute_copy(&servicename),
                core::mem::transmute_copy(&healthpolicy),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::EndGetServiceHealth(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetPartitionHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            partitionid: windows_core::GUID,
            healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::BeginGetPartitionHealth(
                this,
                core::mem::transmute(&partitionid),
                core::mem::transmute_copy(&healthpolicy),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetPartitionHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::EndGetPartitionHealth(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetReplicaHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            partitionid: windows_core::GUID,
            replicaid: i64,
            healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::BeginGetReplicaHealth(
                this,
                core::mem::transmute(&partitionid),
                core::mem::transmute_copy(&replicaid),
                core::mem::transmute_copy(&healthpolicy),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetReplicaHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::EndGetReplicaHealth(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedApplicationHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationname: super::FabricTypes::FABRIC_URI,
            nodename: windows_core::PCWSTR,
            healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::BeginGetDeployedApplicationHealth(
                this,
                core::mem::transmute_copy(&applicationname),
                core::mem::transmute(&nodename),
                core::mem::transmute_copy(&healthpolicy),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedApplicationHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::EndGetDeployedApplicationHealth(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedServicePackageHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationname: super::FabricTypes::FABRIC_URI,
            servicemanifestname: windows_core::PCWSTR,
            nodename: windows_core::PCWSTR,
            healthpolicy: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_POLICY,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::BeginGetDeployedServicePackageHealth(
                this,
                core::mem::transmute_copy(&applicationname),
                core::mem::transmute(&servicemanifestname),
                core::mem::transmute(&nodename),
                core::mem::transmute_copy(&healthpolicy),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedServicePackageHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient_Impl::EndGetDeployedServicePackageHealth(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            ReportHealth: ReportHealth::<Identity, OFFSET>,
            BeginGetClusterHealth: BeginGetClusterHealth::<Identity, OFFSET>,
            EndGetClusterHealth: EndGetClusterHealth::<Identity, OFFSET>,
            BeginGetNodeHealth: BeginGetNodeHealth::<Identity, OFFSET>,
            EndGetNodeHealth: EndGetNodeHealth::<Identity, OFFSET>,
            BeginGetApplicationHealth: BeginGetApplicationHealth::<Identity, OFFSET>,
            EndGetApplicationHealth: EndGetApplicationHealth::<Identity, OFFSET>,
            BeginGetServiceHealth: BeginGetServiceHealth::<Identity, OFFSET>,
            EndGetServiceHealth: EndGetServiceHealth::<Identity, OFFSET>,
            BeginGetPartitionHealth: BeginGetPartitionHealth::<Identity, OFFSET>,
            EndGetPartitionHealth: EndGetPartitionHealth::<Identity, OFFSET>,
            BeginGetReplicaHealth: BeginGetReplicaHealth::<Identity, OFFSET>,
            EndGetReplicaHealth: EndGetReplicaHealth::<Identity, OFFSET>,
            BeginGetDeployedApplicationHealth: BeginGetDeployedApplicationHealth::<Identity, OFFSET>,
            EndGetDeployedApplicationHealth: EndGetDeployedApplicationHealth::<Identity, OFFSET>,
            BeginGetDeployedServicePackageHealth: BeginGetDeployedServicePackageHealth::<
                Identity,
                OFFSET,
            >,
            EndGetDeployedServicePackageHealth: EndGetDeployedServicePackageHealth::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricHealthClient as windows_core::Interface>::IID
    }
}
pub trait IFabricHealthClient2_Impl: Sized + IFabricHealthClient_Impl {
    fn BeginGetClusterHealth2(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetClusterHealth2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricClusterHealthResult>;
    fn BeginGetNodeHealth2(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NODE_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetNodeHealth2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricNodeHealthResult>;
    fn BeginGetApplicationHealth2(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetApplicationHealth2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricApplicationHealthResult>;
    fn BeginGetServiceHealth2(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetServiceHealth2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricServiceHealthResult>;
    fn BeginGetPartitionHealth2(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetPartitionHealth2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricPartitionHealthResult>;
    fn BeginGetReplicaHealth2(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetReplicaHealth2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricReplicaHealthResult>;
    fn BeginGetDeployedApplicationHealth2(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedApplicationHealth2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricDeployedApplicationHealthResult>;
    fn BeginGetDeployedServicePackageHealth2(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedServicePackageHealth2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricDeployedServicePackageHealthResult>;
}
impl windows_core::RuntimeName for IFabricHealthClient2 {}
impl IFabricHealthClient2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricHealthClient2_Vtbl
    where
        Identity: IFabricHealthClient2_Impl,
    {
        unsafe extern "system" fn BeginGetClusterHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::BeginGetClusterHealth2(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetClusterHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::EndGetClusterHealth2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetNodeHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_NODE_HEALTH_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::BeginGetNodeHealth2(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetNodeHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::EndGetNodeHealth2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetApplicationHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::BeginGetApplicationHealth2(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::EndGetApplicationHealth2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetServiceHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::BeginGetServiceHealth2(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::EndGetServiceHealth2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetPartitionHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::BeginGetPartitionHealth2(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetPartitionHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::EndGetPartitionHealth2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetReplicaHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::BeginGetReplicaHealth2(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetReplicaHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::EndGetReplicaHealth2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedApplicationHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::BeginGetDeployedApplicationHealth2(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedApplicationHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::EndGetDeployedApplicationHealth2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedServicePackageHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::BeginGetDeployedServicePackageHealth2(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedServicePackageHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient2_Impl::EndGetDeployedServicePackageHealth2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricHealthClient_Vtbl::new::<Identity, OFFSET>(),
            BeginGetClusterHealth2: BeginGetClusterHealth2::<Identity, OFFSET>,
            EndGetClusterHealth2: EndGetClusterHealth2::<Identity, OFFSET>,
            BeginGetNodeHealth2: BeginGetNodeHealth2::<Identity, OFFSET>,
            EndGetNodeHealth2: EndGetNodeHealth2::<Identity, OFFSET>,
            BeginGetApplicationHealth2: BeginGetApplicationHealth2::<Identity, OFFSET>,
            EndGetApplicationHealth2: EndGetApplicationHealth2::<Identity, OFFSET>,
            BeginGetServiceHealth2: BeginGetServiceHealth2::<Identity, OFFSET>,
            EndGetServiceHealth2: EndGetServiceHealth2::<Identity, OFFSET>,
            BeginGetPartitionHealth2: BeginGetPartitionHealth2::<Identity, OFFSET>,
            EndGetPartitionHealth2: EndGetPartitionHealth2::<Identity, OFFSET>,
            BeginGetReplicaHealth2: BeginGetReplicaHealth2::<Identity, OFFSET>,
            EndGetReplicaHealth2: EndGetReplicaHealth2::<Identity, OFFSET>,
            BeginGetDeployedApplicationHealth2: BeginGetDeployedApplicationHealth2::<
                Identity,
                OFFSET,
            >,
            EndGetDeployedApplicationHealth2: EndGetDeployedApplicationHealth2::<Identity, OFFSET>,
            BeginGetDeployedServicePackageHealth2: BeginGetDeployedServicePackageHealth2::<
                Identity,
                OFFSET,
            >,
            EndGetDeployedServicePackageHealth2: EndGetDeployedServicePackageHealth2::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricHealthClient2 as windows_core::Interface>::IID
            || iid == &<IFabricHealthClient as windows_core::Interface>::IID
    }
}
pub trait IFabricHealthClient3_Impl: Sized + IFabricHealthClient2_Impl {
    fn BeginGetClusterHealthChunk(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetClusterHealthChunk(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetClusterHealthChunkResult>;
}
impl windows_core::RuntimeName for IFabricHealthClient3 {}
impl IFabricHealthClient3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricHealthClient3_Vtbl
    where
        Identity: IFabricHealthClient3_Impl,
    {
        unsafe extern "system" fn BeginGetClusterHealthChunk<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient3_Impl::BeginGetClusterHealthChunk(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetClusterHealthChunk<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricHealthClient3_Impl::EndGetClusterHealthChunk(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricHealthClient2_Vtbl::new::<Identity, OFFSET>(),
            BeginGetClusterHealthChunk: BeginGetClusterHealthChunk::<Identity, OFFSET>,
            EndGetClusterHealthChunk: EndGetClusterHealthChunk::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricHealthClient3 as windows_core::Interface>::IID
            || iid == &<IFabricHealthClient as windows_core::Interface>::IID
            || iid == &<IFabricHealthClient2 as windows_core::Interface>::IID
    }
}
pub trait IFabricHealthClient4_Impl: Sized + IFabricHealthClient3_Impl {
    fn ReportHealth2(
        &self,
        healthreport: *const super::FabricTypes::FABRIC_HEALTH_REPORT,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricHealthClient4 {}
impl IFabricHealthClient4_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricHealthClient4_Vtbl
    where
        Identity: IFabricHealthClient4_Impl,
    {
        unsafe extern "system" fn ReportHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthreport: *const super::FabricTypes::FABRIC_HEALTH_REPORT,
            sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricHealthClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricHealthClient4_Impl::ReportHealth2(
                this,
                core::mem::transmute_copy(&healthreport),
                core::mem::transmute_copy(&sendoptions),
            )
            .into()
        }
        Self {
            base__: IFabricHealthClient3_Vtbl::new::<Identity, OFFSET>(),
            ReportHealth2: ReportHealth2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricHealthClient4 as windows_core::Interface>::IID
            || iid == &<IFabricHealthClient as windows_core::Interface>::IID
            || iid == &<IFabricHealthClient2 as windows_core::Interface>::IID
            || iid == &<IFabricHealthClient3 as windows_core::Interface>::IID
    }
}
pub trait IFabricInfrastructureServiceClient_Impl: Sized {
    fn BeginInvokeInfrastructureCommand(
        &self,
        servicename: super::FabricTypes::FABRIC_URI,
        command: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndInvokeInfrastructureCommand(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn BeginInvokeInfrastructureQuery(
        &self,
        servicename: super::FabricTypes::FABRIC_URI,
        command: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndInvokeInfrastructureQuery(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
}
impl windows_core::RuntimeName for IFabricInfrastructureServiceClient {}
impl IFabricInfrastructureServiceClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricInfrastructureServiceClient_Vtbl
    where
        Identity: IFabricInfrastructureServiceClient_Impl,
    {
        unsafe extern "system" fn BeginInvokeInfrastructureCommand<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicename: super::FabricTypes::FABRIC_URI,
            command: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricInfrastructureServiceClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricInfrastructureServiceClient_Impl::BeginInvokeInfrastructureCommand(
                this,
                core::mem::transmute_copy(&servicename),
                core::mem::transmute(&command),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndInvokeInfrastructureCommand<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricInfrastructureServiceClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricInfrastructureServiceClient_Impl::EndInvokeInfrastructureCommand(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginInvokeInfrastructureQuery<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicename: super::FabricTypes::FABRIC_URI,
            command: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricInfrastructureServiceClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricInfrastructureServiceClient_Impl::BeginInvokeInfrastructureQuery(
                this,
                core::mem::transmute_copy(&servicename),
                core::mem::transmute(&command),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndInvokeInfrastructureQuery<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricInfrastructureServiceClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricInfrastructureServiceClient_Impl::EndInvokeInfrastructureQuery(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginInvokeInfrastructureCommand: BeginInvokeInfrastructureCommand::<Identity, OFFSET>,
            EndInvokeInfrastructureCommand: EndInvokeInfrastructureCommand::<Identity, OFFSET>,
            BeginInvokeInfrastructureQuery: BeginInvokeInfrastructureQuery::<Identity, OFFSET>,
            EndInvokeInfrastructureQuery: EndInvokeInfrastructureQuery::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricInfrastructureServiceClient as windows_core::Interface>::IID
    }
}
pub trait IFabricMovePrimaryResult_Impl: Sized {
    fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_MOVE_PRIMARY_RESULT;
}
impl windows_core::RuntimeName for IFabricMovePrimaryResult {}
impl IFabricMovePrimaryResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricMovePrimaryResult_Vtbl
    where
        Identity: IFabricMovePrimaryResult_Impl,
    {
        unsafe extern "system" fn get_Result<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_MOVE_PRIMARY_RESULT
        where
            Identity: IFabricMovePrimaryResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricMovePrimaryResult_Impl::get_Result(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Result: get_Result::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricMovePrimaryResult as windows_core::Interface>::IID
    }
}
pub trait IFabricMoveSecondaryResult_Impl: Sized {
    fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_MOVE_SECONDARY_RESULT;
}
impl windows_core::RuntimeName for IFabricMoveSecondaryResult {}
impl IFabricMoveSecondaryResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricMoveSecondaryResult_Vtbl
    where
        Identity: IFabricMoveSecondaryResult_Impl,
    {
        unsafe extern "system" fn get_Result<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_MOVE_SECONDARY_RESULT
        where
            Identity: IFabricMoveSecondaryResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricMoveSecondaryResult_Impl::get_Result(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Result: get_Result::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricMoveSecondaryResult as windows_core::Interface>::IID
    }
}
pub trait IFabricNameEnumerationResult_Impl: Sized {
    fn get_EnumerationStatus(&self) -> super::FabricTypes::FABRIC_ENUMERATION_STATUS;
    fn GetNames(
        &self,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_URI>;
}
impl windows_core::RuntimeName for IFabricNameEnumerationResult {}
impl IFabricNameEnumerationResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricNameEnumerationResult_Vtbl
    where
        Identity: IFabricNameEnumerationResult_Impl,
    {
        unsafe extern "system" fn get_EnumerationStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_ENUMERATION_STATUS
        where
            Identity: IFabricNameEnumerationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricNameEnumerationResult_Impl::get_EnumerationStatus(this)
        }
        unsafe extern "system" fn GetNames<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            itemcount: *mut u32,
            buffereditems: *mut *mut super::FabricTypes::FABRIC_URI,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNameEnumerationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNameEnumerationResult_Impl::GetNames(
                this,
                core::mem::transmute_copy(&itemcount),
            ) {
                Ok(ok__) => {
                    buffereditems.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_EnumerationStatus: get_EnumerationStatus::<Identity, OFFSET>,
            GetNames: GetNames::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricNameEnumerationResult as windows_core::Interface>::IID
    }
}
pub trait IFabricNetworkManagementClient_Impl: Sized {
    fn BeginCreateNetwork(
        &self,
        networkname: &windows_core::PCWSTR,
        description: *const super::FabricTypes::FABRIC_NETWORK_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCreateNetwork(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginDeleteNetwork(
        &self,
        deletedescription: *const super::FabricTypes::FABRIC_DELETE_NETWORK_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeleteNetwork(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetNetworkList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NETWORK_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetNetworkList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetNetworkListResult>;
    fn BeginGetNetworkApplicationList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetNetworkApplicationList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetNetworkApplicationListResult>;
    fn BeginGetNetworkNodeList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NETWORK_NODE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetNetworkNodeList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetNetworkNodeListResult>;
    fn BeginGetApplicationNetworkList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetApplicationNetworkList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetApplicationNetworkListResult>;
    fn BeginGetDeployedNetworkList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedNetworkList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetDeployedNetworkListResult>;
    fn BeginGetDeployedNetworkCodePackageList(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedNetworkCodePackageList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetDeployedNetworkCodePackageListResult>;
}
impl windows_core::RuntimeName for IFabricNetworkManagementClient {}
impl IFabricNetworkManagementClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricNetworkManagementClient_Vtbl
    where
        Identity: IFabricNetworkManagementClient_Impl,
    {
        unsafe extern "system" fn BeginCreateNetwork<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            networkname: windows_core::PCWSTR,
            description: *const super::FabricTypes::FABRIC_NETWORK_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::BeginCreateNetwork(
                this,
                core::mem::transmute(&networkname),
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCreateNetwork<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricNetworkManagementClient_Impl::EndCreateNetwork(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginDeleteNetwork<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            deletedescription: *const super::FabricTypes::FABRIC_DELETE_NETWORK_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::BeginDeleteNetwork(
                this,
                core::mem::transmute_copy(&deletedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeleteNetwork<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricNetworkManagementClient_Impl::EndDeleteNetwork(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetNetworkList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_NETWORK_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::BeginGetNetworkList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetNetworkList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::EndGetNetworkList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetNetworkApplicationList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::BeginGetNetworkApplicationList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetNetworkApplicationList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::EndGetNetworkApplicationList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetNetworkNodeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_NETWORK_NODE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::BeginGetNetworkNodeList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetNetworkNodeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::EndGetNetworkNodeList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetApplicationNetworkList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::BeginGetApplicationNetworkList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationNetworkList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::EndGetApplicationNetworkList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedNetworkList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::BeginGetDeployedNetworkList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedNetworkList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::EndGetDeployedNetworkList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedNetworkCodePackageList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::BeginGetDeployedNetworkCodePackageList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedNetworkCodePackageList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNetworkManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNetworkManagementClient_Impl::EndGetDeployedNetworkCodePackageList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginCreateNetwork: BeginCreateNetwork::<Identity, OFFSET>,
            EndCreateNetwork: EndCreateNetwork::<Identity, OFFSET>,
            BeginDeleteNetwork: BeginDeleteNetwork::<Identity, OFFSET>,
            EndDeleteNetwork: EndDeleteNetwork::<Identity, OFFSET>,
            BeginGetNetworkList: BeginGetNetworkList::<Identity, OFFSET>,
            EndGetNetworkList: EndGetNetworkList::<Identity, OFFSET>,
            BeginGetNetworkApplicationList: BeginGetNetworkApplicationList::<Identity, OFFSET>,
            EndGetNetworkApplicationList: EndGetNetworkApplicationList::<Identity, OFFSET>,
            BeginGetNetworkNodeList: BeginGetNetworkNodeList::<Identity, OFFSET>,
            EndGetNetworkNodeList: EndGetNetworkNodeList::<Identity, OFFSET>,
            BeginGetApplicationNetworkList: BeginGetApplicationNetworkList::<Identity, OFFSET>,
            EndGetApplicationNetworkList: EndGetApplicationNetworkList::<Identity, OFFSET>,
            BeginGetDeployedNetworkList: BeginGetDeployedNetworkList::<Identity, OFFSET>,
            EndGetDeployedNetworkList: EndGetDeployedNetworkList::<Identity, OFFSET>,
            BeginGetDeployedNetworkCodePackageList: BeginGetDeployedNetworkCodePackageList::<
                Identity,
                OFFSET,
            >,
            EndGetDeployedNetworkCodePackageList: EndGetDeployedNetworkCodePackageList::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricNetworkManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricNodeHealthResult_Impl: Sized {
    fn get_NodeHealth(&self) -> *mut super::FabricTypes::FABRIC_NODE_HEALTH;
}
impl windows_core::RuntimeName for IFabricNodeHealthResult {}
impl IFabricNodeHealthResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricNodeHealthResult_Vtbl
    where
        Identity: IFabricNodeHealthResult_Impl,
    {
        unsafe extern "system" fn get_NodeHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NODE_HEALTH
        where
            Identity: IFabricNodeHealthResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricNodeHealthResult_Impl::get_NodeHealth(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_NodeHealth: get_NodeHealth::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricNodeHealthResult as windows_core::Interface>::IID
    }
}
pub trait IFabricNodeTransitionProgressResult_Impl: Sized {
    fn get_Progress(&self) -> *mut super::FabricTypes::FABRIC_NODE_TRANSITION_PROGRESS;
}
impl windows_core::RuntimeName for IFabricNodeTransitionProgressResult {}
impl IFabricNodeTransitionProgressResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricNodeTransitionProgressResult_Vtbl
    where
        Identity: IFabricNodeTransitionProgressResult_Impl,
    {
        unsafe extern "system" fn get_Progress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NODE_TRANSITION_PROGRESS
        where
            Identity: IFabricNodeTransitionProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricNodeTransitionProgressResult_Impl::get_Progress(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Progress: get_Progress::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricNodeTransitionProgressResult as windows_core::Interface>::IID
    }
}
pub trait IFabricOrchestrationUpgradeStatusResult_Impl: Sized {
    fn get_Progress(&self) -> *mut super::FabricTypes::FABRIC_ORCHESTRATION_UPGRADE_PROGRESS;
}
impl windows_core::RuntimeName for IFabricOrchestrationUpgradeStatusResult {}
impl IFabricOrchestrationUpgradeStatusResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricOrchestrationUpgradeStatusResult_Vtbl
    where
        Identity: IFabricOrchestrationUpgradeStatusResult_Impl,
    {
        unsafe extern "system" fn get_Progress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_ORCHESTRATION_UPGRADE_PROGRESS
        where
            Identity: IFabricOrchestrationUpgradeStatusResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricOrchestrationUpgradeStatusResult_Impl::get_Progress(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Progress: get_Progress::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricOrchestrationUpgradeStatusResult as windows_core::Interface>::IID
    }
}
pub trait IFabricPartitionDataLossProgressResult_Impl: Sized {
    fn get_Progress(&self) -> *mut super::FabricTypes::FABRIC_PARTITION_DATA_LOSS_PROGRESS;
}
impl windows_core::RuntimeName for IFabricPartitionDataLossProgressResult {}
impl IFabricPartitionDataLossProgressResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPartitionDataLossProgressResult_Vtbl
    where
        Identity: IFabricPartitionDataLossProgressResult_Impl,
    {
        unsafe extern "system" fn get_Progress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PARTITION_DATA_LOSS_PROGRESS
        where
            Identity: IFabricPartitionDataLossProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPartitionDataLossProgressResult_Impl::get_Progress(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Progress: get_Progress::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPartitionDataLossProgressResult as windows_core::Interface>::IID
    }
}
pub trait IFabricPartitionHealthResult_Impl: Sized {
    fn get_PartitionHealth(&self) -> *mut super::FabricTypes::FABRIC_PARTITION_HEALTH;
}
impl windows_core::RuntimeName for IFabricPartitionHealthResult {}
impl IFabricPartitionHealthResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPartitionHealthResult_Vtbl
    where
        Identity: IFabricPartitionHealthResult_Impl,
    {
        unsafe extern "system" fn get_PartitionHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PARTITION_HEALTH
        where
            Identity: IFabricPartitionHealthResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPartitionHealthResult_Impl::get_PartitionHealth(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_PartitionHealth: get_PartitionHealth::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPartitionHealthResult as windows_core::Interface>::IID
    }
}
pub trait IFabricPartitionQuorumLossProgressResult_Impl: Sized {
    fn get_Progress(&self) -> *mut super::FabricTypes::FABRIC_PARTITION_QUORUM_LOSS_PROGRESS;
}
impl windows_core::RuntimeName for IFabricPartitionQuorumLossProgressResult {}
impl IFabricPartitionQuorumLossProgressResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPartitionQuorumLossProgressResult_Vtbl
    where
        Identity: IFabricPartitionQuorumLossProgressResult_Impl,
    {
        unsafe extern "system" fn get_Progress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PARTITION_QUORUM_LOSS_PROGRESS
        where
            Identity: IFabricPartitionQuorumLossProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPartitionQuorumLossProgressResult_Impl::get_Progress(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Progress: get_Progress::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPartitionQuorumLossProgressResult as windows_core::Interface>::IID
    }
}
pub trait IFabricPartitionRestartProgressResult_Impl: Sized {
    fn get_Progress(&self) -> *mut super::FabricTypes::FABRIC_PARTITION_RESTART_PROGRESS;
}
impl windows_core::RuntimeName for IFabricPartitionRestartProgressResult {}
impl IFabricPartitionRestartProgressResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPartitionRestartProgressResult_Vtbl
    where
        Identity: IFabricPartitionRestartProgressResult_Impl,
    {
        unsafe extern "system" fn get_Progress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_PARTITION_RESTART_PROGRESS
        where
            Identity: IFabricPartitionRestartProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPartitionRestartProgressResult_Impl::get_Progress(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Progress: get_Progress::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPartitionRestartProgressResult as windows_core::Interface>::IID
    }
}
pub trait IFabricPropertyBatchResult_Impl: Sized {
    fn GetProperty(
        &self,
        operationindexinrequest: u32,
    ) -> windows_core::Result<IFabricPropertyValueResult>;
}
impl windows_core::RuntimeName for IFabricPropertyBatchResult {}
impl IFabricPropertyBatchResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPropertyBatchResult_Vtbl
    where
        Identity: IFabricPropertyBatchResult_Impl,
    {
        unsafe extern "system" fn GetProperty<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            operationindexinrequest: u32,
            property: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyBatchResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyBatchResult_Impl::GetProperty(
                this,
                core::mem::transmute_copy(&operationindexinrequest),
            ) {
                Ok(ok__) => {
                    property.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetProperty: GetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPropertyBatchResult as windows_core::Interface>::IID
    }
}
pub trait IFabricPropertyEnumerationResult_Impl: Sized {
    fn get_EnumerationStatus(&self) -> super::FabricTypes::FABRIC_ENUMERATION_STATUS;
    fn get_PropertyCount(&self) -> u32;
    fn GetProperty(&self, index: u32) -> windows_core::Result<IFabricPropertyValueResult>;
}
impl windows_core::RuntimeName for IFabricPropertyEnumerationResult {}
impl IFabricPropertyEnumerationResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPropertyEnumerationResult_Vtbl
    where
        Identity: IFabricPropertyEnumerationResult_Impl,
    {
        unsafe extern "system" fn get_EnumerationStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_ENUMERATION_STATUS
        where
            Identity: IFabricPropertyEnumerationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyEnumerationResult_Impl::get_EnumerationStatus(this)
        }
        unsafe extern "system" fn get_PropertyCount<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> u32
        where
            Identity: IFabricPropertyEnumerationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyEnumerationResult_Impl::get_PropertyCount(this)
        }
        unsafe extern "system" fn GetProperty<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            index: u32,
            property: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyEnumerationResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyEnumerationResult_Impl::GetProperty(
                this,
                core::mem::transmute_copy(&index),
            ) {
                Ok(ok__) => {
                    property.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_EnumerationStatus: get_EnumerationStatus::<Identity, OFFSET>,
            get_PropertyCount: get_PropertyCount::<Identity, OFFSET>,
            GetProperty: GetProperty::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPropertyEnumerationResult as windows_core::Interface>::IID
    }
}
pub trait IFabricPropertyManagementClient_Impl: Sized {
    fn BeginCreateName(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCreateName(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginDeleteName(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeleteName(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginNameExists(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndNameExists(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<u8>;
    fn BeginEnumerateSubNames(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        previousresult: Option<&IFabricNameEnumerationResult>,
        recursive: windows::Win32::Foundation::BOOLEAN,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndEnumerateSubNames(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricNameEnumerationResult>;
    fn BeginPutPropertyBinary(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        propertyname: &windows_core::PCWSTR,
        datalength: u32,
        data: *const u8,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndPutPropertyBinary(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginPutPropertyInt64(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        propertyname: &windows_core::PCWSTR,
        data: i64,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndPutPropertyInt64(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginPutPropertyDouble(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        propertyname: &windows_core::PCWSTR,
        data: f64,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndPutPropertyDouble(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginPutPropertyWString(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        propertyname: &windows_core::PCWSTR,
        data: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndPutPropertyWString(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginPutPropertyGuid(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        propertyname: &windows_core::PCWSTR,
        data: *const windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndPutPropertyGuid(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginDeleteProperty(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        propertyname: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeleteProperty(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetPropertyMetadata(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        propertyname: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetPropertyMetadata(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricPropertyMetadataResult>;
    fn BeginGetProperty(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        propertyname: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetProperty(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricPropertyValueResult>;
    fn BeginSubmitPropertyBatch(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        operationcount: u32,
        operations: *const super::FabricTypes::FABRIC_PROPERTY_BATCH_OPERATION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndSubmitPropertyBatch(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
        failedoperationindexinrequest: *mut u32,
    ) -> windows_core::Result<IFabricPropertyBatchResult>;
    fn BeginEnumerateProperties(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        includevalues: windows::Win32::Foundation::BOOLEAN,
        previousresult: Option<&IFabricPropertyEnumerationResult>,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndEnumerateProperties(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricPropertyEnumerationResult>;
}
impl windows_core::RuntimeName for IFabricPropertyManagementClient {}
impl IFabricPropertyManagementClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPropertyManagementClient_Vtbl
    where
        Identity: IFabricPropertyManagementClient_Impl,
    {
        unsafe extern "system" fn BeginCreateName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginCreateName(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCreateName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyManagementClient_Impl::EndCreateName(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginDeleteName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginDeleteName(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeleteName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyManagementClient_Impl::EndDeleteName(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginNameExists<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginNameExists(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndNameExists<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            value: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::EndNameExists(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    value.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginEnumerateSubNames<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            previousresult: *mut core::ffi::c_void,
            recursive: windows::Win32::Foundation::BOOLEAN,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginEnumerateSubNames(
                this,
                core::mem::transmute_copy(&name),
                windows_core::from_raw_borrowed(&previousresult),
                core::mem::transmute_copy(&recursive),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndEnumerateSubNames<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::EndEnumerateSubNames(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginPutPropertyBinary<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            propertyname: windows_core::PCWSTR,
            datalength: u32,
            data: *const u8,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginPutPropertyBinary(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute(&propertyname),
                core::mem::transmute_copy(&datalength),
                core::mem::transmute_copy(&data),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndPutPropertyBinary<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyManagementClient_Impl::EndPutPropertyBinary(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginPutPropertyInt64<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            propertyname: windows_core::PCWSTR,
            data: i64,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginPutPropertyInt64(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute(&propertyname),
                core::mem::transmute_copy(&data),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndPutPropertyInt64<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyManagementClient_Impl::EndPutPropertyInt64(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginPutPropertyDouble<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            propertyname: windows_core::PCWSTR,
            data: f64,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginPutPropertyDouble(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute(&propertyname),
                core::mem::transmute_copy(&data),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndPutPropertyDouble<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyManagementClient_Impl::EndPutPropertyDouble(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginPutPropertyWString<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            propertyname: windows_core::PCWSTR,
            data: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginPutPropertyWString(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute(&propertyname),
                core::mem::transmute(&data),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndPutPropertyWString<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyManagementClient_Impl::EndPutPropertyWString(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginPutPropertyGuid<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            propertyname: windows_core::PCWSTR,
            data: *const windows_core::GUID,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginPutPropertyGuid(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute(&propertyname),
                core::mem::transmute_copy(&data),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndPutPropertyGuid<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyManagementClient_Impl::EndPutPropertyGuid(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginDeleteProperty<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            propertyname: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginDeleteProperty(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute(&propertyname),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeleteProperty<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyManagementClient_Impl::EndDeleteProperty(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetPropertyMetadata<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            propertyname: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginGetPropertyMetadata(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute(&propertyname),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetPropertyMetadata<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::EndGetPropertyMetadata(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetProperty<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            propertyname: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginGetProperty(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute(&propertyname),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetProperty<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::EndGetProperty(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginSubmitPropertyBatch<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            operationcount: u32,
            operations: *const super::FabricTypes::FABRIC_PROPERTY_BATCH_OPERATION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginSubmitPropertyBatch(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&operationcount),
                core::mem::transmute_copy(&operations),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSubmitPropertyBatch<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            failedoperationindexinrequest: *mut u32,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::EndSubmitPropertyBatch(
                this,
                windows_core::from_raw_borrowed(&context),
                core::mem::transmute_copy(&failedoperationindexinrequest),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginEnumerateProperties<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            includevalues: windows::Win32::Foundation::BOOLEAN,
            previousresult: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::BeginEnumerateProperties(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&includevalues),
                windows_core::from_raw_borrowed(&previousresult),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndEnumerateProperties<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient_Impl::EndEnumerateProperties(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginCreateName: BeginCreateName::<Identity, OFFSET>,
            EndCreateName: EndCreateName::<Identity, OFFSET>,
            BeginDeleteName: BeginDeleteName::<Identity, OFFSET>,
            EndDeleteName: EndDeleteName::<Identity, OFFSET>,
            BeginNameExists: BeginNameExists::<Identity, OFFSET>,
            EndNameExists: EndNameExists::<Identity, OFFSET>,
            BeginEnumerateSubNames: BeginEnumerateSubNames::<Identity, OFFSET>,
            EndEnumerateSubNames: EndEnumerateSubNames::<Identity, OFFSET>,
            BeginPutPropertyBinary: BeginPutPropertyBinary::<Identity, OFFSET>,
            EndPutPropertyBinary: EndPutPropertyBinary::<Identity, OFFSET>,
            BeginPutPropertyInt64: BeginPutPropertyInt64::<Identity, OFFSET>,
            EndPutPropertyInt64: EndPutPropertyInt64::<Identity, OFFSET>,
            BeginPutPropertyDouble: BeginPutPropertyDouble::<Identity, OFFSET>,
            EndPutPropertyDouble: EndPutPropertyDouble::<Identity, OFFSET>,
            BeginPutPropertyWString: BeginPutPropertyWString::<Identity, OFFSET>,
            EndPutPropertyWString: EndPutPropertyWString::<Identity, OFFSET>,
            BeginPutPropertyGuid: BeginPutPropertyGuid::<Identity, OFFSET>,
            EndPutPropertyGuid: EndPutPropertyGuid::<Identity, OFFSET>,
            BeginDeleteProperty: BeginDeleteProperty::<Identity, OFFSET>,
            EndDeleteProperty: EndDeleteProperty::<Identity, OFFSET>,
            BeginGetPropertyMetadata: BeginGetPropertyMetadata::<Identity, OFFSET>,
            EndGetPropertyMetadata: EndGetPropertyMetadata::<Identity, OFFSET>,
            BeginGetProperty: BeginGetProperty::<Identity, OFFSET>,
            EndGetProperty: EndGetProperty::<Identity, OFFSET>,
            BeginSubmitPropertyBatch: BeginSubmitPropertyBatch::<Identity, OFFSET>,
            EndSubmitPropertyBatch: EndSubmitPropertyBatch::<Identity, OFFSET>,
            BeginEnumerateProperties: BeginEnumerateProperties::<Identity, OFFSET>,
            EndEnumerateProperties: EndEnumerateProperties::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPropertyManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricPropertyManagementClient2_Impl:
    Sized + IFabricPropertyManagementClient_Impl
{
    fn BeginPutCustomPropertyOperation(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        propertyoperation: *const super::FabricTypes::FABRIC_PUT_CUSTOM_PROPERTY_OPERATION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndPutCustomPropertyOperation(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricPropertyManagementClient2 {}
impl IFabricPropertyManagementClient2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPropertyManagementClient2_Vtbl
    where
        Identity: IFabricPropertyManagementClient2_Impl,
    {
        unsafe extern "system" fn BeginPutCustomPropertyOperation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            propertyoperation: *const super::FabricTypes::FABRIC_PUT_CUSTOM_PROPERTY_OPERATION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyManagementClient2_Impl::BeginPutCustomPropertyOperation(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&propertyoperation),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndPutCustomPropertyOperation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyManagementClient2_Impl::EndPutCustomPropertyOperation(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricPropertyManagementClient_Vtbl::new::<Identity, OFFSET>(),
            BeginPutCustomPropertyOperation: BeginPutCustomPropertyOperation::<Identity, OFFSET>,
            EndPutCustomPropertyOperation: EndPutCustomPropertyOperation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPropertyManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricPropertyManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricPropertyMetadataResult_Impl: Sized {
    fn get_Metadata(&self) -> *mut super::FabricTypes::FABRIC_NAMED_PROPERTY_METADATA;
}
impl windows_core::RuntimeName for IFabricPropertyMetadataResult {}
impl IFabricPropertyMetadataResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPropertyMetadataResult_Vtbl
    where
        Identity: IFabricPropertyMetadataResult_Impl,
    {
        unsafe extern "system" fn get_Metadata<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NAMED_PROPERTY_METADATA
        where
            Identity: IFabricPropertyMetadataResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyMetadataResult_Impl::get_Metadata(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Metadata: get_Metadata::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPropertyMetadataResult as windows_core::Interface>::IID
    }
}
pub trait IFabricPropertyValueResult_Impl: Sized {
    fn get_Property(&self) -> *mut super::FabricTypes::FABRIC_NAMED_PROPERTY;
    fn GetValueAsBinary(&self, bytecount: *mut u32) -> windows_core::Result<*mut u8>;
    fn GetValueAsInt64(&self) -> windows_core::Result<i64>;
    fn GetValueAsDouble(&self) -> windows_core::Result<f64>;
    fn GetValueAsWString(&self) -> windows_core::Result<windows_core::PCWSTR>;
    fn GetValueAsGuid(&self) -> windows_core::Result<windows_core::GUID>;
}
impl windows_core::RuntimeName for IFabricPropertyValueResult {}
impl IFabricPropertyValueResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPropertyValueResult_Vtbl
    where
        Identity: IFabricPropertyValueResult_Impl,
    {
        unsafe extern "system" fn get_Property<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NAMED_PROPERTY
        where
            Identity: IFabricPropertyValueResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPropertyValueResult_Impl::get_Property(this)
        }
        unsafe extern "system" fn GetValueAsBinary<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            bytecount: *mut u32,
            bufferedvalue: *mut *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyValueResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyValueResult_Impl::GetValueAsBinary(
                this,
                core::mem::transmute_copy(&bytecount),
            ) {
                Ok(ok__) => {
                    bufferedvalue.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValueAsInt64<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyValueResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyValueResult_Impl::GetValueAsInt64(this) {
                Ok(ok__) => {
                    value.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValueAsDouble<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut f64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyValueResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyValueResult_Impl::GetValueAsDouble(this) {
                Ok(ok__) => {
                    value.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValueAsWString<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            bufferedvalue: *mut windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyValueResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyValueResult_Impl::GetValueAsWString(this) {
                Ok(ok__) => {
                    bufferedvalue.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValueAsGuid<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut windows_core::GUID,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPropertyValueResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPropertyValueResult_Impl::GetValueAsGuid(this) {
                Ok(ok__) => {
                    value.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Property: get_Property::<Identity, OFFSET>,
            GetValueAsBinary: GetValueAsBinary::<Identity, OFFSET>,
            GetValueAsInt64: GetValueAsInt64::<Identity, OFFSET>,
            GetValueAsDouble: GetValueAsDouble::<Identity, OFFSET>,
            GetValueAsWString: GetValueAsWString::<Identity, OFFSET>,
            GetValueAsGuid: GetValueAsGuid::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPropertyValueResult as windows_core::Interface>::IID
    }
}
pub trait IFabricQueryClient_Impl: Sized {
    fn BeginGetNodeList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NODE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetNodeList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetNodeListResult>;
    fn BeginGetApplicationTypeList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetApplicationTypeList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetApplicationTypeListResult>;
    fn BeginGetServiceTypeList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetServiceTypeList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetServiceTypeListResult>;
    fn BeginGetApplicationList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_APPLICATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetApplicationList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetApplicationListResult>;
    fn BeginGetServiceList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetServiceList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetServiceListResult>;
    fn BeginGetPartitionList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetPartitionList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetPartitionListResult>;
    fn BeginGetReplicaList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetReplicaList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetReplicaListResult>;
    fn BeginGetDeployedApplicationList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedApplicationList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetDeployedApplicationListResult>;
    fn BeginGetDeployedServicePackageList(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedServicePackageList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetDeployedServicePackageListResult>;
    fn BeginGetDeployedServiceTypeList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedServiceTypeList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetDeployedServiceTypeListResult>;
    fn BeginGetDeployedCodePackageList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedCodePackageList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetDeployedCodePackageListResult>;
    fn BeginGetDeployedReplicaList(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedReplicaList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetDeployedReplicaListResult>;
}
impl windows_core::RuntimeName for IFabricQueryClient {}
impl IFabricQueryClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricQueryClient_Vtbl
    where
        Identity: IFabricQueryClient_Impl,
    {
        unsafe extern "system" fn BeginGetNodeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_NODE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetNodeList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetNodeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetNodeList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetApplicationTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetApplicationTypeList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetApplicationTypeList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetServiceTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetServiceTypeList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetServiceTypeList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetApplicationList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_APPLICATION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetApplicationList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetApplicationList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetServiceList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_SERVICE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetServiceList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetServiceList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetPartitionList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetPartitionList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetPartitionList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetPartitionList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetReplicaList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetReplicaList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetReplicaList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetReplicaList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedApplicationList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetDeployedApplicationList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedApplicationList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetDeployedApplicationList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedServicePackageList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetDeployedServicePackageList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedServicePackageList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetDeployedServicePackageList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedServiceTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetDeployedServiceTypeList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedServiceTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetDeployedServiceTypeList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedCodePackageList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetDeployedCodePackageList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedCodePackageList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetDeployedCodePackageList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetDeployedReplicaList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::BeginGetDeployedReplicaList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedReplicaList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient_Impl::EndGetDeployedReplicaList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginGetNodeList: BeginGetNodeList::<Identity, OFFSET>,
            EndGetNodeList: EndGetNodeList::<Identity, OFFSET>,
            BeginGetApplicationTypeList: BeginGetApplicationTypeList::<Identity, OFFSET>,
            EndGetApplicationTypeList: EndGetApplicationTypeList::<Identity, OFFSET>,
            BeginGetServiceTypeList: BeginGetServiceTypeList::<Identity, OFFSET>,
            EndGetServiceTypeList: EndGetServiceTypeList::<Identity, OFFSET>,
            BeginGetApplicationList: BeginGetApplicationList::<Identity, OFFSET>,
            EndGetApplicationList: EndGetApplicationList::<Identity, OFFSET>,
            BeginGetServiceList: BeginGetServiceList::<Identity, OFFSET>,
            EndGetServiceList: EndGetServiceList::<Identity, OFFSET>,
            BeginGetPartitionList: BeginGetPartitionList::<Identity, OFFSET>,
            EndGetPartitionList: EndGetPartitionList::<Identity, OFFSET>,
            BeginGetReplicaList: BeginGetReplicaList::<Identity, OFFSET>,
            EndGetReplicaList: EndGetReplicaList::<Identity, OFFSET>,
            BeginGetDeployedApplicationList: BeginGetDeployedApplicationList::<Identity, OFFSET>,
            EndGetDeployedApplicationList: EndGetDeployedApplicationList::<Identity, OFFSET>,
            BeginGetDeployedServicePackageList: BeginGetDeployedServicePackageList::<
                Identity,
                OFFSET,
            >,
            EndGetDeployedServicePackageList: EndGetDeployedServicePackageList::<Identity, OFFSET>,
            BeginGetDeployedServiceTypeList: BeginGetDeployedServiceTypeList::<Identity, OFFSET>,
            EndGetDeployedServiceTypeList: EndGetDeployedServiceTypeList::<Identity, OFFSET>,
            BeginGetDeployedCodePackageList: BeginGetDeployedCodePackageList::<Identity, OFFSET>,
            EndGetDeployedCodePackageList: EndGetDeployedCodePackageList::<Identity, OFFSET>,
            BeginGetDeployedReplicaList: BeginGetDeployedReplicaList::<Identity, OFFSET>,
            EndGetDeployedReplicaList: EndGetDeployedReplicaList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricQueryClient as windows_core::Interface>::IID
    }
}
pub trait IFabricQueryClient10_Impl: Sized + IFabricQueryClient9_Impl {
    fn BeginGetDeployedApplicationPagedList(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedApplicationPagedList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetDeployedApplicationPagedListResult>;
}
impl windows_core::RuntimeName for IFabricQueryClient10 {}
impl IFabricQueryClient10_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricQueryClient10_Vtbl
    where
        Identity: IFabricQueryClient10_Impl,
    {
        unsafe extern "system" fn BeginGetDeployedApplicationPagedList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient10_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient10_Impl::BeginGetDeployedApplicationPagedList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedApplicationPagedList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient10_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient10_Impl::EndGetDeployedApplicationPagedList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricQueryClient9_Vtbl::new::<Identity, OFFSET>(),
            BeginGetDeployedApplicationPagedList: BeginGetDeployedApplicationPagedList::<
                Identity,
                OFFSET,
            >,
            EndGetDeployedApplicationPagedList: EndGetDeployedApplicationPagedList::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricQueryClient10 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient2 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient3 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient4 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient5 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient6 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient7 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient8 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient9 as windows_core::Interface>::IID
    }
}
pub trait IFabricQueryClient2_Impl: Sized + IFabricQueryClient_Impl {
    fn BeginGetDeployedReplicaDetail(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetDeployedReplicaDetail(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetDeployedServiceReplicaDetailResult>;
    fn BeginGetClusterLoadInformation(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetClusterLoadInformation(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetClusterLoadInformationResult>;
    fn BeginGetPartitionLoadInformation(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetPartitionLoadInformation(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetPartitionLoadInformationResult>;
    fn BeginGetProvisionedFabricCodeVersionList(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetProvisionedFabricCodeVersionList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetProvisionedCodeVersionListResult>;
    fn BeginGetProvisionedFabricConfigVersionList(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetProvisionedFabricConfigVersionList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetProvisionedConfigVersionListResult>;
}
impl windows_core::RuntimeName for IFabricQueryClient2 {}
impl IFabricQueryClient2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricQueryClient2_Vtbl
    where
        Identity: IFabricQueryClient2_Impl,
    {
        unsafe extern "system" fn BeginGetDeployedReplicaDetail<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient2_Impl::BeginGetDeployedReplicaDetail(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetDeployedReplicaDetail<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient2_Impl::EndGetDeployedReplicaDetail(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetClusterLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient2_Impl::BeginGetClusterLoadInformation(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetClusterLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient2_Impl::EndGetClusterLoadInformation(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetPartitionLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient2_Impl::BeginGetPartitionLoadInformation(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetPartitionLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient2_Impl::EndGetPartitionLoadInformation(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetProvisionedFabricCodeVersionList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient2_Impl::BeginGetProvisionedFabricCodeVersionList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetProvisionedFabricCodeVersionList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient2_Impl::EndGetProvisionedFabricCodeVersionList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetProvisionedFabricConfigVersionList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient2_Impl::BeginGetProvisionedFabricConfigVersionList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetProvisionedFabricConfigVersionList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient2_Impl::EndGetProvisionedFabricConfigVersionList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricQueryClient_Vtbl::new::<Identity, OFFSET>(),
            BeginGetDeployedReplicaDetail: BeginGetDeployedReplicaDetail::<Identity, OFFSET>,
            EndGetDeployedReplicaDetail: EndGetDeployedReplicaDetail::<Identity, OFFSET>,
            BeginGetClusterLoadInformation: BeginGetClusterLoadInformation::<Identity, OFFSET>,
            EndGetClusterLoadInformation: EndGetClusterLoadInformation::<Identity, OFFSET>,
            BeginGetPartitionLoadInformation: BeginGetPartitionLoadInformation::<Identity, OFFSET>,
            EndGetPartitionLoadInformation: EndGetPartitionLoadInformation::<Identity, OFFSET>,
            BeginGetProvisionedFabricCodeVersionList: BeginGetProvisionedFabricCodeVersionList::<
                Identity,
                OFFSET,
            >,
            EndGetProvisionedFabricCodeVersionList: EndGetProvisionedFabricCodeVersionList::<
                Identity,
                OFFSET,
            >,
            BeginGetProvisionedFabricConfigVersionList: BeginGetProvisionedFabricConfigVersionList::<
                Identity,
                OFFSET,
            >,
            EndGetProvisionedFabricConfigVersionList: EndGetProvisionedFabricConfigVersionList::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricQueryClient2 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient as windows_core::Interface>::IID
    }
}
pub trait IFabricQueryClient3_Impl: Sized + IFabricQueryClient2_Impl {
    fn BeginGetNodeLoadInformation(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetNodeLoadInformation(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetNodeLoadInformationResult>;
    fn BeginGetReplicaLoadInformation(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetReplicaLoadInformation(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetReplicaLoadInformationResult>;
}
impl windows_core::RuntimeName for IFabricQueryClient3 {}
impl IFabricQueryClient3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricQueryClient3_Vtbl
    where
        Identity: IFabricQueryClient3_Impl,
    {
        unsafe extern "system" fn BeginGetNodeLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient3_Impl::BeginGetNodeLoadInformation(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetNodeLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient3_Impl::EndGetNodeLoadInformation(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetReplicaLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient3_Impl::BeginGetReplicaLoadInformation(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetReplicaLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient3_Impl::EndGetReplicaLoadInformation(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricQueryClient2_Vtbl::new::<Identity, OFFSET>(),
            BeginGetNodeLoadInformation: BeginGetNodeLoadInformation::<Identity, OFFSET>,
            EndGetNodeLoadInformation: EndGetNodeLoadInformation::<Identity, OFFSET>,
            BeginGetReplicaLoadInformation: BeginGetReplicaLoadInformation::<Identity, OFFSET>,
            EndGetReplicaLoadInformation: EndGetReplicaLoadInformation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricQueryClient3 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient2 as windows_core::Interface>::IID
    }
}
pub trait IFabricQueryClient4_Impl: Sized + IFabricQueryClient3_Impl {
    fn BeginGetServiceGroupMemberList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetServiceGroupMemberList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetServiceGroupMemberListResult>;
    fn BeginGetServiceGroupMemberTypeList(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetServiceGroupMemberTypeList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetServiceGroupMemberTypeListResult>;
}
impl windows_core::RuntimeName for IFabricQueryClient4 {}
impl IFabricQueryClient4_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricQueryClient4_Vtbl
    where
        Identity: IFabricQueryClient4_Impl,
    {
        unsafe extern "system" fn BeginGetServiceGroupMemberList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient4_Impl::BeginGetServiceGroupMemberList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceGroupMemberList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient4_Impl::EndGetServiceGroupMemberList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetServiceGroupMemberTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient4_Impl::BeginGetServiceGroupMemberTypeList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceGroupMemberTypeList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient4_Impl::EndGetServiceGroupMemberTypeList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricQueryClient3_Vtbl::new::<Identity, OFFSET>(),
            BeginGetServiceGroupMemberList: BeginGetServiceGroupMemberList::<Identity, OFFSET>,
            EndGetServiceGroupMemberList: EndGetServiceGroupMemberList::<Identity, OFFSET>,
            BeginGetServiceGroupMemberTypeList: BeginGetServiceGroupMemberTypeList::<
                Identity,
                OFFSET,
            >,
            EndGetServiceGroupMemberTypeList: EndGetServiceGroupMemberTypeList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricQueryClient4 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient2 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient3 as windows_core::Interface>::IID
    }
}
pub trait IFabricQueryClient5_Impl: Sized + IFabricQueryClient4_Impl {
    fn BeginGetUnplacedReplicaInformation(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetUnplacedReplicaInformation(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetUnplacedReplicaInformationResult>;
}
impl windows_core::RuntimeName for IFabricQueryClient5 {}
impl IFabricQueryClient5_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricQueryClient5_Vtbl
    where
        Identity: IFabricQueryClient5_Impl,
    {
        unsafe extern "system" fn BeginGetUnplacedReplicaInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient5_Impl::BeginGetUnplacedReplicaInformation(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetUnplacedReplicaInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient5_Impl::EndGetUnplacedReplicaInformation(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricQueryClient4_Vtbl::new::<Identity, OFFSET>(),
            BeginGetUnplacedReplicaInformation: BeginGetUnplacedReplicaInformation::<
                Identity,
                OFFSET,
            >,
            EndGetUnplacedReplicaInformation: EndGetUnplacedReplicaInformation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricQueryClient5 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient2 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient3 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient4 as windows_core::Interface>::IID
    }
}
pub trait IFabricQueryClient6_Impl: Sized + IFabricQueryClient5_Impl {
    fn EndGetNodeList2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetNodeListResult2>;
    fn EndGetApplicationList2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetApplicationListResult2>;
    fn EndGetServiceList2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetServiceListResult2>;
    fn EndGetPartitionList2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetPartitionListResult2>;
    fn EndGetReplicaList2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetReplicaListResult2>;
}
impl windows_core::RuntimeName for IFabricQueryClient6 {}
impl IFabricQueryClient6_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricQueryClient6_Vtbl
    where
        Identity: IFabricQueryClient6_Impl,
    {
        unsafe extern "system" fn EndGetNodeList2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient6_Impl::EndGetNodeList2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationList2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient6_Impl::EndGetApplicationList2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceList2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient6_Impl::EndGetServiceList2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetPartitionList2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient6_Impl::EndGetPartitionList2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetReplicaList2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient6_Impl::EndGetReplicaList2(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricQueryClient5_Vtbl::new::<Identity, OFFSET>(),
            EndGetNodeList2: EndGetNodeList2::<Identity, OFFSET>,
            EndGetApplicationList2: EndGetApplicationList2::<Identity, OFFSET>,
            EndGetServiceList2: EndGetServiceList2::<Identity, OFFSET>,
            EndGetPartitionList2: EndGetPartitionList2::<Identity, OFFSET>,
            EndGetReplicaList2: EndGetReplicaList2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricQueryClient6 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient2 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient3 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient4 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient5 as windows_core::Interface>::IID
    }
}
pub trait IFabricQueryClient7_Impl: Sized + IFabricQueryClient6_Impl {
    fn BeginGetApplicationLoadInformation(
        &self,
        querydescription : *const super::FabricTypes:: FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetApplicationLoadInformation(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetApplicationLoadInformationResult>;
}
impl windows_core::RuntimeName for IFabricQueryClient7 {}
impl IFabricQueryClient7_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricQueryClient7_Vtbl
    where
        Identity: IFabricQueryClient7_Impl,
    {
        unsafe extern "system" fn BeginGetApplicationLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient7_Impl::BeginGetApplicationLoadInformation(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationLoadInformation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient7_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient7_Impl::EndGetApplicationLoadInformation(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricQueryClient6_Vtbl::new::<Identity, OFFSET>(),
            BeginGetApplicationLoadInformation: BeginGetApplicationLoadInformation::<
                Identity,
                OFFSET,
            >,
            EndGetApplicationLoadInformation: EndGetApplicationLoadInformation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricQueryClient7 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient2 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient3 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient4 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient5 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient6 as windows_core::Interface>::IID
    }
}
pub trait IFabricQueryClient8_Impl: Sized + IFabricQueryClient7_Impl {
    fn BeginGetServiceName(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_SERVICE_NAME_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetServiceName(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetServiceNameResult>;
    fn BeginGetApplicationName(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetApplicationName(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetApplicationNameResult>;
}
impl windows_core::RuntimeName for IFabricQueryClient8 {}
impl IFabricQueryClient8_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricQueryClient8_Vtbl
    where
        Identity: IFabricQueryClient8_Impl,
    {
        unsafe extern "system" fn BeginGetServiceName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_SERVICE_NAME_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient8_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient8_Impl::BeginGetServiceName(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient8_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient8_Impl::EndGetServiceName(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetApplicationName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient8_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient8_Impl::BeginGetApplicationName(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient8_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient8_Impl::EndGetApplicationName(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricQueryClient7_Vtbl::new::<Identity, OFFSET>(),
            BeginGetServiceName: BeginGetServiceName::<Identity, OFFSET>,
            EndGetServiceName: EndGetServiceName::<Identity, OFFSET>,
            BeginGetApplicationName: BeginGetApplicationName::<Identity, OFFSET>,
            EndGetApplicationName: EndGetApplicationName::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricQueryClient8 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient2 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient3 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient4 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient5 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient6 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient7 as windows_core::Interface>::IID
    }
}
pub trait IFabricQueryClient9_Impl: Sized + IFabricQueryClient8_Impl {
    fn BeginGetApplicationTypePagedList(
        &self,
        querydescription : *const super::FabricTypes:: PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetApplicationTypePagedList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetApplicationTypePagedListResult>;
}
impl windows_core::RuntimeName for IFabricQueryClient9 {}
impl IFabricQueryClient9_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricQueryClient9_Vtbl
    where
        Identity: IFabricQueryClient9_Impl,
    {
        unsafe extern "system" fn BeginGetApplicationTypePagedList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription : *const super::FabricTypes:: PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient9_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient9_Impl::BeginGetApplicationTypePagedList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetApplicationTypePagedList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricQueryClient9_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricQueryClient9_Impl::EndGetApplicationTypePagedList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricQueryClient8_Vtbl::new::<Identity, OFFSET>(),
            BeginGetApplicationTypePagedList: BeginGetApplicationTypePagedList::<Identity, OFFSET>,
            EndGetApplicationTypePagedList: EndGetApplicationTypePagedList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricQueryClient9 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient2 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient3 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient4 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient5 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient6 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient7 as windows_core::Interface>::IID
            || iid == &<IFabricQueryClient8 as windows_core::Interface>::IID
    }
}
pub trait IFabricRepairManagementClient_Impl: Sized {
    fn BeginCreateRepairTask(
        &self,
        repairtask: *const super::FabricTypes::FABRIC_REPAIR_TASK,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCreateRepairTask(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
    fn BeginCancelRepairTask(
        &self,
        requestdescription: *const super::FabricTypes::FABRIC_REPAIR_CANCEL_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCancelRepairTask(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
    fn BeginForceApproveRepairTask(
        &self,
        requestdescription: *const super::FabricTypes::FABRIC_REPAIR_APPROVE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndForceApproveRepairTask(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
    fn BeginDeleteRepairTask(
        &self,
        requestdescription: *const super::FabricTypes::FABRIC_REPAIR_DELETE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeleteRepairTask(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginUpdateRepairExecutionState(
        &self,
        repairtask: *const super::FabricTypes::FABRIC_REPAIR_TASK,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpdateRepairExecutionState(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
    fn BeginGetRepairTaskList(
        &self,
        querydescription: *const super::FabricTypes::FABRIC_REPAIR_TASK_QUERY_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetRepairTaskList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricGetRepairTaskListResult>;
}
impl windows_core::RuntimeName for IFabricRepairManagementClient {}
impl IFabricRepairManagementClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricRepairManagementClient_Vtbl
    where
        Identity: IFabricRepairManagementClient_Impl,
    {
        unsafe extern "system" fn BeginCreateRepairTask<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            repairtask: *const super::FabricTypes::FABRIC_REPAIR_TASK,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::BeginCreateRepairTask(
                this,
                core::mem::transmute_copy(&repairtask),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCreateRepairTask<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            commitversion: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::EndCreateRepairTask(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    commitversion.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginCancelRepairTask<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            requestdescription: *const super::FabricTypes::FABRIC_REPAIR_CANCEL_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::BeginCancelRepairTask(
                this,
                core::mem::transmute_copy(&requestdescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCancelRepairTask<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            commitversion: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::EndCancelRepairTask(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    commitversion.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginForceApproveRepairTask<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            requestdescription: *const super::FabricTypes::FABRIC_REPAIR_APPROVE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::BeginForceApproveRepairTask(
                this,
                core::mem::transmute_copy(&requestdescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndForceApproveRepairTask<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            commitversion: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::EndForceApproveRepairTask(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    commitversion.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginDeleteRepairTask<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            requestdescription: *const super::FabricTypes::FABRIC_REPAIR_DELETE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::BeginDeleteRepairTask(
                this,
                core::mem::transmute_copy(&requestdescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeleteRepairTask<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricRepairManagementClient_Impl::EndDeleteRepairTask(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginUpdateRepairExecutionState<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            repairtask: *const super::FabricTypes::FABRIC_REPAIR_TASK,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::BeginUpdateRepairExecutionState(
                this,
                core::mem::transmute_copy(&repairtask),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpdateRepairExecutionState<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            commitversion: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::EndUpdateRepairExecutionState(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    commitversion.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetRepairTaskList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            querydescription: *const super::FabricTypes::FABRIC_REPAIR_TASK_QUERY_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::BeginGetRepairTaskList(
                this,
                core::mem::transmute_copy(&querydescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetRepairTaskList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient_Impl::EndGetRepairTaskList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginCreateRepairTask: BeginCreateRepairTask::<Identity, OFFSET>,
            EndCreateRepairTask: EndCreateRepairTask::<Identity, OFFSET>,
            BeginCancelRepairTask: BeginCancelRepairTask::<Identity, OFFSET>,
            EndCancelRepairTask: EndCancelRepairTask::<Identity, OFFSET>,
            BeginForceApproveRepairTask: BeginForceApproveRepairTask::<Identity, OFFSET>,
            EndForceApproveRepairTask: EndForceApproveRepairTask::<Identity, OFFSET>,
            BeginDeleteRepairTask: BeginDeleteRepairTask::<Identity, OFFSET>,
            EndDeleteRepairTask: EndDeleteRepairTask::<Identity, OFFSET>,
            BeginUpdateRepairExecutionState: BeginUpdateRepairExecutionState::<Identity, OFFSET>,
            EndUpdateRepairExecutionState: EndUpdateRepairExecutionState::<Identity, OFFSET>,
            BeginGetRepairTaskList: BeginGetRepairTaskList::<Identity, OFFSET>,
            EndGetRepairTaskList: EndGetRepairTaskList::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricRepairManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricRepairManagementClient2_Impl: Sized + IFabricRepairManagementClient_Impl {
    fn BeginUpdateRepairTaskHealthPolicy(
        &self,
        updatedescription : *const super::FabricTypes:: FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpdateRepairTaskHealthPolicy(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
}
impl windows_core::RuntimeName for IFabricRepairManagementClient2 {}
impl IFabricRepairManagementClient2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricRepairManagementClient2_Vtbl
    where
        Identity: IFabricRepairManagementClient2_Impl,
    {
        unsafe extern "system" fn BeginUpdateRepairTaskHealthPolicy<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            updatedescription : *const super::FabricTypes:: FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient2_Impl::BeginUpdateRepairTaskHealthPolicy(
                this,
                core::mem::transmute_copy(&updatedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpdateRepairTaskHealthPolicy<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            commitversion: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRepairManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRepairManagementClient2_Impl::EndUpdateRepairTaskHealthPolicy(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    commitversion.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricRepairManagementClient_Vtbl::new::<Identity, OFFSET>(),
            BeginUpdateRepairTaskHealthPolicy: BeginUpdateRepairTaskHealthPolicy::<Identity, OFFSET>,
            EndUpdateRepairTaskHealthPolicy: EndUpdateRepairTaskHealthPolicy::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricRepairManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricRepairManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricReplicaHealthResult_Impl: Sized {
    fn get_ReplicaHealth(&self) -> *mut super::FabricTypes::FABRIC_REPLICA_HEALTH;
}
impl windows_core::RuntimeName for IFabricReplicaHealthResult {}
impl IFabricReplicaHealthResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricReplicaHealthResult_Vtbl
    where
        Identity: IFabricReplicaHealthResult_Impl,
    {
        unsafe extern "system" fn get_ReplicaHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_REPLICA_HEALTH
        where
            Identity: IFabricReplicaHealthResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricReplicaHealthResult_Impl::get_ReplicaHealth(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ReplicaHealth: get_ReplicaHealth::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricReplicaHealthResult as windows_core::Interface>::IID
    }
}
pub trait IFabricResolvedServicePartitionResult_Impl: Sized {
    fn get_Partition(&self) -> *mut super::FabricTypes::FABRIC_RESOLVED_SERVICE_PARTITION;
    fn GetEndpoint(
        &self,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_RESOLVED_SERVICE_ENDPOINT>;
    fn CompareVersion(
        &self,
        other: Option<&IFabricResolvedServicePartitionResult>,
    ) -> windows_core::Result<i32>;
}
impl windows_core::RuntimeName for IFabricResolvedServicePartitionResult {}
impl IFabricResolvedServicePartitionResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricResolvedServicePartitionResult_Vtbl
    where
        Identity: IFabricResolvedServicePartitionResult_Impl,
    {
        unsafe extern "system" fn get_Partition<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_RESOLVED_SERVICE_PARTITION
        where
            Identity: IFabricResolvedServicePartitionResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricResolvedServicePartitionResult_Impl::get_Partition(this)
        }
        unsafe extern "system" fn GetEndpoint<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            endpoint: *mut *mut super::FabricTypes::FABRIC_RESOLVED_SERVICE_ENDPOINT,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricResolvedServicePartitionResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricResolvedServicePartitionResult_Impl::GetEndpoint(this) {
                Ok(ok__) => {
                    endpoint.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CompareVersion<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            other: *mut core::ffi::c_void,
            compareresult: *mut i32,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricResolvedServicePartitionResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricResolvedServicePartitionResult_Impl::CompareVersion(
                this,
                windows_core::from_raw_borrowed(&other),
            ) {
                Ok(ok__) => {
                    compareresult.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Partition: get_Partition::<Identity, OFFSET>,
            GetEndpoint: GetEndpoint::<Identity, OFFSET>,
            CompareVersion: CompareVersion::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricResolvedServicePartitionResult as windows_core::Interface>::IID
    }
}
pub trait IFabricRestartDeployedCodePackageResult_Impl: Sized {
    fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_DEPLOYED_CODE_PACKAGE_RESULT;
}
impl windows_core::RuntimeName for IFabricRestartDeployedCodePackageResult {}
impl IFabricRestartDeployedCodePackageResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricRestartDeployedCodePackageResult_Vtbl
    where
        Identity: IFabricRestartDeployedCodePackageResult_Impl,
    {
        unsafe extern "system" fn get_Result<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DEPLOYED_CODE_PACKAGE_RESULT
        where
            Identity: IFabricRestartDeployedCodePackageResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricRestartDeployedCodePackageResult_Impl::get_Result(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Result: get_Result::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricRestartDeployedCodePackageResult as windows_core::Interface>::IID
    }
}
pub trait IFabricRestartNodeResult_Impl: Sized {
    fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_NODE_RESULT;
}
impl windows_core::RuntimeName for IFabricRestartNodeResult {}
impl IFabricRestartNodeResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricRestartNodeResult_Vtbl
    where
        Identity: IFabricRestartNodeResult_Impl,
    {
        unsafe extern "system" fn get_Result<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NODE_RESULT
        where
            Identity: IFabricRestartNodeResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricRestartNodeResult_Impl::get_Result(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Result: get_Result::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricRestartNodeResult as windows_core::Interface>::IID
    }
}
pub trait IFabricSecretReferencesResult_Impl: Sized {
    fn get_SecretReferences(&self) -> *mut super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST;
}
impl windows_core::RuntimeName for IFabricSecretReferencesResult {}
impl IFabricSecretReferencesResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricSecretReferencesResult_Vtbl
    where
        Identity: IFabricSecretReferencesResult_Impl,
    {
        unsafe extern "system" fn get_SecretReferences<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST
        where
            Identity: IFabricSecretReferencesResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricSecretReferencesResult_Impl::get_SecretReferences(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_SecretReferences: get_SecretReferences::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricSecretReferencesResult as windows_core::Interface>::IID
    }
}
pub trait IFabricSecretStoreClient_Impl: Sized {
    fn BeginGetSecrets(
        &self,
        secretreferences: *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
        includevalue: windows::Win32::Foundation::BOOLEAN,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetSecrets(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricSecretsResult>;
    fn BeginSetSecrets(
        &self,
        secrets: *const super::FabricTypes::FABRIC_SECRET_LIST,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndSetSecrets(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricSecretsResult>;
    fn BeginRemoveSecrets(
        &self,
        secretreferences: *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRemoveSecrets(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricSecretReferencesResult>;
    fn BeginGetSecretVersions(
        &self,
        secretreferences: *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetSecretVersions(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricSecretReferencesResult>;
}
impl windows_core::RuntimeName for IFabricSecretStoreClient {}
impl IFabricSecretStoreClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricSecretStoreClient_Vtbl
    where
        Identity: IFabricSecretStoreClient_Impl,
    {
        unsafe extern "system" fn BeginGetSecrets<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            secretreferences: *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
            includevalue: windows::Win32::Foundation::BOOLEAN,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricSecretStoreClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricSecretStoreClient_Impl::BeginGetSecrets(
                this,
                core::mem::transmute_copy(&secretreferences),
                core::mem::transmute_copy(&includevalue),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetSecrets<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricSecretStoreClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricSecretStoreClient_Impl::EndGetSecrets(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginSetSecrets<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            secrets: *const super::FabricTypes::FABRIC_SECRET_LIST,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricSecretStoreClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricSecretStoreClient_Impl::BeginSetSecrets(
                this,
                core::mem::transmute_copy(&secrets),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSetSecrets<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricSecretStoreClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricSecretStoreClient_Impl::EndSetSecrets(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginRemoveSecrets<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            secretreferences: *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricSecretStoreClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricSecretStoreClient_Impl::BeginRemoveSecrets(
                this,
                core::mem::transmute_copy(&secretreferences),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRemoveSecrets<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricSecretStoreClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricSecretStoreClient_Impl::EndRemoveSecrets(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetSecretVersions<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            secretreferences: *const super::FabricTypes::FABRIC_SECRET_REFERENCE_LIST,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricSecretStoreClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricSecretStoreClient_Impl::BeginGetSecretVersions(
                this,
                core::mem::transmute_copy(&secretreferences),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetSecretVersions<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricSecretStoreClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricSecretStoreClient_Impl::EndGetSecretVersions(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginGetSecrets: BeginGetSecrets::<Identity, OFFSET>,
            EndGetSecrets: EndGetSecrets::<Identity, OFFSET>,
            BeginSetSecrets: BeginSetSecrets::<Identity, OFFSET>,
            EndSetSecrets: EndSetSecrets::<Identity, OFFSET>,
            BeginRemoveSecrets: BeginRemoveSecrets::<Identity, OFFSET>,
            EndRemoveSecrets: EndRemoveSecrets::<Identity, OFFSET>,
            BeginGetSecretVersions: BeginGetSecretVersions::<Identity, OFFSET>,
            EndGetSecretVersions: EndGetSecretVersions::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricSecretStoreClient as windows_core::Interface>::IID
    }
}
pub trait IFabricSecretsResult_Impl: Sized {
    fn get_Secrets(&self) -> *mut super::FabricTypes::FABRIC_SECRET_LIST;
}
impl windows_core::RuntimeName for IFabricSecretsResult {}
impl IFabricSecretsResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricSecretsResult_Vtbl
    where
        Identity: IFabricSecretsResult_Impl,
    {
        unsafe extern "system" fn get_Secrets<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SECRET_LIST
        where
            Identity: IFabricSecretsResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricSecretsResult_Impl::get_Secrets(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Secrets: get_Secrets::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricSecretsResult as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceDescriptionResult_Impl: Sized {
    fn get_Description(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_DESCRIPTION;
}
impl windows_core::RuntimeName for IFabricServiceDescriptionResult {}
impl IFabricServiceDescriptionResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceDescriptionResult_Vtbl
    where
        Identity: IFabricServiceDescriptionResult_Impl,
    {
        unsafe extern "system" fn get_Description<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_DESCRIPTION
        where
            Identity: IFabricServiceDescriptionResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceDescriptionResult_Impl::get_Description(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Description: get_Description::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceDescriptionResult as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceEndpointsVersion_Impl: Sized {
    fn Compare(&self, other: Option<&IFabricServiceEndpointsVersion>) -> windows_core::Result<i32>;
}
impl windows_core::RuntimeName for IFabricServiceEndpointsVersion {}
impl IFabricServiceEndpointsVersion_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceEndpointsVersion_Vtbl
    where
        Identity: IFabricServiceEndpointsVersion_Impl,
    {
        unsafe extern "system" fn Compare<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            other: *mut core::ffi::c_void,
            compareresult: *mut i32,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceEndpointsVersion_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceEndpointsVersion_Impl::Compare(
                this,
                windows_core::from_raw_borrowed(&other),
            ) {
                Ok(ok__) => {
                    compareresult.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            Compare: Compare::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceEndpointsVersion as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceGroupDescriptionResult_Impl: Sized {
    fn get_Description(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_DESCRIPTION;
}
impl windows_core::RuntimeName for IFabricServiceGroupDescriptionResult {}
impl IFabricServiceGroupDescriptionResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceGroupDescriptionResult_Vtbl
    where
        Identity: IFabricServiceGroupDescriptionResult_Impl,
    {
        unsafe extern "system" fn get_Description<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_DESCRIPTION
        where
            Identity: IFabricServiceGroupDescriptionResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceGroupDescriptionResult_Impl::get_Description(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Description: get_Description::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceGroupDescriptionResult as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceGroupManagementClient_Impl: Sized {
    fn BeginCreateServiceGroup(
        &self,
        description: *const super::FabricTypes::FABRIC_SERVICE_GROUP_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCreateServiceGroup(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginDeleteServiceGroup(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeleteServiceGroup(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetServiceGroupDescription(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetServiceGroupDescription(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricServiceGroupDescriptionResult>;
}
impl windows_core::RuntimeName for IFabricServiceGroupManagementClient {}
impl IFabricServiceGroupManagementClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceGroupManagementClient_Vtbl
    where
        Identity: IFabricServiceGroupManagementClient_Impl,
    {
        unsafe extern "system" fn BeginCreateServiceGroup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_SERVICE_GROUP_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceGroupManagementClient_Impl::BeginCreateServiceGroup(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCreateServiceGroup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceGroupManagementClient_Impl::EndCreateServiceGroup(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginDeleteServiceGroup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceGroupManagementClient_Impl::BeginDeleteServiceGroup(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeleteServiceGroup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceGroupManagementClient_Impl::EndDeleteServiceGroup(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetServiceGroupDescription<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceGroupManagementClient_Impl::BeginGetServiceGroupDescription(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceGroupDescription<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceGroupManagementClient_Impl::EndGetServiceGroupDescription(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginCreateServiceGroup: BeginCreateServiceGroup::<Identity, OFFSET>,
            EndCreateServiceGroup: EndCreateServiceGroup::<Identity, OFFSET>,
            BeginDeleteServiceGroup: BeginDeleteServiceGroup::<Identity, OFFSET>,
            EndDeleteServiceGroup: EndDeleteServiceGroup::<Identity, OFFSET>,
            BeginGetServiceGroupDescription: BeginGetServiceGroupDescription::<Identity, OFFSET>,
            EndGetServiceGroupDescription: EndGetServiceGroupDescription::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceGroupManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceGroupManagementClient2_Impl:
    Sized + IFabricServiceGroupManagementClient_Impl
{
    fn BeginUpdateServiceGroup(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        servicegroupupdatedescription : *const super::FabricTypes:: FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpdateServiceGroup(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricServiceGroupManagementClient2 {}
impl IFabricServiceGroupManagementClient2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceGroupManagementClient2_Vtbl
    where
        Identity: IFabricServiceGroupManagementClient2_Impl,
    {
        unsafe extern "system" fn BeginUpdateServiceGroup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            servicegroupupdatedescription : *const super::FabricTypes:: FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceGroupManagementClient2_Impl::BeginUpdateServiceGroup(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&servicegroupupdatedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpdateServiceGroup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceGroupManagementClient2_Impl::EndUpdateServiceGroup(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricServiceGroupManagementClient_Vtbl::new::<Identity, OFFSET>(),
            BeginUpdateServiceGroup: BeginUpdateServiceGroup::<Identity, OFFSET>,
            EndUpdateServiceGroup: EndUpdateServiceGroup::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceGroupManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricServiceGroupManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceGroupManagementClient3_Impl:
    Sized + IFabricServiceGroupManagementClient2_Impl
{
    fn BeginCreateServiceGroupFromTemplate(
        &self,
        applicationname: super::FabricTypes::FABRIC_URI,
        servicename: super::FabricTypes::FABRIC_URI,
        servicetypename: &windows_core::PCWSTR,
        initializationdatasize: u32,
        initializationdata: *const u8,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCreateServiceGroupFromTemplate(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricServiceGroupManagementClient3 {}
impl IFabricServiceGroupManagementClient3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceGroupManagementClient3_Vtbl
    where
        Identity: IFabricServiceGroupManagementClient3_Impl,
    {
        unsafe extern "system" fn BeginCreateServiceGroupFromTemplate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationname: super::FabricTypes::FABRIC_URI,
            servicename: super::FabricTypes::FABRIC_URI,
            servicetypename: windows_core::PCWSTR,
            initializationdatasize: u32,
            initializationdata: *const u8,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceGroupManagementClient3_Impl::BeginCreateServiceGroupFromTemplate(
                this,
                core::mem::transmute_copy(&applicationname),
                core::mem::transmute_copy(&servicename),
                core::mem::transmute(&servicetypename),
                core::mem::transmute_copy(&initializationdatasize),
                core::mem::transmute_copy(&initializationdata),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCreateServiceGroupFromTemplate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceGroupManagementClient3_Impl::EndCreateServiceGroupFromTemplate(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricServiceGroupManagementClient2_Vtbl::new::<Identity, OFFSET>(),
            BeginCreateServiceGroupFromTemplate: BeginCreateServiceGroupFromTemplate::<
                Identity,
                OFFSET,
            >,
            EndCreateServiceGroupFromTemplate: EndCreateServiceGroupFromTemplate::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceGroupManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricServiceGroupManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricServiceGroupManagementClient2 as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceGroupManagementClient4_Impl:
    Sized + IFabricServiceGroupManagementClient3_Impl
{
    fn BeginCreateServiceGroupFromTemplate2(
        &self,
        servicegroupfromtemplatedescription : *const super::FabricTypes:: FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCreateServiceGroupFromTemplate2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricServiceGroupManagementClient4 {}
impl IFabricServiceGroupManagementClient4_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceGroupManagementClient4_Vtbl
    where
        Identity: IFabricServiceGroupManagementClient4_Impl,
    {
        unsafe extern "system" fn BeginCreateServiceGroupFromTemplate2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicegroupfromtemplatedescription : *const super::FabricTypes:: FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceGroupManagementClient4_Impl::BeginCreateServiceGroupFromTemplate2(
                this,
                core::mem::transmute_copy(&servicegroupfromtemplatedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCreateServiceGroupFromTemplate2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceGroupManagementClient4_Impl::EndCreateServiceGroupFromTemplate2(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricServiceGroupManagementClient3_Vtbl::new::<Identity, OFFSET>(),
            BeginCreateServiceGroupFromTemplate2: BeginCreateServiceGroupFromTemplate2::<
                Identity,
                OFFSET,
            >,
            EndCreateServiceGroupFromTemplate2: EndCreateServiceGroupFromTemplate2::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceGroupManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricServiceGroupManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricServiceGroupManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricServiceGroupManagementClient3 as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceHealthResult_Impl: Sized {
    fn get_ServiceHealth(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_HEALTH;
}
impl windows_core::RuntimeName for IFabricServiceHealthResult {}
impl IFabricServiceHealthResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceHealthResult_Vtbl
    where
        Identity: IFabricServiceHealthResult_Impl,
    {
        unsafe extern "system" fn get_ServiceHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_HEALTH
        where
            Identity: IFabricServiceHealthResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceHealthResult_Impl::get_ServiceHealth(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ServiceHealth: get_ServiceHealth::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceHealthResult as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceManagementClient_Impl: Sized {
    fn BeginCreateService(
        &self,
        description: *const super::FabricTypes::FABRIC_SERVICE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCreateService(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginCreateServiceFromTemplate(
        &self,
        applicationname: super::FabricTypes::FABRIC_URI,
        servicename: super::FabricTypes::FABRIC_URI,
        servicetypename: &windows_core::PCWSTR,
        initializationdatasize: u32,
        initializationdata: *const u8,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCreateServiceFromTemplate(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginDeleteService(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeleteService(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetServiceDescription(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetServiceDescription(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricServiceDescriptionResult>;
    fn RegisterServicePartitionResolutionChangeHandler(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        keytype: super::FabricTypes::FABRIC_PARTITION_KEY_TYPE,
        partitionkey: *const core::ffi::c_void,
        callback: Option<&IFabricServicePartitionResolutionChangeHandler>,
    ) -> windows_core::Result<i64>;
    fn UnregisterServicePartitionResolutionChangeHandler(
        &self,
        callbackhandle: i64,
    ) -> windows_core::Result<()>;
    fn BeginResolveServicePartition(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        partitionkeytype: super::FabricTypes::FABRIC_PARTITION_KEY_TYPE,
        partitionkey: *const core::ffi::c_void,
        previousresult: Option<&IFabricResolvedServicePartitionResult>,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndResolveServicePartition(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricResolvedServicePartitionResult>;
}
impl windows_core::RuntimeName for IFabricServiceManagementClient {}
impl IFabricServiceManagementClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceManagementClient_Vtbl
    where
        Identity: IFabricServiceManagementClient_Impl,
    {
        unsafe extern "system" fn BeginCreateService<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_SERVICE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient_Impl::BeginCreateService(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCreateService<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceManagementClient_Impl::EndCreateService(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginCreateServiceFromTemplate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationname: super::FabricTypes::FABRIC_URI,
            servicename: super::FabricTypes::FABRIC_URI,
            servicetypename: windows_core::PCWSTR,
            initializationdatasize: u32,
            initializationdata: *const u8,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient_Impl::BeginCreateServiceFromTemplate(
                this,
                core::mem::transmute_copy(&applicationname),
                core::mem::transmute_copy(&servicename),
                core::mem::transmute(&servicetypename),
                core::mem::transmute_copy(&initializationdatasize),
                core::mem::transmute_copy(&initializationdata),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCreateServiceFromTemplate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceManagementClient_Impl::EndCreateServiceFromTemplate(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginDeleteService<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient_Impl::BeginDeleteService(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeleteService<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceManagementClient_Impl::EndDeleteService(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetServiceDescription<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient_Impl::BeginGetServiceDescription(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceDescription<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient_Impl::EndGetServiceDescription(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterServicePartitionResolutionChangeHandler<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            keytype: super::FabricTypes::FABRIC_PARTITION_KEY_TYPE,
            partitionkey: *const core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            callbackhandle: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient_Impl:: RegisterServicePartitionResolutionChangeHandler ( this , core::mem::transmute_copy ( & name ) , core::mem::transmute_copy ( & keytype ) , core::mem::transmute_copy ( & partitionkey ) , windows_core::from_raw_borrowed ( & callback ) , ) { Ok ( ok__ ) => { callbackhandle . write ( core::mem::transmute ( ok__ ) ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
        }
        unsafe extern "system" fn UnregisterServicePartitionResolutionChangeHandler<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callbackhandle: i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceManagementClient_Impl::UnregisterServicePartitionResolutionChangeHandler(
                this,
                core::mem::transmute_copy(&callbackhandle),
            )
            .into()
        }
        unsafe extern "system" fn BeginResolveServicePartition<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            partitionkeytype: super::FabricTypes::FABRIC_PARTITION_KEY_TYPE,
            partitionkey: *const core::ffi::c_void,
            previousresult: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient_Impl::BeginResolveServicePartition(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&partitionkeytype),
                core::mem::transmute_copy(&partitionkey),
                windows_core::from_raw_borrowed(&previousresult),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndResolveServicePartition<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient_Impl::EndResolveServicePartition(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginCreateService: BeginCreateService::<Identity, OFFSET>,
            EndCreateService: EndCreateService::<Identity, OFFSET>,
            BeginCreateServiceFromTemplate: BeginCreateServiceFromTemplate::<Identity, OFFSET>,
            EndCreateServiceFromTemplate: EndCreateServiceFromTemplate::<Identity, OFFSET>,
            BeginDeleteService: BeginDeleteService::<Identity, OFFSET>,
            EndDeleteService: EndDeleteService::<Identity, OFFSET>,
            BeginGetServiceDescription: BeginGetServiceDescription::<Identity, OFFSET>,
            EndGetServiceDescription: EndGetServiceDescription::<Identity, OFFSET>,
            RegisterServicePartitionResolutionChangeHandler:
                RegisterServicePartitionResolutionChangeHandler::<Identity, OFFSET>,
            UnregisterServicePartitionResolutionChangeHandler:
                UnregisterServicePartitionResolutionChangeHandler::<Identity, OFFSET>,
            BeginResolveServicePartition: BeginResolveServicePartition::<Identity, OFFSET>,
            EndResolveServicePartition: EndResolveServicePartition::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceManagementClient2_Impl:
    Sized + IFabricServiceManagementClient_Impl
{
    fn BeginGetServiceManifest(
        &self,
        applicationtypename: &windows_core::PCWSTR,
        applicationtypeversion: &windows_core::PCWSTR,
        servicemanifestname: &windows_core::PCWSTR,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetServiceManifest(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn BeginUpdateService(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        serviceupdatedescription: *const super::FabricTypes::FABRIC_SERVICE_UPDATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpdateService(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricServiceManagementClient2 {}
impl IFabricServiceManagementClient2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceManagementClient2_Vtbl
    where
        Identity: IFabricServiceManagementClient2_Impl,
    {
        unsafe extern "system" fn BeginGetServiceManifest<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            applicationtypename: windows_core::PCWSTR,
            applicationtypeversion: windows_core::PCWSTR,
            servicemanifestname: windows_core::PCWSTR,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient2_Impl::BeginGetServiceManifest(
                this,
                core::mem::transmute(&applicationtypename),
                core::mem::transmute(&applicationtypeversion),
                core::mem::transmute(&servicemanifestname),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetServiceManifest<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient2_Impl::EndGetServiceManifest(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginUpdateService<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            serviceupdatedescription: *const super::FabricTypes::FABRIC_SERVICE_UPDATE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient2_Impl::BeginUpdateService(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&serviceupdatedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpdateService<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceManagementClient2_Impl::EndUpdateService(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricServiceManagementClient_Vtbl::new::<Identity, OFFSET>(),
            BeginGetServiceManifest: BeginGetServiceManifest::<Identity, OFFSET>,
            EndGetServiceManifest: EndGetServiceManifest::<Identity, OFFSET>,
            BeginUpdateService: BeginUpdateService::<Identity, OFFSET>,
            EndUpdateService: EndUpdateService::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceManagementClient3_Impl:
    Sized + IFabricServiceManagementClient2_Impl
{
    fn BeginRemoveReplica(
        &self,
        description: *const super::FabricTypes::FABRIC_REMOVE_REPLICA_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRemoveReplica(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginRestartReplica(
        &self,
        description: *const super::FabricTypes::FABRIC_RESTART_REPLICA_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRestartReplica(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricServiceManagementClient3 {}
impl IFabricServiceManagementClient3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceManagementClient3_Vtbl
    where
        Identity: IFabricServiceManagementClient3_Impl,
    {
        unsafe extern "system" fn BeginRemoveReplica<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_REMOVE_REPLICA_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient3_Impl::BeginRemoveReplica(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRemoveReplica<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceManagementClient3_Impl::EndRemoveReplica(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginRestartReplica<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_RESTART_REPLICA_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient3_Impl::BeginRestartReplica(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRestartReplica<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceManagementClient3_Impl::EndRestartReplica(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricServiceManagementClient2_Vtbl::new::<Identity, OFFSET>(),
            BeginRemoveReplica: BeginRemoveReplica::<Identity, OFFSET>,
            EndRemoveReplica: EndRemoveReplica::<Identity, OFFSET>,
            BeginRestartReplica: BeginRestartReplica::<Identity, OFFSET>,
            EndRestartReplica: EndRestartReplica::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient2 as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceManagementClient4_Impl:
    Sized + IFabricServiceManagementClient3_Impl
{
    fn BeginRegisterServiceNotificationFilter(
        &self,
        description: *const super::FabricTypes::FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRegisterServiceNotificationFilter(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
    fn BeginUnregisterServiceNotificationFilter(
        &self,
        filterid: i64,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUnregisterServiceNotificationFilter(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricServiceManagementClient4 {}
impl IFabricServiceManagementClient4_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceManagementClient4_Vtbl
    where
        Identity: IFabricServiceManagementClient4_Impl,
    {
        unsafe extern "system" fn BeginRegisterServiceNotificationFilter<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient4_Impl::BeginRegisterServiceNotificationFilter(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRegisterServiceNotificationFilter<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            filterid: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient4_Impl::EndRegisterServiceNotificationFilter(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    filterid.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginUnregisterServiceNotificationFilter<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            filterid: i64,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient4_Impl::BeginUnregisterServiceNotificationFilter(
                this,
                core::mem::transmute_copy(&filterid),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUnregisterServiceNotificationFilter<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceManagementClient4_Impl::EndUnregisterServiceNotificationFilter(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricServiceManagementClient3_Vtbl::new::<Identity, OFFSET>(),
            BeginRegisterServiceNotificationFilter: BeginRegisterServiceNotificationFilter::<
                Identity,
                OFFSET,
            >,
            EndRegisterServiceNotificationFilter: EndRegisterServiceNotificationFilter::<
                Identity,
                OFFSET,
            >,
            BeginUnregisterServiceNotificationFilter: BeginUnregisterServiceNotificationFilter::<
                Identity,
                OFFSET,
            >,
            EndUnregisterServiceNotificationFilter: EndUnregisterServiceNotificationFilter::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient3 as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceManagementClient5_Impl:
    Sized + IFabricServiceManagementClient4_Impl
{
    fn BeginDeleteService2(
        &self,
        deletedescription: *const super::FabricTypes::FABRIC_DELETE_SERVICE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeleteService2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricServiceManagementClient5 {}
impl IFabricServiceManagementClient5_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceManagementClient5_Vtbl
    where
        Identity: IFabricServiceManagementClient5_Impl,
    {
        unsafe extern "system" fn BeginDeleteService2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            deletedescription: *const super::FabricTypes::FABRIC_DELETE_SERVICE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient5_Impl::BeginDeleteService2(
                this,
                core::mem::transmute_copy(&deletedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeleteService2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceManagementClient5_Impl::EndDeleteService2(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricServiceManagementClient4_Vtbl::new::<Identity, OFFSET>(),
            BeginDeleteService2: BeginDeleteService2::<Identity, OFFSET>,
            EndDeleteService2: EndDeleteService2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceManagementClient5 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient4 as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceManagementClient6_Impl:
    Sized + IFabricServiceManagementClient5_Impl
{
    fn BeginCreateServiceFromTemplate2(
        &self,
        servicefromtemplatedescription : *const super::FabricTypes:: FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCreateServiceFromTemplate2(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricServiceManagementClient6 {}
impl IFabricServiceManagementClient6_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceManagementClient6_Vtbl
    where
        Identity: IFabricServiceManagementClient6_Impl,
    {
        unsafe extern "system" fn BeginCreateServiceFromTemplate2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicefromtemplatedescription : *const super::FabricTypes:: FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceManagementClient6_Impl::BeginCreateServiceFromTemplate2(
                this,
                core::mem::transmute_copy(&servicefromtemplatedescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCreateServiceFromTemplate2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceManagementClient6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceManagementClient6_Impl::EndCreateServiceFromTemplate2(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricServiceManagementClient5_Vtbl::new::<Identity, OFFSET>(),
            BeginCreateServiceFromTemplate2: BeginCreateServiceFromTemplate2::<Identity, OFFSET>,
            EndCreateServiceFromTemplate2: EndCreateServiceFromTemplate2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceManagementClient6 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricServiceManagementClient5 as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceNotification_Impl: Sized {
    fn get_Notification(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_NOTIFICATION;
    fn GetVersion(&self) -> windows_core::Result<IFabricServiceEndpointsVersion>;
}
impl windows_core::RuntimeName for IFabricServiceNotification {}
impl IFabricServiceNotification_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceNotification_Vtbl
    where
        Identity: IFabricServiceNotification_Impl,
    {
        unsafe extern "system" fn get_Notification<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_NOTIFICATION
        where
            Identity: IFabricServiceNotification_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceNotification_Impl::get_Notification(this)
        }
        unsafe extern "system" fn GetVersion<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceNotification_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceNotification_Impl::GetVersion(this) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Notification: get_Notification::<Identity, OFFSET>,
            GetVersion: GetVersion::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceNotification as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceNotificationEventHandler_Impl: Sized {
    fn OnNotification(
        &self,
        __midl__ifabricservicenotificationeventhandler0000: Option<&IFabricServiceNotification>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricServiceNotificationEventHandler {}
impl IFabricServiceNotificationEventHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceNotificationEventHandler_Vtbl
    where
        Identity: IFabricServiceNotificationEventHandler_Impl,
    {
        unsafe extern "system" fn OnNotification<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            __midl__ifabricservicenotificationeventhandler0000: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceNotificationEventHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceNotificationEventHandler_Impl::OnNotification(
                this,
                windows_core::from_raw_borrowed(
                    &__midl__ifabricservicenotificationeventhandler0000,
                ),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnNotification: OnNotification::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceNotificationEventHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricServicePartitionResolutionChangeHandler_Impl: Sized {
    fn OnChange(
        &self,
        source: Option<&IFabricServiceManagementClient>,
        handlerid: i64,
        partition: Option<&IFabricResolvedServicePartitionResult>,
        error: windows_core::HRESULT,
    );
}
impl windows_core::RuntimeName for IFabricServicePartitionResolutionChangeHandler {}
impl IFabricServicePartitionResolutionChangeHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServicePartitionResolutionChangeHandler_Vtbl
    where
        Identity: IFabricServicePartitionResolutionChangeHandler_Impl,
    {
        unsafe extern "system" fn OnChange<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            handlerid: i64,
            partition: *mut core::ffi::c_void,
            error: windows_core::HRESULT,
        ) where
            Identity: IFabricServicePartitionResolutionChangeHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServicePartitionResolutionChangeHandler_Impl::OnChange(
                this,
                windows_core::from_raw_borrowed(&source),
                core::mem::transmute_copy(&handlerid),
                windows_core::from_raw_borrowed(&partition),
                core::mem::transmute_copy(&error),
            )
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnChange: OnChange::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServicePartitionResolutionChangeHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricStartNodeResult_Impl: Sized {
    fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_NODE_RESULT;
}
impl windows_core::RuntimeName for IFabricStartNodeResult {}
impl IFabricStartNodeResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStartNodeResult_Vtbl
    where
        Identity: IFabricStartNodeResult_Impl,
    {
        unsafe extern "system" fn get_Result<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NODE_RESULT
        where
            Identity: IFabricStartNodeResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStartNodeResult_Impl::get_Result(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Result: get_Result::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStartNodeResult as windows_core::Interface>::IID
    }
}
pub trait IFabricStopNodeResult_Impl: Sized {
    fn get_Result(&self) -> *mut super::FabricTypes::FABRIC_NODE_RESULT;
}
impl windows_core::RuntimeName for IFabricStopNodeResult {}
impl IFabricStopNodeResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStopNodeResult_Vtbl
    where
        Identity: IFabricStopNodeResult_Impl,
    {
        unsafe extern "system" fn get_Result<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NODE_RESULT
        where
            Identity: IFabricStopNodeResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStopNodeResult_Impl::get_Result(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Result: get_Result::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStopNodeResult as windows_core::Interface>::IID
    }
}
pub trait IFabricTestCommandStatusResult_Impl: Sized {
    fn get_Result(&self) -> *mut super::FabricTypes::TEST_COMMAND_QUERY_RESULT_LIST;
}
impl windows_core::RuntimeName for IFabricTestCommandStatusResult {}
impl IFabricTestCommandStatusResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTestCommandStatusResult_Vtbl
    where
        Identity: IFabricTestCommandStatusResult_Impl,
    {
        unsafe extern "system" fn get_Result<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::TEST_COMMAND_QUERY_RESULT_LIST
        where
            Identity: IFabricTestCommandStatusResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTestCommandStatusResult_Impl::get_Result(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Result: get_Result::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTestCommandStatusResult as windows_core::Interface>::IID
    }
}
pub trait IFabricTestManagementClient_Impl: Sized {
    fn BeginStartPartitionDataLoss(
        &self,
        invokedatalossdescription : *const super::FabricTypes:: FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStartPartitionDataLoss(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetPartitionDataLossProgress(
        &self,
        operationid: &windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetPartitionDataLossProgress(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricPartitionDataLossProgressResult>;
    fn BeginStartPartitionQuorumLoss(
        &self,
        invokequorumlossdescription : *const super::FabricTypes:: FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStartPartitionQuorumLoss(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetPartitionQuorumLossProgress(
        &self,
        operationid: &windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetPartitionQuorumLossProgress(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricPartitionQuorumLossProgressResult>;
    fn BeginStartPartitionRestart(
        &self,
        restartpartitiondescription : *const super::FabricTypes:: FABRIC_START_PARTITION_RESTART_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStartPartitionRestart(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetPartitionRestartProgress(
        &self,
        operationid: &windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetPartitionRestartProgress(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricPartitionRestartProgressResult>;
    fn BeginGetTestCommandStatusList(
        &self,
        operationid: *const super::FabricTypes::FABRIC_TEST_COMMAND_LIST_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetTestCommandStatusList(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricTestCommandStatusResult>;
    fn BeginCancelTestCommand(
        &self,
        invokedatalossdescription : *const super::FabricTypes:: FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCancelTestCommand(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricTestManagementClient {}
impl IFabricTestManagementClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTestManagementClient_Vtbl
    where
        Identity: IFabricTestManagementClient_Impl,
    {
        unsafe extern "system" fn BeginStartPartitionDataLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            invokedatalossdescription : *const super::FabricTypes:: FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::BeginStartPartitionDataLoss(
                this,
                core::mem::transmute_copy(&invokedatalossdescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStartPartitionDataLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTestManagementClient_Impl::EndStartPartitionDataLoss(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetPartitionDataLossProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            operationid: windows_core::GUID,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::BeginGetPartitionDataLossProgress(
                this,
                core::mem::transmute(&operationid),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetPartitionDataLossProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::EndGetPartitionDataLossProgress(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginStartPartitionQuorumLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            invokequorumlossdescription : *const super::FabricTypes:: FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::BeginStartPartitionQuorumLoss(
                this,
                core::mem::transmute_copy(&invokequorumlossdescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStartPartitionQuorumLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTestManagementClient_Impl::EndStartPartitionQuorumLoss(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetPartitionQuorumLossProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            operationid: windows_core::GUID,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::BeginGetPartitionQuorumLossProgress(
                this,
                core::mem::transmute(&operationid),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetPartitionQuorumLossProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::EndGetPartitionQuorumLossProgress(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginStartPartitionRestart<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            restartpartitiondescription : *const super::FabricTypes:: FABRIC_START_PARTITION_RESTART_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::BeginStartPartitionRestart(
                this,
                core::mem::transmute_copy(&restartpartitiondescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStartPartitionRestart<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTestManagementClient_Impl::EndStartPartitionRestart(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetPartitionRestartProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            operationid: windows_core::GUID,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::BeginGetPartitionRestartProgress(
                this,
                core::mem::transmute(&operationid),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetPartitionRestartProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::EndGetPartitionRestartProgress(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetTestCommandStatusList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            operationid: *const super::FabricTypes::FABRIC_TEST_COMMAND_LIST_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::BeginGetTestCommandStatusList(
                this,
                core::mem::transmute_copy(&operationid),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetTestCommandStatusList<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::EndGetTestCommandStatusList(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginCancelTestCommand<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            invokedatalossdescription : *const super::FabricTypes:: FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient_Impl::BeginCancelTestCommand(
                this,
                core::mem::transmute_copy(&invokedatalossdescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCancelTestCommand<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTestManagementClient_Impl::EndCancelTestCommand(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginStartPartitionDataLoss: BeginStartPartitionDataLoss::<Identity, OFFSET>,
            EndStartPartitionDataLoss: EndStartPartitionDataLoss::<Identity, OFFSET>,
            BeginGetPartitionDataLossProgress: BeginGetPartitionDataLossProgress::<Identity, OFFSET>,
            EndGetPartitionDataLossProgress: EndGetPartitionDataLossProgress::<Identity, OFFSET>,
            BeginStartPartitionQuorumLoss: BeginStartPartitionQuorumLoss::<Identity, OFFSET>,
            EndStartPartitionQuorumLoss: EndStartPartitionQuorumLoss::<Identity, OFFSET>,
            BeginGetPartitionQuorumLossProgress: BeginGetPartitionQuorumLossProgress::<
                Identity,
                OFFSET,
            >,
            EndGetPartitionQuorumLossProgress: EndGetPartitionQuorumLossProgress::<Identity, OFFSET>,
            BeginStartPartitionRestart: BeginStartPartitionRestart::<Identity, OFFSET>,
            EndStartPartitionRestart: EndStartPartitionRestart::<Identity, OFFSET>,
            BeginGetPartitionRestartProgress: BeginGetPartitionRestartProgress::<Identity, OFFSET>,
            EndGetPartitionRestartProgress: EndGetPartitionRestartProgress::<Identity, OFFSET>,
            BeginGetTestCommandStatusList: BeginGetTestCommandStatusList::<Identity, OFFSET>,
            EndGetTestCommandStatusList: EndGetTestCommandStatusList::<Identity, OFFSET>,
            BeginCancelTestCommand: BeginCancelTestCommand::<Identity, OFFSET>,
            EndCancelTestCommand: EndCancelTestCommand::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTestManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricTestManagementClient2_Impl: Sized + IFabricTestManagementClient_Impl {
    fn BeginStartChaos(
        &self,
        restartpartitiondescription: *const super::FabricTypes::FABRIC_START_CHAOS_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStartChaos(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginStopChaos(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStopChaos(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetChaosReport(
        &self,
        getchaosreportdescription: *const super::FabricTypes::FABRIC_GET_CHAOS_REPORT_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetChaosReport(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricChaosReportResult>;
}
impl windows_core::RuntimeName for IFabricTestManagementClient2 {}
impl IFabricTestManagementClient2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTestManagementClient2_Vtbl
    where
        Identity: IFabricTestManagementClient2_Impl,
    {
        unsafe extern "system" fn BeginStartChaos<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            restartpartitiondescription: *const super::FabricTypes::FABRIC_START_CHAOS_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient2_Impl::BeginStartChaos(
                this,
                core::mem::transmute_copy(&restartpartitiondescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStartChaos<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTestManagementClient2_Impl::EndStartChaos(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginStopChaos<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient2_Impl::BeginStopChaos(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStopChaos<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTestManagementClient2_Impl::EndStopChaos(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetChaosReport<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            getchaosreportdescription : *const super::FabricTypes:: FABRIC_GET_CHAOS_REPORT_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient2_Impl::BeginGetChaosReport(
                this,
                core::mem::transmute_copy(&getchaosreportdescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetChaosReport<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient2_Impl::EndGetChaosReport(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricTestManagementClient_Vtbl::new::<Identity, OFFSET>(),
            BeginStartChaos: BeginStartChaos::<Identity, OFFSET>,
            EndStartChaos: EndStartChaos::<Identity, OFFSET>,
            BeginStopChaos: BeginStopChaos::<Identity, OFFSET>,
            EndStopChaos: EndStopChaos::<Identity, OFFSET>,
            BeginGetChaosReport: BeginGetChaosReport::<Identity, OFFSET>,
            EndGetChaosReport: EndGetChaosReport::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTestManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricTestManagementClient as windows_core::Interface>::IID
    }
}
pub trait IFabricTestManagementClient3_Impl: Sized + IFabricTestManagementClient2_Impl {
    fn BeginStartNodeTransition(
        &self,
        description: *const super::FabricTypes::FABRIC_NODE_TRANSITION_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndStartNodeTransition(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetNodeTransitionProgress(
        &self,
        operationid: &windows_core::GUID,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetNodeTransitionProgress(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricNodeTransitionProgressResult>;
}
impl windows_core::RuntimeName for IFabricTestManagementClient3 {}
impl IFabricTestManagementClient3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTestManagementClient3_Vtbl
    where
        Identity: IFabricTestManagementClient3_Impl,
    {
        unsafe extern "system" fn BeginStartNodeTransition<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            description: *const super::FabricTypes::FABRIC_NODE_TRANSITION_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient3_Impl::BeginStartNodeTransition(
                this,
                core::mem::transmute_copy(&description),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndStartNodeTransition<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTestManagementClient3_Impl::EndStartNodeTransition(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetNodeTransitionProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            operationid: windows_core::GUID,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient3_Impl::BeginGetNodeTransitionProgress(
                this,
                core::mem::transmute(&operationid),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetNodeTransitionProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient3_Impl::EndGetNodeTransitionProgress(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricTestManagementClient2_Vtbl::new::<Identity, OFFSET>(),
            BeginStartNodeTransition: BeginStartNodeTransition::<Identity, OFFSET>,
            EndStartNodeTransition: EndStartNodeTransition::<Identity, OFFSET>,
            BeginGetNodeTransitionProgress: BeginGetNodeTransitionProgress::<Identity, OFFSET>,
            EndGetNodeTransitionProgress: EndGetNodeTransitionProgress::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTestManagementClient3 as windows_core::Interface>::IID
            || iid == &<IFabricTestManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricTestManagementClient2 as windows_core::Interface>::IID
    }
}
pub trait IFabricTestManagementClient4_Impl: Sized + IFabricTestManagementClient3_Impl {
    fn BeginGetChaos(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetChaos(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricChaosDescriptionResult>;
    fn BeginGetChaosSchedule(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetChaosSchedule(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricChaosScheduleDescriptionResult>;
    fn BeginSetChaosSchedule(
        &self,
        setchaosscheduledescription : *const super::FabricTypes:: FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndSetChaosSchedule(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginGetChaosEvents(
        &self,
        chaoseventsdescription: *const super::FabricTypes::FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetChaosEvents(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricChaosEventsSegmentResult>;
}
impl windows_core::RuntimeName for IFabricTestManagementClient4 {}
impl IFabricTestManagementClient4_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTestManagementClient4_Vtbl
    where
        Identity: IFabricTestManagementClient4_Impl,
    {
        unsafe extern "system" fn BeginGetChaos<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient4_Impl::BeginGetChaos(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetChaos<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient4_Impl::EndGetChaos(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginGetChaosSchedule<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient4_Impl::BeginGetChaosSchedule(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetChaosSchedule<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient4_Impl::EndGetChaosSchedule(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginSetChaosSchedule<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            setchaosscheduledescription : *const super::FabricTypes:: FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient4_Impl::BeginSetChaosSchedule(
                this,
                core::mem::transmute_copy(&setchaosscheduledescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndSetChaosSchedule<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTestManagementClient4_Impl::EndSetChaosSchedule(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginGetChaosEvents<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            chaoseventsdescription : *const super::FabricTypes:: FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient4_Impl::BeginGetChaosEvents(
                this,
                core::mem::transmute_copy(&chaoseventsdescription),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetChaosEvents<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTestManagementClient4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTestManagementClient4_Impl::EndGetChaosEvents(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricTestManagementClient3_Vtbl::new::<Identity, OFFSET>(),
            BeginGetChaos: BeginGetChaos::<Identity, OFFSET>,
            EndGetChaos: EndGetChaos::<Identity, OFFSET>,
            BeginGetChaosSchedule: BeginGetChaosSchedule::<Identity, OFFSET>,
            EndGetChaosSchedule: EndGetChaosSchedule::<Identity, OFFSET>,
            BeginSetChaosSchedule: BeginSetChaosSchedule::<Identity, OFFSET>,
            EndSetChaosSchedule: EndSetChaosSchedule::<Identity, OFFSET>,
            BeginGetChaosEvents: BeginGetChaosEvents::<Identity, OFFSET>,
            EndGetChaosEvents: EndGetChaosEvents::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTestManagementClient4 as windows_core::Interface>::IID
            || iid == &<IFabricTestManagementClient as windows_core::Interface>::IID
            || iid == &<IFabricTestManagementClient2 as windows_core::Interface>::IID
            || iid == &<IFabricTestManagementClient3 as windows_core::Interface>::IID
    }
}
pub trait IFabricUpgradeOrchestrationServiceStateResult_Impl: Sized {
    fn get_State(&self) -> *mut super::FabricTypes::FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE;
}
impl windows_core::RuntimeName for IFabricUpgradeOrchestrationServiceStateResult {}
impl IFabricUpgradeOrchestrationServiceStateResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricUpgradeOrchestrationServiceStateResult_Vtbl
    where
        Identity: IFabricUpgradeOrchestrationServiceStateResult_Impl,
    {
        unsafe extern "system" fn get_State<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE
        where
            Identity: IFabricUpgradeOrchestrationServiceStateResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricUpgradeOrchestrationServiceStateResult_Impl::get_State(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_State: get_State::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricUpgradeOrchestrationServiceStateResult as windows_core::Interface>::IID
    }
}
pub trait IFabricUpgradeProgressResult_Impl: Sized {
    fn get_TargetCodeVersion(&self) -> windows_core::PCWSTR;
    fn get_TargetConfigVersion(&self) -> windows_core::PCWSTR;
    fn get_UpgradeState(&self) -> super::FabricTypes::FABRIC_UPGRADE_STATE;
    fn GetUpgradeDomains(
        &self,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION>;
    fn GetChangedUpgradeDomains(
        &self,
        previousprogress: Option<&IFabricUpgradeProgressResult>,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION>;
}
impl windows_core::RuntimeName for IFabricUpgradeProgressResult {}
impl IFabricUpgradeProgressResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricUpgradeProgressResult_Vtbl
    where
        Identity: IFabricUpgradeProgressResult_Impl,
    {
        unsafe extern "system" fn get_TargetCodeVersion<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricUpgradeProgressResult_Impl::get_TargetCodeVersion(this)
        }
        unsafe extern "system" fn get_TargetConfigVersion<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricUpgradeProgressResult_Impl::get_TargetConfigVersion(this)
        }
        unsafe extern "system" fn get_UpgradeState<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_UPGRADE_STATE
        where
            Identity: IFabricUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricUpgradeProgressResult_Impl::get_UpgradeState(this)
        }
        unsafe extern "system" fn GetUpgradeDomains<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            itemcount: *mut u32,
            buffereditems: *mut *mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricUpgradeProgressResult_Impl::GetUpgradeDomains(
                this,
                core::mem::transmute_copy(&itemcount),
            ) {
                Ok(ok__) => {
                    buffereditems.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetChangedUpgradeDomains<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            previousprogress: *mut core::ffi::c_void,
            itemcount: *mut u32,
            buffereditems: *mut *mut super::FabricTypes::FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricUpgradeProgressResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricUpgradeProgressResult_Impl::GetChangedUpgradeDomains(
                this,
                windows_core::from_raw_borrowed(&previousprogress),
                core::mem::transmute_copy(&itemcount),
            ) {
                Ok(ok__) => {
                    buffereditems.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_TargetCodeVersion: get_TargetCodeVersion::<Identity, OFFSET>,
            get_TargetConfigVersion: get_TargetConfigVersion::<Identity, OFFSET>,
            get_UpgradeState: get_UpgradeState::<Identity, OFFSET>,
            GetUpgradeDomains: GetUpgradeDomains::<Identity, OFFSET>,
            GetChangedUpgradeDomains: GetChangedUpgradeDomains::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricUpgradeProgressResult as windows_core::Interface>::IID
    }
}
pub trait IFabricUpgradeProgressResult2_Impl: Sized + IFabricUpgradeProgressResult_Impl {
    fn get_RollingUpgradeMode(&self) -> super::FabricTypes::FABRIC_ROLLING_UPGRADE_MODE;
    fn get_NextUpgradeDomain(&self) -> windows_core::PCWSTR;
}
impl windows_core::RuntimeName for IFabricUpgradeProgressResult2 {}
impl IFabricUpgradeProgressResult2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricUpgradeProgressResult2_Vtbl
    where
        Identity: IFabricUpgradeProgressResult2_Impl,
    {
        unsafe extern "system" fn get_RollingUpgradeMode<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_ROLLING_UPGRADE_MODE
        where
            Identity: IFabricUpgradeProgressResult2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricUpgradeProgressResult2_Impl::get_RollingUpgradeMode(this)
        }
        unsafe extern "system" fn get_NextUpgradeDomain<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricUpgradeProgressResult2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricUpgradeProgressResult2_Impl::get_NextUpgradeDomain(this)
        }
        Self {
            base__: IFabricUpgradeProgressResult_Vtbl::new::<Identity, OFFSET>(),
            get_RollingUpgradeMode: get_RollingUpgradeMode::<Identity, OFFSET>,
            get_NextUpgradeDomain: get_NextUpgradeDomain::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricUpgradeProgressResult2 as windows_core::Interface>::IID
            || iid == &<IFabricUpgradeProgressResult as windows_core::Interface>::IID
    }
}
pub trait IFabricUpgradeProgressResult3_Impl: Sized + IFabricUpgradeProgressResult2_Impl {
    fn get_UpgradeProgress(&self) -> *mut super::FabricTypes::FABRIC_UPGRADE_PROGRESS;
}
impl windows_core::RuntimeName for IFabricUpgradeProgressResult3 {}
impl IFabricUpgradeProgressResult3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricUpgradeProgressResult3_Vtbl
    where
        Identity: IFabricUpgradeProgressResult3_Impl,
    {
        unsafe extern "system" fn get_UpgradeProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_UPGRADE_PROGRESS
        where
            Identity: IFabricUpgradeProgressResult3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricUpgradeProgressResult3_Impl::get_UpgradeProgress(this)
        }
        Self {
            base__: IFabricUpgradeProgressResult2_Vtbl::new::<Identity, OFFSET>(),
            get_UpgradeProgress: get_UpgradeProgress::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricUpgradeProgressResult3 as windows_core::Interface>::IID
            || iid == &<IFabricUpgradeProgressResult as windows_core::Interface>::IID
            || iid == &<IFabricUpgradeProgressResult2 as windows_core::Interface>::IID
    }
}
