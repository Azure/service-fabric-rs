// Bindings generated by `windows-bindgen` 0.56.0

#[cfg(feature = "ServiceFabric_FabricCommon")]
pub mod FabricCommon;
pub const FABRIC_APPLICATION_DEFINITION_KIND_COMPOSE: FABRIC_APPLICATION_DEFINITION_KIND =
    FABRIC_APPLICATION_DEFINITION_KIND(1i32);
pub const FABRIC_APPLICATION_DEFINITION_KIND_FILTER_ALL: FABRIC_APPLICATION_DEFINITION_KIND_FILTER =
    FABRIC_APPLICATION_DEFINITION_KIND_FILTER(65535i32);
pub const FABRIC_APPLICATION_DEFINITION_KIND_FILTER_COMPOSE:
    FABRIC_APPLICATION_DEFINITION_KIND_FILTER = FABRIC_APPLICATION_DEFINITION_KIND_FILTER(2i32);
pub const FABRIC_APPLICATION_DEFINITION_KIND_FILTER_DEFAULT:
    FABRIC_APPLICATION_DEFINITION_KIND_FILTER = FABRIC_APPLICATION_DEFINITION_KIND_FILTER(0i32);
pub const FABRIC_APPLICATION_DEFINITION_KIND_FILTER_MESH_APPLICATION_DESCRIPTION:
    FABRIC_APPLICATION_DEFINITION_KIND_FILTER = FABRIC_APPLICATION_DEFINITION_KIND_FILTER(4i32);
pub const FABRIC_APPLICATION_DEFINITION_KIND_FILTER_SERVICE_FABRIC_APPLICATION_DESCRIPTION:
    FABRIC_APPLICATION_DEFINITION_KIND_FILTER = FABRIC_APPLICATION_DEFINITION_KIND_FILTER(1i32);
pub const FABRIC_APPLICATION_DEFINITION_KIND_INVALID: FABRIC_APPLICATION_DEFINITION_KIND =
    FABRIC_APPLICATION_DEFINITION_KIND(65535i32);
pub const FABRIC_APPLICATION_DEFINITION_KIND_MESH_APPLICATION_DESCRIPTION:
    FABRIC_APPLICATION_DEFINITION_KIND = FABRIC_APPLICATION_DEFINITION_KIND(2i32);
pub const FABRIC_APPLICATION_DEFINITION_KIND_SERVICE_FABRIC_APPLICATION_DESCRIPTION:
    FABRIC_APPLICATION_DEFINITION_KIND = FABRIC_APPLICATION_DEFINITION_KIND(0i32);
pub const FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY_AUTOMATIC:
    FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY = FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY(2i32);
pub const FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY_DEFAULT:
    FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY = FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY(1i32);
pub const FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY_INVALID:
    FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY = FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY(0i32);
pub const FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY_MANUAL:
    FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY = FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY(3i32);
pub const FABRIC_APPLICATION_STATUS_CREATING: FABRIC_APPLICATION_STATUS =
    FABRIC_APPLICATION_STATUS(3i32);
pub const FABRIC_APPLICATION_STATUS_DELETING: FABRIC_APPLICATION_STATUS =
    FABRIC_APPLICATION_STATUS(4i32);
pub const FABRIC_APPLICATION_STATUS_FAILED: FABRIC_APPLICATION_STATUS =
    FABRIC_APPLICATION_STATUS(5i32);
pub const FABRIC_APPLICATION_STATUS_INVALID: FABRIC_APPLICATION_STATUS =
    FABRIC_APPLICATION_STATUS(0i32);
pub const FABRIC_APPLICATION_STATUS_READY: FABRIC_APPLICATION_STATUS =
    FABRIC_APPLICATION_STATUS(1i32);
pub const FABRIC_APPLICATION_STATUS_UPGRADING: FABRIC_APPLICATION_STATUS =
    FABRIC_APPLICATION_STATUS(2i32);
pub const FABRIC_APPLICATION_TYPE_DEFINITION_KIND_COMPOSE: FABRIC_APPLICATION_TYPE_DEFINITION_KIND =
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND(2i32);
pub const FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER_ALL:
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER =
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER(65535i32);
pub const FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER_COMPOSE:
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER =
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER(2i32);
pub const FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER_DEFAULT:
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER =
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER(0i32);
pub const FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER_MESH_APPLICATION_DESCRIPTION:
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER =
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER(4i32);
pub const FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER_SERVICE_FABRIC_APPLICATION_PACKAGE:
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER =
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER(1i32);
pub const FABRIC_APPLICATION_TYPE_DEFINITION_KIND_INVALID: FABRIC_APPLICATION_TYPE_DEFINITION_KIND =
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND(0i32);
pub const FABRIC_APPLICATION_TYPE_DEFINITION_KIND_MESH_APPLICATION_DESCRIPTION:
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND = FABRIC_APPLICATION_TYPE_DEFINITION_KIND(3i32);
pub const FABRIC_APPLICATION_TYPE_DEFINITION_KIND_SERVICE_FABRIC_APPLICATION_PACKAGE:
    FABRIC_APPLICATION_TYPE_DEFINITION_KIND = FABRIC_APPLICATION_TYPE_DEFINITION_KIND(1i32);
pub const FABRIC_APPLICATION_TYPE_STATUS_AVAILABLE: FABRIC_APPLICATION_TYPE_STATUS =
    FABRIC_APPLICATION_TYPE_STATUS(2i32);
pub const FABRIC_APPLICATION_TYPE_STATUS_FAILED: FABRIC_APPLICATION_TYPE_STATUS =
    FABRIC_APPLICATION_TYPE_STATUS(4i32);
pub const FABRIC_APPLICATION_TYPE_STATUS_INVALID: FABRIC_APPLICATION_TYPE_STATUS =
    FABRIC_APPLICATION_TYPE_STATUS(0i32);
pub const FABRIC_APPLICATION_TYPE_STATUS_PROVISIONING: FABRIC_APPLICATION_TYPE_STATUS =
    FABRIC_APPLICATION_TYPE_STATUS(1i32);
pub const FABRIC_APPLICATION_TYPE_STATUS_UNPROVISIONING: FABRIC_APPLICATION_TYPE_STATUS =
    FABRIC_APPLICATION_TYPE_STATUS(3i32);
pub const FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_MAXNODES:
    FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS = FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS(2i32);
pub const FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_METRICS:
    FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS = FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS(4i32);
pub const FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_MINNODES:
    FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS = FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS(1i32);
pub const FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_NONE:
    FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS = FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS(0i32);
pub const FABRIC_APPLICATION_UPGRADE_KIND_INVALID: FABRIC_APPLICATION_UPGRADE_KIND =
    FABRIC_APPLICATION_UPGRADE_KIND(0i32);
pub const FABRIC_APPLICATION_UPGRADE_KIND_ROLLING: FABRIC_APPLICATION_UPGRADE_KIND =
    FABRIC_APPLICATION_UPGRADE_KIND(1i32);
pub const FABRIC_APPLICATION_UPGRADE_STATE_FAILED: FABRIC_APPLICATION_UPGRADE_STATE =
    FABRIC_APPLICATION_UPGRADE_STATE(6i32);
pub const FABRIC_APPLICATION_UPGRADE_STATE_INVALID: FABRIC_APPLICATION_UPGRADE_STATE =
    FABRIC_APPLICATION_UPGRADE_STATE(0i32);
pub const FABRIC_APPLICATION_UPGRADE_STATE_ROLLING_BACK_COMPLETED:
    FABRIC_APPLICATION_UPGRADE_STATE = FABRIC_APPLICATION_UPGRADE_STATE(2i32);
pub const FABRIC_APPLICATION_UPGRADE_STATE_ROLLING_BACK_IN_PROGRESS:
    FABRIC_APPLICATION_UPGRADE_STATE = FABRIC_APPLICATION_UPGRADE_STATE(1i32);
pub const FABRIC_APPLICATION_UPGRADE_STATE_ROLLING_BACK_PENDING: FABRIC_APPLICATION_UPGRADE_STATE =
    FABRIC_APPLICATION_UPGRADE_STATE(7i32);
pub const FABRIC_APPLICATION_UPGRADE_STATE_ROLLING_FORWARD_COMPLETED:
    FABRIC_APPLICATION_UPGRADE_STATE = FABRIC_APPLICATION_UPGRADE_STATE(5i32);
pub const FABRIC_APPLICATION_UPGRADE_STATE_ROLLING_FORWARD_IN_PROGRESS:
    FABRIC_APPLICATION_UPGRADE_STATE = FABRIC_APPLICATION_UPGRADE_STATE(4i32);
pub const FABRIC_APPLICATION_UPGRADE_STATE_ROLLING_FORWARD_PENDING:
    FABRIC_APPLICATION_UPGRADE_STATE = FABRIC_APPLICATION_UPGRADE_STATE(3i32);
pub const FABRIC_AUTO_SEQUENCE_NUMBER: u32 = 0u32;
pub const FABRIC_CHAOS_EVENT_KIND_EXECUTING_FAULTS: FABRIC_CHAOS_EVENT_KIND =
    FABRIC_CHAOS_EVENT_KIND(2i32);
pub const FABRIC_CHAOS_EVENT_KIND_INVALID: FABRIC_CHAOS_EVENT_KIND = FABRIC_CHAOS_EVENT_KIND(0i32);
pub const FABRIC_CHAOS_EVENT_KIND_STARTED: FABRIC_CHAOS_EVENT_KIND = FABRIC_CHAOS_EVENT_KIND(1i32);
pub const FABRIC_CHAOS_EVENT_KIND_STOPPED: FABRIC_CHAOS_EVENT_KIND = FABRIC_CHAOS_EVENT_KIND(6i32);
pub const FABRIC_CHAOS_EVENT_KIND_TEST_ERROR: FABRIC_CHAOS_EVENT_KIND =
    FABRIC_CHAOS_EVENT_KIND(5i32);
pub const FABRIC_CHAOS_EVENT_KIND_VALIDATION_FAILED: FABRIC_CHAOS_EVENT_KIND =
    FABRIC_CHAOS_EVENT_KIND(4i32);
pub const FABRIC_CHAOS_EVENT_KIND_WAITING: FABRIC_CHAOS_EVENT_KIND = FABRIC_CHAOS_EVENT_KIND(3i32);
pub const FABRIC_CHAOS_SCHEDULE_STATUS_ACTIVE: FABRIC_CHAOS_SCHEDULE_STATUS =
    FABRIC_CHAOS_SCHEDULE_STATUS(1i32);
pub const FABRIC_CHAOS_SCHEDULE_STATUS_EXPIRED: FABRIC_CHAOS_SCHEDULE_STATUS =
    FABRIC_CHAOS_SCHEDULE_STATUS(2i32);
pub const FABRIC_CHAOS_SCHEDULE_STATUS_INVALID: FABRIC_CHAOS_SCHEDULE_STATUS =
    FABRIC_CHAOS_SCHEDULE_STATUS(0i32);
pub const FABRIC_CHAOS_SCHEDULE_STATUS_PENDING: FABRIC_CHAOS_SCHEDULE_STATUS =
    FABRIC_CHAOS_SCHEDULE_STATUS(3i32);
pub const FABRIC_CHAOS_SCHEDULE_STATUS_STOPPED: FABRIC_CHAOS_SCHEDULE_STATUS =
    FABRIC_CHAOS_SCHEDULE_STATUS(4i32);
pub const FABRIC_CHAOS_STATUS_INVALID: FABRIC_CHAOS_STATUS = FABRIC_CHAOS_STATUS(0i32);
pub const FABRIC_CHAOS_STATUS_RUNNING: FABRIC_CHAOS_STATUS = FABRIC_CHAOS_STATUS(1i32);
pub const FABRIC_CHAOS_STATUS_STOPPED: FABRIC_CHAOS_STATUS = FABRIC_CHAOS_STATUS(2i32);
pub const FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND_AAD: FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND =
    FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND(1i32);
pub const FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND_NONE: FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND =
    FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND(0i32);
pub const FABRIC_CLIENT_ROLE_ADMIN: FABRIC_CLIENT_ROLE = FABRIC_CLIENT_ROLE(2i32);
pub const FABRIC_CLIENT_ROLE_UNKNOWN: FABRIC_CLIENT_ROLE = FABRIC_CLIENT_ROLE(0i32);
pub const FABRIC_CLIENT_ROLE_USER: FABRIC_CLIENT_ROLE = FABRIC_CLIENT_ROLE(1i32);
pub const FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND_CONTAINERHOST: FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND =
    FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND(4i32);
pub const FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND_DLLHOST: FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND =
    FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND(3i32);
pub const FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND_EXEHOST: FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND =
    FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND(2i32);
pub const FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND_INVALID: FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND =
    FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND(0i32);
pub const FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND_NONE: FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND =
    FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND(1i32);
pub const FABRIC_CODE_PACKAGE_EVENT_TYPE_HEALTH: FABRIC_CODE_PACKAGE_EVENT_TYPE =
    FABRIC_CODE_PACKAGE_EVENT_TYPE(4i32);
pub const FABRIC_CODE_PACKAGE_EVENT_TYPE_INVALID: FABRIC_CODE_PACKAGE_EVENT_TYPE =
    FABRIC_CODE_PACKAGE_EVENT_TYPE(0i32);
pub const FABRIC_CODE_PACKAGE_EVENT_TYPE_READY: FABRIC_CODE_PACKAGE_EVENT_TYPE =
    FABRIC_CODE_PACKAGE_EVENT_TYPE(3i32);
pub const FABRIC_CODE_PACKAGE_EVENT_TYPE_STARTED: FABRIC_CODE_PACKAGE_EVENT_TYPE =
    FABRIC_CODE_PACKAGE_EVENT_TYPE(2i32);
pub const FABRIC_CODE_PACKAGE_EVENT_TYPE_START_FAILED: FABRIC_CODE_PACKAGE_EVENT_TYPE =
    FABRIC_CODE_PACKAGE_EVENT_TYPE(1i32);
pub const FABRIC_CODE_PACKAGE_EVENT_TYPE_STOPPED: FABRIC_CODE_PACKAGE_EVENT_TYPE =
    FABRIC_CODE_PACKAGE_EVENT_TYPE(5i32);
pub const FABRIC_CODE_PACKAGE_EVENT_TYPE_TERMINATED: FABRIC_CODE_PACKAGE_EVENT_TYPE =
    FABRIC_CODE_PACKAGE_EVENT_TYPE(6i32);
pub const FABRIC_DATA_LOSS_MODE_FULL: FABRIC_DATA_LOSS_MODE = FABRIC_DATA_LOSS_MODE(2i32);
pub const FABRIC_DATA_LOSS_MODE_INVALID: FABRIC_DATA_LOSS_MODE = FABRIC_DATA_LOSS_MODE(0i32);
pub const FABRIC_DATA_LOSS_MODE_PARTIAL: FABRIC_DATA_LOSS_MODE = FABRIC_DATA_LOSS_MODE(1i32);
pub const FABRIC_DEPLOYMENT_STATUS_ACTIVATING: FABRIC_DEPLOYMENT_STATUS =
    FABRIC_DEPLOYMENT_STATUS(2i32);
pub const FABRIC_DEPLOYMENT_STATUS_ACTIVE: FABRIC_DEPLOYMENT_STATUS =
    FABRIC_DEPLOYMENT_STATUS(3i32);
pub const FABRIC_DEPLOYMENT_STATUS_DEACTIVATING: FABRIC_DEPLOYMENT_STATUS =
    FABRIC_DEPLOYMENT_STATUS(5i32);
pub const FABRIC_DEPLOYMENT_STATUS_DOWNLOADING: FABRIC_DEPLOYMENT_STATUS =
    FABRIC_DEPLOYMENT_STATUS(1i32);
pub const FABRIC_DEPLOYMENT_STATUS_INVALID: FABRIC_DEPLOYMENT_STATUS =
    FABRIC_DEPLOYMENT_STATUS(0i32);
pub const FABRIC_DEPLOYMENT_STATUS_UPGRADING: FABRIC_DEPLOYMENT_STATUS =
    FABRIC_DEPLOYMENT_STATUS(4i32);
pub const FABRIC_DIAGNOSTICS_SINKS_KIND_AZUREINTERNAL: FABRIC_DIAGNOSTICS_SINKS_KIND =
    FABRIC_DIAGNOSTICS_SINKS_KIND(1i32);
pub const FABRIC_DIAGNOSTICS_SINKS_KIND_INVALID: FABRIC_DIAGNOSTICS_SINKS_KIND =
    FABRIC_DIAGNOSTICS_SINKS_KIND(0i32);
pub const FABRIC_DLLHOST_HOSTED_DLL_KIND_INVALID: FABRIC_DLLHOST_HOSTED_DLL_KIND =
    FABRIC_DLLHOST_HOSTED_DLL_KIND(0i32);
pub const FABRIC_DLLHOST_HOSTED_DLL_KIND_MANAGED: FABRIC_DLLHOST_HOSTED_DLL_KIND =
    FABRIC_DLLHOST_HOSTED_DLL_KIND(2i32);
pub const FABRIC_DLLHOST_HOSTED_DLL_KIND_UNMANAGED: FABRIC_DLLHOST_HOSTED_DLL_KIND =
    FABRIC_DLLHOST_HOSTED_DLL_KIND(1i32);
pub const FABRIC_DLLHOST_ISOLATION_POLICY_DEDICATED_DOMAIN: FABRIC_DLLHOST_ISOLATION_POLICY =
    FABRIC_DLLHOST_ISOLATION_POLICY(2i32);
pub const FABRIC_DLLHOST_ISOLATION_POLICY_DEDICATED_PROCESS: FABRIC_DLLHOST_ISOLATION_POLICY =
    FABRIC_DLLHOST_ISOLATION_POLICY(3i32);
pub const FABRIC_DLLHOST_ISOLATION_POLICY_INVALID: FABRIC_DLLHOST_ISOLATION_POLICY =
    FABRIC_DLLHOST_ISOLATION_POLICY(0i32);
pub const FABRIC_DLLHOST_ISOLATION_POLICY_SHARED_DOMAIN: FABRIC_DLLHOST_ISOLATION_POLICY =
    FABRIC_DLLHOST_ISOLATION_POLICY(1i32);
pub const FABRIC_ENTRY_POINT_STATUS_INVALID: FABRIC_ENTRY_POINT_STATUS =
    FABRIC_ENTRY_POINT_STATUS(0i32);
pub const FABRIC_ENTRY_POINT_STATUS_PENDING: FABRIC_ENTRY_POINT_STATUS =
    FABRIC_ENTRY_POINT_STATUS(1i32);
pub const FABRIC_ENTRY_POINT_STATUS_STARTED: FABRIC_ENTRY_POINT_STATUS =
    FABRIC_ENTRY_POINT_STATUS(3i32);
pub const FABRIC_ENTRY_POINT_STATUS_STARTING: FABRIC_ENTRY_POINT_STATUS =
    FABRIC_ENTRY_POINT_STATUS(2i32);
pub const FABRIC_ENTRY_POINT_STATUS_STOPPED: FABRIC_ENTRY_POINT_STATUS =
    FABRIC_ENTRY_POINT_STATUS(5i32);
pub const FABRIC_ENTRY_POINT_STATUS_STOPPING: FABRIC_ENTRY_POINT_STATUS =
    FABRIC_ENTRY_POINT_STATUS(4i32);
pub const FABRIC_ENUMERATION_BEST_EFFORT_FINISHED: FABRIC_ENUMERATION_STATUS =
    FABRIC_ENUMERATION_STATUS(4i32);
pub const FABRIC_ENUMERATION_BEST_EFFORT_MASK: FABRIC_ENUMERATION_STATUS =
    FABRIC_ENUMERATION_STATUS(5i32);
pub const FABRIC_ENUMERATION_BEST_EFFORT_MORE_DATA: FABRIC_ENUMERATION_STATUS =
    FABRIC_ENUMERATION_STATUS(1i32);
pub const FABRIC_ENUMERATION_CONSISTENT_FINISHED: FABRIC_ENUMERATION_STATUS =
    FABRIC_ENUMERATION_STATUS(8i32);
pub const FABRIC_ENUMERATION_CONSISTENT_MASK: FABRIC_ENUMERATION_STATUS =
    FABRIC_ENUMERATION_STATUS(10i32);
pub const FABRIC_ENUMERATION_CONSISTENT_MORE_DATA: FABRIC_ENUMERATION_STATUS =
    FABRIC_ENUMERATION_STATUS(2i32);
pub const FABRIC_ENUMERATION_FINISHED_MASK: FABRIC_ENUMERATION_STATUS =
    FABRIC_ENUMERATION_STATUS(12i32);
pub const FABRIC_ENUMERATION_INVALID: FABRIC_ENUMERATION_STATUS = FABRIC_ENUMERATION_STATUS(0i32);
pub const FABRIC_ENUMERATION_MORE_DATA_MASK: FABRIC_ENUMERATION_STATUS =
    FABRIC_ENUMERATION_STATUS(3i32);
pub const FABRIC_ENUMERATION_VALID_MASK: FABRIC_ENUMERATION_STATUS =
    FABRIC_ENUMERATION_STATUS(15i32);
pub const FABRIC_EXEHOST_WORKING_FOLDER_CODE_BASE: FABRIC_EXEHOST_WORKING_FOLDER =
    FABRIC_EXEHOST_WORKING_FOLDER(3i32);
pub const FABRIC_EXEHOST_WORKING_FOLDER_CODE_PACKAGE: FABRIC_EXEHOST_WORKING_FOLDER =
    FABRIC_EXEHOST_WORKING_FOLDER(2i32);
pub const FABRIC_EXEHOST_WORKING_FOLDER_INVALID: FABRIC_EXEHOST_WORKING_FOLDER =
    FABRIC_EXEHOST_WORKING_FOLDER(0i32);
pub const FABRIC_EXEHOST_WORKING_FOLDER_WORK: FABRIC_EXEHOST_WORKING_FOLDER =
    FABRIC_EXEHOST_WORKING_FOLDER(1i32);
pub const FABRIC_E_ACQUIRE_FILE_LOCK_FAILED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017662i32);
pub const FABRIC_E_ALREADY_STOPPED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017634i32);
pub const FABRIC_E_APPLICATION_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017764i32);
pub const FABRIC_E_APPLICATION_ALREADY_IN_TARGET_VERSION: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017721i32);
pub const FABRIC_E_APPLICATION_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017763i32);
pub const FABRIC_E_APPLICATION_NOT_UPGRADING: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017722i32);
pub const FABRIC_E_APPLICATION_TYPE_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017767i32);
pub const FABRIC_E_APPLICATION_TYPE_IN_USE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017765i32);
pub const FABRIC_E_APPLICATION_TYPE_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017766i32);
pub const FABRIC_E_APPLICATION_TYPE_PROVISION_IN_PROGRESS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017768i32);
pub const FABRIC_E_APPLICATION_UPDATE_IN_PROGRESS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017648i32);
pub const FABRIC_E_APPLICATION_UPGRADE_IN_PROGRESS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017762i32);
pub const FABRIC_E_APPLICATION_UPGRADE_VALIDATION_ERROR: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017761i32);
pub const FABRIC_E_BACKUPCOPIER_ACCESS_DENIED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017601i32);
pub const FABRIC_E_BACKUPCOPIER_TIMEOUT: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017602i32);
pub const FABRIC_E_BACKUPCOPIER_UNEXPECTED_ERROR: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017603i32);
pub const FABRIC_E_BACKUP_DIRECTORY_NOT_EMPTY: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017664i32);
pub const FABRIC_E_BACKUP_IN_PROGRESS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017672i32);
pub const FABRIC_E_BACKUP_IS_ENABLED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017612i32);
pub const FABRIC_E_BACKUP_NOT_ENABLED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017613i32);
pub const FABRIC_E_BACKUP_POLICY_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017610i32);
pub const FABRIC_E_BACKUP_POLICY_DOES_NOT_EXIST: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017611i32);
pub const FABRIC_E_CANNOT_CONNECT: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017652i32);
pub const FABRIC_E_CENTRAL_SECRET_SERVICE_GENERIC: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017594i32);
pub const FABRIC_E_CERTIFICATE_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017641i32);
pub const FABRIC_E_CHAOS_ALREADY_RUNNING: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017640i32);
pub const FABRIC_E_CM_OPERATION_FAILED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017643i32);
pub const FABRIC_E_CODE_PACKAGE_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017733i32);
pub const FABRIC_E_COMMUNICATION_ERROR: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017796i32);
pub const FABRIC_E_COMPOSE_DEPLOYMENT_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017619i32);
pub const FABRIC_E_COMPOSE_DEPLOYMENT_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017618i32);
pub const FABRIC_E_COMPOSE_DEPLOYMENT_NOT_UPGRADING: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017589i32);
pub const FABRIC_E_CONFIGURATION_PACKAGE_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017735i32);
pub const FABRIC_E_CONFIGURATION_PARAMETER_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017756i32);
pub const FABRIC_E_CONFIGURATION_SECTION_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017757i32);
pub const FABRIC_E_CONFIG_UPGRADE_FAILED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017627i32);
pub const FABRIC_E_CONNECTION_CLOSED_BY_REMOTE_END: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017646i32);
pub const FABRIC_E_CONNECTION_DENIED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017661i32);
pub const FABRIC_E_CONSTRAINT_KEY_UNDEFINED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017659i32);
pub const FABRIC_E_CONSTRAINT_NOT_SATISFIED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017650i32);
pub const FABRIC_E_CONTAINER_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017606i32);
pub const FABRIC_E_CORRUPTED_IMAGE_STORE_OBJECT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017723i32);
pub const FABRIC_E_DATABASE_MIGRATION_IN_PROGRESS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017595i32);
pub const FABRIC_E_DATA_PACKAGE_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017734i32);
pub const FABRIC_E_DECRYPTION_FAILED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017736i32);
pub const FABRIC_E_DELETE_BACKUP_FILE_FAILED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017647i32);
pub const FABRIC_E_DIRECTORY_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017727i32);
pub const FABRIC_E_DNS_NAME_IN_USE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017620i32);
pub const FABRIC_E_DNS_SERVICE_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017622i32);
pub const FABRIC_E_DUPLICATE_BACKUPS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017637i32);
pub const FABRIC_E_DUPLICATE_SERVICE_NOTIFICATION_FILTER_NAME: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017671i32);
pub const FABRIC_E_ENCRYPTION_FAILED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017707i32);
pub const FABRIC_E_ENDPOINT_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017649i32);
pub const FABRIC_E_ENDPOINT_NOT_REFERENCED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017585i32);
pub const FABRIC_E_ENUMERATION_COMPLETED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017769i32);
pub const FABRIC_E_FABRIC_ALREADY_IN_TARGET_VERSION: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017716i32);
pub const FABRIC_E_FABRIC_DATA_ROOT_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017639i32);
pub const FABRIC_E_FABRIC_NOT_UPGRADING: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017715i32);
pub const FABRIC_E_FABRIC_UPGRADE_IN_PROGRESS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017714i32);
pub const FABRIC_E_FABRIC_UPGRADE_VALIDATION_ERROR: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017713i32);
pub const FABRIC_E_FABRIC_VERSION_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017717i32);
pub const FABRIC_E_FABRIC_VERSION_IN_USE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017718i32);
pub const FABRIC_E_FABRIC_VERSION_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017719i32);
pub const FABRIC_E_FAULT_ANALYSIS_SERVICE_NOT_ENABLED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017607i32);
pub const FABRIC_E_FILE_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017728i32);
pub const FABRIC_E_FIRST_RESERVED_HRESULT: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017796i32);
pub const FABRIC_E_FORCE_NOT_SUPPORTED_FOR_REPLICA_OPERATION: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017663i32);
pub const FABRIC_E_GATEWAY_NOT_REACHABLE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017655i32);
pub const FABRIC_E_HEALTH_ENTITY_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017705i32);
pub const FABRIC_E_HEALTH_MAX_REPORTS_REACHED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017712i32);
pub const FABRIC_E_HEALTH_STALE_REPORT: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017711i32);
pub const FABRIC_E_IMAGEBUILDER_ACCESS_DENIED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017693i32);
pub const FABRIC_E_IMAGEBUILDER_INVALID_MSI_FILE: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017692i32);
pub const FABRIC_E_IMAGEBUILDER_RESERVED_DIRECTORY_ERROR: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017642i32);
pub const FABRIC_E_IMAGEBUILDER_TIMEOUT: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017694i32);
pub const FABRIC_E_IMAGEBUILDER_UNEXPECTED_ERROR: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017720i32);
pub const FABRIC_E_IMAGEBUILDER_VALIDATION_ERROR: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017754i32);
pub const FABRIC_E_IMAGESTORE_IOERROR: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017724i32);
pub const FABRIC_E_INSTANCE_ID_MISMATCH: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017680i32);
pub const FABRIC_E_INSUFFICIENT_CLUSTER_CAPACITY: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017677i32);
pub const FABRIC_E_INVALID_ADDRESS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017795i32);
pub const FABRIC_E_INVALID_ALLOWED_COMMON_NAME_LIST: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017738i32);
pub const FABRIC_E_INVALID_ATOMIC_GROUP: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017706i32);
pub const FABRIC_E_INVALID_BACKUP: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017631i32);
pub const FABRIC_E_INVALID_BACKUP_CHAIN: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017636i32);
pub const FABRIC_E_INVALID_BACKUP_SETTING: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017674i32);
pub const FABRIC_E_INVALID_CONFIGURATION: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017755i32);
pub const FABRIC_E_INVALID_CREDENTIALS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017737i32);
pub const FABRIC_E_INVALID_CREDENTIAL_TYPE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017746i32);
pub const FABRIC_E_INVALID_DIRECTORY: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017726i32);
pub const FABRIC_E_INVALID_DNS_NAME: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017621i32);
pub const FABRIC_E_INVALID_DURATION: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017629i32);
pub const FABRIC_E_INVALID_FOR_STATEFUL_SERVICES: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017617i32);
pub const FABRIC_E_INVALID_FOR_STATELESS_SERVICES: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017616i32);
pub const FABRIC_E_INVALID_INSTANCE_ID: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017630i32);
pub const FABRIC_E_INVALID_NAME_URI: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017794i32);
pub const FABRIC_E_INVALID_OPERATION: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017731i32);
pub const FABRIC_E_INVALID_PACKAGE_SHARING_POLICY: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017676i32);
pub const FABRIC_E_INVALID_PARTITION_KEY: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017793i32);
pub const FABRIC_E_INVALID_PARTITION_OPERATION: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017667i32);
pub const FABRIC_E_INVALID_PARTITION_SELECTOR: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017624i32);
pub const FABRIC_E_INVALID_PROTECTION_LEVEL: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017741i32);
pub const FABRIC_E_INVALID_REPLICA_OPERATION: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017670i32);
pub const FABRIC_E_INVALID_REPLICA_SELECTOR: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017623i32);
pub const FABRIC_E_INVALID_REPLICA_STATE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017669i32);
pub const FABRIC_E_INVALID_RESTORE_DATA: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017638i32);
pub const FABRIC_E_INVALID_SERVICE_SCALING_POLICY: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017600i32);
pub const FABRIC_E_INVALID_SERVICE_TYPE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017695i32);
pub const FABRIC_E_INVALID_SUBJECT_NAME: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017739i32);
pub const FABRIC_E_INVALID_TEST_COMMAND_STATE: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017645i32);
pub const FABRIC_E_INVALID_UPLOAD_SESSION_ID: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017614i32);
pub const FABRIC_E_INVALID_X509_FIND_TYPE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017745i32);
pub const FABRIC_E_INVALID_X509_NAME_LIST: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017657i32);
pub const FABRIC_E_INVALID_X509_STORE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017740i32);
pub const FABRIC_E_INVALID_X509_STORE_LOCATION: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017744i32);
pub const FABRIC_E_INVALID_X509_STORE_NAME: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017743i32);
pub const FABRIC_E_INVALID_X509_THUMBPRINT: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017742i32);
pub const FABRIC_E_KEY_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017709i32);
pub const FABRIC_E_KEY_TOO_LARGE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017710i32);
pub const FABRIC_E_LAST_RESERVED_HRESULT: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017397i32);
pub const FABRIC_E_LAST_USED_HRESULT: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017585i32);
pub const FABRIC_E_LOADBALANCER_NOT_READY: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017668i32);
pub const FABRIC_E_MESSAGE_TOO_LARGE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017651i32);
pub const FABRIC_E_MISSING_FULL_BACKUP: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017673i32);
pub const FABRIC_E_MULTITHREADED_TRANSACTIONS_NOT_ALLOWED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017658i32);
pub const FABRIC_E_NAME_ALREADY_EXISTS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017792i32);
pub const FABRIC_E_NAME_DOES_NOT_EXIST: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017791i32);
pub const FABRIC_E_NAME_NOT_EMPTY: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017790i32);
pub const FABRIC_E_NETWORK_IN_USE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017586i32);
pub const FABRIC_E_NETWORK_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017587i32);
pub const FABRIC_E_NODE_HAS_NOT_STOPPED_YET: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017678i32);
pub const FABRIC_E_NODE_IS_DOWN: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017633i32);
pub const FABRIC_E_NODE_IS_UP: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017788i32);
pub const FABRIC_E_NODE_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017789i32);
pub const FABRIC_E_NODE_TRANSITION_IN_PROGRESS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017632i32);
pub const FABRIC_E_NOT_PRIMARY: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017786i32);
pub const FABRIC_E_NOT_READABLE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017604i32);
pub const FABRIC_E_NOT_READY: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017785i32);
pub const FABRIC_E_NO_WRITE_QUORUM: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017787i32);
pub const FABRIC_E_OBJECT_CLOSED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017730i32);
pub const FABRIC_E_OBJECT_DISPOSED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017605i32);
pub const FABRIC_E_ONLY_VALID_FOR_STATEFUL_PERSISTENT_SERVICES: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017615i32);
pub const FABRIC_E_OPERATION_NOT_COMPLETE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017784i32);
pub const FABRIC_E_OPERATION_NOT_SUPPORTED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017590i32);
pub const FABRIC_E_PARTITION_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017753i32);
pub const FABRIC_E_PATH_TOO_LONG: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017725i32);
pub const FABRIC_E_PREDEPLOYMENT_NOT_ALLOWED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017675i32);
pub const FABRIC_E_PRIMARY_ALREADY_EXISTS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017666i32);
pub const FABRIC_E_PROCESS_ABORTED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017748i32);
pub const FABRIC_E_PROCESS_DEACTIVATED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017749i32);
pub const FABRIC_E_PROPERTY_CHECK_FAILED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017771i32);
pub const FABRIC_E_PROPERTY_DOES_NOT_EXIST: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017783i32);
pub const FABRIC_E_RECONFIGURATION_PENDING: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017782i32);
pub const FABRIC_E_RELIABLE_SESSION_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017702i32);
pub const FABRIC_E_RELIABLE_SESSION_CANNOT_CONNECT: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017701i32);
pub const FABRIC_E_RELIABLE_SESSION_INVALID_TARGET_PARTITION: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017683i32);
pub const FABRIC_E_RELIABLE_SESSION_MANAGER_ALREADY_LISTENING: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017698i32);
pub const FABRIC_E_RELIABLE_SESSION_MANAGER_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017700i32);
pub const FABRIC_E_RELIABLE_SESSION_MANAGER_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017697i32);
pub const FABRIC_E_RELIABLE_SESSION_MANAGER_NOT_LISTENING: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017696i32);
pub const FABRIC_E_RELIABLE_SESSION_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017687i32);
pub const FABRIC_E_RELIABLE_SESSION_QUEUE_EMPTY: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017686i32);
pub const FABRIC_E_RELIABLE_SESSION_QUOTA_EXCEEDED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017685i32);
pub const FABRIC_E_RELIABLE_SESSION_REJECTED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017699i32);
pub const FABRIC_E_RELIABLE_SESSION_SERVICE_FAULTED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017684i32);
pub const FABRIC_E_RELIABLE_SESSION_TRANSPORT_STARTUP_FAILURE: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017703i32);
pub const FABRIC_E_REPAIR_TASK_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017689i32);
pub const FABRIC_E_REPAIR_TASK_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017688i32);
pub const FABRIC_E_REPLICATION_OPERATION_TOO_LARGE: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017681i32);
pub const FABRIC_E_REPLICATION_QUEUE_FULL: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017781i32);
pub const FABRIC_E_REPLICA_DOES_NOT_EXIST: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017752i32);
pub const FABRIC_E_RESTORE_IN_PROGRESS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017609i32);
pub const FABRIC_E_RESTORE_SAFE_CHECK_FAILED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017628i32);
pub const FABRIC_E_RESTORE_SOURCE_TARGET_PARTITION_MISMATCH: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017608i32);
pub const FABRIC_E_SECONDARY_ALREADY_EXISTS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017665i32);
pub const FABRIC_E_SECRET_INVALID: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017593i32);
pub const FABRIC_E_SECRET_TYPE_CANNOT_BE_CHANGED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017588i32);
pub const FABRIC_E_SECRET_VERSION_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017592i32);
pub const FABRIC_E_SEQUENCE_NUMBER_CHECK_FAILED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017708i32);
pub const FABRIC_E_SERVER_AUTHENTICATION_FAILED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017660i32);
pub const FABRIC_E_SERVICE_AFFINITY_CHAIN_NOT_SUPPORTED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017776i32);
pub const FABRIC_E_SERVICE_ALREADY_EXISTS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017780i32);
pub const FABRIC_E_SERVICE_DOES_NOT_EXIST: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017779i32);
pub const FABRIC_E_SERVICE_ENDPOINT_RESOURCE_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017732i32);
pub const FABRIC_E_SERVICE_GROUP_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017751i32);
pub const FABRIC_E_SERVICE_GROUP_DOES_NOT_EXIST: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017750i32);
pub const FABRIC_E_SERVICE_MANIFEST_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017704i32);
pub const FABRIC_E_SERVICE_METADATA_MISMATCH: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017777i32);
pub const FABRIC_E_SERVICE_OFFLINE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017778i32);
pub const FABRIC_E_SERVICE_TOO_BUSY: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017691i32);
pub const FABRIC_E_SERVICE_TYPE_ALREADY_REGISTERED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017775i32);
pub const FABRIC_E_SERVICE_TYPE_MISMATCH: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017759i32);
pub const FABRIC_E_SERVICE_TYPE_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017760i32);
pub const FABRIC_E_SERVICE_TYPE_NOT_REGISTERED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017774i32);
pub const FABRIC_E_SERVICE_TYPE_TEMPLATE_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017758i32);
pub const FABRIC_E_SINGLE_INSTANCE_APPLICATION_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017599i32);
pub const FABRIC_E_SINGLE_INSTANCE_APPLICATION_NOT_FOUND: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017598i32);
pub const FABRIC_E_SINGLE_INSTANCE_APPLICATION_UPGRADE_IN_PROGRESS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017591i32);
pub const FABRIC_E_STOP_IN_PROGRESS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017635i32);
pub const FABRIC_E_TEST_COMMAND_OPERATION_ID_ALREADY_EXISTS: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017644i32);
pub const FABRIC_E_TIMEOUT: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017729i32);
pub const FABRIC_E_TRANSACTION_ABORTED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017653i32);
pub const FABRIC_E_TRANSACTION_NOT_ACTIVE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017690i32);
pub const FABRIC_E_TRANSACTION_TOO_LARGE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017682i32);
pub const FABRIC_E_UPGRADE_DOMAIN_ALREADY_COMPLETED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017679i32);
pub const FABRIC_E_UPGRADE_FAILED: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017747i32);
pub const FABRIC_E_UPLOAD_SESSION_ID_CONFLICT: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017625i32);
pub const FABRIC_E_UPLOAD_SESSION_RANGE_NOT_SATISFIABLE: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017626i32);
pub const FABRIC_E_USER_ROLE_CLIENT_CERTIFICATE_NOT_CONFIGURED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017654i32);
pub const FABRIC_E_VALUE_EMPTY: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017772i32);
pub const FABRIC_E_VALUE_TOO_LARGE: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017773i32);
pub const FABRIC_E_VERBOSE_FM_PLACEMENT_HEALTH_REPORTING_REQUIRED: FABRIC_ERROR_CODE =
    FABRIC_ERROR_CODE(-2147017656i32);
pub const FABRIC_E_VOLUME_ALREADY_EXISTS: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017597i32);
pub const FABRIC_E_VOLUME_NOT_FOUND: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017596i32);
pub const FABRIC_E_WRITE_CONFLICT: FABRIC_ERROR_CODE = FABRIC_ERROR_CODE(-2147017770i32);
pub const FABRIC_FAULT_TYPE_INVALID: FABRIC_FAULT_TYPE = FABRIC_FAULT_TYPE(0i32);
pub const FABRIC_FAULT_TYPE_PERMANENT: FABRIC_FAULT_TYPE = FABRIC_FAULT_TYPE(1i32);
pub const FABRIC_FAULT_TYPE_TRANSIENT: FABRIC_FAULT_TYPE = FABRIC_FAULT_TYPE(2i32);
pub const FABRIC_HEALTH_ENTITY_KIND_APPLICATION: FABRIC_HEALTH_ENTITY_KIND =
    FABRIC_HEALTH_ENTITY_KIND(4i32);
pub const FABRIC_HEALTH_ENTITY_KIND_CLUSTER: FABRIC_HEALTH_ENTITY_KIND =
    FABRIC_HEALTH_ENTITY_KIND(8i32);
pub const FABRIC_HEALTH_ENTITY_KIND_DEPLOYED_APPLICATION: FABRIC_HEALTH_ENTITY_KIND =
    FABRIC_HEALTH_ENTITY_KIND(6i32);
pub const FABRIC_HEALTH_ENTITY_KIND_DEPLOYED_SERVICE_PACKAGE: FABRIC_HEALTH_ENTITY_KIND =
    FABRIC_HEALTH_ENTITY_KIND(7i32);
pub const FABRIC_HEALTH_ENTITY_KIND_INVALID: FABRIC_HEALTH_ENTITY_KIND =
    FABRIC_HEALTH_ENTITY_KIND(0i32);
pub const FABRIC_HEALTH_ENTITY_KIND_NODE: FABRIC_HEALTH_ENTITY_KIND =
    FABRIC_HEALTH_ENTITY_KIND(1i32);
pub const FABRIC_HEALTH_ENTITY_KIND_PARTITION: FABRIC_HEALTH_ENTITY_KIND =
    FABRIC_HEALTH_ENTITY_KIND(2i32);
pub const FABRIC_HEALTH_ENTITY_KIND_REPLICA: FABRIC_HEALTH_ENTITY_KIND =
    FABRIC_HEALTH_ENTITY_KIND(5i32);
pub const FABRIC_HEALTH_ENTITY_KIND_SERVICE: FABRIC_HEALTH_ENTITY_KIND =
    FABRIC_HEALTH_ENTITY_KIND(3i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_APPLICATION: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(18i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_APPLICATIONS: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(8i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_APPLICATION_TYPE_APPLICATIONS:
    FABRIC_HEALTH_EVALUATION_KIND = FABRIC_HEALTH_EVALUATION_KIND(21i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_DELTA_NODES_CHECK: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(19i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_DEPLOYED_APPLICATION: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(17i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_DEPLOYED_APPLICATIONS: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(5i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_DEPLOYED_SERVICE_PACKAGE: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(16i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_DEPLOYED_SERVICE_PACKAGES: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(4i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_EVENT: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(1i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_INVALID: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(0i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_NODE: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(12i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_NODES: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(7i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_PARTITION: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(14i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_PARTITIONS: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(3i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_REPLICA: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(13i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_REPLICAS: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(2i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_SERVICE: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(15i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_SERVICES: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(6i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_SYSTEM_APPLICATION: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(9i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_UPGRADE_DOMAIN_DELTA_NODES_CHECK:
    FABRIC_HEALTH_EVALUATION_KIND = FABRIC_HEALTH_EVALUATION_KIND(20i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS:
    FABRIC_HEALTH_EVALUATION_KIND = FABRIC_HEALTH_EVALUATION_KIND(10i32);
pub const FABRIC_HEALTH_EVALUATION_KIND_UPGRADE_DOMAIN_NODES: FABRIC_HEALTH_EVALUATION_KIND =
    FABRIC_HEALTH_EVALUATION_KIND(11i32);
pub const FABRIC_HEALTH_REPORT_INFINITE_TTL: u32 = 0u32;
pub const FABRIC_HEALTH_REPORT_KIND_APPLICATION: FABRIC_HEALTH_REPORT_KIND =
    FABRIC_HEALTH_REPORT_KIND(6i32);
pub const FABRIC_HEALTH_REPORT_KIND_CLUSTER: FABRIC_HEALTH_REPORT_KIND =
    FABRIC_HEALTH_REPORT_KIND(9i32);
pub const FABRIC_HEALTH_REPORT_KIND_DEPLOYED_APPLICATION: FABRIC_HEALTH_REPORT_KIND =
    FABRIC_HEALTH_REPORT_KIND(7i32);
pub const FABRIC_HEALTH_REPORT_KIND_DEPLOYED_SERVICE_PACKAGE: FABRIC_HEALTH_REPORT_KIND =
    FABRIC_HEALTH_REPORT_KIND(8i32);
pub const FABRIC_HEALTH_REPORT_KIND_INVALID: FABRIC_HEALTH_REPORT_KIND =
    FABRIC_HEALTH_REPORT_KIND(0i32);
pub const FABRIC_HEALTH_REPORT_KIND_NODE: FABRIC_HEALTH_REPORT_KIND =
    FABRIC_HEALTH_REPORT_KIND(4i32);
pub const FABRIC_HEALTH_REPORT_KIND_PARTITION: FABRIC_HEALTH_REPORT_KIND =
    FABRIC_HEALTH_REPORT_KIND(3i32);
pub const FABRIC_HEALTH_REPORT_KIND_SERVICE: FABRIC_HEALTH_REPORT_KIND =
    FABRIC_HEALTH_REPORT_KIND(5i32);
pub const FABRIC_HEALTH_REPORT_KIND_STATEFUL_SERVICE_REPLICA: FABRIC_HEALTH_REPORT_KIND =
    FABRIC_HEALTH_REPORT_KIND(1i32);
pub const FABRIC_HEALTH_REPORT_KIND_STATELESS_SERVICE_INSTANCE: FABRIC_HEALTH_REPORT_KIND =
    FABRIC_HEALTH_REPORT_KIND(2i32);
pub const FABRIC_HEALTH_STATE_ERROR: FABRIC_HEALTH_STATE = FABRIC_HEALTH_STATE(3i32);
pub const FABRIC_HEALTH_STATE_FILTER_ALL: FABRIC_HEALTH_STATE_FILTER =
    FABRIC_HEALTH_STATE_FILTER(65535i32);
pub const FABRIC_HEALTH_STATE_FILTER_DEFAULT: FABRIC_HEALTH_STATE_FILTER =
    FABRIC_HEALTH_STATE_FILTER(0i32);
pub const FABRIC_HEALTH_STATE_FILTER_ERROR: FABRIC_HEALTH_STATE_FILTER =
    FABRIC_HEALTH_STATE_FILTER(8i32);
pub const FABRIC_HEALTH_STATE_FILTER_NONE: FABRIC_HEALTH_STATE_FILTER =
    FABRIC_HEALTH_STATE_FILTER(1i32);
pub const FABRIC_HEALTH_STATE_FILTER_OK: FABRIC_HEALTH_STATE_FILTER =
    FABRIC_HEALTH_STATE_FILTER(2i32);
pub const FABRIC_HEALTH_STATE_FILTER_WARNING: FABRIC_HEALTH_STATE_FILTER =
    FABRIC_HEALTH_STATE_FILTER(4i32);
pub const FABRIC_HEALTH_STATE_INVALID: FABRIC_HEALTH_STATE = FABRIC_HEALTH_STATE(0i32);
pub const FABRIC_HEALTH_STATE_OK: FABRIC_HEALTH_STATE = FABRIC_HEALTH_STATE(1i32);
pub const FABRIC_HEALTH_STATE_UNKNOWN: FABRIC_HEALTH_STATE = FABRIC_HEALTH_STATE(65535i32);
pub const FABRIC_HEALTH_STATE_WARNING: FABRIC_HEALTH_STATE = FABRIC_HEALTH_STATE(2i32);
pub const FABRIC_HOST_ISOLATION_MODE_HYPER_V: FABRIC_HOST_ISOLATION_MODE =
    FABRIC_HOST_ISOLATION_MODE(2i32);
pub const FABRIC_HOST_ISOLATION_MODE_NONE: FABRIC_HOST_ISOLATION_MODE =
    FABRIC_HOST_ISOLATION_MODE(0i32);
pub const FABRIC_HOST_ISOLATION_MODE_PROCESS: FABRIC_HOST_ISOLATION_MODE =
    FABRIC_HOST_ISOLATION_MODE(1i32);
pub const FABRIC_HOST_TYPE_CONTAINER_HOST: FABRIC_HOST_TYPE = FABRIC_HOST_TYPE(2i32);
pub const FABRIC_HOST_TYPE_EXE_HOST: FABRIC_HOST_TYPE = FABRIC_HOST_TYPE(1i32);
pub const FABRIC_HOST_TYPE_INVALID: FABRIC_HOST_TYPE = FABRIC_HOST_TYPE(0i32);
pub const FABRIC_IGNORE_SEQUENCE_NUMBER_CHECK: u32 = 0u32;
pub const FABRIC_INFINITE_DURATION: u32 = 4294967295u32;
pub const FABRIC_INVALID_ATOMIC_GROUP_ID: i32 = -1i32;
pub const FABRIC_INVALID_INSTANCE_ID: i32 = -1i32;
pub const FABRIC_INVALID_NODE_INSTANCE_ID: u32 = 0u32;
pub const FABRIC_INVALID_OPERATION_INDEX: u32 = 4294967295u32;
pub const FABRIC_INVALID_REPLICA_ID: i32 = -1i32;
pub const FABRIC_INVALID_SEQUENCE_NUMBER: i32 = -1i32;
pub const FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE_DEFAULT: FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE =
    FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE(0i32);
pub const FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE_LOGICAL: FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE =
    FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE(2i32);
pub const FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE_PHYSICAL: FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE =
    FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE(1i32);
pub const FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE_REBUILD: FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE =
    FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE(3i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE_INACTIVE: FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE =
    FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE(0i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE_MIGRATION: FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE =
    FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE(1i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE_RESTORE_SOURCE_BACKUP:
    FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE = FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE(6i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE_SOURCE_DATABASE_CLEANUP:
    FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE = FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE(4i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE_TARGET_DATABASE_ACTIVE:
    FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE = FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE(5i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE_TARGET_DATABASE_CLEANUP:
    FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE = FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE(3i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE_TARGET_DATABASE_SWAP:
    FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE = FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE(2i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_STATE_CANCELED: FABRIC_KEY_VALUE_STORE_MIGRATION_STATE =
    FABRIC_KEY_VALUE_STORE_MIGRATION_STATE(3i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_STATE_COMPLETED: FABRIC_KEY_VALUE_STORE_MIGRATION_STATE =
    FABRIC_KEY_VALUE_STORE_MIGRATION_STATE(2i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_STATE_FAILED: FABRIC_KEY_VALUE_STORE_MIGRATION_STATE =
    FABRIC_KEY_VALUE_STORE_MIGRATION_STATE(4i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_STATE_INACTIVE: FABRIC_KEY_VALUE_STORE_MIGRATION_STATE =
    FABRIC_KEY_VALUE_STORE_MIGRATION_STATE(0i32);
pub const FABRIC_KEY_VALUE_STORE_MIGRATION_STATE_PROCESSING:
    FABRIC_KEY_VALUE_STORE_MIGRATION_STATE = FABRIC_KEY_VALUE_STORE_MIGRATION_STATE(1i32);
pub const FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE_BLOCK_SECONDARY_ACK:
    FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE = FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE(3i32);
pub const FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE_INVALID:
    FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE = FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE(0i32);
pub const FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE_NONE: FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE =
    FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE(1i32);
pub const FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE_NON_BLOCKING_QUORUM_ACKED:
    FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE = FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE(2i32);
pub const FABRIC_KEY_VALUE_STORE_PROVIDER_KIND_ESE: FABRIC_KEY_VALUE_STORE_PROVIDER_KIND =
    FABRIC_KEY_VALUE_STORE_PROVIDER_KIND(1i32);
pub const FABRIC_KEY_VALUE_STORE_PROVIDER_KIND_TSTORE: FABRIC_KEY_VALUE_STORE_PROVIDER_KIND =
    FABRIC_KEY_VALUE_STORE_PROVIDER_KIND(2i32);
pub const FABRIC_KEY_VALUE_STORE_PROVIDER_KIND_UNKNOWN: FABRIC_KEY_VALUE_STORE_PROVIDER_KIND =
    FABRIC_KEY_VALUE_STORE_PROVIDER_KIND(0i32);
pub const FABRIC_LOCAL_STORE_KIND_ESE: FABRIC_LOCAL_STORE_KIND = FABRIC_LOCAL_STORE_KIND(1i32);
pub const FABRIC_LOCAL_STORE_KIND_INVALID: FABRIC_LOCAL_STORE_KIND = FABRIC_LOCAL_STORE_KIND(0i32);
pub const FABRIC_MONITORED_UPGRADE_FAILURE_ACTION_INVALID: FABRIC_MONITORED_UPGRADE_FAILURE_ACTION =
    FABRIC_MONITORED_UPGRADE_FAILURE_ACTION(0i32);
pub const FABRIC_MONITORED_UPGRADE_FAILURE_ACTION_MANUAL: FABRIC_MONITORED_UPGRADE_FAILURE_ACTION =
    FABRIC_MONITORED_UPGRADE_FAILURE_ACTION(2i32);
pub const FABRIC_MONITORED_UPGRADE_FAILURE_ACTION_ROLLBACK:
    FABRIC_MONITORED_UPGRADE_FAILURE_ACTION = FABRIC_MONITORED_UPGRADE_FAILURE_ACTION(1i32);
pub const FABRIC_MOVE_COST_HIGH: FABRIC_MOVE_COST = FABRIC_MOVE_COST(3i32);
pub const FABRIC_MOVE_COST_LOW: FABRIC_MOVE_COST = FABRIC_MOVE_COST(1i32);
pub const FABRIC_MOVE_COST_MEDIUM: FABRIC_MOVE_COST = FABRIC_MOVE_COST(2i32);
pub const FABRIC_MOVE_COST_ZERO: FABRIC_MOVE_COST = FABRIC_MOVE_COST(0i32);
pub const FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND_INVALID: FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND =
    FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND(0i32);
pub const FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND_USING_NODE_NAME:
    FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND = FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND(1i32);
pub const FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND_USING_REPLICA_SELECTOR:
    FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND = FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND(2i32);
pub const FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND_INVALID: FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND =
    FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND(0i32);
pub const FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND_USING_NODE_NAME:
    FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND = FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND(1i32);
pub const FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND_USING_REPLICA_SELECTOR:
    FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND = FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND(2i32);
pub const FABRIC_NETWORK_STATUS_CREATING: FABRIC_NETWORK_STATUS = FABRIC_NETWORK_STATUS(2i32);
pub const FABRIC_NETWORK_STATUS_DELETING: FABRIC_NETWORK_STATUS = FABRIC_NETWORK_STATUS(3i32);
pub const FABRIC_NETWORK_STATUS_FAILED: FABRIC_NETWORK_STATUS = FABRIC_NETWORK_STATUS(5i32);
pub const FABRIC_NETWORK_STATUS_FILTER_ALL: FABRIC_NETWORK_STATUS_FILTER =
    FABRIC_NETWORK_STATUS_FILTER(65535i32);
pub const FABRIC_NETWORK_STATUS_FILTER_CREATING: FABRIC_NETWORK_STATUS_FILTER =
    FABRIC_NETWORK_STATUS_FILTER(2i32);
pub const FABRIC_NETWORK_STATUS_FILTER_DEFAULT: FABRIC_NETWORK_STATUS_FILTER =
    FABRIC_NETWORK_STATUS_FILTER(0i32);
pub const FABRIC_NETWORK_STATUS_FILTER_DELETING: FABRIC_NETWORK_STATUS_FILTER =
    FABRIC_NETWORK_STATUS_FILTER(4i32);
pub const FABRIC_NETWORK_STATUS_FILTER_FAILED: FABRIC_NETWORK_STATUS_FILTER =
    FABRIC_NETWORK_STATUS_FILTER(16i32);
pub const FABRIC_NETWORK_STATUS_FILTER_READY: FABRIC_NETWORK_STATUS_FILTER =
    FABRIC_NETWORK_STATUS_FILTER(1i32);
pub const FABRIC_NETWORK_STATUS_FILTER_UPDATING: FABRIC_NETWORK_STATUS_FILTER =
    FABRIC_NETWORK_STATUS_FILTER(8i32);
pub const FABRIC_NETWORK_STATUS_INVALID: FABRIC_NETWORK_STATUS = FABRIC_NETWORK_STATUS(0i32);
pub const FABRIC_NETWORK_STATUS_READY: FABRIC_NETWORK_STATUS = FABRIC_NETWORK_STATUS(1i32);
pub const FABRIC_NETWORK_STATUS_UPDATING: FABRIC_NETWORK_STATUS = FABRIC_NETWORK_STATUS(4i32);
pub const FABRIC_NETWORK_TYPE_FEDERATED: FABRIC_NETWORK_TYPE = FABRIC_NETWORK_TYPE(2i32);
pub const FABRIC_NETWORK_TYPE_INVALID: FABRIC_NETWORK_TYPE = FABRIC_NETWORK_TYPE(0i32);
pub const FABRIC_NETWORK_TYPE_LOCAL: FABRIC_NETWORK_TYPE = FABRIC_NETWORK_TYPE(1i32);
pub const FABRIC_NODE_DEACTIVATION_INTENT_INVALID: FABRIC_NODE_DEACTIVATION_INTENT =
    FABRIC_NODE_DEACTIVATION_INTENT(0i32);
pub const FABRIC_NODE_DEACTIVATION_INTENT_PAUSE: FABRIC_NODE_DEACTIVATION_INTENT =
    FABRIC_NODE_DEACTIVATION_INTENT(1i32);
pub const FABRIC_NODE_DEACTIVATION_INTENT_REMOVE_DATA: FABRIC_NODE_DEACTIVATION_INTENT =
    FABRIC_NODE_DEACTIVATION_INTENT(3i32);
pub const FABRIC_NODE_DEACTIVATION_INTENT_REMOVE_NODE: FABRIC_NODE_DEACTIVATION_INTENT =
    FABRIC_NODE_DEACTIVATION_INTENT(4i32);
pub const FABRIC_NODE_DEACTIVATION_INTENT_RESTART: FABRIC_NODE_DEACTIVATION_INTENT =
    FABRIC_NODE_DEACTIVATION_INTENT(2i32);
pub const FABRIC_NODE_DEACTIVATION_STATUS_COMPLETED: FABRIC_NODE_DEACTIVATION_STATUS =
    FABRIC_NODE_DEACTIVATION_STATUS(3i32);
pub const FABRIC_NODE_DEACTIVATION_STATUS_NONE: FABRIC_NODE_DEACTIVATION_STATUS =
    FABRIC_NODE_DEACTIVATION_STATUS(0i32);
pub const FABRIC_NODE_DEACTIVATION_STATUS_SAFETY_CHECK_COMPLETE: FABRIC_NODE_DEACTIVATION_STATUS =
    FABRIC_NODE_DEACTIVATION_STATUS(2i32);
pub const FABRIC_NODE_DEACTIVATION_STATUS_SAFETY_CHECK_IN_PROGRESS:
    FABRIC_NODE_DEACTIVATION_STATUS = FABRIC_NODE_DEACTIVATION_STATUS(1i32);
pub const FABRIC_NODE_DEACTIVATION_TASK_TYPE_CLIENT: FABRIC_NODE_DEACTIVATION_TASK_TYPE =
    FABRIC_NODE_DEACTIVATION_TASK_TYPE(3i32);
pub const FABRIC_NODE_DEACTIVATION_TASK_TYPE_INFRASTRUCTURE: FABRIC_NODE_DEACTIVATION_TASK_TYPE =
    FABRIC_NODE_DEACTIVATION_TASK_TYPE(1i32);
pub const FABRIC_NODE_DEACTIVATION_TASK_TYPE_INVALID: FABRIC_NODE_DEACTIVATION_TASK_TYPE =
    FABRIC_NODE_DEACTIVATION_TASK_TYPE(0i32);
pub const FABRIC_NODE_DEACTIVATION_TASK_TYPE_REPAIR: FABRIC_NODE_DEACTIVATION_TASK_TYPE =
    FABRIC_NODE_DEACTIVATION_TASK_TYPE(2i32);
pub const FABRIC_NODE_TRANSITION_TYPE_INVALID: FABRIC_NODE_TRANSITION_TYPE =
    FABRIC_NODE_TRANSITION_TYPE(0i32);
pub const FABRIC_NODE_TRANSITION_TYPE_START: FABRIC_NODE_TRANSITION_TYPE =
    FABRIC_NODE_TRANSITION_TYPE(1i32);
pub const FABRIC_NODE_TRANSITION_TYPE_STOP: FABRIC_NODE_TRANSITION_TYPE =
    FABRIC_NODE_TRANSITION_TYPE(2i32);
pub const FABRIC_NODE_UPGRADE_PHASE_INVALID: FABRIC_NODE_UPGRADE_PHASE =
    FABRIC_NODE_UPGRADE_PHASE(0i32);
pub const FABRIC_NODE_UPGRADE_PHASE_POST_UPGRADE_SAFETY_CHECK: FABRIC_NODE_UPGRADE_PHASE =
    FABRIC_NODE_UPGRADE_PHASE(3i32);
pub const FABRIC_NODE_UPGRADE_PHASE_PRE_UPGRADE_SAFETY_CHECK: FABRIC_NODE_UPGRADE_PHASE =
    FABRIC_NODE_UPGRADE_PHASE(1i32);
pub const FABRIC_NODE_UPGRADE_PHASE_UPGRADING: FABRIC_NODE_UPGRADE_PHASE =
    FABRIC_NODE_UPGRADE_PHASE(2i32);
pub const FABRIC_OPERATION_TYPE_ATOMIC_GROUP_OPERATION: FABRIC_OPERATION_TYPE =
    FABRIC_OPERATION_TYPE(32i32);
pub const FABRIC_OPERATION_TYPE_COMMIT_ATOMIC_GROUP: FABRIC_OPERATION_TYPE =
    FABRIC_OPERATION_TYPE(64i32);
pub const FABRIC_OPERATION_TYPE_CREATE_ATOMIC_GROUP: FABRIC_OPERATION_TYPE =
    FABRIC_OPERATION_TYPE(16i32);
pub const FABRIC_OPERATION_TYPE_END_OF_STREAM: FABRIC_OPERATION_TYPE = FABRIC_OPERATION_TYPE(2i32);
pub const FABRIC_OPERATION_TYPE_HAS_ATOMIC_GROUP_MASK: FABRIC_OPERATION_TYPE =
    FABRIC_OPERATION_TYPE(240i32);
pub const FABRIC_OPERATION_TYPE_INVALID: FABRIC_OPERATION_TYPE = FABRIC_OPERATION_TYPE(0i32);
pub const FABRIC_OPERATION_TYPE_NORMAL: FABRIC_OPERATION_TYPE = FABRIC_OPERATION_TYPE(1i32);
pub const FABRIC_OPERATION_TYPE_ROLLBACK_ATOMIC_GROUP: FABRIC_OPERATION_TYPE =
    FABRIC_OPERATION_TYPE(128i32);
pub const FABRIC_PACKAGE_SHARING_POLICY_SCOPE_ALL: FABRIC_PACKAGE_SHARING_POLICY_SCOPE =
    FABRIC_PACKAGE_SHARING_POLICY_SCOPE(1i32);
pub const FABRIC_PACKAGE_SHARING_POLICY_SCOPE_CODE: FABRIC_PACKAGE_SHARING_POLICY_SCOPE =
    FABRIC_PACKAGE_SHARING_POLICY_SCOPE(2i32);
pub const FABRIC_PACKAGE_SHARING_POLICY_SCOPE_CONFIG: FABRIC_PACKAGE_SHARING_POLICY_SCOPE =
    FABRIC_PACKAGE_SHARING_POLICY_SCOPE(3i32);
pub const FABRIC_PACKAGE_SHARING_POLICY_SCOPE_DATA: FABRIC_PACKAGE_SHARING_POLICY_SCOPE =
    FABRIC_PACKAGE_SHARING_POLICY_SCOPE(4i32);
pub const FABRIC_PACKAGE_SHARING_POLICY_SCOPE_NONE: FABRIC_PACKAGE_SHARING_POLICY_SCOPE =
    FABRIC_PACKAGE_SHARING_POLICY_SCOPE(0i32);
pub const FABRIC_PARTITION_KEY_TYPE_INT64: FABRIC_PARTITION_KEY_TYPE =
    FABRIC_PARTITION_KEY_TYPE(2i32);
pub const FABRIC_PARTITION_KEY_TYPE_INVALID: FABRIC_PARTITION_KEY_TYPE =
    FABRIC_PARTITION_KEY_TYPE(0i32);
pub const FABRIC_PARTITION_KEY_TYPE_NONE: FABRIC_PARTITION_KEY_TYPE =
    FABRIC_PARTITION_KEY_TYPE(1i32);
pub const FABRIC_PARTITION_KEY_TYPE_STRING: FABRIC_PARTITION_KEY_TYPE =
    FABRIC_PARTITION_KEY_TYPE(3i32);
pub const FABRIC_PARTITION_SAFETY_CHECK_KIND_ENSURE_AVAILABILITY: FABRIC_SAFETY_CHECK_KIND =
    FABRIC_SAFETY_CHECK_KIND(7i32);
pub const FABRIC_PARTITION_SAFETY_CHECK_KIND_ENSURE_QUORUM: FABRIC_SAFETY_CHECK_KIND =
    FABRIC_SAFETY_CHECK_KIND(2i32);
pub const FABRIC_PARTITION_SAFETY_CHECK_KIND_WAIT_FOR_INBUILD_REPLICA: FABRIC_SAFETY_CHECK_KIND =
    FABRIC_SAFETY_CHECK_KIND(6i32);
pub const FABRIC_PARTITION_SAFETY_CHECK_KIND_WAIT_FOR_PRIMARY_PLACEMENT: FABRIC_SAFETY_CHECK_KIND =
    FABRIC_SAFETY_CHECK_KIND(3i32);
pub const FABRIC_PARTITION_SAFETY_CHECK_KIND_WAIT_FOR_PRIMARY_SWAP: FABRIC_SAFETY_CHECK_KIND =
    FABRIC_SAFETY_CHECK_KIND(4i32);
pub const FABRIC_PARTITION_SAFETY_CHECK_KIND_WAIT_FOR_RECONFIGURATION: FABRIC_SAFETY_CHECK_KIND =
    FABRIC_SAFETY_CHECK_KIND(5i32);
pub const FABRIC_PARTITION_SCHEME_INVALID: FABRIC_PARTITION_SCHEME = FABRIC_PARTITION_SCHEME(0i32);
pub const FABRIC_PARTITION_SCHEME_NAMED: FABRIC_PARTITION_SCHEME = FABRIC_PARTITION_SCHEME(3i32);
pub const FABRIC_PARTITION_SCHEME_SINGLETON: FABRIC_PARTITION_SCHEME =
    FABRIC_PARTITION_SCHEME(1i32);
pub const FABRIC_PARTITION_SCHEME_UNIFORM_INT64_RANGE: FABRIC_PARTITION_SCHEME =
    FABRIC_PARTITION_SCHEME(2i32);
pub const FABRIC_PARTITION_SELECTOR_TYPE_NAMED: FABRIC_PARTITION_SELECTOR_TYPE =
    FABRIC_PARTITION_SELECTOR_TYPE(2i32);
pub const FABRIC_PARTITION_SELECTOR_TYPE_NONE: FABRIC_PARTITION_SELECTOR_TYPE =
    FABRIC_PARTITION_SELECTOR_TYPE(0i32);
pub const FABRIC_PARTITION_SELECTOR_TYPE_PARTITION_ID: FABRIC_PARTITION_SELECTOR_TYPE =
    FABRIC_PARTITION_SELECTOR_TYPE(4i32);
pub const FABRIC_PARTITION_SELECTOR_TYPE_RANDOM: FABRIC_PARTITION_SELECTOR_TYPE =
    FABRIC_PARTITION_SELECTOR_TYPE(5i32);
pub const FABRIC_PARTITION_SELECTOR_TYPE_SINGLETON: FABRIC_PARTITION_SELECTOR_TYPE =
    FABRIC_PARTITION_SELECTOR_TYPE(1i32);
pub const FABRIC_PARTITION_SELECTOR_TYPE_UNIFORM_INT64: FABRIC_PARTITION_SELECTOR_TYPE =
    FABRIC_PARTITION_SELECTOR_TYPE(3i32);
pub const FABRIC_PLACEMENT_POLICY_INVALID: FABRIC_PLACEMENT_POLICY_TYPE =
    FABRIC_PLACEMENT_POLICY_TYPE(0i32);
pub const FABRIC_PLACEMENT_POLICY_INVALID_DOMAIN: FABRIC_PLACEMENT_POLICY_TYPE =
    FABRIC_PLACEMENT_POLICY_TYPE(1i32);
pub const FABRIC_PLACEMENT_POLICY_NONPARTIALLY_PLACE_SERVICE: FABRIC_PLACEMENT_POLICY_TYPE =
    FABRIC_PLACEMENT_POLICY_TYPE(5i32);
pub const FABRIC_PLACEMENT_POLICY_PREFERRED_PRIMARY_DOMAIN: FABRIC_PLACEMENT_POLICY_TYPE =
    FABRIC_PLACEMENT_POLICY_TYPE(3i32);
pub const FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN: FABRIC_PLACEMENT_POLICY_TYPE =
    FABRIC_PLACEMENT_POLICY_TYPE(2i32);
pub const FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DISTRIBUTION: FABRIC_PLACEMENT_POLICY_TYPE =
    FABRIC_PLACEMENT_POLICY_TYPE(4i32);
pub const FABRIC_PROPERTY_BATCH_OPERATION_KIND_CHECK_EXISTS: FABRIC_PROPERTY_BATCH_OPERATION_KIND =
    FABRIC_PROPERTY_BATCH_OPERATION_KIND(3i32);
pub const FABRIC_PROPERTY_BATCH_OPERATION_KIND_CHECK_SEQUENCE:
    FABRIC_PROPERTY_BATCH_OPERATION_KIND = FABRIC_PROPERTY_BATCH_OPERATION_KIND(4i32);
pub const FABRIC_PROPERTY_BATCH_OPERATION_KIND_CHECK_VALUE: FABRIC_PROPERTY_BATCH_OPERATION_KIND =
    FABRIC_PROPERTY_BATCH_OPERATION_KIND(7i32);
pub const FABRIC_PROPERTY_BATCH_OPERATION_KIND_DELETE: FABRIC_PROPERTY_BATCH_OPERATION_KIND =
    FABRIC_PROPERTY_BATCH_OPERATION_KIND(5i32);
pub const FABRIC_PROPERTY_BATCH_OPERATION_KIND_GET: FABRIC_PROPERTY_BATCH_OPERATION_KIND =
    FABRIC_PROPERTY_BATCH_OPERATION_KIND(2i32);
pub const FABRIC_PROPERTY_BATCH_OPERATION_KIND_INVALID: FABRIC_PROPERTY_BATCH_OPERATION_KIND =
    FABRIC_PROPERTY_BATCH_OPERATION_KIND(0i32);
pub const FABRIC_PROPERTY_BATCH_OPERATION_KIND_PUT: FABRIC_PROPERTY_BATCH_OPERATION_KIND =
    FABRIC_PROPERTY_BATCH_OPERATION_KIND(1i32);
pub const FABRIC_PROPERTY_BATCH_OPERATION_KIND_PUT_CUSTOM: FABRIC_PROPERTY_BATCH_OPERATION_KIND =
    FABRIC_PROPERTY_BATCH_OPERATION_KIND(6i32);
pub const FABRIC_PROPERTY_TYPE_BINARY: FABRIC_PROPERTY_TYPE_ID = FABRIC_PROPERTY_TYPE_ID(1i32);
pub const FABRIC_PROPERTY_TYPE_DOUBLE: FABRIC_PROPERTY_TYPE_ID = FABRIC_PROPERTY_TYPE_ID(3i32);
pub const FABRIC_PROPERTY_TYPE_GUID: FABRIC_PROPERTY_TYPE_ID = FABRIC_PROPERTY_TYPE_ID(5i32);
pub const FABRIC_PROPERTY_TYPE_INT64: FABRIC_PROPERTY_TYPE_ID = FABRIC_PROPERTY_TYPE_ID(2i32);
pub const FABRIC_PROPERTY_TYPE_INVALID: FABRIC_PROPERTY_TYPE_ID = FABRIC_PROPERTY_TYPE_ID(0i32);
pub const FABRIC_PROPERTY_TYPE_WSTRING: FABRIC_PROPERTY_TYPE_ID = FABRIC_PROPERTY_TYPE_ID(4i32);
pub const FABRIC_PROTECTION_LEVEL_ENCRYPTANDSIGN: FABRIC_PROTECTION_LEVEL =
    FABRIC_PROTECTION_LEVEL(2i32);
pub const FABRIC_PROTECTION_LEVEL_NONE: FABRIC_PROTECTION_LEVEL = FABRIC_PROTECTION_LEVEL(0i32);
pub const FABRIC_PROTECTION_LEVEL_SIGN: FABRIC_PROTECTION_LEVEL = FABRIC_PROTECTION_LEVEL(1i32);
pub const FABRIC_PROVISION_APPLICATION_TYPE_KIND_EXTERNAL_STORE:
    FABRIC_PROVISION_APPLICATION_TYPE_KIND = FABRIC_PROVISION_APPLICATION_TYPE_KIND(2i32);
pub const FABRIC_PROVISION_APPLICATION_TYPE_KIND_IMAGE_STORE_PATH:
    FABRIC_PROVISION_APPLICATION_TYPE_KIND = FABRIC_PROVISION_APPLICATION_TYPE_KIND(1i32);
pub const FABRIC_PROVISION_APPLICATION_TYPE_KIND_INVALID: FABRIC_PROVISION_APPLICATION_TYPE_KIND =
    FABRIC_PROVISION_APPLICATION_TYPE_KIND(0i32);
pub const FABRIC_QUERY_NODE_STATUS_DISABLED: FABRIC_QUERY_NODE_STATUS =
    FABRIC_QUERY_NODE_STATUS(5i32);
pub const FABRIC_QUERY_NODE_STATUS_DISABLING: FABRIC_QUERY_NODE_STATUS =
    FABRIC_QUERY_NODE_STATUS(4i32);
pub const FABRIC_QUERY_NODE_STATUS_DOWN: FABRIC_QUERY_NODE_STATUS = FABRIC_QUERY_NODE_STATUS(2i32);
pub const FABRIC_QUERY_NODE_STATUS_ENABLING: FABRIC_QUERY_NODE_STATUS =
    FABRIC_QUERY_NODE_STATUS(3i32);
pub const FABRIC_QUERY_NODE_STATUS_FILTER_ALL: FABRIC_QUERY_NODE_STATUS_FILTER =
    FABRIC_QUERY_NODE_STATUS_FILTER(65535i32);
pub const FABRIC_QUERY_NODE_STATUS_FILTER_DEFAULT: FABRIC_QUERY_NODE_STATUS_FILTER =
    FABRIC_QUERY_NODE_STATUS_FILTER(0i32);
pub const FABRIC_QUERY_NODE_STATUS_FILTER_DISABLED: FABRIC_QUERY_NODE_STATUS_FILTER =
    FABRIC_QUERY_NODE_STATUS_FILTER(16i32);
pub const FABRIC_QUERY_NODE_STATUS_FILTER_DISABLING: FABRIC_QUERY_NODE_STATUS_FILTER =
    FABRIC_QUERY_NODE_STATUS_FILTER(8i32);
pub const FABRIC_QUERY_NODE_STATUS_FILTER_DOWN: FABRIC_QUERY_NODE_STATUS_FILTER =
    FABRIC_QUERY_NODE_STATUS_FILTER(2i32);
pub const FABRIC_QUERY_NODE_STATUS_FILTER_ENABLING: FABRIC_QUERY_NODE_STATUS_FILTER =
    FABRIC_QUERY_NODE_STATUS_FILTER(4i32);
pub const FABRIC_QUERY_NODE_STATUS_FILTER_REMOVED: FABRIC_QUERY_NODE_STATUS_FILTER =
    FABRIC_QUERY_NODE_STATUS_FILTER(64i32);
pub const FABRIC_QUERY_NODE_STATUS_FILTER_UNKNOWN: FABRIC_QUERY_NODE_STATUS_FILTER =
    FABRIC_QUERY_NODE_STATUS_FILTER(32i32);
pub const FABRIC_QUERY_NODE_STATUS_FILTER_UP: FABRIC_QUERY_NODE_STATUS_FILTER =
    FABRIC_QUERY_NODE_STATUS_FILTER(1i32);
pub const FABRIC_QUERY_NODE_STATUS_INVALID: FABRIC_QUERY_NODE_STATUS =
    FABRIC_QUERY_NODE_STATUS(0i32);
pub const FABRIC_QUERY_NODE_STATUS_REMOVED: FABRIC_QUERY_NODE_STATUS =
    FABRIC_QUERY_NODE_STATUS(7i32);
pub const FABRIC_QUERY_NODE_STATUS_UNKNOWN: FABRIC_QUERY_NODE_STATUS =
    FABRIC_QUERY_NODE_STATUS(6i32);
pub const FABRIC_QUERY_NODE_STATUS_UP: FABRIC_QUERY_NODE_STATUS = FABRIC_QUERY_NODE_STATUS(1i32);
pub const FABRIC_QUERY_REPLICATOR_OPERATION_NAME_ABORT: FABRIC_QUERY_REPLICATOR_OPERATION_NAME =
    FABRIC_QUERY_REPLICATOR_OPERATION_NAME(32i32);
pub const FABRIC_QUERY_REPLICATOR_OPERATION_NAME_BUILD: FABRIC_QUERY_REPLICATOR_OPERATION_NAME =
    FABRIC_QUERY_REPLICATOR_OPERATION_NAME(256i32);
pub const FABRIC_QUERY_REPLICATOR_OPERATION_NAME_CHANGEROLE:
    FABRIC_QUERY_REPLICATOR_OPERATION_NAME = FABRIC_QUERY_REPLICATOR_OPERATION_NAME(4i32);
pub const FABRIC_QUERY_REPLICATOR_OPERATION_NAME_CLOSE: FABRIC_QUERY_REPLICATOR_OPERATION_NAME =
    FABRIC_QUERY_REPLICATOR_OPERATION_NAME(16i32);
pub const FABRIC_QUERY_REPLICATOR_OPERATION_NAME_INVALID: FABRIC_QUERY_REPLICATOR_OPERATION_NAME =
    FABRIC_QUERY_REPLICATOR_OPERATION_NAME(0i32);
pub const FABRIC_QUERY_REPLICATOR_OPERATION_NAME_NONE: FABRIC_QUERY_REPLICATOR_OPERATION_NAME =
    FABRIC_QUERY_REPLICATOR_OPERATION_NAME(1i32);
pub const FABRIC_QUERY_REPLICATOR_OPERATION_NAME_ONDATALOSS:
    FABRIC_QUERY_REPLICATOR_OPERATION_NAME = FABRIC_QUERY_REPLICATOR_OPERATION_NAME(64i32);
pub const FABRIC_QUERY_REPLICATOR_OPERATION_NAME_OPEN: FABRIC_QUERY_REPLICATOR_OPERATION_NAME =
    FABRIC_QUERY_REPLICATOR_OPERATION_NAME(2i32);
pub const FABRIC_QUERY_REPLICATOR_OPERATION_NAME_UPDATEEPOCH:
    FABRIC_QUERY_REPLICATOR_OPERATION_NAME = FABRIC_QUERY_REPLICATOR_OPERATION_NAME(8i32);
pub const FABRIC_QUERY_REPLICATOR_OPERATION_NAME_WAITFORCATCHUP:
    FABRIC_QUERY_REPLICATOR_OPERATION_NAME = FABRIC_QUERY_REPLICATOR_OPERATION_NAME(128i32);
pub const FABRIC_QUERY_SERVICE_OPERATION_NAME_ABORT: FABRIC_QUERY_SERVICE_OPERATION_NAME =
    FABRIC_QUERY_SERVICE_OPERATION_NAME(16i32);
pub const FABRIC_QUERY_SERVICE_OPERATION_NAME_CHANGEROLE: FABRIC_QUERY_SERVICE_OPERATION_NAME =
    FABRIC_QUERY_SERVICE_OPERATION_NAME(4i32);
pub const FABRIC_QUERY_SERVICE_OPERATION_NAME_CLOSE: FABRIC_QUERY_SERVICE_OPERATION_NAME =
    FABRIC_QUERY_SERVICE_OPERATION_NAME(8i32);
pub const FABRIC_QUERY_SERVICE_OPERATION_NAME_INVALID: FABRIC_QUERY_SERVICE_OPERATION_NAME =
    FABRIC_QUERY_SERVICE_OPERATION_NAME(0i32);
pub const FABRIC_QUERY_SERVICE_OPERATION_NAME_NONE: FABRIC_QUERY_SERVICE_OPERATION_NAME =
    FABRIC_QUERY_SERVICE_OPERATION_NAME(1i32);
pub const FABRIC_QUERY_SERVICE_OPERATION_NAME_OPEN: FABRIC_QUERY_SERVICE_OPERATION_NAME =
    FABRIC_QUERY_SERVICE_OPERATION_NAME(2i32);
pub const FABRIC_QUERY_SERVICE_PARTITION_STATUS_DELETING: FABRIC_QUERY_SERVICE_PARTITION_STATUS =
    FABRIC_QUERY_SERVICE_PARTITION_STATUS(5i32);
pub const FABRIC_QUERY_SERVICE_PARTITION_STATUS_INVALID: FABRIC_QUERY_SERVICE_PARTITION_STATUS =
    FABRIC_QUERY_SERVICE_PARTITION_STATUS(0i32);
pub const FABRIC_QUERY_SERVICE_PARTITION_STATUS_IN_QUORUM_LOSS:
    FABRIC_QUERY_SERVICE_PARTITION_STATUS = FABRIC_QUERY_SERVICE_PARTITION_STATUS(3i32);
pub const FABRIC_QUERY_SERVICE_PARTITION_STATUS_NOT_READY: FABRIC_QUERY_SERVICE_PARTITION_STATUS =
    FABRIC_QUERY_SERVICE_PARTITION_STATUS(2i32);
pub const FABRIC_QUERY_SERVICE_PARTITION_STATUS_READY: FABRIC_QUERY_SERVICE_PARTITION_STATUS =
    FABRIC_QUERY_SERVICE_PARTITION_STATUS(1i32);
pub const FABRIC_QUERY_SERVICE_PARTITION_STATUS_RECONFIGURING:
    FABRIC_QUERY_SERVICE_PARTITION_STATUS = FABRIC_QUERY_SERVICE_PARTITION_STATUS(4i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_DOWN: FABRIC_QUERY_SERVICE_REPLICA_STATUS =
    FABRIC_QUERY_SERVICE_REPLICA_STATUS(4i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_DROPPED: FABRIC_QUERY_SERVICE_REPLICA_STATUS =
    FABRIC_QUERY_SERVICE_REPLICA_STATUS(5i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER_ALL:
    FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER =
    FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER(65535i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER_DEFAULT:
    FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER = FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER(0i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER_DOWN:
    FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER = FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER(8i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER_DROPPED:
    FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER = FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER(16i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER_INBUILD:
    FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER = FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER(1i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER_READY:
    FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER = FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER(4i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER_STANDBY:
    FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER = FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER(2i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_INBUILD: FABRIC_QUERY_SERVICE_REPLICA_STATUS =
    FABRIC_QUERY_SERVICE_REPLICA_STATUS(1i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_INVALID: FABRIC_QUERY_SERVICE_REPLICA_STATUS =
    FABRIC_QUERY_SERVICE_REPLICA_STATUS(0i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_READY: FABRIC_QUERY_SERVICE_REPLICA_STATUS =
    FABRIC_QUERY_SERVICE_REPLICA_STATUS(3i32);
pub const FABRIC_QUERY_SERVICE_REPLICA_STATUS_STANDBY: FABRIC_QUERY_SERVICE_REPLICA_STATUS =
    FABRIC_QUERY_SERVICE_REPLICA_STATUS(2i32);
pub const FABRIC_QUERY_SERVICE_STATUS_ACTIVE: FABRIC_QUERY_SERVICE_STATUS =
    FABRIC_QUERY_SERVICE_STATUS(1i32);
pub const FABRIC_QUERY_SERVICE_STATUS_CREATING: FABRIC_QUERY_SERVICE_STATUS =
    FABRIC_QUERY_SERVICE_STATUS(4i32);
pub const FABRIC_QUERY_SERVICE_STATUS_DELETING: FABRIC_QUERY_SERVICE_STATUS =
    FABRIC_QUERY_SERVICE_STATUS(3i32);
pub const FABRIC_QUERY_SERVICE_STATUS_FAILED: FABRIC_QUERY_SERVICE_STATUS =
    FABRIC_QUERY_SERVICE_STATUS(5i32);
pub const FABRIC_QUERY_SERVICE_STATUS_UNKNOWN: FABRIC_QUERY_SERVICE_STATUS =
    FABRIC_QUERY_SERVICE_STATUS(0i32);
pub const FABRIC_QUERY_SERVICE_STATUS_UPGRADING: FABRIC_QUERY_SERVICE_STATUS =
    FABRIC_QUERY_SERVICE_STATUS(2i32);
pub const FABRIC_QUORUM_LOSS_MODE_ALL_REPLICAS: FABRIC_QUORUM_LOSS_MODE =
    FABRIC_QUORUM_LOSS_MODE(2i32);
pub const FABRIC_QUORUM_LOSS_MODE_INVALID: FABRIC_QUORUM_LOSS_MODE = FABRIC_QUORUM_LOSS_MODE(0i32);
pub const FABRIC_QUORUM_LOSS_MODE_QUORUM_REPLICAS: FABRIC_QUORUM_LOSS_MODE =
    FABRIC_QUORUM_LOSS_MODE(1i32);
pub const FABRIC_RECONFIGURATION_ABORT_PHASE_ZERO: FABRIC_RECONFIGURATION_PHASE =
    FABRIC_RECONFIGURATION_PHASE(7i32);
pub const FABRIC_RECONFIGURATION_PHASE_FOUR: FABRIC_RECONFIGURATION_PHASE =
    FABRIC_RECONFIGURATION_PHASE(6i32);
pub const FABRIC_RECONFIGURATION_PHASE_INVALID: FABRIC_RECONFIGURATION_PHASE =
    FABRIC_RECONFIGURATION_PHASE(0i32);
pub const FABRIC_RECONFIGURATION_PHASE_NONE: FABRIC_RECONFIGURATION_PHASE =
    FABRIC_RECONFIGURATION_PHASE(1i32);
pub const FABRIC_RECONFIGURATION_PHASE_ONE: FABRIC_RECONFIGURATION_PHASE =
    FABRIC_RECONFIGURATION_PHASE(3i32);
pub const FABRIC_RECONFIGURATION_PHASE_THREE: FABRIC_RECONFIGURATION_PHASE =
    FABRIC_RECONFIGURATION_PHASE(5i32);
pub const FABRIC_RECONFIGURATION_PHASE_TWO: FABRIC_RECONFIGURATION_PHASE =
    FABRIC_RECONFIGURATION_PHASE(4i32);
pub const FABRIC_RECONFIGURATION_PHASE_ZERO: FABRIC_RECONFIGURATION_PHASE =
    FABRIC_RECONFIGURATION_PHASE(2i32);
pub const FABRIC_RECONFIGURATION_TYPE_FAILOVER: FABRIC_RECONFIGURATION_TYPE =
    FABRIC_RECONFIGURATION_TYPE(2i32);
pub const FABRIC_RECONFIGURATION_TYPE_INVALID: FABRIC_RECONFIGURATION_TYPE =
    FABRIC_RECONFIGURATION_TYPE(0i32);
pub const FABRIC_RECONFIGURATION_TYPE_NONE: FABRIC_RECONFIGURATION_TYPE =
    FABRIC_RECONFIGURATION_TYPE(4i32);
pub const FABRIC_RECONFIGURATION_TYPE_OTHER: FABRIC_RECONFIGURATION_TYPE =
    FABRIC_RECONFIGURATION_TYPE(3i32);
pub const FABRIC_RECONFIGURATION_TYPE_SWAPPRIMARY: FABRIC_RECONFIGURATION_TYPE =
    FABRIC_RECONFIGURATION_TYPE(1i32);
pub const FABRIC_REPAIR_IMPACT_KIND_INVALID: FABRIC_REPAIR_IMPACT_KIND =
    FABRIC_REPAIR_IMPACT_KIND(0i32);
pub const FABRIC_REPAIR_IMPACT_KIND_NODE: FABRIC_REPAIR_IMPACT_KIND =
    FABRIC_REPAIR_IMPACT_KIND(1i32);
pub const FABRIC_REPAIR_NODE_IMPACT_LEVEL_INVALID: FABRIC_REPAIR_NODE_IMPACT_LEVEL =
    FABRIC_REPAIR_NODE_IMPACT_LEVEL(0i32);
pub const FABRIC_REPAIR_NODE_IMPACT_LEVEL_NONE: FABRIC_REPAIR_NODE_IMPACT_LEVEL =
    FABRIC_REPAIR_NODE_IMPACT_LEVEL(1i32);
pub const FABRIC_REPAIR_NODE_IMPACT_LEVEL_REMOVE_DATA: FABRIC_REPAIR_NODE_IMPACT_LEVEL =
    FABRIC_REPAIR_NODE_IMPACT_LEVEL(3i32);
pub const FABRIC_REPAIR_NODE_IMPACT_LEVEL_REMOVE_NODE: FABRIC_REPAIR_NODE_IMPACT_LEVEL =
    FABRIC_REPAIR_NODE_IMPACT_LEVEL(4i32);
pub const FABRIC_REPAIR_NODE_IMPACT_LEVEL_RESTART: FABRIC_REPAIR_NODE_IMPACT_LEVEL =
    FABRIC_REPAIR_NODE_IMPACT_LEVEL(2i32);
pub const FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND_CLUSTER: FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND =
    FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND(1i32);
pub const FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND_INVALID: FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND =
    FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND(0i32);
pub const FABRIC_REPAIR_TARGET_KIND_INVALID: FABRIC_REPAIR_TARGET_KIND =
    FABRIC_REPAIR_TARGET_KIND(0i32);
pub const FABRIC_REPAIR_TARGET_KIND_NODE: FABRIC_REPAIR_TARGET_KIND =
    FABRIC_REPAIR_TARGET_KIND(1i32);
pub const FABRIC_REPAIR_TASK_FLAGS_ABORT_REQUESTED: FABRIC_REPAIR_TASK_FLAGS =
    FABRIC_REPAIR_TASK_FLAGS(2i32);
pub const FABRIC_REPAIR_TASK_FLAGS_CANCEL_REQUESTED: FABRIC_REPAIR_TASK_FLAGS =
    FABRIC_REPAIR_TASK_FLAGS(1i32);
pub const FABRIC_REPAIR_TASK_FLAGS_FORCED_APPROVAL: FABRIC_REPAIR_TASK_FLAGS =
    FABRIC_REPAIR_TASK_FLAGS(4i32);
pub const FABRIC_REPAIR_TASK_FLAGS_NONE: FABRIC_REPAIR_TASK_FLAGS = FABRIC_REPAIR_TASK_FLAGS(0i32);
pub const FABRIC_REPAIR_TASK_FLAGS_VALID_MASK: FABRIC_REPAIR_TASK_FLAGS =
    FABRIC_REPAIR_TASK_FLAGS(7i32);
pub const FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE_IN_PROGRESS: FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE =
    FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE(1i32);
pub const FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE_NOT_STARTED: FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE =
    FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE(0i32);
pub const FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE_SKIPPED: FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE =
    FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE(3i32);
pub const FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE_SUCCEEDED: FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE =
    FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE(2i32);
pub const FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE_TIMEDOUT: FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE =
    FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE(4i32);
pub const FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_HONOR_PERFORM_PREPARING_HEALTH_CHECK:
    FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS =
    FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS(1i32);
pub const FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_HONOR_PERFORM_RESTORING_HEALTH_CHECK:
    FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS =
    FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS(2i32);
pub const FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_NONE:
    FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS =
    FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS(0i32);
pub const FABRIC_REPAIR_TASK_RESULT_CANCELLED: FABRIC_REPAIR_TASK_RESULT =
    FABRIC_REPAIR_TASK_RESULT(2i32);
pub const FABRIC_REPAIR_TASK_RESULT_FAILED: FABRIC_REPAIR_TASK_RESULT =
    FABRIC_REPAIR_TASK_RESULT(8i32);
pub const FABRIC_REPAIR_TASK_RESULT_INTERRUPTED: FABRIC_REPAIR_TASK_RESULT =
    FABRIC_REPAIR_TASK_RESULT(4i32);
pub const FABRIC_REPAIR_TASK_RESULT_INVALID: FABRIC_REPAIR_TASK_RESULT =
    FABRIC_REPAIR_TASK_RESULT(0i32);
pub const FABRIC_REPAIR_TASK_RESULT_PENDING: FABRIC_REPAIR_TASK_RESULT =
    FABRIC_REPAIR_TASK_RESULT(16i32);
pub const FABRIC_REPAIR_TASK_RESULT_SUCCEEDED: FABRIC_REPAIR_TASK_RESULT =
    FABRIC_REPAIR_TASK_RESULT(1i32);
pub const FABRIC_REPAIR_TASK_STATE_APPROVED: FABRIC_REPAIR_TASK_STATE =
    FABRIC_REPAIR_TASK_STATE(8i32);
pub const FABRIC_REPAIR_TASK_STATE_CLAIMED: FABRIC_REPAIR_TASK_STATE =
    FABRIC_REPAIR_TASK_STATE(2i32);
pub const FABRIC_REPAIR_TASK_STATE_COMPLETED: FABRIC_REPAIR_TASK_STATE =
    FABRIC_REPAIR_TASK_STATE(64i32);
pub const FABRIC_REPAIR_TASK_STATE_CREATED: FABRIC_REPAIR_TASK_STATE =
    FABRIC_REPAIR_TASK_STATE(1i32);
pub const FABRIC_REPAIR_TASK_STATE_EXECUTING: FABRIC_REPAIR_TASK_STATE =
    FABRIC_REPAIR_TASK_STATE(16i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_ACTIVE: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(63i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_ALL: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(127i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_APPROVED: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(8i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_CLAIMED: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(2i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_COMPLETED: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(64i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_CREATED: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(1i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_DEFAULT: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(0i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_EXECUTING: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(16i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_PREPARING: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(4i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_READY_TO_EXECUTE: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(24i32);
pub const FABRIC_REPAIR_TASK_STATE_FILTER_RESTORING: FABRIC_REPAIR_TASK_STATE_FILTER =
    FABRIC_REPAIR_TASK_STATE_FILTER(32i32);
pub const FABRIC_REPAIR_TASK_STATE_INVALID: FABRIC_REPAIR_TASK_STATE =
    FABRIC_REPAIR_TASK_STATE(0i32);
pub const FABRIC_REPAIR_TASK_STATE_PREPARING: FABRIC_REPAIR_TASK_STATE =
    FABRIC_REPAIR_TASK_STATE(4i32);
pub const FABRIC_REPAIR_TASK_STATE_RESTORING: FABRIC_REPAIR_TASK_STATE =
    FABRIC_REPAIR_TASK_STATE(32i32);
pub const FABRIC_REPLICATOR_ADDRESS: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(1i32);
pub const FABRIC_REPLICATOR_BATCH_ACKNOWLEDGEMENT_INTERVAL: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(8i32);
pub const FABRIC_REPLICATOR_COPY_QUEUE_INITIAL_SIZE: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(128i32);
pub const FABRIC_REPLICATOR_COPY_QUEUE_MAX_SIZE: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(256i32);
pub const FABRIC_REPLICATOR_LISTEN_ADDRESS: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(1048576i32);
pub const FABRIC_REPLICATOR_PRIMARY_REPLICATION_QUEUE_INITIAL_SIZE:
    FABRIC_REPLICATOR_SETTINGS_FLAGS = FABRIC_REPLICATOR_SETTINGS_FLAGS(65536i32);
pub const FABRIC_REPLICATOR_PRIMARY_REPLICATION_QUEUE_MAX_MEMORY_SIZE:
    FABRIC_REPLICATOR_SETTINGS_FLAGS = FABRIC_REPLICATOR_SETTINGS_FLAGS(262144i32);
pub const FABRIC_REPLICATOR_PRIMARY_REPLICATION_QUEUE_MAX_SIZE: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(131072i32);
pub const FABRIC_REPLICATOR_PRIMARY_WAIT_FOR_PENDING_QUORUMS_TIMEOUT:
    FABRIC_REPLICATOR_SETTINGS_FLAGS = FABRIC_REPLICATOR_SETTINGS_FLAGS(524288i32);
pub const FABRIC_REPLICATOR_PUBLISH_ADDRESS: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(2097152i32);
pub const FABRIC_REPLICATOR_REPLICATION_MESSAGE_MAX_SIZE: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(2048i32);
pub const FABRIC_REPLICATOR_REPLICATION_QUEUE_INITIAL_SIZE: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(32i32);
pub const FABRIC_REPLICATOR_REPLICATION_QUEUE_MAX_MEMORY_SIZE: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(512i32);
pub const FABRIC_REPLICATOR_REPLICATION_QUEUE_MAX_SIZE: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(64i32);
pub const FABRIC_REPLICATOR_REQUIRE_SERVICE_ACK: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(16i32);
pub const FABRIC_REPLICATOR_RETRY_INTERVAL: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(4i32);
pub const FABRIC_REPLICATOR_SECONDARY_CLEAR_ACKNOWLEDGED_OPERATIONS:
    FABRIC_REPLICATOR_SETTINGS_FLAGS = FABRIC_REPLICATOR_SETTINGS_FLAGS(1024i32);
pub const FABRIC_REPLICATOR_SECONDARY_REPLICATION_QUEUE_INITIAL_SIZE:
    FABRIC_REPLICATOR_SETTINGS_FLAGS = FABRIC_REPLICATOR_SETTINGS_FLAGS(8192i32);
pub const FABRIC_REPLICATOR_SECONDARY_REPLICATION_QUEUE_MAX_MEMORY_SIZE:
    FABRIC_REPLICATOR_SETTINGS_FLAGS = FABRIC_REPLICATOR_SETTINGS_FLAGS(32768i32);
pub const FABRIC_REPLICATOR_SECONDARY_REPLICATION_QUEUE_MAX_SIZE: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(16384i32);
pub const FABRIC_REPLICATOR_SECURITY: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(2i32);
pub const FABRIC_REPLICATOR_SETTINGS_NONE: FABRIC_REPLICATOR_SETTINGS_FLAGS =
    FABRIC_REPLICATOR_SETTINGS_FLAGS(0i32);
pub const FABRIC_REPLICATOR_USE_STREAMFAULTS_AND_ENDOFSTREAM_OPERATIONACK:
    FABRIC_REPLICATOR_SETTINGS_FLAGS = FABRIC_REPLICATOR_SETTINGS_FLAGS(4096i32);
pub const FABRIC_REPLICA_OPEN_MODE_EXISTING: FABRIC_REPLICA_OPEN_MODE =
    FABRIC_REPLICA_OPEN_MODE(2i32);
pub const FABRIC_REPLICA_OPEN_MODE_INVALID: FABRIC_REPLICA_OPEN_MODE =
    FABRIC_REPLICA_OPEN_MODE(0i32);
pub const FABRIC_REPLICA_OPEN_MODE_NEW: FABRIC_REPLICA_OPEN_MODE = FABRIC_REPLICA_OPEN_MODE(1i32);
pub const FABRIC_REPLICA_ROLE_ACTIVE_SECONDARY: FABRIC_REPLICA_ROLE = FABRIC_REPLICA_ROLE(4i32);
pub const FABRIC_REPLICA_ROLE_IDLE_SECONDARY: FABRIC_REPLICA_ROLE = FABRIC_REPLICA_ROLE(3i32);
pub const FABRIC_REPLICA_ROLE_NONE: FABRIC_REPLICA_ROLE = FABRIC_REPLICA_ROLE(1i32);
pub const FABRIC_REPLICA_ROLE_PRIMARY: FABRIC_REPLICA_ROLE = FABRIC_REPLICA_ROLE(2i32);
pub const FABRIC_REPLICA_ROLE_UNKNOWN: FABRIC_REPLICA_ROLE = FABRIC_REPLICA_ROLE(0i32);
pub const FABRIC_REPLICA_SET_QUORUM_ALL: FABRIC_REPLICA_SET_QUORUM_MODE =
    FABRIC_REPLICA_SET_QUORUM_MODE(2i32);
pub const FABRIC_REPLICA_SET_QUORUM_INVALID: FABRIC_REPLICA_SET_QUORUM_MODE =
    FABRIC_REPLICA_SET_QUORUM_MODE(0i32);
pub const FABRIC_REPLICA_SET_WRITE_QUORUM: FABRIC_REPLICA_SET_QUORUM_MODE =
    FABRIC_REPLICA_SET_QUORUM_MODE(1i32);
pub const FABRIC_REPLICA_STATUS_DOWN: FABRIC_REPLICA_STATUS = FABRIC_REPLICA_STATUS(1i32);
pub const FABRIC_REPLICA_STATUS_INVALID: FABRIC_REPLICA_STATUS = FABRIC_REPLICA_STATUS(0i32);
pub const FABRIC_REPLICA_STATUS_UP: FABRIC_REPLICA_STATUS = FABRIC_REPLICA_STATUS(2i32);
pub const FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND_INVALID:
    FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND =
    FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND(0i32);
pub const FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND_USING_NODE_NAME:
    FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND =
    FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND(1i32);
pub const FABRIC_RESTART_NODE_DESCRIPTION_KIND_INVALID: FABRIC_RESTART_NODE_DESCRIPTION_KIND =
    FABRIC_RESTART_NODE_DESCRIPTION_KIND(0i32);
pub const FABRIC_RESTART_NODE_DESCRIPTION_KIND_USING_NODE_NAME:
    FABRIC_RESTART_NODE_DESCRIPTION_KIND = FABRIC_RESTART_NODE_DESCRIPTION_KIND(1i32);
pub const FABRIC_RESTART_PARTITION_MODE_ALL_REPLICAS_OR_INSTANCES: FABRIC_RESTART_PARTITION_MODE =
    FABRIC_RESTART_PARTITION_MODE(1i32);
pub const FABRIC_RESTART_PARTITION_MODE_INVALID: FABRIC_RESTART_PARTITION_MODE =
    FABRIC_RESTART_PARTITION_MODE(0i32);
pub const FABRIC_RESTART_PARTITION_MODE_ONLY_ACTIVE_SECONDARIES: FABRIC_RESTART_PARTITION_MODE =
    FABRIC_RESTART_PARTITION_MODE(2i32);
pub const FABRIC_ROLLING_UPGRADE_MODE_INVALID: FABRIC_ROLLING_UPGRADE_MODE =
    FABRIC_ROLLING_UPGRADE_MODE(0i32);
pub const FABRIC_ROLLING_UPGRADE_MODE_MONITORED: FABRIC_ROLLING_UPGRADE_MODE =
    FABRIC_ROLLING_UPGRADE_MODE(3i32);
pub const FABRIC_ROLLING_UPGRADE_MODE_UNMONITORED_AUTO: FABRIC_ROLLING_UPGRADE_MODE =
    FABRIC_ROLLING_UPGRADE_MODE(1i32);
pub const FABRIC_ROLLING_UPGRADE_MODE_UNMONITORED_MANUAL: FABRIC_ROLLING_UPGRADE_MODE =
    FABRIC_ROLLING_UPGRADE_MODE(2i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_ENABLE_DELTAS: FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS =
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(1024i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_FAILURE_ACTION: FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS =
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(8i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_FORCE_RESTART: FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS =
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(2i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_HEALTH_CHECK_RETRY:
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS = FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(64i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_HEALTH_CHECK_STABLE:
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS = FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(32i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_HEALTH_CHECK_WAIT:
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS = FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(16i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_HEALTH_POLICY: FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS =
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(512i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_NONE: FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS =
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(0i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_REPLICA_SET_CHECK_TIMEOUT:
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS = FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(4i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_UPGRADE_APPLICATION_HEALTH_POLICY_MAP:
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS = FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(4096i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_UPGRADE_DOMAIN_TIMEOUT:
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS = FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(256i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_UPGRADE_HEALTH_POLICY:
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS = FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(2048i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_UPGRADE_MODE: FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS =
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(1i32);
pub const FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS_UPGRADE_TIMEOUT: FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS =
    FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(128i32);
pub const FABRIC_SAFETY_CHECK_KIND_INVALID: FABRIC_SAFETY_CHECK_KIND =
    FABRIC_SAFETY_CHECK_KIND(0i32);
pub const FABRIC_SCALING_MECHANISM_INVALID: FABRIC_SCALING_MECHANISM_KIND =
    FABRIC_SCALING_MECHANISM_KIND(0i32);
pub const FABRIC_SCALING_MECHANISM_KIND_ADD_REMOVE_INCREMENTAL_NAMED_PARTITION:
    FABRIC_SCALING_MECHANISM_KIND = FABRIC_SCALING_MECHANISM_KIND(2i32);
pub const FABRIC_SCALING_MECHANISM_KIND_SCALE_PARTITION_INSTANCE_COUNT:
    FABRIC_SCALING_MECHANISM_KIND = FABRIC_SCALING_MECHANISM_KIND(1i32);
pub const FABRIC_SCALING_TRIGGER_KIND_AVERAGE_PARTITION_LOAD: FABRIC_SCALING_TRIGGER_KIND =
    FABRIC_SCALING_TRIGGER_KIND(1i32);
pub const FABRIC_SCALING_TRIGGER_KIND_AVERAGE_SERVICE_LOAD: FABRIC_SCALING_TRIGGER_KIND =
    FABRIC_SCALING_TRIGGER_KIND(2i32);
pub const FABRIC_SCALING_TRIGGER_KIND_INVALID: FABRIC_SCALING_TRIGGER_KIND =
    FABRIC_SCALING_TRIGGER_KIND(0i32);
pub const FABRIC_SECURITY_CREDENTIAL_KIND_CLAIMS: FABRIC_SECURITY_CREDENTIAL_KIND =
    FABRIC_SECURITY_CREDENTIAL_KIND(3i32);
pub const FABRIC_SECURITY_CREDENTIAL_KIND_INVALID: FABRIC_SECURITY_CREDENTIAL_KIND =
    FABRIC_SECURITY_CREDENTIAL_KIND(255i32);
pub const FABRIC_SECURITY_CREDENTIAL_KIND_NONE: FABRIC_SECURITY_CREDENTIAL_KIND =
    FABRIC_SECURITY_CREDENTIAL_KIND(0i32);
pub const FABRIC_SECURITY_CREDENTIAL_KIND_WINDOWS: FABRIC_SECURITY_CREDENTIAL_KIND =
    FABRIC_SECURITY_CREDENTIAL_KIND(2i32);
pub const FABRIC_SECURITY_CREDENTIAL_KIND_X509: FABRIC_SECURITY_CREDENTIAL_KIND =
    FABRIC_SECURITY_CREDENTIAL_KIND(1i32);
pub const FABRIC_SECURITY_CREDENTIAL_KIND_X509_2: FABRIC_SECURITY_CREDENTIAL_KIND =
    FABRIC_SECURITY_CREDENTIAL_KIND(4i32);
pub const FABRIC_SEED_NODE_SAFETY_CHECK_KIND_ENSURE_QUORUM: FABRIC_SAFETY_CHECK_KIND =
    FABRIC_SAFETY_CHECK_KIND(1i32);
pub const FABRIC_SERVICE_CORRELATION_SCHEME_AFFINITY: FABRIC_SERVICE_CORRELATION_SCHEME =
    FABRIC_SERVICE_CORRELATION_SCHEME(1i32);
pub const FABRIC_SERVICE_CORRELATION_SCHEME_ALIGNED_AFFINITY: FABRIC_SERVICE_CORRELATION_SCHEME =
    FABRIC_SERVICE_CORRELATION_SCHEME(2i32);
pub const FABRIC_SERVICE_CORRELATION_SCHEME_INVALID: FABRIC_SERVICE_CORRELATION_SCHEME =
    FABRIC_SERVICE_CORRELATION_SCHEME(0i32);
pub const FABRIC_SERVICE_CORRELATION_SCHEME_NONALIGNED_AFFINITY: FABRIC_SERVICE_CORRELATION_SCHEME =
    FABRIC_SERVICE_CORRELATION_SCHEME(3i32);
pub const FABRIC_SERVICE_DESCRIPTION_KIND_INVALID: FABRIC_SERVICE_DESCRIPTION_KIND =
    FABRIC_SERVICE_DESCRIPTION_KIND(0i32);
pub const FABRIC_SERVICE_DESCRIPTION_KIND_STATEFUL: FABRIC_SERVICE_DESCRIPTION_KIND =
    FABRIC_SERVICE_DESCRIPTION_KIND(2i32);
pub const FABRIC_SERVICE_DESCRIPTION_KIND_STATELESS: FABRIC_SERVICE_DESCRIPTION_KIND =
    FABRIC_SERVICE_DESCRIPTION_KIND(1i32);
pub const FABRIC_SERVICE_KIND_INVALID: FABRIC_SERVICE_KIND = FABRIC_SERVICE_KIND(0i32);
pub const FABRIC_SERVICE_KIND_STATEFUL: FABRIC_SERVICE_KIND = FABRIC_SERVICE_KIND(2i32);
pub const FABRIC_SERVICE_KIND_STATELESS: FABRIC_SERVICE_KIND = FABRIC_SERVICE_KIND(1i32);
pub const FABRIC_SERVICE_LOAD_METRIC_WEIGHT_HIGH: FABRIC_SERVICE_LOAD_METRIC_WEIGHT =
    FABRIC_SERVICE_LOAD_METRIC_WEIGHT(3i32);
pub const FABRIC_SERVICE_LOAD_METRIC_WEIGHT_LOW: FABRIC_SERVICE_LOAD_METRIC_WEIGHT =
    FABRIC_SERVICE_LOAD_METRIC_WEIGHT(1i32);
pub const FABRIC_SERVICE_LOAD_METRIC_WEIGHT_MEDIUM: FABRIC_SERVICE_LOAD_METRIC_WEIGHT =
    FABRIC_SERVICE_LOAD_METRIC_WEIGHT(2i32);
pub const FABRIC_SERVICE_LOAD_METRIC_WEIGHT_ZERO: FABRIC_SERVICE_LOAD_METRIC_WEIGHT =
    FABRIC_SERVICE_LOAD_METRIC_WEIGHT(0i32);
pub const FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS_NAME_PREFIX:
    FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS = FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS(1i32);
pub const FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS_NONE: FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS =
    FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS(0i32);
pub const FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS_PRIMARY_ONLY:
    FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS = FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS(2i32);
pub const FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE_EXCLUSIVE_PROCESS:
    FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE = FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE(1i32);
pub const FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE_SHARED_PROCESS:
    FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE = FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE(0i32);
pub const FABRIC_SERVICE_PARTITION_ACCESS_STATUS_GRANTED: FABRIC_SERVICE_PARTITION_ACCESS_STATUS =
    FABRIC_SERVICE_PARTITION_ACCESS_STATUS(1i32);
pub const FABRIC_SERVICE_PARTITION_ACCESS_STATUS_INVALID: FABRIC_SERVICE_PARTITION_ACCESS_STATUS =
    FABRIC_SERVICE_PARTITION_ACCESS_STATUS(0i32);
pub const FABRIC_SERVICE_PARTITION_ACCESS_STATUS_NOT_PRIMARY:
    FABRIC_SERVICE_PARTITION_ACCESS_STATUS = FABRIC_SERVICE_PARTITION_ACCESS_STATUS(3i32);
pub const FABRIC_SERVICE_PARTITION_ACCESS_STATUS_NO_WRITE_QUORUM:
    FABRIC_SERVICE_PARTITION_ACCESS_STATUS = FABRIC_SERVICE_PARTITION_ACCESS_STATUS(4i32);
pub const FABRIC_SERVICE_PARTITION_ACCESS_STATUS_RECONFIGURATION_PENDING:
    FABRIC_SERVICE_PARTITION_ACCESS_STATUS = FABRIC_SERVICE_PARTITION_ACCESS_STATUS(2i32);
pub const FABRIC_SERVICE_PARTITION_KIND_INT64_RANGE: FABRIC_SERVICE_PARTITION_KIND =
    FABRIC_SERVICE_PARTITION_KIND(2i32);
pub const FABRIC_SERVICE_PARTITION_KIND_INVALID: FABRIC_SERVICE_PARTITION_KIND =
    FABRIC_SERVICE_PARTITION_KIND(0i32);
pub const FABRIC_SERVICE_PARTITION_KIND_NAMED: FABRIC_SERVICE_PARTITION_KIND =
    FABRIC_SERVICE_PARTITION_KIND(3i32);
pub const FABRIC_SERVICE_PARTITION_KIND_SINGLETON: FABRIC_SERVICE_PARTITION_KIND =
    FABRIC_SERVICE_PARTITION_KIND(1i32);
pub const FABRIC_SERVICE_REPLICA_KIND_INVALID: FABRIC_SERVICE_REPLICA_KIND =
    FABRIC_SERVICE_REPLICA_KIND(0i32);
pub const FABRIC_SERVICE_REPLICA_KIND_KEY_VALUE_STORE: FABRIC_SERVICE_REPLICA_KIND =
    FABRIC_SERVICE_REPLICA_KIND(1i32);
pub const FABRIC_SERVICE_ROLE_INVALID: FABRIC_SERVICE_ENDPOINT_ROLE =
    FABRIC_SERVICE_ENDPOINT_ROLE(0i32);
pub const FABRIC_SERVICE_ROLE_STATEFUL_PRIMARY: FABRIC_SERVICE_ENDPOINT_ROLE =
    FABRIC_SERVICE_ENDPOINT_ROLE(2i32);
pub const FABRIC_SERVICE_ROLE_STATEFUL_SECONDARY: FABRIC_SERVICE_ENDPOINT_ROLE =
    FABRIC_SERVICE_ENDPOINT_ROLE(3i32);
pub const FABRIC_SERVICE_ROLE_STATELESS: FABRIC_SERVICE_ENDPOINT_ROLE =
    FABRIC_SERVICE_ENDPOINT_ROLE(1i32);
pub const FABRIC_SERVICE_TYPE_REGISTRATION_STATUS_DISABLED:
    FABRIC_SERVICE_TYPE_REGISTRATION_STATUS = FABRIC_SERVICE_TYPE_REGISTRATION_STATUS(1i32);
pub const FABRIC_SERVICE_TYPE_REGISTRATION_STATUS_INVALID: FABRIC_SERVICE_TYPE_REGISTRATION_STATUS =
    FABRIC_SERVICE_TYPE_REGISTRATION_STATUS(0i32);
pub const FABRIC_SERVICE_TYPE_REGISTRATION_STATUS_NOT_REGISTERED:
    FABRIC_SERVICE_TYPE_REGISTRATION_STATUS = FABRIC_SERVICE_TYPE_REGISTRATION_STATUS(2i32);
pub const FABRIC_SERVICE_TYPE_REGISTRATION_STATUS_REGISTERED:
    FABRIC_SERVICE_TYPE_REGISTRATION_STATUS = FABRIC_SERVICE_TYPE_REGISTRATION_STATUS(3i32);
pub const FABRIC_START_NODE_DESCRIPTION_KIND_INVALID: FABRIC_START_NODE_DESCRIPTION_KIND =
    FABRIC_START_NODE_DESCRIPTION_KIND(0i32);
pub const FABRIC_START_NODE_DESCRIPTION_KIND_USING_NODE_NAME: FABRIC_START_NODE_DESCRIPTION_KIND =
    FABRIC_START_NODE_DESCRIPTION_KIND(1i32);
pub const FABRIC_STATEFUL_SERVICE_CORRELATIONS: FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(128i32);
pub const FABRIC_STATEFUL_SERVICE_METRICS: FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(256i32);
pub const FABRIC_STATEFUL_SERVICE_MIN_REPLICA_SET_SIZE:
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(16i32);
pub const FABRIC_STATEFUL_SERVICE_MOVE_COST: FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(512i32);
pub const FABRIC_STATEFUL_SERVICE_NONE: FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(0i32);
pub const FABRIC_STATEFUL_SERVICE_PLACEMENT_CONSTRAINTS:
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(32i32);
pub const FABRIC_STATEFUL_SERVICE_POLICY_LIST: FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(64i32);
pub const FABRIC_STATEFUL_SERVICE_QUORUM_LOSS_WAIT_DURATION:
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(4i32);
pub const FABRIC_STATEFUL_SERVICE_REPLICA_RESTART_WAIT_DURATION:
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(2i32);
pub const FABRIC_STATEFUL_SERVICE_SCALING_POLICY: FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(1024i32);
pub const FABRIC_STATEFUL_SERVICE_SETTINGS_NONE: FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS =
    FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS(0i32);
pub const FABRIC_STATEFUL_SERVICE_SETTINGS_QUORUM_LOSS_WAIT_DURATION:
    FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS =
    FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS(2i32);
pub const FABRIC_STATEFUL_SERVICE_SETTINGS_REPLICA_RESTART_WAIT_DURATION:
    FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS =
    FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS(1i32);
pub const FABRIC_STATEFUL_SERVICE_SETTINGS_STANDBY_REPLICA_KEEP_DURATION:
    FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS =
    FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS(4i32);
pub const FABRIC_STATEFUL_SERVICE_STANDBY_REPLICA_KEEP_DURATION:
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(8i32);
pub const FABRIC_STATEFUL_SERVICE_TARGET_REPLICA_SET_SIZE:
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(1i32);
pub const FABRIC_STATELESS_SERVICE_CORRELATIONS: FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS(8i32);
pub const FABRIC_STATELESS_SERVICE_INSTANCE_COUNT:
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS(1i32);
pub const FABRIC_STATELESS_SERVICE_METRICS: FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS(16i32);
pub const FABRIC_STATELESS_SERVICE_MOVE_COST: FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS(32i32);
pub const FABRIC_STATELESS_SERVICE_NONE: FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS(0i32);
pub const FABRIC_STATELESS_SERVICE_PLACEMENT_CONSTRAINTS:
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS(2i32);
pub const FABRIC_STATELESS_SERVICE_POLICY_LIST: FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS(4i32);
pub const FABRIC_STATELESS_SERVICE_SCALING_POLICY:
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS =
    FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS(64i32);
pub const FABRIC_STOP_NODE_DESCRIPTION_KIND_INVALID: FABRIC_STOP_NODE_DESCRIPTION_KIND =
    FABRIC_STOP_NODE_DESCRIPTION_KIND(0i32);
pub const FABRIC_STOP_NODE_DESCRIPTION_KIND_USING_NODE_NAME: FABRIC_STOP_NODE_DESCRIPTION_KIND =
    FABRIC_STOP_NODE_DESCRIPTION_KIND(1i32);
pub const FABRIC_STORE_BACKUP_OPTION_FULL: FABRIC_STORE_BACKUP_OPTION =
    FABRIC_STORE_BACKUP_OPTION(1i32);
pub const FABRIC_STORE_BACKUP_OPTION_INCREMENTAL: FABRIC_STORE_BACKUP_OPTION =
    FABRIC_STORE_BACKUP_OPTION(2i32);
pub const FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY: FABRIC_STORE_BACKUP_OPTION =
    FABRIC_STORE_BACKUP_OPTION(3i32);
pub const FABRIC_TEST_COMMAND_PROGRESS_STATE_CANCELLED: FABRIC_TEST_COMMAND_PROGRESS_STATE =
    FABRIC_TEST_COMMAND_PROGRESS_STATE(5i32);
pub const FABRIC_TEST_COMMAND_PROGRESS_STATE_COMPLETED: FABRIC_TEST_COMMAND_PROGRESS_STATE =
    FABRIC_TEST_COMMAND_PROGRESS_STATE(3i32);
pub const FABRIC_TEST_COMMAND_PROGRESS_STATE_FAULTED: FABRIC_TEST_COMMAND_PROGRESS_STATE =
    FABRIC_TEST_COMMAND_PROGRESS_STATE(4i32);
pub const FABRIC_TEST_COMMAND_PROGRESS_STATE_FORCE_CANCELLED: FABRIC_TEST_COMMAND_PROGRESS_STATE =
    FABRIC_TEST_COMMAND_PROGRESS_STATE(6i32);
pub const FABRIC_TEST_COMMAND_PROGRESS_STATE_INVALID: FABRIC_TEST_COMMAND_PROGRESS_STATE =
    FABRIC_TEST_COMMAND_PROGRESS_STATE(0i32);
pub const FABRIC_TEST_COMMAND_PROGRESS_STATE_ROLLING_BACK: FABRIC_TEST_COMMAND_PROGRESS_STATE =
    FABRIC_TEST_COMMAND_PROGRESS_STATE(2i32);
pub const FABRIC_TEST_COMMAND_PROGRESS_STATE_RUNNING: FABRIC_TEST_COMMAND_PROGRESS_STATE =
    FABRIC_TEST_COMMAND_PROGRESS_STATE(1i32);
pub const FABRIC_TEST_COMMAND_STATE_FILTER_ALL: FABRIC_TEST_COMMAND_STATE_FILTER =
    FABRIC_TEST_COMMAND_STATE_FILTER(65535i32);
pub const FABRIC_TEST_COMMAND_STATE_FILTER_CANCELLED: FABRIC_TEST_COMMAND_STATE_FILTER =
    FABRIC_TEST_COMMAND_STATE_FILTER(32i32);
pub const FABRIC_TEST_COMMAND_STATE_FILTER_COMPLETED_SUCCESSFULLY:
    FABRIC_TEST_COMMAND_STATE_FILTER = FABRIC_TEST_COMMAND_STATE_FILTER(8i32);
pub const FABRIC_TEST_COMMAND_STATE_FILTER_DEFAULT: FABRIC_TEST_COMMAND_STATE_FILTER =
    FABRIC_TEST_COMMAND_STATE_FILTER(0i32);
pub const FABRIC_TEST_COMMAND_STATE_FILTER_FAILED: FABRIC_TEST_COMMAND_STATE_FILTER =
    FABRIC_TEST_COMMAND_STATE_FILTER(16i32);
pub const FABRIC_TEST_COMMAND_STATE_FILTER_FORCE_CANCELLED: FABRIC_TEST_COMMAND_STATE_FILTER =
    FABRIC_TEST_COMMAND_STATE_FILTER(64i32);
pub const FABRIC_TEST_COMMAND_STATE_FILTER_ROLLING_BACK: FABRIC_TEST_COMMAND_STATE_FILTER =
    FABRIC_TEST_COMMAND_STATE_FILTER(2i32);
pub const FABRIC_TEST_COMMAND_STATE_FILTER_RUNNING: FABRIC_TEST_COMMAND_STATE_FILTER =
    FABRIC_TEST_COMMAND_STATE_FILTER(1i32);
pub const FABRIC_TEST_COMMAND_TYPE_DEFAULT: FABRIC_TEST_COMMAND_TYPE =
    FABRIC_TEST_COMMAND_TYPE(0i32);
pub const FABRIC_TEST_COMMAND_TYPE_FILTER_ALL: FABRIC_TEST_COMMAND_TYPE_FILTER =
    FABRIC_TEST_COMMAND_TYPE_FILTER(65535i32);
pub const FABRIC_TEST_COMMAND_TYPE_FILTER_DEFAULT: FABRIC_TEST_COMMAND_TYPE_FILTER =
    FABRIC_TEST_COMMAND_TYPE_FILTER(0i32);
pub const FABRIC_TEST_COMMAND_TYPE_FILTER_PARTITION_DATA_LOSS: FABRIC_TEST_COMMAND_TYPE_FILTER =
    FABRIC_TEST_COMMAND_TYPE_FILTER(1i32);
pub const FABRIC_TEST_COMMAND_TYPE_FILTER_PARTITION_QUORUM_LOSS: FABRIC_TEST_COMMAND_TYPE_FILTER =
    FABRIC_TEST_COMMAND_TYPE_FILTER(2i32);
pub const FABRIC_TEST_COMMAND_TYPE_FILTER_PARTITION_RESTART: FABRIC_TEST_COMMAND_TYPE_FILTER =
    FABRIC_TEST_COMMAND_TYPE_FILTER(4i32);
pub const FABRIC_TEST_COMMAND_TYPE_INVOKE_DATA_LOSS: FABRIC_TEST_COMMAND_TYPE =
    FABRIC_TEST_COMMAND_TYPE(1i32);
pub const FABRIC_TEST_COMMAND_TYPE_INVOKE_QUORUM_LOSS: FABRIC_TEST_COMMAND_TYPE =
    FABRIC_TEST_COMMAND_TYPE(2i32);
pub const FABRIC_TEST_COMMAND_TYPE_INVOKE_RESTART_PARTITION: FABRIC_TEST_COMMAND_TYPE =
    FABRIC_TEST_COMMAND_TYPE(4i32);
pub const FABRIC_TEST_COMMAND_TYPE_START_NODE_TRANSITION: FABRIC_TEST_COMMAND_TYPE =
    FABRIC_TEST_COMMAND_TYPE(8i32);
pub const FABRIC_TRANSACTION_ISOLATION_LEVEL_DEFAULT: FABRIC_TRANSACTION_ISOLATION_LEVEL =
    FABRIC_TRANSACTION_ISOLATION_LEVEL(0i32);
pub const FABRIC_TRANSACTION_ISOLATION_LEVEL_READ_COMMITTED: FABRIC_TRANSACTION_ISOLATION_LEVEL =
    FABRIC_TRANSACTION_ISOLATION_LEVEL(2i32);
pub const FABRIC_TRANSACTION_ISOLATION_LEVEL_READ_UNCOMMITTED: FABRIC_TRANSACTION_ISOLATION_LEVEL =
    FABRIC_TRANSACTION_ISOLATION_LEVEL(1i32);
pub const FABRIC_TRANSACTION_ISOLATION_LEVEL_REPEATABLE_READ: FABRIC_TRANSACTION_ISOLATION_LEVEL =
    FABRIC_TRANSACTION_ISOLATION_LEVEL(3i32);
pub const FABRIC_TRANSACTION_ISOLATION_LEVEL_SERIALIZABLE: FABRIC_TRANSACTION_ISOLATION_LEVEL =
    FABRIC_TRANSACTION_ISOLATION_LEVEL(5i32);
pub const FABRIC_TRANSACTION_ISOLATION_LEVEL_SNAPSHOT: FABRIC_TRANSACTION_ISOLATION_LEVEL =
    FABRIC_TRANSACTION_ISOLATION_LEVEL(4i32);
pub const FABRIC_UPGRADE_DOMAIN_STATE_COMPLETED: FABRIC_UPGRADE_DOMAIN_STATE =
    FABRIC_UPGRADE_DOMAIN_STATE(3i32);
pub const FABRIC_UPGRADE_DOMAIN_STATE_INVALID: FABRIC_UPGRADE_DOMAIN_STATE =
    FABRIC_UPGRADE_DOMAIN_STATE(0i32);
pub const FABRIC_UPGRADE_DOMAIN_STATE_IN_PROGRESS: FABRIC_UPGRADE_DOMAIN_STATE =
    FABRIC_UPGRADE_DOMAIN_STATE(2i32);
pub const FABRIC_UPGRADE_DOMAIN_STATE_PENDING: FABRIC_UPGRADE_DOMAIN_STATE =
    FABRIC_UPGRADE_DOMAIN_STATE(1i32);
pub const FABRIC_UPGRADE_FAILURE_REASON_HEALTH_CHECK: FABRIC_UPGRADE_FAILURE_REASON =
    FABRIC_UPGRADE_FAILURE_REASON(2i32);
pub const FABRIC_UPGRADE_FAILURE_REASON_INTERRUPTED: FABRIC_UPGRADE_FAILURE_REASON =
    FABRIC_UPGRADE_FAILURE_REASON(1i32);
pub const FABRIC_UPGRADE_FAILURE_REASON_NONE: FABRIC_UPGRADE_FAILURE_REASON =
    FABRIC_UPGRADE_FAILURE_REASON(0i32);
pub const FABRIC_UPGRADE_FAILURE_REASON_OVERALL_UPGRADE_TIMEOUT: FABRIC_UPGRADE_FAILURE_REASON =
    FABRIC_UPGRADE_FAILURE_REASON(4i32);
pub const FABRIC_UPGRADE_FAILURE_REASON_PROCESSING_FAILURE: FABRIC_UPGRADE_FAILURE_REASON =
    FABRIC_UPGRADE_FAILURE_REASON(5i32);
pub const FABRIC_UPGRADE_FAILURE_REASON_UPGRADE_DOMAIN_TIMEOUT: FABRIC_UPGRADE_FAILURE_REASON =
    FABRIC_UPGRADE_FAILURE_REASON(3i32);
pub const FABRIC_UPGRADE_KIND_INVALID: FABRIC_UPGRADE_KIND = FABRIC_UPGRADE_KIND(0i32);
pub const FABRIC_UPGRADE_KIND_ROLLING: FABRIC_UPGRADE_KIND = FABRIC_UPGRADE_KIND(1i32);
pub const FABRIC_UPGRADE_PARTITION_SAFETY_CHECK_KIND_ENSURE_AVAILABILITY:
    FABRIC_UPGRADE_SAFETY_CHECK_KIND = FABRIC_UPGRADE_SAFETY_CHECK_KIND(7i32);
pub const FABRIC_UPGRADE_PARTITION_SAFETY_CHECK_KIND_ENSURE_QUORUM:
    FABRIC_UPGRADE_SAFETY_CHECK_KIND = FABRIC_UPGRADE_SAFETY_CHECK_KIND(2i32);
pub const FABRIC_UPGRADE_PARTITION_SAFETY_CHECK_KIND_WAIT_FOR_INBUILD_REPLICA:
    FABRIC_UPGRADE_SAFETY_CHECK_KIND = FABRIC_UPGRADE_SAFETY_CHECK_KIND(6i32);
pub const FABRIC_UPGRADE_PARTITION_SAFETY_CHECK_KIND_WAIT_FOR_PRIMARY_PLACEMENT:
    FABRIC_UPGRADE_SAFETY_CHECK_KIND = FABRIC_UPGRADE_SAFETY_CHECK_KIND(3i32);
pub const FABRIC_UPGRADE_PARTITION_SAFETY_CHECK_KIND_WAIT_FOR_PRIMARY_SWAP:
    FABRIC_UPGRADE_SAFETY_CHECK_KIND = FABRIC_UPGRADE_SAFETY_CHECK_KIND(4i32);
pub const FABRIC_UPGRADE_PARTITION_SAFETY_CHECK_KIND_WAIT_FOR_RECONFIGURATION:
    FABRIC_UPGRADE_SAFETY_CHECK_KIND = FABRIC_UPGRADE_SAFETY_CHECK_KIND(5i32);
pub const FABRIC_UPGRADE_PARTITION_SAFETY_CHECK_KIND_WAIT_FOR_RESOURCE_AVAILABILITY:
    FABRIC_UPGRADE_SAFETY_CHECK_KIND = FABRIC_UPGRADE_SAFETY_CHECK_KIND(8i32);
pub const FABRIC_UPGRADE_SAFETY_CHECK_KIND_INVALID: FABRIC_UPGRADE_SAFETY_CHECK_KIND =
    FABRIC_UPGRADE_SAFETY_CHECK_KIND(0i32);
pub const FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK_KIND_ENSURE_QUORUM:
    FABRIC_UPGRADE_SAFETY_CHECK_KIND = FABRIC_UPGRADE_SAFETY_CHECK_KIND(1i32);
pub const FABRIC_UPGRADE_STATE_FAILED: FABRIC_UPGRADE_STATE = FABRIC_UPGRADE_STATE(6i32);
pub const FABRIC_UPGRADE_STATE_INVALID: FABRIC_UPGRADE_STATE = FABRIC_UPGRADE_STATE(0i32);
pub const FABRIC_UPGRADE_STATE_ROLLING_BACK_COMPLETED: FABRIC_UPGRADE_STATE =
    FABRIC_UPGRADE_STATE(2i32);
pub const FABRIC_UPGRADE_STATE_ROLLING_BACK_IN_PROGRESS: FABRIC_UPGRADE_STATE =
    FABRIC_UPGRADE_STATE(1i32);
pub const FABRIC_UPGRADE_STATE_ROLLING_BACK_PENDING: FABRIC_UPGRADE_STATE =
    FABRIC_UPGRADE_STATE(7i32);
pub const FABRIC_UPGRADE_STATE_ROLLING_FORWARD_COMPLETED: FABRIC_UPGRADE_STATE =
    FABRIC_UPGRADE_STATE(5i32);
pub const FABRIC_UPGRADE_STATE_ROLLING_FORWARD_IN_PROGRESS: FABRIC_UPGRADE_STATE =
    FABRIC_UPGRADE_STATE(4i32);
pub const FABRIC_UPGRADE_STATE_ROLLING_FORWARD_PENDING: FABRIC_UPGRADE_STATE =
    FABRIC_UPGRADE_STATE(3i32);
pub const FABRIC_X509_FIND_TYPE_FINDBYEXTENSION: FABRIC_X509_FIND_TYPE =
    FABRIC_X509_FIND_TYPE(12i32);
pub const FABRIC_X509_FIND_TYPE_FINDBYSUBJECTNAME: FABRIC_X509_FIND_TYPE =
    FABRIC_X509_FIND_TYPE(1i32);
pub const FABRIC_X509_FIND_TYPE_FINDBYTHUMBPRINT: FABRIC_X509_FIND_TYPE =
    FABRIC_X509_FIND_TYPE(0i32);
pub const FABRIC_X509_STORE_LOCATION_CURRENTUSER: FABRIC_X509_STORE_LOCATION =
    FABRIC_X509_STORE_LOCATION(1i32);
pub const FABRIC_X509_STORE_LOCATION_INVALID: FABRIC_X509_STORE_LOCATION =
    FABRIC_X509_STORE_LOCATION(0i32);
pub const FABRIC_X509_STORE_LOCATION_LOCALMACHINE: FABRIC_X509_STORE_LOCATION =
    FABRIC_X509_STORE_LOCATION(2i32);
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_APPLICATION_DEFINITION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_APPLICATION_DEFINITION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_APPLICATION_DEFINITION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_APPLICATION_DEFINITION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_APPLICATION_DEFINITION_KIND_FILTER(pub i32);
impl windows_core::TypeKind for FABRIC_APPLICATION_DEFINITION_KIND_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_APPLICATION_DEFINITION_KIND_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_APPLICATION_DEFINITION_KIND_FILTER")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY(pub i32);
impl windows_core::TypeKind for FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_APPLICATION_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_APPLICATION_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_APPLICATION_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_APPLICATION_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_APPLICATION_TYPE_DEFINITION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_DEFINITION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_DEFINITION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_APPLICATION_TYPE_DEFINITION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER(pub i32);
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_APPLICATION_TYPE_DEFINITION_KIND_FILTER")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_APPLICATION_TYPE_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_APPLICATION_TYPE_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS(pub i32);
impl windows_core::TypeKind for FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_APPLICATION_UPGRADE_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_APPLICATION_UPGRADE_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_APPLICATION_UPGRADE_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_APPLICATION_UPGRADE_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_APPLICATION_UPGRADE_STATE(pub i32);
impl windows_core::TypeKind for FABRIC_APPLICATION_UPGRADE_STATE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_APPLICATION_UPGRADE_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_APPLICATION_UPGRADE_STATE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_CHAOS_EVENT_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_CHAOS_EVENT_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_CHAOS_EVENT_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_CHAOS_EVENT_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_CHAOS_SCHEDULE_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_CHAOS_SCHEDULE_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_CHAOS_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_CHAOS_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_CHAOS_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_CHAOS_STATUS").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_CLIENT_ROLE(pub i32);
impl windows_core::TypeKind for FABRIC_CLIENT_ROLE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_CLIENT_ROLE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_CLIENT_ROLE").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_CODE_PACKAGE_EVENT_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_CODE_PACKAGE_EVENT_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_CODE_PACKAGE_EVENT_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_CODE_PACKAGE_EVENT_TYPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_DATA_LOSS_MODE(pub i32);
impl windows_core::TypeKind for FABRIC_DATA_LOSS_MODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_DATA_LOSS_MODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_DATA_LOSS_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_DEPLOYMENT_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_DEPLOYMENT_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_DEPLOYMENT_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_DEPLOYMENT_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_DIAGNOSTICS_SINKS_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_DIAGNOSTICS_SINKS_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_DIAGNOSTICS_SINKS_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_DIAGNOSTICS_SINKS_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_DLLHOST_HOSTED_DLL_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_DLLHOST_HOSTED_DLL_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_DLLHOST_HOSTED_DLL_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_DLLHOST_HOSTED_DLL_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_DLLHOST_ISOLATION_POLICY(pub i32);
impl windows_core::TypeKind for FABRIC_DLLHOST_ISOLATION_POLICY {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_DLLHOST_ISOLATION_POLICY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_DLLHOST_ISOLATION_POLICY")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_ENTRY_POINT_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_ENTRY_POINT_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_ENTRY_POINT_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_ENTRY_POINT_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_ENUMERATION_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_ENUMERATION_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_ENUMERATION_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_ENUMERATION_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_ERROR_CODE(pub i32);
impl windows_core::TypeKind for FABRIC_ERROR_CODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_ERROR_CODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_ERROR_CODE").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_EXEHOST_WORKING_FOLDER(pub i32);
impl windows_core::TypeKind for FABRIC_EXEHOST_WORKING_FOLDER {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_EXEHOST_WORKING_FOLDER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_EXEHOST_WORKING_FOLDER")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_FAULT_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_FAULT_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_FAULT_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_FAULT_TYPE").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_HEALTH_ENTITY_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_HEALTH_ENTITY_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_HEALTH_ENTITY_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_HEALTH_ENTITY_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_HEALTH_EVALUATION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_HEALTH_EVALUATION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_HEALTH_EVALUATION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_HEALTH_EVALUATION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_HEALTH_REPORT_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_HEALTH_REPORT_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_HEALTH_REPORT_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_HEALTH_REPORT_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_HEALTH_STATE(pub i32);
impl windows_core::TypeKind for FABRIC_HEALTH_STATE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_HEALTH_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_HEALTH_STATE").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_HEALTH_STATE_FILTER(pub i32);
impl windows_core::TypeKind for FABRIC_HEALTH_STATE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_HEALTH_STATE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_HEALTH_STATE_FILTER")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_HOST_ISOLATION_MODE(pub i32);
impl windows_core::TypeKind for FABRIC_HOST_ISOLATION_MODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_HOST_ISOLATION_MODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_HOST_ISOLATION_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_HOST_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_HOST_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_HOST_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_HOST_TYPE").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE(pub i32);
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE(pub i32);
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_KEY_VALUE_STORE_MIGRATION_STATE(pub i32);
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_MIGRATION_STATE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_MIGRATION_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_KEY_VALUE_STORE_MIGRATION_STATE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE(pub i32);
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_KEY_VALUE_STORE_PROVIDER_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_PROVIDER_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_PROVIDER_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_KEY_VALUE_STORE_PROVIDER_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_LOCAL_STORE_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_LOCAL_STORE_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_LOCAL_STORE_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_LOCAL_STORE_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_MONITORED_UPGRADE_FAILURE_ACTION(pub i32);
impl windows_core::TypeKind for FABRIC_MONITORED_UPGRADE_FAILURE_ACTION {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_MONITORED_UPGRADE_FAILURE_ACTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_MONITORED_UPGRADE_FAILURE_ACTION")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_MOVE_COST(pub i32);
impl windows_core::TypeKind for FABRIC_MOVE_COST {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_MOVE_COST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_MOVE_COST").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_NETWORK_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_NETWORK_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_NETWORK_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_NETWORK_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_NETWORK_STATUS_FILTER(pub i32);
impl windows_core::TypeKind for FABRIC_NETWORK_STATUS_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_NETWORK_STATUS_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_NETWORK_STATUS_FILTER")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_NETWORK_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_NETWORK_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_NETWORK_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_NETWORK_TYPE").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_NODE_DEACTIVATION_INTENT(pub i32);
impl windows_core::TypeKind for FABRIC_NODE_DEACTIVATION_INTENT {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_NODE_DEACTIVATION_INTENT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_NODE_DEACTIVATION_INTENT")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_NODE_DEACTIVATION_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_NODE_DEACTIVATION_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_NODE_DEACTIVATION_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_NODE_DEACTIVATION_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_NODE_DEACTIVATION_TASK_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_NODE_DEACTIVATION_TASK_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_NODE_DEACTIVATION_TASK_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_NODE_DEACTIVATION_TASK_TYPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_NODE_TRANSITION_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_NODE_TRANSITION_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_NODE_TRANSITION_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_NODE_TRANSITION_TYPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_NODE_UPGRADE_PHASE(pub i32);
impl windows_core::TypeKind for FABRIC_NODE_UPGRADE_PHASE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_NODE_UPGRADE_PHASE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_NODE_UPGRADE_PHASE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_OPERATION_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_OPERATION_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_OPERATION_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_OPERATION_TYPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_PACKAGE_SHARING_POLICY_SCOPE(pub i32);
impl windows_core::TypeKind for FABRIC_PACKAGE_SHARING_POLICY_SCOPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_PACKAGE_SHARING_POLICY_SCOPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_PACKAGE_SHARING_POLICY_SCOPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_PARTITION_KEY_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_PARTITION_KEY_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_PARTITION_KEY_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_PARTITION_KEY_TYPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_PARTITION_SCHEME(pub i32);
impl windows_core::TypeKind for FABRIC_PARTITION_SCHEME {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_PARTITION_SCHEME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_PARTITION_SCHEME")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_PARTITION_SELECTOR_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_PARTITION_SELECTOR_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_PARTITION_SELECTOR_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_PARTITION_SELECTOR_TYPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_PLACEMENT_POLICY_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_PLACEMENT_POLICY_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_PLACEMENT_POLICY_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_PLACEMENT_POLICY_TYPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_PROPERTY_BATCH_OPERATION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_PROPERTY_BATCH_OPERATION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_PROPERTY_BATCH_OPERATION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_PROPERTY_BATCH_OPERATION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_PROPERTY_TYPE_ID(pub i32);
impl windows_core::TypeKind for FABRIC_PROPERTY_TYPE_ID {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_PROPERTY_TYPE_ID {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_PROPERTY_TYPE_ID")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_PROTECTION_LEVEL(pub i32);
impl windows_core::TypeKind for FABRIC_PROTECTION_LEVEL {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_PROTECTION_LEVEL {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_PROTECTION_LEVEL")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_PROVISION_APPLICATION_TYPE_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_PROVISION_APPLICATION_TYPE_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_PROVISION_APPLICATION_TYPE_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_PROVISION_APPLICATION_TYPE_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_QUERY_NODE_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_QUERY_NODE_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_QUERY_NODE_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_QUERY_NODE_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_QUERY_NODE_STATUS_FILTER(pub i32);
impl windows_core::TypeKind for FABRIC_QUERY_NODE_STATUS_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_QUERY_NODE_STATUS_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_QUERY_NODE_STATUS_FILTER")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_QUERY_REPLICATOR_OPERATION_NAME(pub i32);
impl windows_core::TypeKind for FABRIC_QUERY_REPLICATOR_OPERATION_NAME {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_QUERY_REPLICATOR_OPERATION_NAME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_QUERY_REPLICATOR_OPERATION_NAME")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_QUERY_SERVICE_OPERATION_NAME(pub i32);
impl windows_core::TypeKind for FABRIC_QUERY_SERVICE_OPERATION_NAME {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_QUERY_SERVICE_OPERATION_NAME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_QUERY_SERVICE_OPERATION_NAME")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_QUERY_SERVICE_PARTITION_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_QUERY_SERVICE_PARTITION_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_QUERY_SERVICE_PARTITION_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_QUERY_SERVICE_PARTITION_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_QUERY_SERVICE_REPLICA_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_QUERY_SERVICE_REPLICA_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_QUERY_SERVICE_REPLICA_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_QUERY_SERVICE_REPLICA_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER(pub i32);
impl windows_core::TypeKind for FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_QUERY_SERVICE_REPLICA_STATUS_FILTER")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_QUERY_SERVICE_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_QUERY_SERVICE_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_QUERY_SERVICE_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_QUERY_SERVICE_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_QUORUM_LOSS_MODE(pub i32);
impl windows_core::TypeKind for FABRIC_QUORUM_LOSS_MODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_QUORUM_LOSS_MODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_QUORUM_LOSS_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_RECONFIGURATION_PHASE(pub i32);
impl windows_core::TypeKind for FABRIC_RECONFIGURATION_PHASE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_RECONFIGURATION_PHASE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_RECONFIGURATION_PHASE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_RECONFIGURATION_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_RECONFIGURATION_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_RECONFIGURATION_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_RECONFIGURATION_TYPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPAIR_IMPACT_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_REPAIR_IMPACT_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPAIR_IMPACT_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPAIR_IMPACT_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPAIR_NODE_IMPACT_LEVEL(pub i32);
impl windows_core::TypeKind for FABRIC_REPAIR_NODE_IMPACT_LEVEL {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPAIR_NODE_IMPACT_LEVEL {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPAIR_NODE_IMPACT_LEVEL")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPAIR_TARGET_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_REPAIR_TARGET_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPAIR_TARGET_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPAIR_TARGET_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPAIR_TASK_FLAGS(pub i32);
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_FLAGS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPAIR_TASK_FLAGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPAIR_TASK_FLAGS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE(pub i32);
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS(pub i32);
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_SETTINGS_FLAGS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPAIR_TASK_RESULT(pub i32);
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPAIR_TASK_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPAIR_TASK_RESULT")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPAIR_TASK_STATE(pub i32);
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_STATE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPAIR_TASK_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPAIR_TASK_STATE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPAIR_TASK_STATE_FILTER(pub i32);
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_STATE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPAIR_TASK_STATE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPAIR_TASK_STATE_FILTER")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPLICATOR_SETTINGS_FLAGS(pub i32);
impl windows_core::TypeKind for FABRIC_REPLICATOR_SETTINGS_FLAGS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPLICATOR_SETTINGS_FLAGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPLICATOR_SETTINGS_FLAGS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPLICA_OPEN_MODE(pub i32);
impl windows_core::TypeKind for FABRIC_REPLICA_OPEN_MODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPLICA_OPEN_MODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPLICA_OPEN_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPLICA_ROLE(pub i32);
impl windows_core::TypeKind for FABRIC_REPLICA_ROLE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPLICA_ROLE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPLICA_ROLE").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPLICA_SET_QUORUM_MODE(pub i32);
impl windows_core::TypeKind for FABRIC_REPLICA_SET_QUORUM_MODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPLICA_SET_QUORUM_MODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPLICA_SET_QUORUM_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_REPLICA_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_REPLICA_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_REPLICA_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_REPLICA_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_RESTART_NODE_DESCRIPTION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_RESTART_NODE_DESCRIPTION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_RESTART_NODE_DESCRIPTION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_RESTART_NODE_DESCRIPTION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_RESTART_PARTITION_MODE(pub i32);
impl windows_core::TypeKind for FABRIC_RESTART_PARTITION_MODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_RESTART_PARTITION_MODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_RESTART_PARTITION_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_ROLLING_UPGRADE_MODE(pub i32);
impl windows_core::TypeKind for FABRIC_ROLLING_UPGRADE_MODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_ROLLING_UPGRADE_MODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_ROLLING_UPGRADE_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS(pub i32);
impl windows_core::TypeKind for FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_ROLLING_UPGRADE_UPDATE_FLAGS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SAFETY_CHECK_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_SAFETY_CHECK_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SAFETY_CHECK_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SAFETY_CHECK_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SCALING_MECHANISM_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_SCALING_MECHANISM_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SCALING_MECHANISM_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SCALING_MECHANISM_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SCALING_TRIGGER_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_SCALING_TRIGGER_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SCALING_TRIGGER_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SCALING_TRIGGER_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SECURITY_CREDENTIAL_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_SECURITY_CREDENTIAL_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SECURITY_CREDENTIAL_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SECURITY_CREDENTIAL_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_CORRELATION_SCHEME(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_CORRELATION_SCHEME {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_CORRELATION_SCHEME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_CORRELATION_SCHEME")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_DESCRIPTION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_DESCRIPTION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_DESCRIPTION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_DESCRIPTION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_ENDPOINT_ROLE(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_ENDPOINT_ROLE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_ENDPOINT_ROLE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_ENDPOINT_ROLE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_KIND").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_LOAD_METRIC_WEIGHT(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_LOAD_METRIC_WEIGHT {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_LOAD_METRIC_WEIGHT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_LOAD_METRIC_WEIGHT")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_PARTITION_ACCESS_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_PARTITION_ACCESS_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_PARTITION_ACCESS_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_PARTITION_ACCESS_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_PARTITION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_PARTITION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_PARTITION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_PARTITION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_REPLICA_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_REPLICA_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_REPLICA_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_REPLICA_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_SERVICE_TYPE_REGISTRATION_STATUS(pub i32);
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_REGISTRATION_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_REGISTRATION_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_SERVICE_TYPE_REGISTRATION_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_START_NODE_DESCRIPTION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_START_NODE_DESCRIPTION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_START_NODE_DESCRIPTION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_START_NODE_DESCRIPTION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS(pub i32);
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_FLAGS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS(pub i32);
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_FLAGS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS(pub i32);
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_FLAGS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_STOP_NODE_DESCRIPTION_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_STOP_NODE_DESCRIPTION_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_STOP_NODE_DESCRIPTION_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_STOP_NODE_DESCRIPTION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_STORE_BACKUP_OPTION(pub i32);
impl windows_core::TypeKind for FABRIC_STORE_BACKUP_OPTION {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_STORE_BACKUP_OPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_STORE_BACKUP_OPTION")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_TEST_COMMAND_PROGRESS_STATE(pub i32);
impl windows_core::TypeKind for FABRIC_TEST_COMMAND_PROGRESS_STATE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_TEST_COMMAND_PROGRESS_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_TEST_COMMAND_PROGRESS_STATE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_TEST_COMMAND_STATE_FILTER(pub i32);
impl windows_core::TypeKind for FABRIC_TEST_COMMAND_STATE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_TEST_COMMAND_STATE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_TEST_COMMAND_STATE_FILTER")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_TEST_COMMAND_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_TEST_COMMAND_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_TEST_COMMAND_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_TEST_COMMAND_TYPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_TEST_COMMAND_TYPE_FILTER(pub i32);
impl windows_core::TypeKind for FABRIC_TEST_COMMAND_TYPE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_TEST_COMMAND_TYPE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_TEST_COMMAND_TYPE_FILTER")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_TRANSACTION_ISOLATION_LEVEL(pub i32);
impl windows_core::TypeKind for FABRIC_TRANSACTION_ISOLATION_LEVEL {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_TRANSACTION_ISOLATION_LEVEL {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_TRANSACTION_ISOLATION_LEVEL")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_UPGRADE_DOMAIN_STATE(pub i32);
impl windows_core::TypeKind for FABRIC_UPGRADE_DOMAIN_STATE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_UPGRADE_DOMAIN_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_UPGRADE_DOMAIN_STATE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_UPGRADE_FAILURE_REASON(pub i32);
impl windows_core::TypeKind for FABRIC_UPGRADE_FAILURE_REASON {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_UPGRADE_FAILURE_REASON {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_UPGRADE_FAILURE_REASON")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_UPGRADE_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_UPGRADE_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_UPGRADE_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_UPGRADE_KIND").field(&self.0).finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_UPGRADE_SAFETY_CHECK_KIND(pub i32);
impl windows_core::TypeKind for FABRIC_UPGRADE_SAFETY_CHECK_KIND {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_UPGRADE_SAFETY_CHECK_KIND {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_UPGRADE_SAFETY_CHECK_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_UPGRADE_STATE(pub i32);
impl windows_core::TypeKind for FABRIC_UPGRADE_STATE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_UPGRADE_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_UPGRADE_STATE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_X509_FIND_TYPE(pub i32);
impl windows_core::TypeKind for FABRIC_X509_FIND_TYPE {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_X509_FIND_TYPE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_X509_FIND_TYPE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(PartialEq, Eq, Copy, Clone, Default)]
pub struct FABRIC_X509_STORE_LOCATION(pub i32);
impl windows_core::TypeKind for FABRIC_X509_STORE_LOCATION {
    type TypeKind = windows_core::CopyType;
}
impl core::fmt::Debug for FABRIC_X509_STORE_LOCATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_tuple("FABRIC_X509_STORE_LOCATION")
            .field(&self.0)
            .finish()
    }
}
#[repr(C)]
pub struct FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA {
    pub Authority: windows_core::PCWSTR,
    pub TenantId: windows_core::PCWSTR,
    pub ClusterApplication: windows_core::PCWSTR,
    pub ClientApplication: windows_core::PCWSTR,
    pub ClientRedirect: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA {}
impl Clone for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA")
            .field("Authority", &self.Authority)
            .field("TenantId", &self.TenantId)
            .field("ClusterApplication", &self.ClusterApplication)
            .field("ClientApplication", &self.ClientApplication)
            .field("ClientRedirect", &self.ClientRedirect)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA {
    fn eq(&self, other: &Self) -> bool {
        self.Authority == other.Authority
            && self.TenantId == other.TenantId
            && self.ClusterApplication == other.ClusterApplication
            && self.ClientApplication == other.ClientApplication
            && self.ClientRedirect == other.ClientRedirect
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA {}
impl Default for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA_EX1 {
    pub LoginEndpoint: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA_EX1 {}
impl Clone for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA_EX1")
            .field("LoginEndpoint", &self.LoginEndpoint)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.LoginEndpoint == other.LoginEndpoint && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA_EX1 {}
impl Default for FABRIC_AAD_CLAIMS_RETRIEVAL_METADATA_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATIONS_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub TotalCount: u32,
    pub MaxPercentUnhealthyApplications: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATIONS_HEALTH_EVALUATION {}
impl Clone for FABRIC_APPLICATIONS_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATIONS_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATIONS_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("TotalCount", &self.TotalCount)
            .field(
                "MaxPercentUnhealthyApplications",
                &self.MaxPercentUnhealthyApplications,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATIONS_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATIONS_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.TotalCount == other.TotalCount
            && self.MaxPercentUnhealthyApplications == other.MaxPercentUnhealthyApplications
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATIONS_HEALTH_EVALUATION {}
impl Default for FABRIC_APPLICATIONS_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_CAPACITY_DESCRIPTION {
    pub MaximumNodes: u32,
    pub MinimumNodes: u32,
    pub Metrics: *const FABRIC_APPLICATION_METRIC_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_CAPACITY_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_CAPACITY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_CAPACITY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_CAPACITY_DESCRIPTION")
            .field("MaximumNodes", &self.MaximumNodes)
            .field("MinimumNodes", &self.MinimumNodes)
            .field("Metrics", &self.Metrics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_CAPACITY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_CAPACITY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.MaximumNodes == other.MaximumNodes
            && self.MinimumNodes == other.MinimumNodes
            && self.Metrics == other.Metrics
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_CAPACITY_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_CAPACITY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub ApplicationTypeName: windows_core::PCWSTR,
    pub ApplicationTypeVersion: windows_core::PCWSTR,
    pub ApplicationParameters: *const FABRIC_APPLICATION_PARAMETER_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field("ApplicationTypeVersion", &self.ApplicationTypeVersion)
            .field("ApplicationParameters", &self.ApplicationParameters)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ApplicationTypeName == other.ApplicationTypeName
            && self.ApplicationTypeVersion == other.ApplicationTypeVersion
            && self.ApplicationParameters == other.ApplicationParameters
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_DESCRIPTION_EX1 {
    pub ApplicationCapacity: *const FABRIC_APPLICATION_CAPACITY_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_DESCRIPTION_EX1 {}
impl Clone for FABRIC_APPLICATION_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_DESCRIPTION_EX1")
            .field("ApplicationCapacity", &self.ApplicationCapacity)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationCapacity == other.ApplicationCapacity && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_DESCRIPTION_EX1 {}
impl Default for FABRIC_APPLICATION_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_HEALTH {
    pub ApplicationName: *mut u16,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub HealthEvents: *const FABRIC_HEALTH_EVENT_LIST,
    pub DeployedApplicationHealthStates: *const FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST,
    pub ServiceHealthStates: *const FABRIC_SERVICE_HEALTH_STATE_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_HEALTH {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH")
            .field("ApplicationName", &self.ApplicationName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("HealthEvents", &self.HealthEvents)
            .field(
                "DeployedApplicationHealthStates",
                &self.DeployedApplicationHealthStates,
            )
            .field("ServiceHealthStates", &self.ServiceHealthStates)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_HEALTH {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.HealthEvents == other.HealthEvents
            && self.DeployedApplicationHealthStates == other.DeployedApplicationHealthStates
            && self.ServiceHealthStates == other.ServiceHealthStates
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_HEALTH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub ApplicationName: *mut u16,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_HEALTH_EVALUATION {}
impl Clone for FABRIC_APPLICATION_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("ApplicationName", &self.ApplicationName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.ApplicationName == other.ApplicationName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_EVALUATION {}
impl Default for FABRIC_APPLICATION_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_EX1 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_HEALTH_EX1 {}
impl Clone for FABRIC_APPLICATION_HEALTH_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_EX1")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_EX1 {}
impl Default for FABRIC_APPLICATION_HEALTH_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_EX2 {
    pub HealthStatistics: *const FABRIC_HEALTH_STATISTICS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_HEALTH_EX2 {}
impl Clone for FABRIC_APPLICATION_HEALTH_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_EX2")
            .field("HealthStatistics", &self.HealthStatistics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStatistics == other.HealthStatistics && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_EX2 {}
impl Default for FABRIC_APPLICATION_HEALTH_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_HEALTH_POLICY {
    pub ConsiderWarningAsError: windows::Win32::Foundation::BOOLEAN,
    pub MaxPercentUnhealthyDeployedApplications: u8,
    pub DefaultServiceTypeHealthPolicy: *const FABRIC_SERVICE_TYPE_HEALTH_POLICY,
    pub ServiceTypeHealthPolicyMap: *const FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_HEALTH_POLICY {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_HEALTH_POLICY {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_POLICY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_POLICY")
            .field("ConsiderWarningAsError", &self.ConsiderWarningAsError)
            .field(
                "MaxPercentUnhealthyDeployedApplications",
                &self.MaxPercentUnhealthyDeployedApplications,
            )
            .field(
                "DefaultServiceTypeHealthPolicy",
                &self.DefaultServiceTypeHealthPolicy,
            )
            .field(
                "ServiceTypeHealthPolicyMap",
                &self.ServiceTypeHealthPolicyMap,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_POLICY {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_HEALTH_POLICY {
    fn eq(&self, other: &Self) -> bool {
        self.ConsiderWarningAsError == other.ConsiderWarningAsError
            && self.MaxPercentUnhealthyDeployedApplications
                == other.MaxPercentUnhealthyDeployedApplications
            && self.DefaultServiceTypeHealthPolicy == other.DefaultServiceTypeHealthPolicy
            && self.ServiceTypeHealthPolicyMap == other.ServiceTypeHealthPolicyMap
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_HEALTH_POLICY {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_HEALTH_POLICY {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_HEALTH_POLICY_MAP {
    pub Count: u32,
    pub Items: *mut FABRIC_APPLICATION_HEALTH_POLICY_MAP_ITEM,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_HEALTH_POLICY_MAP {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_HEALTH_POLICY_MAP {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_POLICY_MAP {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_POLICY_MAP")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_POLICY_MAP {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_HEALTH_POLICY_MAP {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_HEALTH_POLICY_MAP {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_HEALTH_POLICY_MAP {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_HEALTH_POLICY_MAP_ITEM {
    pub ApplicationName: *mut u16,
    pub HealthPolicy: *const FABRIC_APPLICATION_HEALTH_POLICY,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_HEALTH_POLICY_MAP_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_HEALTH_POLICY_MAP_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_POLICY_MAP_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_POLICY_MAP_ITEM")
            .field("ApplicationName", &self.ApplicationName)
            .field("HealthPolicy", &self.HealthPolicy)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_POLICY_MAP_ITEM {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_HEALTH_POLICY_MAP_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName && self.HealthPolicy == other.HealthPolicy
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_HEALTH_POLICY_MAP_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_HEALTH_POLICY_MAP_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub HealthPolicy: *const FABRIC_APPLICATION_HEALTH_POLICY,
    pub EventsFilter: *const FABRIC_HEALTH_EVENTS_FILTER,
    pub ServicesFilter: *const FABRIC_SERVICE_HEALTH_STATES_FILTER,
    pub DeployedApplicationsFilter: *const FABRIC_DEPLOYED_APPLICATION_HEALTH_STATES_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("HealthPolicy", &self.HealthPolicy)
            .field("EventsFilter", &self.EventsFilter)
            .field("ServicesFilter", &self.ServicesFilter)
            .field(
                "DeployedApplicationsFilter",
                &self.DeployedApplicationsFilter,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.HealthPolicy == other.HealthPolicy
            && self.EventsFilter == other.EventsFilter
            && self.ServicesFilter == other.ServicesFilter
            && self.DeployedApplicationsFilter == other.DeployedApplicationsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    pub HealthStatisticsFilter: *const FABRIC_APPLICATION_HEALTH_STATISTICS_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1")
            .field("HealthStatisticsFilter", &self.HealthStatisticsFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStatisticsFilter == other.HealthStatisticsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_HEALTH_REPORT {
    pub ApplicationName: *mut u16,
    pub HealthInformation: *const FABRIC_HEALTH_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_HEALTH_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_REPORT")
            .field("ApplicationName", &self.ApplicationName)
            .field("HealthInformation", &self.HealthInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_HEALTH_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.HealthInformation == other.HealthInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_HEALTH_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_STATE {
    pub ApplicationName: *mut u16,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_HEALTH_STATE {}
impl Clone for FABRIC_APPLICATION_HEALTH_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_STATE")
            .field("ApplicationName", &self.ApplicationName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_STATE {}
impl Default for FABRIC_APPLICATION_HEALTH_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_STATES_FILTER {
    pub HealthStateFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_HEALTH_STATES_FILTER {}
impl Clone for FABRIC_APPLICATION_HEALTH_STATES_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_STATES_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_STATES_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_STATES_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_STATES_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_STATES_FILTER {}
impl Default for FABRIC_APPLICATION_HEALTH_STATES_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_STATE_CHUNK {
    pub ApplicationName: *mut u16,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub ServiceHealthStateChunks: *const FABRIC_SERVICE_HEALTH_STATE_CHUNK_LIST,
    pub DeployedApplicationHealthStateChunks:
        *const FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_HEALTH_STATE_CHUNK {}
impl Clone for FABRIC_APPLICATION_HEALTH_STATE_CHUNK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_STATE_CHUNK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_STATE_CHUNK")
            .field("ApplicationName", &self.ApplicationName)
            .field("HealthState", &self.HealthState)
            .field("ServiceHealthStateChunks", &self.ServiceHealthStateChunks)
            .field(
                "DeployedApplicationHealthStateChunks",
                &self.DeployedApplicationHealthStateChunks,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_STATE_CHUNK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_STATE_CHUNK {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.HealthState == other.HealthState
            && self.ServiceHealthStateChunks == other.ServiceHealthStateChunks
            && self.DeployedApplicationHealthStateChunks
                == other.DeployedApplicationHealthStateChunks
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_STATE_CHUNK {}
impl Default for FABRIC_APPLICATION_HEALTH_STATE_CHUNK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_STATE_CHUNK_EX1 {
    pub ApplicationTypeName: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_EX1 {}
impl Clone for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_STATE_CHUNK_EX1")
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeName == other.ApplicationTypeName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_EX1 {}
impl Default for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_APPLICATION_HEALTH_STATE_CHUNK,
    pub TotalCount: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_LIST {}
impl Clone for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_STATE_CHUNK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .field("TotalCount", &self.TotalCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count
            && self.Items == other.Items
            && self.TotalCount == other.TotalCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_LIST {}
impl Default for FABRIC_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_STATE_FILTER {
    pub HealthStateFilter: u32,
    pub ApplicationNameFilter: *mut u16,
    pub ServiceFilters: *const FABRIC_SERVICE_HEALTH_STATE_FILTER_LIST,
    pub DeployedApplicationFilters: *const FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_HEALTH_STATE_FILTER {}
impl Clone for FABRIC_APPLICATION_HEALTH_STATE_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_STATE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_STATE_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("ApplicationNameFilter", &self.ApplicationNameFilter)
            .field("ServiceFilters", &self.ServiceFilters)
            .field(
                "DeployedApplicationFilters",
                &self.DeployedApplicationFilters,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_STATE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_STATE_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter
            && self.ApplicationNameFilter == other.ApplicationNameFilter
            && self.ServiceFilters == other.ServiceFilters
            && self.DeployedApplicationFilters == other.DeployedApplicationFilters
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_STATE_FILTER {}
impl Default for FABRIC_APPLICATION_HEALTH_STATE_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_STATE_FILTER_EX1 {
    pub ApplicationTypeNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_HEALTH_STATE_FILTER_EX1 {}
impl Clone for FABRIC_APPLICATION_HEALTH_STATE_FILTER_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_STATE_FILTER_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_STATE_FILTER_EX1")
            .field("ApplicationTypeNameFilter", &self.ApplicationTypeNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_STATE_FILTER_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_STATE_FILTER_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeNameFilter == other.ApplicationTypeNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_STATE_FILTER_EX1 {}
impl Default for FABRIC_APPLICATION_HEALTH_STATE_FILTER_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_STATE_FILTER_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_APPLICATION_HEALTH_STATE_FILTER,
}
impl Copy for FABRIC_APPLICATION_HEALTH_STATE_FILTER_LIST {}
impl Clone for FABRIC_APPLICATION_HEALTH_STATE_FILTER_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_STATE_FILTER_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_STATE_FILTER_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_STATE_FILTER_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_STATE_FILTER_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_STATE_FILTER_LIST {}
impl Default for FABRIC_APPLICATION_HEALTH_STATE_FILTER_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_HEALTH_STATE_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_APPLICATION_HEALTH_STATE,
}
impl Copy for FABRIC_APPLICATION_HEALTH_STATE_LIST {}
impl Clone for FABRIC_APPLICATION_HEALTH_STATE_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_STATE_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_STATE_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_STATE_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_HEALTH_STATE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_APPLICATION_HEALTH_STATE_LIST {}
impl Default for FABRIC_APPLICATION_HEALTH_STATE_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_HEALTH_STATISTICS_FILTER {
    pub ExcludeHealthStatistics: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_HEALTH_STATISTICS_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_HEALTH_STATISTICS_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_HEALTH_STATISTICS_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_HEALTH_STATISTICS_FILTER")
            .field("ExcludeHealthStatistics", &self.ExcludeHealthStatistics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_HEALTH_STATISTICS_FILTER {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_HEALTH_STATISTICS_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.ExcludeHealthStatistics == other.ExcludeHealthStatistics
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_HEALTH_STATISTICS_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_HEALTH_STATISTICS_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_LOAD_INFORMATION {
    pub Name: windows_core::PCWSTR,
    pub MinimumNodes: u32,
    pub MaximumNodes: u32,
    pub NodeCount: u32,
    pub ApplicationLoadMetricInformation: *const FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_LOAD_INFORMATION {}
impl Clone for FABRIC_APPLICATION_LOAD_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_LOAD_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_LOAD_INFORMATION")
            .field("Name", &self.Name)
            .field("MinimumNodes", &self.MinimumNodes)
            .field("MaximumNodes", &self.MaximumNodes)
            .field("NodeCount", &self.NodeCount)
            .field(
                "ApplicationLoadMetricInformation",
                &self.ApplicationLoadMetricInformation,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_LOAD_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_LOAD_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.MinimumNodes == other.MinimumNodes
            && self.MaximumNodes == other.MaximumNodes
            && self.NodeCount == other.NodeCount
            && self.ApplicationLoadMetricInformation == other.ApplicationLoadMetricInformation
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_LOAD_INFORMATION {}
impl Default for FABRIC_APPLICATION_LOAD_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    pub ApplicationName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_LOAD_METRIC_INFORMATION {
    pub Name: windows_core::PCWSTR,
    pub ReservationCapacity: i64,
    pub ApplicationCapacity: i64,
    pub ApplicationLoad: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION {}
impl Clone for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_LOAD_METRIC_INFORMATION")
            .field("Name", &self.Name)
            .field("ReservationCapacity", &self.ReservationCapacity)
            .field("ApplicationCapacity", &self.ApplicationCapacity)
            .field("ApplicationLoad", &self.ApplicationLoad)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.ReservationCapacity == other.ReservationCapacity
            && self.ApplicationCapacity == other.ApplicationCapacity
            && self.ApplicationLoad == other.ApplicationLoad
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION {}
impl Default for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST {
    pub Count: u32,
    pub LoadMetrics: *mut FABRIC_APPLICATION_LOAD_METRIC_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST {}
impl Clone for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST")
            .field("Count", &self.Count)
            .field("LoadMetrics", &self.LoadMetrics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count
            && self.LoadMetrics == other.LoadMetrics
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST {}
impl Default for FABRIC_APPLICATION_LOAD_METRIC_INFORMATION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_METRIC_DESCRIPTION {
    pub Name: windows_core::PCWSTR,
    pub NodeReservationCapacity: u32,
    pub MaximumNodeCapacity: u32,
    pub TotalApplicationCapacity: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_METRIC_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_METRIC_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_METRIC_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_METRIC_DESCRIPTION")
            .field("Name", &self.Name)
            .field("NodeReservationCapacity", &self.NodeReservationCapacity)
            .field("MaximumNodeCapacity", &self.MaximumNodeCapacity)
            .field("TotalApplicationCapacity", &self.TotalApplicationCapacity)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_METRIC_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_METRIC_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.NodeReservationCapacity == other.NodeReservationCapacity
            && self.MaximumNodeCapacity == other.MaximumNodeCapacity
            && self.TotalApplicationCapacity == other.TotalApplicationCapacity
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_METRIC_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_METRIC_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_METRIC_LIST {
    pub Count: u32,
    pub Capacities: *mut FABRIC_APPLICATION_METRIC_DESCRIPTION,
}
impl Copy for FABRIC_APPLICATION_METRIC_LIST {}
impl Clone for FABRIC_APPLICATION_METRIC_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_METRIC_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_METRIC_LIST")
            .field("Count", &self.Count)
            .field("Capacities", &self.Capacities)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_METRIC_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_METRIC_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Capacities == other.Capacities
    }
}
impl Eq for FABRIC_APPLICATION_METRIC_LIST {}
impl Default for FABRIC_APPLICATION_METRIC_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION {
    pub ServiceName: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION")
            .field("ServiceName", &self.ServiceName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_NAME_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_NAME_QUERY_RESULT {
    pub ApplicationName: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_NAME_QUERY_RESULT {}
impl Clone for FABRIC_APPLICATION_NAME_QUERY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_NAME_QUERY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_NAME_QUERY_RESULT")
            .field("ApplicationName", &self.ApplicationName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_NAME_QUERY_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_NAME_QUERY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_NAME_QUERY_RESULT {}
impl Default for FABRIC_APPLICATION_NAME_QUERY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub PagingDescription: *const FABRIC_QUERY_PAGING_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("PagingDescription", &self.PagingDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.PagingDescription == other.PagingDescription
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_NETWORK_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM {
    pub NetworkName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM")
            .field("NetworkName", &self.NetworkName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkName == other.NetworkName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM {}
impl Default for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_APPLICATION_NETWORK_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST {}
impl Clone for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST {}
impl Default for FABRIC_APPLICATION_NETWORK_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_PARAMETER {
    pub Name: windows_core::PCWSTR,
    pub Value: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_PARAMETER {}
impl Clone for FABRIC_APPLICATION_PARAMETER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_PARAMETER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_PARAMETER")
            .field("Name", &self.Name)
            .field("Value", &self.Value)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_PARAMETER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_PARAMETER {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name && self.Value == other.Value && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_PARAMETER {}
impl Default for FABRIC_APPLICATION_PARAMETER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_PARAMETER_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_APPLICATION_PARAMETER,
}
impl Copy for FABRIC_APPLICATION_PARAMETER_LIST {}
impl Clone for FABRIC_APPLICATION_PARAMETER_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_PARAMETER_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_PARAMETER_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_PARAMETER_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_PARAMETER_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_APPLICATION_PARAMETER_LIST {}
impl Default for FABRIC_APPLICATION_PARAMETER_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION {
    pub Users: *const FABRIC_SECURITY_USER_DESCRIPTION_LIST,
    pub Groups: *const FABRIC_SECURITY_GROUP_DESCRIPTION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION")
            .field("Users", &self.Users)
            .field("Groups", &self.Groups)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Users == other.Users && self.Groups == other.Groups && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_QUERY_DESCRIPTION {
    pub ApplicationNameFilter: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_QUERY_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_QUERY_DESCRIPTION")
            .field("ApplicationNameFilter", &self.ApplicationNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationNameFilter == other.ApplicationNameFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_QUERY_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_QUERY_DESCRIPTION_EX1 {
    pub ContinuationToken: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX1 {}
impl Clone for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_QUERY_DESCRIPTION_EX1")
            .field("ContinuationToken", &self.ContinuationToken)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ContinuationToken == other.ContinuationToken && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX1 {}
impl Default for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_QUERY_DESCRIPTION_EX2 {
    pub ApplicationTypeNameFilter: windows_core::PCWSTR,
    pub ExcludeApplicationParameters: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_QUERY_DESCRIPTION_EX2")
            .field("ApplicationTypeNameFilter", &self.ApplicationTypeNameFilter)
            .field(
                "ExcludeApplicationParameters",
                &self.ExcludeApplicationParameters,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeNameFilter == other.ApplicationTypeNameFilter
            && self.ExcludeApplicationParameters == other.ExcludeApplicationParameters
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_QUERY_DESCRIPTION_EX3 {
    pub ApplicationDefinitionKindFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX3 {}
impl Clone for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_QUERY_DESCRIPTION_EX3")
            .field(
                "ApplicationDefinitionKindFilter",
                &self.ApplicationDefinitionKindFilter,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationDefinitionKindFilter == other.ApplicationDefinitionKindFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX3 {}
impl Default for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_QUERY_DESCRIPTION_EX4 {
    pub MaxResults: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX4 {}
impl Clone for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX4 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_QUERY_DESCRIPTION_EX4")
            .field("MaxResults", &self.MaxResults)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX4 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX4 {
    fn eq(&self, other: &Self) -> bool {
        self.MaxResults == other.MaxResults && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX4 {}
impl Default for FABRIC_APPLICATION_QUERY_DESCRIPTION_EX4 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_QUERY_RESULT_ITEM {
    pub ApplicationName: *mut u16,
    pub ApplicationTypeName: windows_core::PCWSTR,
    pub ApplicationTypeVersion: windows_core::PCWSTR,
    pub Status: FABRIC_APPLICATION_STATUS,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub ApplicationParameters: *mut FABRIC_APPLICATION_PARAMETER_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_APPLICATION_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_QUERY_RESULT_ITEM")
            .field("ApplicationName", &self.ApplicationName)
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field("ApplicationTypeVersion", &self.ApplicationTypeVersion)
            .field("Status", &self.Status)
            .field("HealthState", &self.HealthState)
            .field("ApplicationParameters", &self.ApplicationParameters)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ApplicationTypeName == other.ApplicationTypeName
            && self.ApplicationTypeVersion == other.ApplicationTypeVersion
            && self.Status == other.Status
            && self.HealthState == other.HealthState
            && self.ApplicationParameters == other.ApplicationParameters
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_QUERY_RESULT_ITEM {}
impl Default for FABRIC_APPLICATION_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX1 {
    pub UpgradeTypeVersion: windows_core::PCWSTR,
    pub UpgradeParameters: *mut FABRIC_APPLICATION_PARAMETER_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX1")
            .field("UpgradeTypeVersion", &self.UpgradeTypeVersion)
            .field("UpgradeParameters", &self.UpgradeParameters)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UpgradeTypeVersion == other.UpgradeTypeVersion
            && self.UpgradeParameters == other.UpgradeParameters
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    pub ApplicationDefinitionKind: FABRIC_APPLICATION_DEFINITION_KIND,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX2 {}
impl Clone for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX2")
            .field("ApplicationDefinitionKind", &self.ApplicationDefinitionKind)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationDefinitionKind == other.ApplicationDefinitionKind
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX2 {}
impl Default for FABRIC_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_APPLICATION_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_APPLICATION_QUERY_RESULT_LIST {}
impl Clone for FABRIC_APPLICATION_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_APPLICATION_QUERY_RESULT_LIST {}
impl Default for FABRIC_APPLICATION_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_TYPE_APPLICATIONS_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub ApplicationTypeName: windows_core::PCWSTR,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub TotalCount: u32,
    pub MaxPercentUnhealthyApplications: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_TYPE_APPLICATIONS_HEALTH_EVALUATION {}
impl Clone for FABRIC_APPLICATION_TYPE_APPLICATIONS_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_APPLICATIONS_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_TYPE_APPLICATIONS_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("TotalCount", &self.TotalCount)
            .field(
                "MaxPercentUnhealthyApplications",
                &self.MaxPercentUnhealthyApplications,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_APPLICATIONS_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_TYPE_APPLICATIONS_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.ApplicationTypeName == other.ApplicationTypeName
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.TotalCount == other.TotalCount
            && self.MaxPercentUnhealthyApplications == other.MaxPercentUnhealthyApplications
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_TYPE_APPLICATIONS_HEALTH_EVALUATION {}
impl Default for FABRIC_APPLICATION_TYPE_APPLICATIONS_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP {
    pub Count: u32,
    pub Items: *const FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP_ITEM,
}
impl Copy for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP {}
impl Clone for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP {}
impl Default for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP_ITEM {
    pub ApplicationTypeName: windows_core::PCWSTR,
    pub MaxPercentUnhealthyApplications: u8,
}
impl Copy for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP_ITEM {}
impl Clone for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP_ITEM")
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field(
                "MaxPercentUnhealthyApplications",
                &self.MaxPercentUnhealthyApplications,
            )
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeName == other.ApplicationTypeName
            && self.MaxPercentUnhealthyApplications == other.MaxPercentUnhealthyApplications
    }
}
impl Eq for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP_ITEM {}
impl Default for FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    pub ApplicationTypeNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION")
            .field("ApplicationTypeNameFilter", &self.ApplicationTypeNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeNameFilter == other.ApplicationTypeNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM {
    pub ApplicationTypeName: windows_core::PCWSTR,
    pub ApplicationTypeVersion: windows_core::PCWSTR,
    pub DefaultParameters: *mut FABRIC_APPLICATION_PARAMETER_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM")
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field("ApplicationTypeVersion", &self.ApplicationTypeVersion)
            .field("DefaultParameters", &self.DefaultParameters)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeName == other.ApplicationTypeName
            && self.ApplicationTypeVersion == other.ApplicationTypeVersion
            && self.DefaultParameters == other.DefaultParameters
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX1 {
    pub Status: FABRIC_APPLICATION_TYPE_STATUS,
    pub StatusDetails: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX1")
            .field("Status", &self.Status)
            .field("StatusDetails", &self.StatusDetails)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.Status == other.Status
            && self.StatusDetails == other.StatusDetails
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX2 {
    pub ApplicationTypeDefinitionKind: FABRIC_APPLICATION_TYPE_DEFINITION_KIND,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX2 {}
impl Clone for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX2")
            .field(
                "ApplicationTypeDefinitionKind",
                &self.ApplicationTypeDefinitionKind,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeDefinitionKind == other.ApplicationTypeDefinitionKind
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX2 {}
impl Default for FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_APPLICATION_TYPE_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST {}
impl Clone for FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST {}
impl Default for FABRIC_APPLICATION_TYPE_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_UPDATE_DESCRIPTION {
    pub Flags: u32,
    pub ApplicationName: *mut u16,
    pub RemoveApplicationCapacity: windows::Win32::Foundation::BOOLEAN,
    pub MaximumNodes: u32,
    pub MinimumNodes: u32,
    pub Metrics: *const FABRIC_APPLICATION_METRIC_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_UPDATE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_UPDATE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_UPDATE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_UPDATE_DESCRIPTION")
            .field("Flags", &self.Flags)
            .field("ApplicationName", &self.ApplicationName)
            .field("RemoveApplicationCapacity", &self.RemoveApplicationCapacity)
            .field("MaximumNodes", &self.MaximumNodes)
            .field("MinimumNodes", &self.MinimumNodes)
            .field("Metrics", &self.Metrics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_UPDATE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_UPDATE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags
            && self.ApplicationName == other.ApplicationName
            && self.RemoveApplicationCapacity == other.RemoveApplicationCapacity
            && self.MaximumNodes == other.MaximumNodes
            && self.MinimumNodes == other.MinimumNodes
            && self.Metrics == other.Metrics
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_UPDATE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_UPDATE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_UPGRADE_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub TargetApplicationTypeVersion: windows_core::PCWSTR,
    pub ApplicationParameters: *mut FABRIC_APPLICATION_PARAMETER_LIST,
    pub UpgradeKind: FABRIC_APPLICATION_UPGRADE_KIND,
    pub UpgradePolicyDescription: *mut core::ffi::c_void,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_UPGRADE_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_UPGRADE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_UPGRADE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_UPGRADE_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field(
                "TargetApplicationTypeVersion",
                &self.TargetApplicationTypeVersion,
            )
            .field("ApplicationParameters", &self.ApplicationParameters)
            .field("UpgradeKind", &self.UpgradeKind)
            .field("UpgradePolicyDescription", &self.UpgradePolicyDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_UPGRADE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_UPGRADE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.TargetApplicationTypeVersion == other.TargetApplicationTypeVersion
            && self.ApplicationParameters == other.ApplicationParameters
            && self.UpgradeKind == other.UpgradeKind
            && self.UpgradePolicyDescription == other.UpgradePolicyDescription
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_UPGRADE_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_UPGRADE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_UPGRADE_PROGRESS {
    pub UpgradeDescription: *const FABRIC_APPLICATION_UPGRADE_DESCRIPTION,
    pub UpgradeState: FABRIC_APPLICATION_UPGRADE_STATE,
    pub UpgradeMode: FABRIC_ROLLING_UPGRADE_MODE,
    pub NextUpgradeDomain: windows_core::PCWSTR,
    pub UpgradeDomains: *const FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST,
    pub UpgradeDurationInSeconds: u32,
    pub CurrentUpgradeDomainDurationInSeconds: u32,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub CurrentUpgradeDomainProgress: *const FABRIC_UPGRADE_DOMAIN_PROGRESS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_UPGRADE_PROGRESS {}
impl Clone for FABRIC_APPLICATION_UPGRADE_PROGRESS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_UPGRADE_PROGRESS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_UPGRADE_PROGRESS")
            .field("UpgradeDescription", &self.UpgradeDescription)
            .field("UpgradeState", &self.UpgradeState)
            .field("UpgradeMode", &self.UpgradeMode)
            .field("NextUpgradeDomain", &self.NextUpgradeDomain)
            .field("UpgradeDomains", &self.UpgradeDomains)
            .field("UpgradeDurationInSeconds", &self.UpgradeDurationInSeconds)
            .field(
                "CurrentUpgradeDomainDurationInSeconds",
                &self.CurrentUpgradeDomainDurationInSeconds,
            )
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field(
                "CurrentUpgradeDomainProgress",
                &self.CurrentUpgradeDomainProgress,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_UPGRADE_PROGRESS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_UPGRADE_PROGRESS {
    fn eq(&self, other: &Self) -> bool {
        self.UpgradeDescription == other.UpgradeDescription
            && self.UpgradeState == other.UpgradeState
            && self.UpgradeMode == other.UpgradeMode
            && self.NextUpgradeDomain == other.NextUpgradeDomain
            && self.UpgradeDomains == other.UpgradeDomains
            && self.UpgradeDurationInSeconds == other.UpgradeDurationInSeconds
            && self.CurrentUpgradeDomainDurationInSeconds
                == other.CurrentUpgradeDomainDurationInSeconds
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.CurrentUpgradeDomainProgress == other.CurrentUpgradeDomainProgress
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_UPGRADE_PROGRESS {}
impl Default for FABRIC_APPLICATION_UPGRADE_PROGRESS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_APPLICATION_UPGRADE_PROGRESS_EX1 {
    pub StartTimestampUtc: windows::Win32::Foundation::FILETIME,
    pub FailureTimestampUtc: windows::Win32::Foundation::FILETIME,
    pub FailureReason: FABRIC_UPGRADE_FAILURE_REASON,
    pub UpgradeDomainProgressAtFailure: *const FABRIC_UPGRADE_DOMAIN_PROGRESS,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_UPGRADE_PROGRESS_EX1")
            .field("StartTimestampUtc", &self.StartTimestampUtc)
            .field("FailureTimestampUtc", &self.FailureTimestampUtc)
            .field("FailureReason", &self.FailureReason)
            .field(
                "UpgradeDomainProgressAtFailure",
                &self.UpgradeDomainProgressAtFailure,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.StartTimestampUtc == other.StartTimestampUtc
            && self.FailureTimestampUtc == other.FailureTimestampUtc
            && self.FailureReason == other.FailureReason
            && self.UpgradeDomainProgressAtFailure == other.UpgradeDomainProgressAtFailure
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_UPGRADE_PROGRESS_EX2 {
    pub UpgradeStatusDetails: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX2 {}
impl Clone for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_UPGRADE_PROGRESS_EX2")
            .field("UpgradeStatusDetails", &self.UpgradeStatusDetails)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.UpgradeStatusDetails == other.UpgradeStatusDetails && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX2 {}
impl Default for FABRIC_APPLICATION_UPGRADE_PROGRESS_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub UpgradeKind: FABRIC_APPLICATION_UPGRADE_KIND,
    pub UpdateFlags: u32,
    pub UpgradePolicyDescription: *mut core::ffi::c_void,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION {}
impl Clone for FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("UpgradeKind", &self.UpgradeKind)
            .field("UpdateFlags", &self.UpdateFlags)
            .field("UpgradePolicyDescription", &self.UpgradePolicyDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.UpgradeKind == other.UpgradeKind
            && self.UpdateFlags == other.UpdateFlags
            && self.UpgradePolicyDescription == other.UpgradePolicyDescription
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION {}
impl Default for FABRIC_APPLICATION_UPGRADE_UPDATE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION {
    pub OperationId: windows_core::GUID,
    pub Force: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION")
            .field("OperationId", &self.OperationId)
            .field("Force", &self.Force)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.OperationId == other.OperationId
            && self.Force == other.Force
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CANCEL_TEST_COMMAND_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_DESCRIPTION {
    pub ChaosParameters: *const FABRIC_CHAOS_PARAMETERS,
    pub Status: FABRIC_CHAOS_STATUS,
    pub ScheduleStatus: FABRIC_CHAOS_SCHEDULE_STATUS,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_DESCRIPTION")
            .field("ChaosParameters", &self.ChaosParameters)
            .field("Status", &self.Status)
            .field("ScheduleStatus", &self.ScheduleStatus)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ChaosParameters == other.ChaosParameters
            && self.Status == other.Status
            && self.ScheduleStatus == other.ScheduleStatus
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CHAOS_EVENT {
    pub Kind: FABRIC_CHAOS_EVENT_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CHAOS_EVENT {}
impl Clone for FABRIC_CHAOS_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CHAOS_EVENT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_EVENT")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CHAOS_EVENT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CHAOS_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_CHAOS_EVENT {}
impl Default for FABRIC_CHAOS_EVENT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CHAOS_EVENTS_SEGMENT {
    pub ContinuationToken: windows_core::PCWSTR,
    pub History: *const FABRIC_CHAOS_EVENT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CHAOS_EVENTS_SEGMENT {}
impl Clone for FABRIC_CHAOS_EVENTS_SEGMENT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CHAOS_EVENTS_SEGMENT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_EVENTS_SEGMENT")
            .field("ContinuationToken", &self.ContinuationToken)
            .field("History", &self.History)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CHAOS_EVENTS_SEGMENT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CHAOS_EVENTS_SEGMENT {
    fn eq(&self, other: &Self) -> bool {
        self.ContinuationToken == other.ContinuationToken
            && self.History == other.History
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CHAOS_EVENTS_SEGMENT {}
impl Default for FABRIC_CHAOS_EVENTS_SEGMENT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION {
    pub Filter: *const FABRIC_CHAOS_EVENTS_SEGMENT_FILTER,
    pub PagingDescription: *const FABRIC_QUERY_PAGING_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION")
            .field("Filter", &self.Filter)
            .field("PagingDescription", &self.PagingDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Filter == other.Filter
            && self.PagingDescription == other.PagingDescription
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_EVENTS_SEGMENT_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_EVENTS_SEGMENT_FILTER {
    pub StartTimeUtc: windows::Win32::Foundation::FILETIME,
    pub EndTimeUtc: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_EVENTS_SEGMENT_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_EVENTS_SEGMENT_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_EVENTS_SEGMENT_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_EVENTS_SEGMENT_FILTER")
            .field("StartTimeUtc", &self.StartTimeUtc)
            .field("EndTimeUtc", &self.EndTimeUtc)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_EVENTS_SEGMENT_FILTER {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_EVENTS_SEGMENT_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.StartTimeUtc == other.StartTimeUtc
            && self.EndTimeUtc == other.EndTimeUtc
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_EVENTS_SEGMENT_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_EVENTS_SEGMENT_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CHAOS_EVENT_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_CHAOS_EVENT,
}
impl Copy for FABRIC_CHAOS_EVENT_LIST {}
impl Clone for FABRIC_CHAOS_EVENT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CHAOS_EVENT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_EVENT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CHAOS_EVENT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CHAOS_EVENT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_CHAOS_EVENT_LIST {}
impl Default for FABRIC_CHAOS_EVENT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_PARAMETERS {
    pub MaxClusterStabilizationTimeoutInSeconds: u32,
    pub MaxConcurrentFaults: u32,
    pub EnableMoveReplicaFaults: windows::Win32::Foundation::BOOLEAN,
    pub TimeToRunInSeconds: u64,
    pub WaitTimeBetweenIterationsInSeconds: u32,
    pub WaitTimeBetweenFaultsInSeconds: u32,
    pub Context: *const FABRIC_EVENT_CONTEXT_MAP,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_PARAMETERS {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_PARAMETERS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_PARAMETERS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_PARAMETERS")
            .field(
                "MaxClusterStabilizationTimeoutInSeconds",
                &self.MaxClusterStabilizationTimeoutInSeconds,
            )
            .field("MaxConcurrentFaults", &self.MaxConcurrentFaults)
            .field("EnableMoveReplicaFaults", &self.EnableMoveReplicaFaults)
            .field("TimeToRunInSeconds", &self.TimeToRunInSeconds)
            .field(
                "WaitTimeBetweenIterationsInSeconds",
                &self.WaitTimeBetweenIterationsInSeconds,
            )
            .field(
                "WaitTimeBetweenFaultsInSeconds",
                &self.WaitTimeBetweenFaultsInSeconds,
            )
            .field("Context", &self.Context)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_PARAMETERS {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_PARAMETERS {
    fn eq(&self, other: &Self) -> bool {
        self.MaxClusterStabilizationTimeoutInSeconds
            == other.MaxClusterStabilizationTimeoutInSeconds
            && self.MaxConcurrentFaults == other.MaxConcurrentFaults
            && self.EnableMoveReplicaFaults == other.EnableMoveReplicaFaults
            && self.TimeToRunInSeconds == other.TimeToRunInSeconds
            && self.WaitTimeBetweenIterationsInSeconds == other.WaitTimeBetweenIterationsInSeconds
            && self.WaitTimeBetweenFaultsInSeconds == other.WaitTimeBetweenFaultsInSeconds
            && self.Context == other.Context
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_PARAMETERS {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_PARAMETERS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_PARAMETERS_EX1 {
    pub ClusterHealthPolicy: *const FABRIC_CLUSTER_HEALTH_POLICY,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_PARAMETERS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_PARAMETERS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_PARAMETERS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_PARAMETERS_EX1")
            .field("ClusterHealthPolicy", &self.ClusterHealthPolicy)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_PARAMETERS_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_PARAMETERS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ClusterHealthPolicy == other.ClusterHealthPolicy && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_PARAMETERS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_PARAMETERS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CHAOS_PARAMETERS_EX2 {
    pub ChaosTargetFilter: *const FABRIC_CHAOS_TARGET_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CHAOS_PARAMETERS_EX2 {}
impl Clone for FABRIC_CHAOS_PARAMETERS_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CHAOS_PARAMETERS_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_PARAMETERS_EX2")
            .field("ChaosTargetFilter", &self.ChaosTargetFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CHAOS_PARAMETERS_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CHAOS_PARAMETERS_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.ChaosTargetFilter == other.ChaosTargetFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CHAOS_PARAMETERS_EX2 {}
impl Default for FABRIC_CHAOS_PARAMETERS_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_REPORT {
    pub ChaosParameters: *mut FABRIC_CHAOS_PARAMETERS,
    pub Status: FABRIC_CHAOS_STATUS,
    pub ContinuationToken: windows_core::PCWSTR,
    pub History: *const FABRIC_CHAOS_EVENT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_REPORT")
            .field("ChaosParameters", &self.ChaosParameters)
            .field("Status", &self.Status)
            .field("ContinuationToken", &self.ContinuationToken)
            .field("History", &self.History)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.ChaosParameters == other.ChaosParameters
            && self.Status == other.Status
            && self.ContinuationToken == other.ContinuationToken
            && self.History == other.History
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_REPORT_FILTER {
    pub StartTimeUtc: windows::Win32::Foundation::FILETIME,
    pub EndTimeUtc: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_REPORT_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_REPORT_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_REPORT_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_REPORT_FILTER")
            .field("StartTimeUtc", &self.StartTimeUtc)
            .field("EndTimeUtc", &self.EndTimeUtc)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_REPORT_FILTER {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_REPORT_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.StartTimeUtc == other.StartTimeUtc
            && self.EndTimeUtc == other.EndTimeUtc
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_REPORT_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_REPORT_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_SCHEDULE {
    pub StartDate: windows::Win32::Foundation::FILETIME,
    pub ExpiryDate: windows::Win32::Foundation::FILETIME,
    pub ChaosParametersMap: *const FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP,
    pub Jobs: *const FABRIC_CHAOS_SCHEDULE_JOB_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_SCHEDULE {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_SCHEDULE {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SCHEDULE")
            .field("StartDate", &self.StartDate)
            .field("ExpiryDate", &self.ExpiryDate)
            .field("ChaosParametersMap", &self.ChaosParametersMap)
            .field("Jobs", &self.Jobs)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_SCHEDULE {
    fn eq(&self, other: &Self) -> bool {
        self.StartDate == other.StartDate
            && self.ExpiryDate == other.ExpiryDate
            && self.ChaosParametersMap == other.ChaosParametersMap
            && self.Jobs == other.Jobs
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_SCHEDULE {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_SCHEDULE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP {
    pub Count: u32,
    pub Items: *mut FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP_ITEM,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP_ITEM {
    pub Name: windows_core::PCWSTR,
    pub Parameters: *const FABRIC_CHAOS_PARAMETERS,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP_ITEM")
            .field("Name", &self.Name)
            .field("Parameters", &self.Parameters)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP_ITEM {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name && self.Parameters == other.Parameters
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_SCHEDULE_CHAOS_PARAMETERS_MAP_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_SCHEDULE_DESCRIPTION {
    pub Version: u32,
    pub Schedule: *const FABRIC_CHAOS_SCHEDULE,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_SCHEDULE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_SCHEDULE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SCHEDULE_DESCRIPTION")
            .field("Version", &self.Version)
            .field("Schedule", &self.Schedule)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_SCHEDULE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Version == other.Version
            && self.Schedule == other.Schedule
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_SCHEDULE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_SCHEDULE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_SCHEDULE_JOB {
    pub ChaosParameters: windows_core::PCWSTR,
    pub Days: *const FABRIC_CHAOS_SCHEDULE_JOB_ACTIVE_DAYS,
    pub Times: *const FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_SCHEDULE_JOB {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_SCHEDULE_JOB {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE_JOB {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SCHEDULE_JOB")
            .field("ChaosParameters", &self.ChaosParameters)
            .field("Days", &self.Days)
            .field("Times", &self.Times)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE_JOB {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_SCHEDULE_JOB {
    fn eq(&self, other: &Self) -> bool {
        self.ChaosParameters == other.ChaosParameters
            && self.Days == other.Days
            && self.Times == other.Times
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_SCHEDULE_JOB {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_SCHEDULE_JOB {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_SCHEDULE_JOB_ACTIVE_DAYS {
    pub Sunday: windows::Win32::Foundation::BOOLEAN,
    pub Monday: windows::Win32::Foundation::BOOLEAN,
    pub Tuesday: windows::Win32::Foundation::BOOLEAN,
    pub Wednesday: windows::Win32::Foundation::BOOLEAN,
    pub Thursday: windows::Win32::Foundation::BOOLEAN,
    pub Friday: windows::Win32::Foundation::BOOLEAN,
    pub Saturday: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_SCHEDULE_JOB_ACTIVE_DAYS {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_SCHEDULE_JOB_ACTIVE_DAYS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE_JOB_ACTIVE_DAYS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SCHEDULE_JOB_ACTIVE_DAYS")
            .field("Sunday", &self.Sunday)
            .field("Monday", &self.Monday)
            .field("Tuesday", &self.Tuesday)
            .field("Wednesday", &self.Wednesday)
            .field("Thursday", &self.Thursday)
            .field("Friday", &self.Friday)
            .field("Saturday", &self.Saturday)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE_JOB_ACTIVE_DAYS {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_SCHEDULE_JOB_ACTIVE_DAYS {
    fn eq(&self, other: &Self) -> bool {
        self.Sunday == other.Sunday
            && self.Monday == other.Monday
            && self.Tuesday == other.Tuesday
            && self.Wednesday == other.Wednesday
            && self.Thursday == other.Thursday
            && self.Friday == other.Friday
            && self.Saturday == other.Saturday
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_SCHEDULE_JOB_ACTIVE_DAYS {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_SCHEDULE_JOB_ACTIVE_DAYS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_SCHEDULE_JOB_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_CHAOS_SCHEDULE_JOB,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_SCHEDULE_JOB_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_SCHEDULE_JOB_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE_JOB_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SCHEDULE_JOB_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE_JOB_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_SCHEDULE_JOB_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_SCHEDULE_JOB_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_SCHEDULE_JOB_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC {
    pub StartTime: *const FABRIC_CHAOS_SCHEDULE_TIME_UTC,
    pub EndTime: *const FABRIC_CHAOS_SCHEDULE_TIME_UTC,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC {}
impl Clone for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC")
            .field("StartTime", &self.StartTime)
            .field("EndTime", &self.EndTime)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC {
    fn eq(&self, other: &Self) -> bool {
        self.StartTime == other.StartTime
            && self.EndTime == other.EndTime
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC {}
impl Default for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC,
}
impl Copy for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC_LIST {}
impl Clone for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC_LIST {}
impl Default for FABRIC_CHAOS_SCHEDULE_TIME_RANGE_UTC_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CHAOS_SCHEDULE_TIME_UTC {
    pub Hour: u32,
    pub Minute: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CHAOS_SCHEDULE_TIME_UTC {}
impl Clone for FABRIC_CHAOS_SCHEDULE_TIME_UTC {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CHAOS_SCHEDULE_TIME_UTC {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SCHEDULE_TIME_UTC")
            .field("Hour", &self.Hour)
            .field("Minute", &self.Minute)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CHAOS_SCHEDULE_TIME_UTC {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CHAOS_SCHEDULE_TIME_UTC {
    fn eq(&self, other: &Self) -> bool {
        self.Hour == other.Hour && self.Minute == other.Minute && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CHAOS_SCHEDULE_TIME_UTC {}
impl Default for FABRIC_CHAOS_SCHEDULE_TIME_UTC {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION {
    pub ChaosScheduleDescription: *const FABRIC_CHAOS_SCHEDULE_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION")
            .field("ChaosScheduleDescription", &self.ChaosScheduleDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ChaosScheduleDescription == other.ChaosScheduleDescription
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHAOS_SERVICE_SCHEDULE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CHAOS_TARGET_FILTER {
    pub NodeTypeInclusionList: *const FABRIC_STRING_LIST,
    pub ApplicationInclusionList: *const FABRIC_STRING_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CHAOS_TARGET_FILTER {}
impl Clone for FABRIC_CHAOS_TARGET_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CHAOS_TARGET_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHAOS_TARGET_FILTER")
            .field("NodeTypeInclusionList", &self.NodeTypeInclusionList)
            .field("ApplicationInclusionList", &self.ApplicationInclusionList)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CHAOS_TARGET_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CHAOS_TARGET_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.NodeTypeInclusionList == other.NodeTypeInclusionList
            && self.ApplicationInclusionList == other.ApplicationInclusionList
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CHAOS_TARGET_FILTER {}
impl Default for FABRIC_CHAOS_TARGET_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CHECK_EXISTS_PROPERTY_OPERATION {
    pub PropertyName: windows_core::PCWSTR,
    pub ExistenceCheck: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CHECK_EXISTS_PROPERTY_OPERATION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CHECK_EXISTS_PROPERTY_OPERATION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CHECK_EXISTS_PROPERTY_OPERATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHECK_EXISTS_PROPERTY_OPERATION")
            .field("PropertyName", &self.PropertyName)
            .field("ExistenceCheck", &self.ExistenceCheck)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CHECK_EXISTS_PROPERTY_OPERATION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CHECK_EXISTS_PROPERTY_OPERATION {
    fn eq(&self, other: &Self) -> bool {
        self.PropertyName == other.PropertyName
            && self.ExistenceCheck == other.ExistenceCheck
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CHECK_EXISTS_PROPERTY_OPERATION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CHECK_EXISTS_PROPERTY_OPERATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CHECK_SEQUENCE_PROPERTY_OPERATION {
    pub PropertyName: windows_core::PCWSTR,
    pub SequenceNumber: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CHECK_SEQUENCE_PROPERTY_OPERATION {}
impl Clone for FABRIC_CHECK_SEQUENCE_PROPERTY_OPERATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CHECK_SEQUENCE_PROPERTY_OPERATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHECK_SEQUENCE_PROPERTY_OPERATION")
            .field("PropertyName", &self.PropertyName)
            .field("SequenceNumber", &self.SequenceNumber)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CHECK_SEQUENCE_PROPERTY_OPERATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CHECK_SEQUENCE_PROPERTY_OPERATION {
    fn eq(&self, other: &Self) -> bool {
        self.PropertyName == other.PropertyName
            && self.SequenceNumber == other.SequenceNumber
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CHECK_SEQUENCE_PROPERTY_OPERATION {}
impl Default for FABRIC_CHECK_SEQUENCE_PROPERTY_OPERATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CHECK_VALUE_PROPERTY_OPERATION {
    pub PropertyName: windows_core::PCWSTR,
    pub PropertyTypeId: FABRIC_PROPERTY_TYPE_ID,
    pub PropertyValue: *mut core::ffi::c_void,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CHECK_VALUE_PROPERTY_OPERATION {}
impl Clone for FABRIC_CHECK_VALUE_PROPERTY_OPERATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CHECK_VALUE_PROPERTY_OPERATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CHECK_VALUE_PROPERTY_OPERATION")
            .field("PropertyName", &self.PropertyName)
            .field("PropertyTypeId", &self.PropertyTypeId)
            .field("PropertyValue", &self.PropertyValue)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CHECK_VALUE_PROPERTY_OPERATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CHECK_VALUE_PROPERTY_OPERATION {
    fn eq(&self, other: &Self) -> bool {
        self.PropertyName == other.PropertyName
            && self.PropertyTypeId == other.PropertyTypeId
            && self.PropertyValue == other.PropertyValue
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CHECK_VALUE_PROPERTY_OPERATION {}
impl Default for FABRIC_CHECK_VALUE_PROPERTY_OPERATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLAIMS_CREDENTIALS {
    pub ServerCommonNameCount: u32,
    pub ServerCommonNames: *const windows_core::PCWSTR,
    pub IssuerThumbprintCount: u32,
    pub IssuerThumbprints: *const windows_core::PCWSTR,
    pub LocalClaims: windows_core::PCWSTR,
    pub ProtectionLevel: FABRIC_PROTECTION_LEVEL,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLAIMS_CREDENTIALS {}
impl Clone for FABRIC_CLAIMS_CREDENTIALS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLAIMS_CREDENTIALS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLAIMS_CREDENTIALS")
            .field("ServerCommonNameCount", &self.ServerCommonNameCount)
            .field("ServerCommonNames", &self.ServerCommonNames)
            .field("IssuerThumbprintCount", &self.IssuerThumbprintCount)
            .field("IssuerThumbprints", &self.IssuerThumbprints)
            .field("LocalClaims", &self.LocalClaims)
            .field("ProtectionLevel", &self.ProtectionLevel)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLAIMS_CREDENTIALS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLAIMS_CREDENTIALS {
    fn eq(&self, other: &Self) -> bool {
        self.ServerCommonNameCount == other.ServerCommonNameCount
            && self.ServerCommonNames == other.ServerCommonNames
            && self.IssuerThumbprintCount == other.IssuerThumbprintCount
            && self.IssuerThumbprints == other.IssuerThumbprints
            && self.LocalClaims == other.LocalClaims
            && self.ProtectionLevel == other.ProtectionLevel
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLAIMS_CREDENTIALS {}
impl Default for FABRIC_CLAIMS_CREDENTIALS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLAIMS_CREDENTIALS_EX1 {
    pub ServerThumbprintCount: u32,
    pub ServerThumbprints: *const windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLAIMS_CREDENTIALS_EX1 {}
impl Clone for FABRIC_CLAIMS_CREDENTIALS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLAIMS_CREDENTIALS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLAIMS_CREDENTIALS_EX1")
            .field("ServerThumbprintCount", &self.ServerThumbprintCount)
            .field("ServerThumbprints", &self.ServerThumbprints)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLAIMS_CREDENTIALS_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLAIMS_CREDENTIALS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServerThumbprintCount == other.ServerThumbprintCount
            && self.ServerThumbprints == other.ServerThumbprints
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLAIMS_CREDENTIALS_EX1 {}
impl Default for FABRIC_CLAIMS_CREDENTIALS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLAIMS_RETRIEVAL_METADATA {
    pub Kind: FABRIC_CLAIMS_RETRIEVAL_METADATA_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLAIMS_RETRIEVAL_METADATA {}
impl Clone for FABRIC_CLAIMS_RETRIEVAL_METADATA {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLAIMS_RETRIEVAL_METADATA {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLAIMS_RETRIEVAL_METADATA")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLAIMS_RETRIEVAL_METADATA {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLAIMS_RETRIEVAL_METADATA {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_CLAIMS_RETRIEVAL_METADATA {}
impl Default for FABRIC_CLAIMS_RETRIEVAL_METADATA {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLIENT_SETTINGS {
    pub PartitionLocationCacheLimit: u32,
    pub ServiceChangePollIntervalInSeconds: u32,
    pub ConnectionInitializationTimeoutInSeconds: u32,
    pub KeepAliveIntervalInSeconds: u32,
    pub HealthOperationTimeoutInSeconds: u32,
    pub HealthReportSendIntervalInSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLIENT_SETTINGS {}
impl Clone for FABRIC_CLIENT_SETTINGS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLIENT_SETTINGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLIENT_SETTINGS")
            .field(
                "PartitionLocationCacheLimit",
                &self.PartitionLocationCacheLimit,
            )
            .field(
                "ServiceChangePollIntervalInSeconds",
                &self.ServiceChangePollIntervalInSeconds,
            )
            .field(
                "ConnectionInitializationTimeoutInSeconds",
                &self.ConnectionInitializationTimeoutInSeconds,
            )
            .field(
                "KeepAliveIntervalInSeconds",
                &self.KeepAliveIntervalInSeconds,
            )
            .field(
                "HealthOperationTimeoutInSeconds",
                &self.HealthOperationTimeoutInSeconds,
            )
            .field(
                "HealthReportSendIntervalInSeconds",
                &self.HealthReportSendIntervalInSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLIENT_SETTINGS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLIENT_SETTINGS {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionLocationCacheLimit == other.PartitionLocationCacheLimit
            && self.ServiceChangePollIntervalInSeconds == other.ServiceChangePollIntervalInSeconds
            && self.ConnectionInitializationTimeoutInSeconds
                == other.ConnectionInitializationTimeoutInSeconds
            && self.KeepAliveIntervalInSeconds == other.KeepAliveIntervalInSeconds
            && self.HealthOperationTimeoutInSeconds == other.HealthOperationTimeoutInSeconds
            && self.HealthReportSendIntervalInSeconds == other.HealthReportSendIntervalInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLIENT_SETTINGS {}
impl Default for FABRIC_CLIENT_SETTINGS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLIENT_SETTINGS_EX1 {
    pub ClientFriendlyName: windows_core::PCWSTR,
    pub PartitionLocationCacheBucketCount: u32,
    pub HealthReportRetrySendIntervalInSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLIENT_SETTINGS_EX1 {}
impl Clone for FABRIC_CLIENT_SETTINGS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLIENT_SETTINGS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLIENT_SETTINGS_EX1")
            .field("ClientFriendlyName", &self.ClientFriendlyName)
            .field(
                "PartitionLocationCacheBucketCount",
                &self.PartitionLocationCacheBucketCount,
            )
            .field(
                "HealthReportRetrySendIntervalInSeconds",
                &self.HealthReportRetrySendIntervalInSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLIENT_SETTINGS_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLIENT_SETTINGS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ClientFriendlyName == other.ClientFriendlyName
            && self.PartitionLocationCacheBucketCount == other.PartitionLocationCacheBucketCount
            && self.HealthReportRetrySendIntervalInSeconds
                == other.HealthReportRetrySendIntervalInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLIENT_SETTINGS_EX1 {}
impl Default for FABRIC_CLIENT_SETTINGS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLIENT_SETTINGS_EX2 {
    pub NotificationGatewayConnectionTimeoutInSeconds: u32,
    pub NotificationCacheUpdateTimeoutInSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLIENT_SETTINGS_EX2 {}
impl Clone for FABRIC_CLIENT_SETTINGS_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLIENT_SETTINGS_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLIENT_SETTINGS_EX2")
            .field(
                "NotificationGatewayConnectionTimeoutInSeconds",
                &self.NotificationGatewayConnectionTimeoutInSeconds,
            )
            .field(
                "NotificationCacheUpdateTimeoutInSeconds",
                &self.NotificationCacheUpdateTimeoutInSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLIENT_SETTINGS_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLIENT_SETTINGS_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.NotificationGatewayConnectionTimeoutInSeconds
            == other.NotificationGatewayConnectionTimeoutInSeconds
            && self.NotificationCacheUpdateTimeoutInSeconds
                == other.NotificationCacheUpdateTimeoutInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLIENT_SETTINGS_EX2 {}
impl Default for FABRIC_CLIENT_SETTINGS_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLIENT_SETTINGS_EX3 {
    pub AuthTokenBufferSize: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLIENT_SETTINGS_EX3 {}
impl Clone for FABRIC_CLIENT_SETTINGS_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLIENT_SETTINGS_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLIENT_SETTINGS_EX3")
            .field("AuthTokenBufferSize", &self.AuthTokenBufferSize)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLIENT_SETTINGS_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLIENT_SETTINGS_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.AuthTokenBufferSize == other.AuthTokenBufferSize && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLIENT_SETTINGS_EX3 {}
impl Default for FABRIC_CLIENT_SETTINGS_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLIENT_SETTINGS_EX4 {
    pub ConnectionIdleTimeoutInSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLIENT_SETTINGS_EX4 {}
impl Clone for FABRIC_CLIENT_SETTINGS_EX4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLIENT_SETTINGS_EX4 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLIENT_SETTINGS_EX4")
            .field(
                "ConnectionIdleTimeoutInSeconds",
                &self.ConnectionIdleTimeoutInSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLIENT_SETTINGS_EX4 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLIENT_SETTINGS_EX4 {
    fn eq(&self, other: &Self) -> bool {
        self.ConnectionIdleTimeoutInSeconds == other.ConnectionIdleTimeoutInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLIENT_SETTINGS_EX4 {}
impl Default for FABRIC_CLIENT_SETTINGS_EX4 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLUSTER_HEALTH {
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLUSTER_HEALTH {}
impl Clone for FABRIC_CLUSTER_HEALTH {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH")
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLUSTER_HEALTH {
    fn eq(&self, other: &Self) -> bool {
        self.AggregatedHealthState == other.AggregatedHealthState && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLUSTER_HEALTH {}
impl Default for FABRIC_CLUSTER_HEALTH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLUSTER_HEALTH_CHUNK {
    pub HealthState: FABRIC_HEALTH_STATE,
    pub NodeHealthStateChunks: *const FABRIC_NODE_HEALTH_STATE_CHUNK_LIST,
    pub ApplicationHealthStateChunks: *const FABRIC_APPLICATION_HEALTH_STATE_CHUNK_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLUSTER_HEALTH_CHUNK {}
impl Clone for FABRIC_CLUSTER_HEALTH_CHUNK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_CHUNK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_CHUNK")
            .field("HealthState", &self.HealthState)
            .field("NodeHealthStateChunks", &self.NodeHealthStateChunks)
            .field(
                "ApplicationHealthStateChunks",
                &self.ApplicationHealthStateChunks,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_CHUNK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLUSTER_HEALTH_CHUNK {
    fn eq(&self, other: &Self) -> bool {
        self.HealthState == other.HealthState
            && self.NodeHealthStateChunks == other.NodeHealthStateChunks
            && self.ApplicationHealthStateChunks == other.ApplicationHealthStateChunks
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLUSTER_HEALTH_CHUNK {}
impl Default for FABRIC_CLUSTER_HEALTH_CHUNK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION {
    pub ClusterHealthPolicy: *const FABRIC_CLUSTER_HEALTH_POLICY,
    pub ApplicationHealthPolicyMap: *const FABRIC_APPLICATION_HEALTH_POLICY_MAP,
    pub ApplicationFilters: *const FABRIC_APPLICATION_HEALTH_STATE_FILTER_LIST,
    pub NodeFilters: *const FABRIC_NODE_HEALTH_STATE_FILTER_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION")
            .field("ClusterHealthPolicy", &self.ClusterHealthPolicy)
            .field(
                "ApplicationHealthPolicyMap",
                &self.ApplicationHealthPolicyMap,
            )
            .field("ApplicationFilters", &self.ApplicationFilters)
            .field("NodeFilters", &self.NodeFilters)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ClusterHealthPolicy == other.ClusterHealthPolicy
            && self.ApplicationHealthPolicyMap == other.ApplicationHealthPolicyMap
            && self.ApplicationFilters == other.ApplicationFilters
            && self.NodeFilters == other.NodeFilters
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CLUSTER_HEALTH_CHUNK_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CLUSTER_HEALTH_EX1 {
    pub NodeHealthStates: *const FABRIC_NODE_HEALTH_STATE_LIST,
    pub ApplicationHealthStates: *const FABRIC_APPLICATION_HEALTH_STATE_LIST,
    pub HealthEvents: *const FABRIC_HEALTH_EVENT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CLUSTER_HEALTH_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CLUSTER_HEALTH_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_EX1")
            .field("NodeHealthStates", &self.NodeHealthStates)
            .field("ApplicationHealthStates", &self.ApplicationHealthStates)
            .field("HealthEvents", &self.HealthEvents)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CLUSTER_HEALTH_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.NodeHealthStates == other.NodeHealthStates
            && self.ApplicationHealthStates == other.ApplicationHealthStates
            && self.HealthEvents == other.HealthEvents
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CLUSTER_HEALTH_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CLUSTER_HEALTH_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLUSTER_HEALTH_EX2 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLUSTER_HEALTH_EX2 {}
impl Clone for FABRIC_CLUSTER_HEALTH_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_EX2")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLUSTER_HEALTH_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLUSTER_HEALTH_EX2 {}
impl Default for FABRIC_CLUSTER_HEALTH_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLUSTER_HEALTH_EX3 {
    pub HealthStatistics: *const FABRIC_HEALTH_STATISTICS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLUSTER_HEALTH_EX3 {}
impl Clone for FABRIC_CLUSTER_HEALTH_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_EX3")
            .field("HealthStatistics", &self.HealthStatistics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLUSTER_HEALTH_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStatistics == other.HealthStatistics && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLUSTER_HEALTH_EX3 {}
impl Default for FABRIC_CLUSTER_HEALTH_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CLUSTER_HEALTH_POLICY {
    pub ConsiderWarningAsError: windows::Win32::Foundation::BOOLEAN,
    pub MaxPercentUnhealthyNodes: u8,
    pub MaxPercentUnhealthyApplications: u8,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CLUSTER_HEALTH_POLICY {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CLUSTER_HEALTH_POLICY {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_POLICY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_POLICY")
            .field("ConsiderWarningAsError", &self.ConsiderWarningAsError)
            .field("MaxPercentUnhealthyNodes", &self.MaxPercentUnhealthyNodes)
            .field(
                "MaxPercentUnhealthyApplications",
                &self.MaxPercentUnhealthyApplications,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_POLICY {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CLUSTER_HEALTH_POLICY {
    fn eq(&self, other: &Self) -> bool {
        self.ConsiderWarningAsError == other.ConsiderWarningAsError
            && self.MaxPercentUnhealthyNodes == other.MaxPercentUnhealthyNodes
            && self.MaxPercentUnhealthyApplications == other.MaxPercentUnhealthyApplications
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CLUSTER_HEALTH_POLICY {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CLUSTER_HEALTH_POLICY {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLUSTER_HEALTH_POLICY_EX1 {
    pub ApplicationTypeHealthPolicyMap: *const FABRIC_APPLICATION_TYPE_HEALTH_POLICY_MAP,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLUSTER_HEALTH_POLICY_EX1 {}
impl Clone for FABRIC_CLUSTER_HEALTH_POLICY_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_POLICY_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_POLICY_EX1")
            .field(
                "ApplicationTypeHealthPolicyMap",
                &self.ApplicationTypeHealthPolicyMap,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_POLICY_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLUSTER_HEALTH_POLICY_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeHealthPolicyMap == other.ApplicationTypeHealthPolicyMap
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLUSTER_HEALTH_POLICY_EX1 {}
impl Default for FABRIC_CLUSTER_HEALTH_POLICY_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION {
    pub HealthPolicy: *const FABRIC_CLUSTER_HEALTH_POLICY,
    pub ApplicationHealthPolicyMap: *const FABRIC_APPLICATION_HEALTH_POLICY_MAP,
    pub EventsFilter: *const FABRIC_HEALTH_EVENTS_FILTER,
    pub NodesFilter: *const FABRIC_NODE_HEALTH_STATES_FILTER,
    pub ApplicationsFilter: *const FABRIC_APPLICATION_HEALTH_STATES_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION")
            .field("HealthPolicy", &self.HealthPolicy)
            .field(
                "ApplicationHealthPolicyMap",
                &self.ApplicationHealthPolicyMap,
            )
            .field("EventsFilter", &self.EventsFilter)
            .field("NodesFilter", &self.NodesFilter)
            .field("ApplicationsFilter", &self.ApplicationsFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.HealthPolicy == other.HealthPolicy
            && self.ApplicationHealthPolicyMap == other.ApplicationHealthPolicyMap
            && self.EventsFilter == other.EventsFilter
            && self.NodesFilter == other.NodesFilter
            && self.ApplicationsFilter == other.ApplicationsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION_EX1 {
    pub HealthStatisticsFilter: *const FABRIC_CLUSTER_HEALTH_STATISTICS_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION_EX1")
            .field("HealthStatisticsFilter", &self.HealthStatisticsFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStatisticsFilter == other.HealthStatisticsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CLUSTER_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CLUSTER_HEALTH_REPORT {
    pub HealthInformation: *const FABRIC_HEALTH_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CLUSTER_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CLUSTER_HEALTH_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_REPORT")
            .field("HealthInformation", &self.HealthInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CLUSTER_HEALTH_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.HealthInformation == other.HealthInformation && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CLUSTER_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CLUSTER_HEALTH_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CLUSTER_HEALTH_STATISTICS_FILTER {
    pub ExcludeHealthStatistics: windows::Win32::Foundation::BOOLEAN,
    pub IncludeSystemApplicationHealthStatistics: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CLUSTER_HEALTH_STATISTICS_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CLUSTER_HEALTH_STATISTICS_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CLUSTER_HEALTH_STATISTICS_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_HEALTH_STATISTICS_FILTER")
            .field("ExcludeHealthStatistics", &self.ExcludeHealthStatistics)
            .field(
                "IncludeSystemApplicationHealthStatistics",
                &self.IncludeSystemApplicationHealthStatistics,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CLUSTER_HEALTH_STATISTICS_FILTER {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CLUSTER_HEALTH_STATISTICS_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.ExcludeHealthStatistics == other.ExcludeHealthStatistics
            && self.IncludeSystemApplicationHealthStatistics
                == other.IncludeSystemApplicationHealthStatistics
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CLUSTER_HEALTH_STATISTICS_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CLUSTER_HEALTH_STATISTICS_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CLUSTER_LOAD_INFORMATION {
    pub LastBalancingStartTimeUtc: windows::Win32::Foundation::FILETIME,
    pub LastBalancingEndTimeUtc: windows::Win32::Foundation::FILETIME,
    pub LoadMetricInformation: *const FABRIC_LOAD_METRIC_INFORMATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CLUSTER_LOAD_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CLUSTER_LOAD_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CLUSTER_LOAD_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_LOAD_INFORMATION")
            .field("LastBalancingStartTimeUtc", &self.LastBalancingStartTimeUtc)
            .field("LastBalancingEndTimeUtc", &self.LastBalancingEndTimeUtc)
            .field("LoadMetricInformation", &self.LoadMetricInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CLUSTER_LOAD_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CLUSTER_LOAD_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.LastBalancingStartTimeUtc == other.LastBalancingStartTimeUtc
            && self.LastBalancingEndTimeUtc == other.LastBalancingEndTimeUtc
            && self.LoadMetricInformation == other.LoadMetricInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CLUSTER_LOAD_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CLUSTER_LOAD_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION {
    pub ClusterManifestVersion: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION {}
impl Clone for FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION")
            .field("ClusterManifestVersion", &self.ClusterManifestVersion)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ClusterManifestVersion == other.ClusterManifestVersion
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION {}
impl Default for FABRIC_CLUSTER_MANIFEST_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CLUSTER_UPGRADE_HEALTH_POLICY {
    pub MaxPercentDeltaUnhealthyNodes: u8,
    pub MaxPercentUpgradeDomainDeltaUnhealthyNodes: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CLUSTER_UPGRADE_HEALTH_POLICY {}
impl Clone for FABRIC_CLUSTER_UPGRADE_HEALTH_POLICY {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CLUSTER_UPGRADE_HEALTH_POLICY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CLUSTER_UPGRADE_HEALTH_POLICY")
            .field(
                "MaxPercentDeltaUnhealthyNodes",
                &self.MaxPercentDeltaUnhealthyNodes,
            )
            .field(
                "MaxPercentUpgradeDomainDeltaUnhealthyNodes",
                &self.MaxPercentUpgradeDomainDeltaUnhealthyNodes,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CLUSTER_UPGRADE_HEALTH_POLICY {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CLUSTER_UPGRADE_HEALTH_POLICY {
    fn eq(&self, other: &Self) -> bool {
        self.MaxPercentDeltaUnhealthyNodes == other.MaxPercentDeltaUnhealthyNodes
            && self.MaxPercentUpgradeDomainDeltaUnhealthyNodes
                == other.MaxPercentUpgradeDomainDeltaUnhealthyNodes
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CLUSTER_UPGRADE_HEALTH_POLICY {}
impl Default for FABRIC_CLUSTER_UPGRADE_HEALTH_POLICY {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CODE_PACKAGE_DESCRIPTION {
    pub Name: windows_core::PCWSTR,
    pub Version: windows_core::PCWSTR,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub ServiceManifestVersion: windows_core::PCWSTR,
    pub IsShared: windows::Win32::Foundation::BOOLEAN,
    pub SetupEntryPoint: *mut FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION,
    pub EntryPoint: *mut FABRIC_CODE_PACKAGE_ENTRY_POINT_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CODE_PACKAGE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CODE_PACKAGE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CODE_PACKAGE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CODE_PACKAGE_DESCRIPTION")
            .field("Name", &self.Name)
            .field("Version", &self.Version)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("ServiceManifestVersion", &self.ServiceManifestVersion)
            .field("IsShared", &self.IsShared)
            .field("SetupEntryPoint", &self.SetupEntryPoint)
            .field("EntryPoint", &self.EntryPoint)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CODE_PACKAGE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CODE_PACKAGE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Version == other.Version
            && self.ServiceManifestName == other.ServiceManifestName
            && self.ServiceManifestVersion == other.ServiceManifestVersion
            && self.IsShared == other.IsShared
            && self.SetupEntryPoint == other.SetupEntryPoint
            && self.EntryPoint == other.EntryPoint
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CODE_PACKAGE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CODE_PACKAGE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CODE_PACKAGE_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_CODE_PACKAGE_DESCRIPTION,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CODE_PACKAGE_DESCRIPTION_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CODE_PACKAGE_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CODE_PACKAGE_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CODE_PACKAGE_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CODE_PACKAGE_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CODE_PACKAGE_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CODE_PACKAGE_DESCRIPTION_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CODE_PACKAGE_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CODE_PACKAGE_ENTRY_POINT {
    pub EntryPointLocation: windows_core::PCWSTR,
    pub ProcessId: i64,
    pub RunAsUserName: windows_core::PCWSTR,
    pub EntryPointStatus: FABRIC_ENTRY_POINT_STATUS,
    pub NextActivationUtc: windows::Win32::Foundation::FILETIME,
    pub Statistics: *const FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CODE_PACKAGE_ENTRY_POINT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CODE_PACKAGE_ENTRY_POINT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CODE_PACKAGE_ENTRY_POINT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CODE_PACKAGE_ENTRY_POINT")
            .field("EntryPointLocation", &self.EntryPointLocation)
            .field("ProcessId", &self.ProcessId)
            .field("RunAsUserName", &self.RunAsUserName)
            .field("EntryPointStatus", &self.EntryPointStatus)
            .field("NextActivationUtc", &self.NextActivationUtc)
            .field("Statistics", &self.Statistics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CODE_PACKAGE_ENTRY_POINT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CODE_PACKAGE_ENTRY_POINT {
    fn eq(&self, other: &Self) -> bool {
        self.EntryPointLocation == other.EntryPointLocation
            && self.ProcessId == other.ProcessId
            && self.RunAsUserName == other.RunAsUserName
            && self.EntryPointStatus == other.EntryPointStatus
            && self.NextActivationUtc == other.NextActivationUtc
            && self.Statistics == other.Statistics
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CODE_PACKAGE_ENTRY_POINT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CODE_PACKAGE_ENTRY_POINT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CODE_PACKAGE_ENTRY_POINT_DESCRIPTION {
    pub Kind: FABRIC_CODE_PACKAGE_ENTRY_POINT_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CODE_PACKAGE_ENTRY_POINT_DESCRIPTION {}
impl Clone for FABRIC_CODE_PACKAGE_ENTRY_POINT_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CODE_PACKAGE_ENTRY_POINT_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CODE_PACKAGE_ENTRY_POINT_DESCRIPTION")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CODE_PACKAGE_ENTRY_POINT_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CODE_PACKAGE_ENTRY_POINT_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_CODE_PACKAGE_ENTRY_POINT_DESCRIPTION {}
impl Default for FABRIC_CODE_PACKAGE_ENTRY_POINT_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CODE_PACKAGE_ENTRY_POINT_EX1 {
    pub CodePackageInstanceId: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CODE_PACKAGE_ENTRY_POINT_EX1 {}
impl Clone for FABRIC_CODE_PACKAGE_ENTRY_POINT_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CODE_PACKAGE_ENTRY_POINT_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CODE_PACKAGE_ENTRY_POINT_EX1")
            .field("CodePackageInstanceId", &self.CodePackageInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CODE_PACKAGE_ENTRY_POINT_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CODE_PACKAGE_ENTRY_POINT_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.CodePackageInstanceId == other.CodePackageInstanceId && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CODE_PACKAGE_ENTRY_POINT_EX1 {}
impl Default for FABRIC_CODE_PACKAGE_ENTRY_POINT_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS {
    pub LastExitCode: u32,
    pub LastActivationUtc: windows::Win32::Foundation::FILETIME,
    pub LastExitUtc: windows::Win32::Foundation::FILETIME,
    pub LastSuccessfulActivationUtc: windows::Win32::Foundation::FILETIME,
    pub LastSuccessfulExitUtc: windows::Win32::Foundation::FILETIME,
    pub ActivationCount: u32,
    pub ActivationFailureCount: u32,
    pub ContinuousActivationFailureCount: u32,
    pub ExitCount: u32,
    pub ExitFailureCount: u32,
    pub ContinuousExitFailureCount: u32,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS")
            .field("LastExitCode", &self.LastExitCode)
            .field("LastActivationUtc", &self.LastActivationUtc)
            .field("LastExitUtc", &self.LastExitUtc)
            .field(
                "LastSuccessfulActivationUtc",
                &self.LastSuccessfulActivationUtc,
            )
            .field("LastSuccessfulExitUtc", &self.LastSuccessfulExitUtc)
            .field("ActivationCount", &self.ActivationCount)
            .field("ActivationFailureCount", &self.ActivationFailureCount)
            .field(
                "ContinuousActivationFailureCount",
                &self.ContinuousActivationFailureCount,
            )
            .field("ExitCount", &self.ExitCount)
            .field("ExitFailureCount", &self.ExitFailureCount)
            .field(
                "ContinuousExitFailureCount",
                &self.ContinuousExitFailureCount,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS {
    fn eq(&self, other: &Self) -> bool {
        self.LastExitCode == other.LastExitCode
            && self.LastActivationUtc == other.LastActivationUtc
            && self.LastExitUtc == other.LastExitUtc
            && self.LastSuccessfulActivationUtc == other.LastSuccessfulActivationUtc
            && self.LastSuccessfulExitUtc == other.LastSuccessfulExitUtc
            && self.ActivationCount == other.ActivationCount
            && self.ActivationFailureCount == other.ActivationFailureCount
            && self.ContinuousActivationFailureCount == other.ContinuousActivationFailureCount
            && self.ExitCount == other.ExitCount
            && self.ExitFailureCount == other.ExitFailureCount
            && self.ContinuousExitFailureCount == other.ContinuousExitFailureCount
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CODE_PACKAGE_ENTRY_POINT_STATISTICS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION {
    pub CodePackageName: windows_core::PCWSTR,
    pub IsSetupEntryPoint: windows::Win32::Foundation::BOOL,
    pub IsContainerHost: windows::Win32::Foundation::BOOL,
    pub EventType: FABRIC_CODE_PACKAGE_EVENT_TYPE,
    pub TimeStampInTicks: i64,
    pub SequenceNumber: i64,
    pub Properties: *mut FABRIC_STRING_MAP,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION")
            .field("CodePackageName", &self.CodePackageName)
            .field("IsSetupEntryPoint", &self.IsSetupEntryPoint)
            .field("IsContainerHost", &self.IsContainerHost)
            .field("EventType", &self.EventType)
            .field("TimeStampInTicks", &self.TimeStampInTicks)
            .field("SequenceNumber", &self.SequenceNumber)
            .field("Properties", &self.Properties)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.CodePackageName == other.CodePackageName
            && self.IsSetupEntryPoint == other.IsSetupEntryPoint
            && self.IsContainerHost == other.IsContainerHost
            && self.EventType == other.EventType
            && self.TimeStampInTicks == other.TimeStampInTicks
            && self.SequenceNumber == other.SequenceNumber
            && self.Properties == other.Properties
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION {
    pub Name: windows_core::PCWSTR,
    pub Version: windows_core::PCWSTR,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub ServiceManifestVersion: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION {}
impl Clone for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION")
            .field("Name", &self.Name)
            .field("Version", &self.Version)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("ServiceManifestVersion", &self.ServiceManifestVersion)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Version == other.Version
            && self.ServiceManifestName == other.ServiceManifestName
            && self.ServiceManifestVersion == other.ServiceManifestVersion
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION {}
impl Default for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION,
}
impl Copy for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION_LIST {}
impl Clone for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION_LIST {}
impl Default for FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CONFIGURATION_PARAMETER {
    pub Name: windows_core::PCWSTR,
    pub Value: windows_core::PCWSTR,
    pub MustOverride: windows::Win32::Foundation::BOOLEAN,
    pub IsEncrypted: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CONFIGURATION_PARAMETER {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CONFIGURATION_PARAMETER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CONFIGURATION_PARAMETER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CONFIGURATION_PARAMETER")
            .field("Name", &self.Name)
            .field("Value", &self.Value)
            .field("MustOverride", &self.MustOverride)
            .field("IsEncrypted", &self.IsEncrypted)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CONFIGURATION_PARAMETER {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CONFIGURATION_PARAMETER {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Value == other.Value
            && self.MustOverride == other.MustOverride
            && self.IsEncrypted == other.IsEncrypted
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CONFIGURATION_PARAMETER {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CONFIGURATION_PARAMETER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CONFIGURATION_PARAMETER_EX1 {
    pub Type: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CONFIGURATION_PARAMETER_EX1 {}
impl Clone for FABRIC_CONFIGURATION_PARAMETER_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CONFIGURATION_PARAMETER_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CONFIGURATION_PARAMETER_EX1")
            .field("Type", &self.Type)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CONFIGURATION_PARAMETER_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CONFIGURATION_PARAMETER_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.Type == other.Type && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CONFIGURATION_PARAMETER_EX1 {}
impl Default for FABRIC_CONFIGURATION_PARAMETER_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CONFIGURATION_PARAMETER_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_CONFIGURATION_PARAMETER,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CONFIGURATION_PARAMETER_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CONFIGURATION_PARAMETER_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CONFIGURATION_PARAMETER_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CONFIGURATION_PARAMETER_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CONFIGURATION_PARAMETER_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CONFIGURATION_PARAMETER_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CONFIGURATION_PARAMETER_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CONFIGURATION_PARAMETER_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CONFIGURATION_SECTION {
    pub Name: windows_core::PCWSTR,
    pub Parameters: *const FABRIC_CONFIGURATION_PARAMETER_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CONFIGURATION_SECTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CONFIGURATION_SECTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CONFIGURATION_SECTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CONFIGURATION_SECTION")
            .field("Name", &self.Name)
            .field("Parameters", &self.Parameters)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CONFIGURATION_SECTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CONFIGURATION_SECTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Parameters == other.Parameters
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CONFIGURATION_SECTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CONFIGURATION_SECTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CONFIGURATION_SECTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_CONFIGURATION_SECTION,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CONFIGURATION_SECTION_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CONFIGURATION_SECTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CONFIGURATION_SECTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CONFIGURATION_SECTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CONFIGURATION_SECTION_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CONFIGURATION_SECTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CONFIGURATION_SECTION_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CONFIGURATION_SECTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_CONFIGURATION_SETTINGS {
    pub Sections: *const FABRIC_CONFIGURATION_SECTION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_CONFIGURATION_SETTINGS {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_CONFIGURATION_SETTINGS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_CONFIGURATION_SETTINGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CONFIGURATION_SETTINGS")
            .field("Sections", &self.Sections)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_CONFIGURATION_SETTINGS {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_CONFIGURATION_SETTINGS {
    fn eq(&self, other: &Self) -> bool {
        self.Sections == other.Sections && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_CONFIGURATION_SETTINGS {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_CONFIGURATION_SETTINGS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_CONTAINERHOST_ENTRY_POINT_DESCRIPTION {
    pub ImageName: windows_core::PCWSTR,
    pub Commands: windows_core::PCWSTR,
    pub EntryPoint: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_CONTAINERHOST_ENTRY_POINT_DESCRIPTION {}
impl Clone for FABRIC_CONTAINERHOST_ENTRY_POINT_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_CONTAINERHOST_ENTRY_POINT_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_CONTAINERHOST_ENTRY_POINT_DESCRIPTION")
            .field("ImageName", &self.ImageName)
            .field("Commands", &self.Commands)
            .field("EntryPoint", &self.EntryPoint)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_CONTAINERHOST_ENTRY_POINT_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_CONTAINERHOST_ENTRY_POINT_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ImageName == other.ImageName
            && self.Commands == other.Commands
            && self.EntryPoint == other.EntryPoint
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_CONTAINERHOST_ENTRY_POINT_DESCRIPTION {}
impl Default for FABRIC_CONTAINERHOST_ENTRY_POINT_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DATA_PACKAGE_DESCRIPTION {
    pub Name: windows_core::PCWSTR,
    pub Version: windows_core::PCWSTR,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub ServiceManifestVersion: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DATA_PACKAGE_DESCRIPTION {}
impl Clone for FABRIC_DATA_PACKAGE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DATA_PACKAGE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DATA_PACKAGE_DESCRIPTION")
            .field("Name", &self.Name)
            .field("Version", &self.Version)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("ServiceManifestVersion", &self.ServiceManifestVersion)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DATA_PACKAGE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DATA_PACKAGE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Version == other.Version
            && self.ServiceManifestName == other.ServiceManifestName
            && self.ServiceManifestVersion == other.ServiceManifestVersion
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DATA_PACKAGE_DESCRIPTION {}
impl Default for FABRIC_DATA_PACKAGE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DATA_PACKAGE_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DATA_PACKAGE_DESCRIPTION,
}
impl Copy for FABRIC_DATA_PACKAGE_DESCRIPTION_LIST {}
impl Clone for FABRIC_DATA_PACKAGE_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DATA_PACKAGE_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DATA_PACKAGE_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DATA_PACKAGE_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DATA_PACKAGE_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DATA_PACKAGE_DESCRIPTION_LIST {}
impl Default for FABRIC_DATA_PACKAGE_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DELETE_APPLICATION_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub ForceDelete: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DELETE_APPLICATION_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DELETE_APPLICATION_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DELETE_APPLICATION_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DELETE_APPLICATION_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("ForceDelete", &self.ForceDelete)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DELETE_APPLICATION_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DELETE_APPLICATION_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ForceDelete == other.ForceDelete
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DELETE_APPLICATION_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DELETE_APPLICATION_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DELETE_NETWORK_DESCRIPTION {
    pub NetworkName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DELETE_NETWORK_DESCRIPTION {}
impl Clone for FABRIC_DELETE_NETWORK_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DELETE_NETWORK_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DELETE_NETWORK_DESCRIPTION")
            .field("NetworkName", &self.NetworkName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DELETE_NETWORK_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DELETE_NETWORK_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkName == other.NetworkName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DELETE_NETWORK_DESCRIPTION {}
impl Default for FABRIC_DELETE_NETWORK_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DELETE_PROPERTY_OPERATION {
    pub PropertyName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DELETE_PROPERTY_OPERATION {}
impl Clone for FABRIC_DELETE_PROPERTY_OPERATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DELETE_PROPERTY_OPERATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DELETE_PROPERTY_OPERATION")
            .field("PropertyName", &self.PropertyName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DELETE_PROPERTY_OPERATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DELETE_PROPERTY_OPERATION {
    fn eq(&self, other: &Self) -> bool {
        self.PropertyName == other.PropertyName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DELETE_PROPERTY_OPERATION {}
impl Default for FABRIC_DELETE_PROPERTY_OPERATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DELETE_SERVICE_DESCRIPTION {
    pub ServiceName: *mut u16,
    pub ForceDelete: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DELETE_SERVICE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DELETE_SERVICE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DELETE_SERVICE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DELETE_SERVICE_DESCRIPTION")
            .field("ServiceName", &self.ServiceName)
            .field("ForceDelete", &self.ForceDelete)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DELETE_SERVICE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DELETE_SERVICE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.ForceDelete == other.ForceDelete
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DELETE_SERVICE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DELETE_SERVICE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub BaselineErrorCount: u32,
    pub BaselineTotalCount: u32,
    pub TotalCount: u32,
    pub MaxPercentDeltaUnhealthyNodes: u8,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DELTA_NODES_CHECK_HEALTH_EVALUATION {}
impl Clone for FABRIC_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DELTA_NODES_CHECK_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("BaselineErrorCount", &self.BaselineErrorCount)
            .field("BaselineTotalCount", &self.BaselineTotalCount)
            .field("TotalCount", &self.TotalCount)
            .field(
                "MaxPercentDeltaUnhealthyNodes",
                &self.MaxPercentDeltaUnhealthyNodes,
            )
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.BaselineErrorCount == other.BaselineErrorCount
            && self.BaselineTotalCount == other.BaselineTotalCount
            && self.TotalCount == other.TotalCount
            && self.MaxPercentDeltaUnhealthyNodes == other.MaxPercentDeltaUnhealthyNodes
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DELTA_NODES_CHECK_HEALTH_EVALUATION {}
impl Default for FABRIC_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub TotalCount: u32,
    pub MaxPercentUnhealthyDeployedApplications: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {}
impl Clone for FABRIC_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("TotalCount", &self.TotalCount)
            .field(
                "MaxPercentUnhealthyDeployedApplications",
                &self.MaxPercentUnhealthyDeployedApplications,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.TotalCount == other.TotalCount
            && self.MaxPercentUnhealthyDeployedApplications
                == other.MaxPercentUnhealthyDeployedApplications
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {}
impl Default for FABRIC_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH {
    pub ApplicationName: *mut u16,
    pub NodeName: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub HealthEvents: *const FABRIC_HEALTH_EVENT_LIST,
    pub DeployedServicePackageHealthStates:
        *const FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH")
            .field("ApplicationName", &self.ApplicationName)
            .field("NodeName", &self.NodeName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("HealthEvents", &self.HealthEvents)
            .field(
                "DeployedServicePackageHealthStates",
                &self.DeployedServicePackageHealthStates,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.NodeName == other.NodeName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.HealthEvents == other.HealthEvents
            && self.DeployedServicePackageHealthStates == other.DeployedServicePackageHealthStates
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub ApplicationName: *mut u16,
    pub NodeName: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_EVALUATION {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("ApplicationName", &self.ApplicationName)
            .field("NodeName", &self.NodeName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.ApplicationName == other.ApplicationName
            && self.NodeName == other.NodeName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_EVALUATION {}
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_EX1 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX1 {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_EX1")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX1 {}
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_EX2 {
    pub HealthStatistics: *const FABRIC_HEALTH_STATISTICS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX2 {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_EX2")
            .field("HealthStatistics", &self.HealthStatistics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStatistics == other.HealthStatistics && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX2 {}
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub NodeName: windows_core::PCWSTR,
    pub HealthPolicy: *const FABRIC_APPLICATION_HEALTH_POLICY,
    pub EventsFilter: *const FABRIC_HEALTH_EVENTS_FILTER,
    pub DeployedServicePackagesFilter: *const FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATES_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("NodeName", &self.NodeName)
            .field("HealthPolicy", &self.HealthPolicy)
            .field("EventsFilter", &self.EventsFilter)
            .field(
                "DeployedServicePackagesFilter",
                &self.DeployedServicePackagesFilter,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.NodeName == other.NodeName
            && self.HealthPolicy == other.HealthPolicy
            && self.EventsFilter == other.EventsFilter
            && self.DeployedServicePackagesFilter == other.DeployedServicePackagesFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    pub HealthStatisticsFilter: *const FABRIC_DEPLOYED_APPLICATION_HEALTH_STATISTICS_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1")
            .field("HealthStatisticsFilter", &self.HealthStatisticsFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStatisticsFilter == other.HealthStatisticsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_REPORT {
    pub ApplicationName: *mut u16,
    pub NodeName: windows_core::PCWSTR,
    pub HealthInformation: *const FABRIC_HEALTH_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_REPORT")
            .field("ApplicationName", &self.ApplicationName)
            .field("NodeName", &self.NodeName)
            .field("HealthInformation", &self.HealthInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.NodeName == other.NodeName
            && self.HealthInformation == other.HealthInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE {
    pub ApplicationName: *mut u16,
    pub NodeName: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE")
            .field("ApplicationName", &self.ApplicationName)
            .field("NodeName", &self.NodeName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.NodeName == other.NodeName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE {}
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_STATES_FILTER {
    pub HealthStateFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATES_FILTER {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATES_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATES_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_STATES_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATES_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATES_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATES_FILTER {}
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATES_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK {
    pub NodeName: windows_core::PCWSTR,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub DeployedServicePackageHealthStateChunks:
        *const FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK")
            .field("NodeName", &self.NodeName)
            .field("HealthState", &self.HealthState)
            .field(
                "DeployedServicePackageHealthStateChunks",
                &self.DeployedServicePackageHealthStateChunks,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.HealthState == other.HealthState
            && self.DeployedServicePackageHealthStateChunks
                == other.DeployedServicePackageHealthStateChunks
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK {}
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK,
    pub TotalCount: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK_LIST {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .field("TotalCount", &self.TotalCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count
            && self.Items == other.Items
            && self.TotalCount == other.TotalCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK_LIST {}
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_CHUNK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER {
    pub HealthStateFilter: u32,
    pub NodeNameFilter: windows_core::PCWSTR,
    pub DeployedServicePackageFilters:
        *const FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("NodeNameFilter", &self.NodeNameFilter)
            .field(
                "DeployedServicePackageFilters",
                &self.DeployedServicePackageFilters,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter
            && self.NodeNameFilter == other.NodeNameFilter
            && self.DeployedServicePackageFilters == other.DeployedServicePackageFilters
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER {}
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER_LIST {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER_LIST {}
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_FILTER_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST {}
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATE_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_APPLICATION_HEALTH_STATISTICS_FILTER {
    pub ExcludeHealthStatistics: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATISTICS_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATISTICS_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATISTICS_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_HEALTH_STATISTICS_FILTER")
            .field("ExcludeHealthStatistics", &self.ExcludeHealthStatistics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATISTICS_FILTER {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATISTICS_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.ExcludeHealthStatistics == other.ExcludeHealthStatistics
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATISTICS_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_APPLICATION_HEALTH_STATISTICS_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub ApplicationNameFilter: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("ApplicationNameFilter", &self.ApplicationNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ApplicationNameFilter == other.ApplicationNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {}
impl Default for FABRIC_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM {
    pub ApplicationName: *mut u16,
    pub ApplicationTypeName: windows_core::PCWSTR,
    pub DeployedApplicationStatus: FABRIC_DEPLOYMENT_STATUS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM")
            .field("ApplicationName", &self.ApplicationName)
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field("DeployedApplicationStatus", &self.DeployedApplicationStatus)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ApplicationTypeName == other.ApplicationTypeName
            && self.DeployedApplicationStatus == other.DeployedApplicationStatus
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM {}
impl Default for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX {
    pub WorkDirectory: windows_core::PCWSTR,
    pub LogDirectory: windows_core::PCWSTR,
    pub TempDirectory: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX")
            .field("WorkDirectory", &self.WorkDirectory)
            .field("LogDirectory", &self.LogDirectory)
            .field("TempDirectory", &self.TempDirectory)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX {
    fn eq(&self, other: &Self) -> bool {
        self.WorkDirectory == other.WorkDirectory
            && self.LogDirectory == other.LogDirectory
            && self.TempDirectory == other.TempDirectory
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX {}
impl Default for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    pub HealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX2 {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX2")
            .field("HealthState", &self.HealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthState == other.HealthState && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX2 {}
impl Default for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST {}
impl Clone for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST {}
impl Default for FABRIC_DEPLOYED_APPLICATION_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub ApplicationName: *mut u16,
    pub ServiceManifestNameFilter: windows_core::PCWSTR,
    pub CodePackageNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestNameFilter", &self.ServiceManifestNameFilter)
            .field("CodePackageNameFilter", &self.CodePackageNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ApplicationName == other.ApplicationName
            && self.ServiceManifestNameFilter == other.ServiceManifestNameFilter
            && self.CodePackageNameFilter == other.CodePackageNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION {}
impl Default for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM {
    pub CodePackageName: windows_core::PCWSTR,
    pub CodePackageVersion: windows_core::PCWSTR,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub RunFrequencyInterval: u32,
    pub DeployedCodePackageStatus: FABRIC_DEPLOYMENT_STATUS,
    pub SetupEntryPoint: *const FABRIC_CODE_PACKAGE_ENTRY_POINT,
    pub EntryPoint: *const FABRIC_CODE_PACKAGE_ENTRY_POINT,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM")
            .field("CodePackageName", &self.CodePackageName)
            .field("CodePackageVersion", &self.CodePackageVersion)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("RunFrequencyInterval", &self.RunFrequencyInterval)
            .field("DeployedCodePackageStatus", &self.DeployedCodePackageStatus)
            .field("SetupEntryPoint", &self.SetupEntryPoint)
            .field("EntryPoint", &self.EntryPoint)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.CodePackageName == other.CodePackageName
            && self.CodePackageVersion == other.CodePackageVersion
            && self.ServiceManifestName == other.ServiceManifestName
            && self.RunFrequencyInterval == other.RunFrequencyInterval
            && self.DeployedCodePackageStatus == other.DeployedCodePackageStatus
            && self.SetupEntryPoint == other.SetupEntryPoint
            && self.EntryPoint == other.EntryPoint
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub HostType: FABRIC_HOST_TYPE,
    pub HostIsolationMode: FABRIC_HOST_ISOLATION_MODE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM_EX1")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("HostType", &self.HostType)
            .field("HostIsolationMode", &self.HostIsolationMode)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.HostType == other.HostType
            && self.HostIsolationMode == other.HostIsolationMode
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_ITEM,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_CODE_PACKAGE_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_CODE_PACKAGE_RESULT {
    pub NodeName: windows_core::PCWSTR,
    pub ApplicationName: *mut u16,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub CodePackageName: windows_core::PCWSTR,
    pub CodePackageInstanceId: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT {}
impl Clone for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_CODE_PACKAGE_RESULT")
            .field("NodeName", &self.NodeName)
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("CodePackageName", &self.CodePackageName)
            .field("CodePackageInstanceId", &self.CodePackageInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ApplicationName == other.ApplicationName
            && self.ServiceManifestName == other.ServiceManifestName
            && self.CodePackageName == other.CodePackageName
            && self.CodePackageInstanceId == other.CodePackageInstanceId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT {}
impl Default for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_CODE_PACKAGE_RESULT_EX1 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT_EX1 {}
impl Clone for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_CODE_PACKAGE_RESULT_EX1")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT_EX1 {}
impl Default for FABRIC_DEPLOYED_CODE_PACKAGE_RESULT_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub NetworkName: windows_core::PCWSTR,
    pub ApplicationNameFilter: *mut u16,
    pub ServiceManifestNameFilter: windows_core::PCWSTR,
    pub CodePackageNameFilter: windows_core::PCWSTR,
    pub PagingDescription: *const FABRIC_QUERY_PAGING_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("NetworkName", &self.NetworkName)
            .field("ApplicationNameFilter", &self.ApplicationNameFilter)
            .field("ServiceManifestNameFilter", &self.ServiceManifestNameFilter)
            .field("CodePackageNameFilter", &self.CodePackageNameFilter)
            .field("PagingDescription", &self.PagingDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.NetworkName == other.NetworkName
            && self.ApplicationNameFilter == other.ApplicationNameFilter
            && self.ServiceManifestNameFilter == other.ServiceManifestNameFilter
            && self.CodePackageNameFilter == other.CodePackageNameFilter
            && self.PagingDescription == other.PagingDescription
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION {}
impl Default for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM {
    pub ApplicationName: *mut u16,
    pub NetworkName: windows_core::PCWSTR,
    pub CodePackageName: windows_core::PCWSTR,
    pub CodePackageVersion: windows_core::PCWSTR,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub ContainerAddress: windows_core::PCWSTR,
    pub ContainerId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM")
            .field("ApplicationName", &self.ApplicationName)
            .field("NetworkName", &self.NetworkName)
            .field("CodePackageName", &self.CodePackageName)
            .field("CodePackageVersion", &self.CodePackageVersion)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("ContainerAddress", &self.ContainerAddress)
            .field("ContainerId", &self.ContainerId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.NetworkName == other.NetworkName
            && self.CodePackageName == other.CodePackageName
            && self.CodePackageVersion == other.CodePackageVersion
            && self.ServiceManifestName == other.ServiceManifestName
            && self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.ContainerAddress == other.ContainerAddress
            && self.ContainerId == other.ContainerId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST {}
impl Clone for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST {}
impl Default for FABRIC_DEPLOYED_NETWORK_CODE_PACKAGE_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub PagingDescription: *const FABRIC_QUERY_PAGING_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION {}
impl Clone for FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("PagingDescription", &self.PagingDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.PagingDescription == other.PagingDescription
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION {}
impl Default for FABRIC_DEPLOYED_NETWORK_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM {
    pub NetworkName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM")
            .field("NetworkName", &self.NetworkName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkName == other.NetworkName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM {}
impl Default for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST {}
impl Clone for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST {}
impl Default for FABRIC_DEPLOYED_NETWORK_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGES_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub TotalCount: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGES_HEALTH_EVALUATION {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGES_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGES_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGES_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("TotalCount", &self.TotalCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGES_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGES_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.TotalCount == other.TotalCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGES_HEALTH_EVALUATION {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGES_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH {
    pub ApplicationName: *mut u16,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub NodeName: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub HealthEvents: *const FABRIC_HEALTH_EVENT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH")
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("NodeName", &self.NodeName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("HealthEvents", &self.HealthEvents)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ServiceManifestName == other.ServiceManifestName
            && self.NodeName == other.NodeName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.HealthEvents == other.HealthEvents
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub ApplicationName: *mut u16,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub NodeName: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("NodeName", &self.NodeName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.ApplicationName == other.ApplicationName
            && self.ServiceManifestName == other.ServiceManifestName
            && self.NodeName == other.NodeName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION_EX1 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION_EX1 {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION_EX1")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION_EX1 {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EVALUATION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX1 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX1 {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX1")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX1 {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX2 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX2 {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX2")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX2 {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub NodeName: windows_core::PCWSTR,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub HealthPolicy: *const FABRIC_APPLICATION_HEALTH_POLICY,
    pub EventsFilter: *const FABRIC_HEALTH_EVENTS_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("NodeName", &self.NodeName)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("HealthPolicy", &self.HealthPolicy)
            .field("EventsFilter", &self.EventsFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.NodeName == other.NodeName
            && self.ServiceManifestName == other.ServiceManifestName
            && self.HealthPolicy == other.HealthPolicy
            && self.EventsFilter == other.EventsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION_EX1 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION_EX1 {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION_EX1")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION_EX1 {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT {
    pub ApplicationName: *mut u16,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub NodeName: windows_core::PCWSTR,
    pub HealthInformation: *const FABRIC_HEALTH_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT")
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("NodeName", &self.NodeName)
            .field("HealthInformation", &self.HealthInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ServiceManifestName == other.ServiceManifestName
            && self.NodeName == other.NodeName
            && self.HealthInformation == other.HealthInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT_EX1 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT_EX1 {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT_EX1")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT_EX1 {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_REPORT_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE {
    pub ApplicationName: *mut u16,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub NodeName: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE")
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("NodeName", &self.NodeName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ServiceManifestName == other.ServiceManifestName
            && self.NodeName == other.NodeName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATES_FILTER {
    pub HealthStateFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATES_FILTER {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATES_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATES_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATES_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATES_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATES_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATES_FILTER {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATES_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK {
    pub ServiceManifestName: windows_core::PCWSTR,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK")
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("HealthState", &self.HealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceManifestName == other.ServiceManifestName
            && self.HealthState == other.HealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_EX1 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_EX1 {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_EX1")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_EX1 {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK,
    pub TotalCount: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_LIST {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .field("TotalCount", &self.TotalCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count
            && self.Items == other.Items
            && self.TotalCount == other.TotalCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_LIST {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_CHUNK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_EX1 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_EX1 {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_EX1")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_EX1 {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER {
    pub HealthStateFilter: u32,
    pub ServiceManifestNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("ServiceManifestNameFilter", &self.ServiceManifestNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter
            && self.ServiceManifestNameFilter == other.ServiceManifestNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_EX1 {
    pub ServicePackageActivationIdFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_EX1 {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_EX1")
            .field(
                "ServicePackageActivationIdFilter",
                &self.ServicePackageActivationIdFilter,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationIdFilter == other.ServicePackageActivationIdFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_EX1 {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_LIST {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_LIST {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_FILTER_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_HEALTH_STATE_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub ApplicationName: *mut u16,
    pub ServiceManifestNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestNameFilter", &self.ServiceManifestNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ApplicationName == other.ApplicationName
            && self.ServiceManifestNameFilter == other.ServiceManifestNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM {
    pub ServiceManifestName: windows_core::PCWSTR,
    pub ServiceManifestVersion: windows_core::PCWSTR,
    pub DeployedServicePackageStatus: FABRIC_DEPLOYMENT_STATUS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM")
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("ServiceManifestVersion", &self.ServiceManifestVersion)
            .field(
                "DeployedServicePackageStatus",
                &self.DeployedServicePackageStatus,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceManifestName == other.ServiceManifestName
            && self.ServiceManifestVersion == other.ServiceManifestVersion
            && self.DeployedServicePackageStatus == other.DeployedServicePackageStatus
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM_EX1")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST {}
impl Clone for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST {}
impl Default for FABRIC_DEPLOYED_SERVICE_PACKAGE_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub PartitionId: windows_core::GUID,
    pub ReplicaId: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION {}
impl Clone for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaId", &self.ReplicaId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.PartitionId == other.PartitionId
            && self.ReplicaId == other.ReplicaId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION {}
impl Default for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    pub Kind: FABRIC_SERVICE_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {}
impl Default for FABRIC_DEPLOYED_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub ApplicationName: *mut u16,
    pub ServiceManifestNameFilter: windows_core::PCWSTR,
    pub PartitionIdFilter: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION {}
impl Clone for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestNameFilter", &self.ServiceManifestNameFilter)
            .field("PartitionIdFilter", &self.PartitionIdFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ApplicationName == other.ApplicationName
            && self.ServiceManifestNameFilter == other.ServiceManifestNameFilter
            && self.PartitionIdFilter == other.PartitionIdFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION {}
impl Default for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    pub Kind: FABRIC_SERVICE_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM {}
impl Default for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST {}
impl Clone for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST {}
impl Default for FABRIC_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub ApplicationName: *mut u16,
    pub ServiceManifestNameFilter: windows_core::PCWSTR,
    pub ServiceTypeNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestNameFilter", &self.ServiceManifestNameFilter)
            .field("ServiceTypeNameFilter", &self.ServiceTypeNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ApplicationName == other.ApplicationName
            && self.ServiceManifestNameFilter == other.ServiceManifestNameFilter
            && self.ServiceTypeNameFilter == other.ServiceTypeNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION {}
impl Default for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM {
    pub ServiceTypeName: windows_core::PCWSTR,
    pub CodePackageName: windows_core::PCWSTR,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub Status: FABRIC_SERVICE_TYPE_REGISTRATION_STATUS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM")
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("CodePackageName", &self.CodePackageName)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("Status", &self.Status)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceTypeName == other.ServiceTypeName
            && self.CodePackageName == other.CodePackageName
            && self.ServiceManifestName == other.ServiceManifestName
            && self.Status == other.Status
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST {}
impl Clone for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST {}
impl Default for FABRIC_DEPLOYED_SERVICE_TYPE_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    pub ServiceName: *mut u16,
    pub PartitionId: windows_core::GUID,
    pub ReplicaId: i64,
    pub CurrentServiceOperation: FABRIC_QUERY_SERVICE_OPERATION_NAME,
    pub CurrentServiceOperationStartTimeUtc: windows::Win32::Foundation::FILETIME,
    pub CurrentReplicatorOperation: FABRIC_QUERY_REPLICATOR_OPERATION_NAME,
    pub ReadStatus: FABRIC_SERVICE_PARTITION_ACCESS_STATUS,
    pub WriteStatus: FABRIC_SERVICE_PARTITION_ACCESS_STATUS,
    pub ReportedLoad: *mut FABRIC_LOAD_METRIC_REPORT_LIST,
    pub ReplicatorStatus: *mut FABRIC_REPLICATOR_STATUS_QUERY_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM")
            .field("ServiceName", &self.ServiceName)
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaId", &self.ReplicaId)
            .field("CurrentServiceOperation", &self.CurrentServiceOperation)
            .field(
                "CurrentServiceOperationStartTimeUtc",
                &self.CurrentServiceOperationStartTimeUtc,
            )
            .field(
                "CurrentReplicatorOperation",
                &self.CurrentReplicatorOperation,
            )
            .field("ReadStatus", &self.ReadStatus)
            .field("WriteStatus", &self.WriteStatus)
            .field("ReportedLoad", &self.ReportedLoad)
            .field("ReplicatorStatus", &self.ReplicatorStatus)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.PartitionId == other.PartitionId
            && self.ReplicaId == other.ReplicaId
            && self.CurrentServiceOperation == other.CurrentServiceOperation
            && self.CurrentServiceOperationStartTimeUtc == other.CurrentServiceOperationStartTimeUtc
            && self.CurrentReplicatorOperation == other.CurrentReplicatorOperation
            && self.ReadStatus == other.ReadStatus
            && self.WriteStatus == other.WriteStatus
            && self.ReportedLoad == other.ReportedLoad
            && self.ReplicatorStatus == other.ReplicatorStatus
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX1 {
    pub ReplicaStatus: *mut FABRIC_REPLICA_STATUS_QUERY_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX1")
            .field("ReplicaStatus", &self.ReplicaStatus)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind
    for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX1
{
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ReplicaStatus == other.ReplicaStatus && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX2 {
    pub DeployedServiceReplica: *mut FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX2 {}
impl Clone for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX2")
            .field("DeployedServiceReplica", &self.DeployedServiceReplica)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind
    for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX2
{
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.DeployedServiceReplica == other.DeployedServiceReplica
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX2 {}
impl Default for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_DETAIL_QUERY_RESULT_ITEM_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    pub ServiceName: *mut u16,
    pub ServiceTypeName: windows_core::PCWSTR,
    pub ServiceManifestVersion: windows_core::PCWSTR,
    pub CodePackageName: windows_core::PCWSTR,
    pub PartitionId: windows_core::GUID,
    pub ReplicaId: i64,
    pub ReplicaRole: FABRIC_REPLICA_ROLE,
    pub ReplicaStatus: FABRIC_QUERY_SERVICE_REPLICA_STATUS,
    pub Address: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM")
            .field("ServiceName", &self.ServiceName)
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("ServiceManifestVersion", &self.ServiceManifestVersion)
            .field("CodePackageName", &self.CodePackageName)
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaId", &self.ReplicaId)
            .field("ReplicaRole", &self.ReplicaRole)
            .field("ReplicaStatus", &self.ReplicaStatus)
            .field("Address", &self.Address)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.ServiceTypeName == other.ServiceTypeName
            && self.ServiceManifestVersion == other.ServiceManifestVersion
            && self.CodePackageName == other.CodePackageName
            && self.PartitionId == other.PartitionId
            && self.ReplicaId == other.ReplicaId
            && self.ReplicaRole == other.ReplicaRole
            && self.ReplicaStatus == other.ReplicaStatus
            && self.Address == other.Address
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {}
impl Default for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX1 {
    pub ServiceManifestName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX1")
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceManifestName == other.ServiceManifestName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX2 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX2 {}
impl Clone for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX2")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX2 {}
impl Default for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX3 {
    pub HostProcessId: i64,
    pub ReconfigurationInformation: *mut FABRIC_RECONFIGURATION_INFORMATION_QUERY_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX3 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX3")
            .field("HostProcessId", &self.HostProcessId)
            .field(
                "ReconfigurationInformation",
                &self.ReconfigurationInformation,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX3 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.HostProcessId == other.HostProcessId
            && self.ReconfigurationInformation == other.ReconfigurationInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX3 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM {
    pub ServiceName: *mut u16,
    pub PartitionId: windows_core::GUID,
    pub InstanceId: i64,
    pub CurrentServiceOperation: FABRIC_QUERY_SERVICE_OPERATION_NAME,
    pub CurrentServiceOperationStartTimeUtc: windows::Win32::Foundation::FILETIME,
    pub ReportedLoad: *mut FABRIC_LOAD_METRIC_REPORT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM")
            .field("ServiceName", &self.ServiceName)
            .field("PartitionId", &self.PartitionId)
            .field("InstanceId", &self.InstanceId)
            .field("CurrentServiceOperation", &self.CurrentServiceOperation)
            .field(
                "CurrentServiceOperationStartTimeUtc",
                &self.CurrentServiceOperationStartTimeUtc,
            )
            .field("ReportedLoad", &self.ReportedLoad)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind
    for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM
{
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.PartitionId == other.PartitionId
            && self.InstanceId == other.InstanceId
            && self.CurrentServiceOperation == other.CurrentServiceOperation
            && self.CurrentServiceOperationStartTimeUtc == other.CurrentServiceOperationStartTimeUtc
            && self.ReportedLoad == other.ReportedLoad
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM_EX1 {
    pub DeployedServiceReplica: *mut FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM_EX1")
            .field("DeployedServiceReplica", &self.DeployedServiceReplica)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind
    for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM_EX1
{
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.DeployedServiceReplica == other.DeployedServiceReplica
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_DETAIL_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    pub ServiceName: *mut u16,
    pub ServiceTypeName: windows_core::PCWSTR,
    pub ServiceManifestVersion: windows_core::PCWSTR,
    pub CodePackageName: windows_core::PCWSTR,
    pub PartitionId: windows_core::GUID,
    pub InstanceId: i64,
    pub ReplicaStatus: FABRIC_QUERY_SERVICE_REPLICA_STATUS,
    pub Address: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM")
            .field("ServiceName", &self.ServiceName)
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("ServiceManifestVersion", &self.ServiceManifestVersion)
            .field("CodePackageName", &self.CodePackageName)
            .field("PartitionId", &self.PartitionId)
            .field("InstanceId", &self.InstanceId)
            .field("ReplicaStatus", &self.ReplicaStatus)
            .field("Address", &self.Address)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.ServiceTypeName == other.ServiceTypeName
            && self.ServiceManifestVersion == other.ServiceManifestVersion
            && self.CodePackageName == other.CodePackageName
            && self.PartitionId == other.PartitionId
            && self.InstanceId == other.InstanceId
            && self.ReplicaStatus == other.ReplicaStatus
            && self.Address == other.Address
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX1 {
    pub ServiceManifestName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX1")
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceManifestName == other.ServiceManifestName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX2 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX2 {}
impl Clone for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX2")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX2 {}
impl Default for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX3 {
    pub HostProcessId: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX3 {}
impl Clone for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX3")
            .field("HostProcessId", &self.HostProcessId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.HostProcessId == other.HostProcessId && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX3 {}
impl Default for FABRIC_DEPLOYED_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DLLHOST_ENTRY_POINT_DESCRIPTION {
    pub IsolationPolicyType: FABRIC_DLLHOST_ISOLATION_POLICY,
    pub HostedDlls: *mut FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DLLHOST_ENTRY_POINT_DESCRIPTION {}
impl Clone for FABRIC_DLLHOST_ENTRY_POINT_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DLLHOST_ENTRY_POINT_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DLLHOST_ENTRY_POINT_DESCRIPTION")
            .field("IsolationPolicyType", &self.IsolationPolicyType)
            .field("HostedDlls", &self.HostedDlls)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DLLHOST_ENTRY_POINT_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DLLHOST_ENTRY_POINT_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.IsolationPolicyType == other.IsolationPolicyType
            && self.HostedDlls == other.HostedDlls
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DLLHOST_ENTRY_POINT_DESCRIPTION {}
impl Default for FABRIC_DLLHOST_ENTRY_POINT_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION {
    pub Kind: FABRIC_DLLHOST_HOSTED_DLL_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION {}
impl Clone for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION {}
impl Default for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION,
}
impl Copy for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION_LIST {}
impl Clone for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION_LIST {}
impl Default for FABRIC_DLLHOST_HOSTED_DLL_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DLLHOST_HOSTED_MANAGED_DLL_DESCRIPTION {
    pub AssemblyName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DLLHOST_HOSTED_MANAGED_DLL_DESCRIPTION {}
impl Clone for FABRIC_DLLHOST_HOSTED_MANAGED_DLL_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DLLHOST_HOSTED_MANAGED_DLL_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DLLHOST_HOSTED_MANAGED_DLL_DESCRIPTION")
            .field("AssemblyName", &self.AssemblyName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DLLHOST_HOSTED_MANAGED_DLL_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DLLHOST_HOSTED_MANAGED_DLL_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.AssemblyName == other.AssemblyName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DLLHOST_HOSTED_MANAGED_DLL_DESCRIPTION {}
impl Default for FABRIC_DLLHOST_HOSTED_MANAGED_DLL_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_DLLHOST_HOSTED_UNMANAGED_DLL_DESCRIPTION {
    pub DllName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_DLLHOST_HOSTED_UNMANAGED_DLL_DESCRIPTION {}
impl Clone for FABRIC_DLLHOST_HOSTED_UNMANAGED_DLL_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_DLLHOST_HOSTED_UNMANAGED_DLL_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_DLLHOST_HOSTED_UNMANAGED_DLL_DESCRIPTION")
            .field("DllName", &self.DllName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_DLLHOST_HOSTED_UNMANAGED_DLL_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_DLLHOST_HOSTED_UNMANAGED_DLL_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.DllName == other.DllName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_DLLHOST_HOSTED_UNMANAGED_DLL_DESCRIPTION {}
impl Default for FABRIC_DLLHOST_HOSTED_UNMANAGED_DLL_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ENDPOINT_RESOURCE_DESCRIPTION {
    pub Name: windows_core::PCWSTR,
    pub Protocol: windows_core::PCWSTR,
    pub Type: windows_core::PCWSTR,
    pub Port: u32,
    pub CertificateName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION {}
impl Clone for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ENDPOINT_RESOURCE_DESCRIPTION")
            .field("Name", &self.Name)
            .field("Protocol", &self.Protocol)
            .field("Type", &self.Type)
            .field("Port", &self.Port)
            .field("CertificateName", &self.CertificateName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Protocol == other.Protocol
            && self.Type == other.Type
            && self.Port == other.Port
            && self.CertificateName == other.CertificateName
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION {}
impl Default for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX1 {
    pub UriScheme: windows_core::PCWSTR,
    pub PathSuffix: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX1 {}
impl Clone for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX1")
            .field("UriScheme", &self.UriScheme)
            .field("PathSuffix", &self.PathSuffix)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UriScheme == other.UriScheme
            && self.PathSuffix == other.PathSuffix
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX1 {}
impl Default for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX2 {
    pub CodePackageName: windows_core::PCWSTR,
    pub IpAddressOrFqdn: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX2 {}
impl Clone for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX2")
            .field("CodePackageName", &self.CodePackageName)
            .field("IpAddressOrFqdn", &self.IpAddressOrFqdn)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.CodePackageName == other.CodePackageName
            && self.IpAddressOrFqdn == other.IpAddressOrFqdn
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX2 {}
impl Default for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_ENDPOINT_RESOURCE_DESCRIPTION,
}
impl Copy for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST {}
impl Clone for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST {}
impl Default for FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT {
    pub EntityKind: FABRIC_HEALTH_ENTITY_KIND,
    pub HealthStateCount: *const FABRIC_HEALTH_STATE_COUNT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT {}
impl Clone for FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT")
            .field("EntityKind", &self.EntityKind)
            .field("HealthStateCount", &self.HealthStateCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT {
    fn eq(&self, other: &Self) -> bool {
        self.EntityKind == other.EntityKind
            && self.HealthStateCount == other.HealthStateCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT {}
impl Default for FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_EPOCH {
    pub DataLossNumber: i64,
    pub ConfigurationNumber: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_EPOCH {}
impl Clone for FABRIC_EPOCH {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_EPOCH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_EPOCH")
            .field("DataLossNumber", &self.DataLossNumber)
            .field("ConfigurationNumber", &self.ConfigurationNumber)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_EPOCH {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_EPOCH {
    fn eq(&self, other: &Self) -> bool {
        self.DataLossNumber == other.DataLossNumber
            && self.ConfigurationNumber == other.ConfigurationNumber
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_EPOCH {}
impl Default for FABRIC_EPOCH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ESE_LOCAL_STORE_SETTINGS {
    pub DbFolderPath: windows_core::PCWSTR,
    pub LogFileSizeInKB: i32,
    pub LogBufferSizeInKB: i32,
    pub MaxCursors: i32,
    pub MaxVerPages: i32,
    pub MaxAsyncCommitDelayInMilliseconds: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ESE_LOCAL_STORE_SETTINGS {}
impl Clone for FABRIC_ESE_LOCAL_STORE_SETTINGS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ESE_LOCAL_STORE_SETTINGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ESE_LOCAL_STORE_SETTINGS")
            .field("DbFolderPath", &self.DbFolderPath)
            .field("LogFileSizeInKB", &self.LogFileSizeInKB)
            .field("LogBufferSizeInKB", &self.LogBufferSizeInKB)
            .field("MaxCursors", &self.MaxCursors)
            .field("MaxVerPages", &self.MaxVerPages)
            .field(
                "MaxAsyncCommitDelayInMilliseconds",
                &self.MaxAsyncCommitDelayInMilliseconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ESE_LOCAL_STORE_SETTINGS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ESE_LOCAL_STORE_SETTINGS {
    fn eq(&self, other: &Self) -> bool {
        self.DbFolderPath == other.DbFolderPath
            && self.LogFileSizeInKB == other.LogFileSizeInKB
            && self.LogBufferSizeInKB == other.LogBufferSizeInKB
            && self.MaxCursors == other.MaxCursors
            && self.MaxVerPages == other.MaxVerPages
            && self.MaxAsyncCommitDelayInMilliseconds == other.MaxAsyncCommitDelayInMilliseconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ESE_LOCAL_STORE_SETTINGS {}
impl Default for FABRIC_ESE_LOCAL_STORE_SETTINGS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1 {
    pub EnableIncrementalBackup: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1")
            .field("EnableIncrementalBackup", &self.EnableIncrementalBackup)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.EnableIncrementalBackup == other.EnableIncrementalBackup
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ESE_LOCAL_STORE_SETTINGS_EX2 {
    pub MaxCacheSizeInMB: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX2 {}
impl Clone for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ESE_LOCAL_STORE_SETTINGS_EX2")
            .field("MaxCacheSizeInMB", &self.MaxCacheSizeInMB)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.MaxCacheSizeInMB == other.MaxCacheSizeInMB && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX2 {}
impl Default for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ESE_LOCAL_STORE_SETTINGS_EX3 {
    pub MaxDefragFrequencyInMinutes: i32,
    pub DefragThresholdInMB: i32,
    pub DatabasePageSizeInKB: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX3 {}
impl Clone for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ESE_LOCAL_STORE_SETTINGS_EX3")
            .field(
                "MaxDefragFrequencyInMinutes",
                &self.MaxDefragFrequencyInMinutes,
            )
            .field("DefragThresholdInMB", &self.DefragThresholdInMB)
            .field("DatabasePageSizeInKB", &self.DatabasePageSizeInKB)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.MaxDefragFrequencyInMinutes == other.MaxDefragFrequencyInMinutes
            && self.DefragThresholdInMB == other.DefragThresholdInMB
            && self.DatabasePageSizeInKB == other.DatabasePageSizeInKB
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX3 {}
impl Default for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ESE_LOCAL_STORE_SETTINGS_EX4 {
    pub CompactionThresholdInMB: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX4 {}
impl Clone for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX4 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ESE_LOCAL_STORE_SETTINGS_EX4")
            .field("CompactionThresholdInMB", &self.CompactionThresholdInMB)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX4 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX4 {
    fn eq(&self, other: &Self) -> bool {
        self.CompactionThresholdInMB == other.CompactionThresholdInMB
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX4 {}
impl Default for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX4 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ESE_LOCAL_STORE_SETTINGS_EX5 {
    pub IntrinsicValueThresholdInBytes: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX5 {}
impl Clone for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX5 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX5 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ESE_LOCAL_STORE_SETTINGS_EX5")
            .field(
                "IntrinsicValueThresholdInBytes",
                &self.IntrinsicValueThresholdInBytes,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX5 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX5 {
    fn eq(&self, other: &Self) -> bool {
        self.IntrinsicValueThresholdInBytes == other.IntrinsicValueThresholdInBytes
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX5 {}
impl Default for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX5 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_ESE_LOCAL_STORE_SETTINGS_EX6 {
    pub EnableOverwriteOnUpdate: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX6 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX6 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX6 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ESE_LOCAL_STORE_SETTINGS_EX6")
            .field("EnableOverwriteOnUpdate", &self.EnableOverwriteOnUpdate)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX6 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX6 {
    fn eq(&self, other: &Self) -> bool {
        self.EnableOverwriteOnUpdate == other.EnableOverwriteOnUpdate
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX6 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_ESE_LOCAL_STORE_SETTINGS_EX6 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_EVENT_CONTEXT_MAP {
    pub Count: u32,
    pub Items: *mut FABRIC_EVENT_CONTEXT_MAP_ITEM,
}
impl Copy for FABRIC_EVENT_CONTEXT_MAP {}
impl Clone for FABRIC_EVENT_CONTEXT_MAP {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_EVENT_CONTEXT_MAP {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_EVENT_CONTEXT_MAP")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_EVENT_CONTEXT_MAP {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_EVENT_CONTEXT_MAP {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_EVENT_CONTEXT_MAP {}
impl Default for FABRIC_EVENT_CONTEXT_MAP {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_EVENT_CONTEXT_MAP_ITEM {
    pub Key: windows_core::PCWSTR,
    pub Value: windows_core::PCWSTR,
}
impl Copy for FABRIC_EVENT_CONTEXT_MAP_ITEM {}
impl Clone for FABRIC_EVENT_CONTEXT_MAP_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_EVENT_CONTEXT_MAP_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_EVENT_CONTEXT_MAP_ITEM")
            .field("Key", &self.Key)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_EVENT_CONTEXT_MAP_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_EVENT_CONTEXT_MAP_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.Key == other.Key && self.Value == other.Value
    }
}
impl Eq for FABRIC_EVENT_CONTEXT_MAP_ITEM {}
impl Default for FABRIC_EVENT_CONTEXT_MAP_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_EVENT_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvent: *const FABRIC_HEALTH_EVENT,
    pub ConsiderWarningAsError: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_EVENT_HEALTH_EVALUATION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_EVENT_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_EVENT_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_EVENT_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvent", &self.UnhealthyEvent)
            .field("ConsiderWarningAsError", &self.ConsiderWarningAsError)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_EVENT_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_EVENT_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvent == other.UnhealthyEvent
            && self.ConsiderWarningAsError == other.ConsiderWarningAsError
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_EVENT_HEALTH_EVALUATION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_EVENT_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_EXECUTING_FAULTS_EVENT {
    pub TimeStampUtc: windows::Win32::Foundation::FILETIME,
    pub Faults: *const FABRIC_STRING_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_EXECUTING_FAULTS_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_EXECUTING_FAULTS_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_EXECUTING_FAULTS_EVENT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_EXECUTING_FAULTS_EVENT")
            .field("TimeStampUtc", &self.TimeStampUtc)
            .field("Faults", &self.Faults)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_EXECUTING_FAULTS_EVENT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_EXECUTING_FAULTS_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.TimeStampUtc == other.TimeStampUtc
            && self.Faults == other.Faults
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_EXECUTING_FAULTS_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_EXECUTING_FAULTS_EVENT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION {
    pub Program: windows_core::PCWSTR,
    pub Arguments: windows_core::PCWSTR,
    pub WorkingFolder: FABRIC_EXEHOST_WORKING_FOLDER,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION {}
impl Clone for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION")
            .field("Program", &self.Program)
            .field("Arguments", &self.Arguments)
            .field("WorkingFolder", &self.WorkingFolder)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Program == other.Program
            && self.Arguments == other.Arguments
            && self.WorkingFolder == other.WorkingFolder
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION {}
impl Default for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX1 {
    pub PeriodicIntervalInSeconds: u32,
    pub ConsoleRedirectionEnabled: windows::Win32::Foundation::BOOLEAN,
    pub ConsoleRedirectionFileRetentionCount: u32,
    pub ConsoleRedirectionFileMaxSizeInKb: u32,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX1")
            .field("PeriodicIntervalInSeconds", &self.PeriodicIntervalInSeconds)
            .field("ConsoleRedirectionEnabled", &self.ConsoleRedirectionEnabled)
            .field(
                "ConsoleRedirectionFileRetentionCount",
                &self.ConsoleRedirectionFileRetentionCount,
            )
            .field(
                "ConsoleRedirectionFileMaxSizeInKb",
                &self.ConsoleRedirectionFileMaxSizeInKb,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.PeriodicIntervalInSeconds == other.PeriodicIntervalInSeconds
            && self.ConsoleRedirectionEnabled == other.ConsoleRedirectionEnabled
            && self.ConsoleRedirectionFileRetentionCount
                == other.ConsoleRedirectionFileRetentionCount
            && self.ConsoleRedirectionFileMaxSizeInKb == other.ConsoleRedirectionFileMaxSizeInKb
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX2 {
    pub IsExternalExecutable: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX2")
            .field("IsExternalExecutable", &self.IsExternalExecutable)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.IsExternalExecutable == other.IsExternalExecutable && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_EXEHOST_ENTRY_POINT_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_EXTERNAL_STORE_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    pub ApplicationTypeName: windows_core::PCWSTR,
    pub ApplicationTypeVersion: windows_core::PCWSTR,
    pub ApplicationPackageDownloadUri: windows_core::PCWSTR,
    pub Async: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_EXTERNAL_STORE_PROVISION_APPLICATION_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_EXTERNAL_STORE_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_EXTERNAL_STORE_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_EXTERNAL_STORE_PROVISION_APPLICATION_TYPE_DESCRIPTION")
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field("ApplicationTypeVersion", &self.ApplicationTypeVersion)
            .field(
                "ApplicationPackageDownloadUri",
                &self.ApplicationPackageDownloadUri,
            )
            .field("Async", &self.Async)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_EXTERNAL_STORE_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_EXTERNAL_STORE_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeName == other.ApplicationTypeName
            && self.ApplicationTypeVersion == other.ApplicationTypeVersion
            && self.ApplicationPackageDownloadUri == other.ApplicationPackageDownloadUri
            && self.Async == other.Async
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_EXTERNAL_STORE_PROVISION_APPLICATION_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_EXTERNAL_STORE_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_GATEWAY_INFORMATION {
    pub NodeAddress: windows_core::PCWSTR,
    pub NodeId: FABRIC_NODE_ID,
    pub NodeInstanceId: u64,
    pub NodeName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_GATEWAY_INFORMATION {}
impl Clone for FABRIC_GATEWAY_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_GATEWAY_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_GATEWAY_INFORMATION")
            .field("NodeAddress", &self.NodeAddress)
            .field("NodeId", &self.NodeId)
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("NodeName", &self.NodeName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_GATEWAY_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_GATEWAY_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeAddress == other.NodeAddress
            && self.NodeId == other.NodeId
            && self.NodeInstanceId == other.NodeInstanceId
            && self.NodeName == other.NodeName
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_GATEWAY_INFORMATION {}
impl Default for FABRIC_GATEWAY_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_GET_CHAOS_REPORT_DESCRIPTION {
    pub Filter: *mut FABRIC_CHAOS_REPORT_FILTER,
    pub ContinuationToken: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_GET_CHAOS_REPORT_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_GET_CHAOS_REPORT_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_GET_CHAOS_REPORT_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_GET_CHAOS_REPORT_DESCRIPTION")
            .field("Filter", &self.Filter)
            .field("ContinuationToken", &self.ContinuationToken)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_GET_CHAOS_REPORT_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_GET_CHAOS_REPORT_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Filter == other.Filter
            && self.ContinuationToken == other.ContinuationToken
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_GET_CHAOS_REPORT_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_GET_CHAOS_REPORT_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_GET_PROPERTY_OPERATION {
    pub PropertyName: windows_core::PCWSTR,
    pub IncludeValue: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_GET_PROPERTY_OPERATION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_GET_PROPERTY_OPERATION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_GET_PROPERTY_OPERATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_GET_PROPERTY_OPERATION")
            .field("PropertyName", &self.PropertyName)
            .field("IncludeValue", &self.IncludeValue)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_GET_PROPERTY_OPERATION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_GET_PROPERTY_OPERATION {
    fn eq(&self, other: &Self) -> bool {
        self.PropertyName == other.PropertyName
            && self.IncludeValue == other.IncludeValue
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_GET_PROPERTY_OPERATION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_GET_PROPERTY_OPERATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_HEALTH_EVALUATION {
    pub Kind: FABRIC_HEALTH_EVALUATION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_HEALTH_EVALUATION {}
impl Clone for FABRIC_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_EVALUATION")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_HEALTH_EVALUATION {}
impl Default for FABRIC_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_HEALTH_EVALUATION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_HEALTH_EVALUATION,
}
impl Copy for FABRIC_HEALTH_EVALUATION_LIST {}
impl Clone for FABRIC_HEALTH_EVALUATION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_HEALTH_EVALUATION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_EVALUATION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_HEALTH_EVALUATION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_HEALTH_EVALUATION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_HEALTH_EVALUATION_LIST {}
impl Default for FABRIC_HEALTH_EVALUATION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_HEALTH_EVENT {
    pub HealthInformation: *const FABRIC_HEALTH_INFORMATION,
    pub SourceUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub LastModifiedUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub IsExpired: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_HEALTH_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_HEALTH_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_HEALTH_EVENT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_EVENT")
            .field("HealthInformation", &self.HealthInformation)
            .field("SourceUtcTimestamp", &self.SourceUtcTimestamp)
            .field("LastModifiedUtcTimestamp", &self.LastModifiedUtcTimestamp)
            .field("IsExpired", &self.IsExpired)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_HEALTH_EVENT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_HEALTH_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.HealthInformation == other.HealthInformation
            && self.SourceUtcTimestamp == other.SourceUtcTimestamp
            && self.LastModifiedUtcTimestamp == other.LastModifiedUtcTimestamp
            && self.IsExpired == other.IsExpired
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_HEALTH_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_HEALTH_EVENT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_HEALTH_EVENTS_FILTER {
    pub HealthStateFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_HEALTH_EVENTS_FILTER {}
impl Clone for FABRIC_HEALTH_EVENTS_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_HEALTH_EVENTS_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_EVENTS_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_HEALTH_EVENTS_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_HEALTH_EVENTS_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_HEALTH_EVENTS_FILTER {}
impl Default for FABRIC_HEALTH_EVENTS_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_HEALTH_EVENT_EX1 {
    pub LastOkTransitionAt: windows::Win32::Foundation::FILETIME,
    pub LastWarningTransitionAt: windows::Win32::Foundation::FILETIME,
    pub LastErrorTransitionAt: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_HEALTH_EVENT_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_HEALTH_EVENT_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_HEALTH_EVENT_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_EVENT_EX1")
            .field("LastOkTransitionAt", &self.LastOkTransitionAt)
            .field("LastWarningTransitionAt", &self.LastWarningTransitionAt)
            .field("LastErrorTransitionAt", &self.LastErrorTransitionAt)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_HEALTH_EVENT_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_HEALTH_EVENT_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.LastOkTransitionAt == other.LastOkTransitionAt
            && self.LastWarningTransitionAt == other.LastWarningTransitionAt
            && self.LastErrorTransitionAt == other.LastErrorTransitionAt
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_HEALTH_EVENT_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_HEALTH_EVENT_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_HEALTH_EVENT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_HEALTH_EVENT,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_HEALTH_EVENT_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_HEALTH_EVENT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_HEALTH_EVENT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_EVENT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_HEALTH_EVENT_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_HEALTH_EVENT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_HEALTH_EVENT_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_HEALTH_EVENT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_HEALTH_INFORMATION {
    pub SourceId: windows_core::PCWSTR,
    pub Property: windows_core::PCWSTR,
    pub TimeToLiveSeconds: u32,
    pub State: FABRIC_HEALTH_STATE,
    pub Description: windows_core::PCWSTR,
    pub SequenceNumber: i64,
    pub RemoveWhenExpired: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_HEALTH_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_HEALTH_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_HEALTH_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_INFORMATION")
            .field("SourceId", &self.SourceId)
            .field("Property", &self.Property)
            .field("TimeToLiveSeconds", &self.TimeToLiveSeconds)
            .field("State", &self.State)
            .field("Description", &self.Description)
            .field("SequenceNumber", &self.SequenceNumber)
            .field("RemoveWhenExpired", &self.RemoveWhenExpired)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_HEALTH_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_HEALTH_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.SourceId == other.SourceId
            && self.Property == other.Property
            && self.TimeToLiveSeconds == other.TimeToLiveSeconds
            && self.State == other.State
            && self.Description == other.Description
            && self.SequenceNumber == other.SequenceNumber
            && self.RemoveWhenExpired == other.RemoveWhenExpired
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_HEALTH_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_HEALTH_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_HEALTH_REPORT {
    pub Kind: FABRIC_HEALTH_REPORT_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_HEALTH_REPORT {}
impl Clone for FABRIC_HEALTH_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_HEALTH_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_REPORT")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_HEALTH_REPORT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_HEALTH_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_HEALTH_REPORT {}
impl Default for FABRIC_HEALTH_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_HEALTH_REPORT_SEND_OPTIONS {
    pub Immediate: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_HEALTH_REPORT_SEND_OPTIONS {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_HEALTH_REPORT_SEND_OPTIONS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_HEALTH_REPORT_SEND_OPTIONS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_REPORT_SEND_OPTIONS")
            .field("Immediate", &self.Immediate)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_HEALTH_REPORT_SEND_OPTIONS {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_HEALTH_REPORT_SEND_OPTIONS {
    fn eq(&self, other: &Self) -> bool {
        self.Immediate == other.Immediate && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_HEALTH_REPORT_SEND_OPTIONS {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_HEALTH_REPORT_SEND_OPTIONS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_HEALTH_STATE_COUNT {
    pub OkCount: u32,
    pub WarningCount: u32,
    pub ErrorCount: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_HEALTH_STATE_COUNT {}
impl Clone for FABRIC_HEALTH_STATE_COUNT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_HEALTH_STATE_COUNT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_STATE_COUNT")
            .field("OkCount", &self.OkCount)
            .field("WarningCount", &self.WarningCount)
            .field("ErrorCount", &self.ErrorCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_HEALTH_STATE_COUNT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_HEALTH_STATE_COUNT {
    fn eq(&self, other: &Self) -> bool {
        self.OkCount == other.OkCount
            && self.WarningCount == other.WarningCount
            && self.ErrorCount == other.ErrorCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_HEALTH_STATE_COUNT {}
impl Default for FABRIC_HEALTH_STATE_COUNT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_HEALTH_STATISTICS {
    pub Count: u32,
    pub Items: *const FABRIC_ENTITY_KIND_HEALTH_STATE_COUNT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_HEALTH_STATISTICS {}
impl Clone for FABRIC_HEALTH_STATISTICS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_HEALTH_STATISTICS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_HEALTH_STATISTICS")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_HEALTH_STATISTICS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_HEALTH_STATISTICS {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_HEALTH_STATISTICS {}
impl Default for FABRIC_HEALTH_STATISTICS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_INT64_RANGE_PARTITION_INFORMATION {
    pub Id: windows_core::GUID,
    pub LowKey: i64,
    pub HighKey: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_INT64_RANGE_PARTITION_INFORMATION {}
impl Clone for FABRIC_INT64_RANGE_PARTITION_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_INT64_RANGE_PARTITION_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_INT64_RANGE_PARTITION_INFORMATION")
            .field("Id", &self.Id)
            .field("LowKey", &self.LowKey)
            .field("HighKey", &self.HighKey)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_INT64_RANGE_PARTITION_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_INT64_RANGE_PARTITION_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.Id == other.Id
            && self.LowKey == other.LowKey
            && self.HighKey == other.HighKey
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_INT64_RANGE_PARTITION_INFORMATION {}
impl Default for FABRIC_INT64_RANGE_PARTITION_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_KEY_VALUE_STORE_ITEM {
    pub Metadata: *const FABRIC_KEY_VALUE_STORE_ITEM_METADATA,
    pub Value: *mut u8,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_KEY_VALUE_STORE_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_KEY_VALUE_STORE_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_ITEM")
            .field("Metadata", &self.Metadata)
            .field("Value", &self.Value)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_ITEM {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_KEY_VALUE_STORE_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.Metadata == other.Metadata
            && self.Value == other.Value
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_KEY_VALUE_STORE_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_KEY_VALUE_STORE_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_KEY_VALUE_STORE_ITEM_METADATA {
    pub Key: windows_core::PCWSTR,
    pub ValueSizeInBytes: i32,
    pub SequenceNumber: i64,
    pub LastModifiedUtc: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_KEY_VALUE_STORE_ITEM_METADATA {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_KEY_VALUE_STORE_ITEM_METADATA {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_ITEM_METADATA {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_ITEM_METADATA")
            .field("Key", &self.Key)
            .field("ValueSizeInBytes", &self.ValueSizeInBytes)
            .field("SequenceNumber", &self.SequenceNumber)
            .field("LastModifiedUtc", &self.LastModifiedUtc)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_ITEM_METADATA {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_KEY_VALUE_STORE_ITEM_METADATA {
    fn eq(&self, other: &Self) -> bool {
        self.Key == other.Key
            && self.ValueSizeInBytes == other.ValueSizeInBytes
            && self.SequenceNumber == other.SequenceNumber
            && self.LastModifiedUtc == other.LastModifiedUtc
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_KEY_VALUE_STORE_ITEM_METADATA {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_KEY_VALUE_STORE_ITEM_METADATA {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_KEY_VALUE_STORE_ITEM_METADATA_EX1 {
    pub LastModifiedOnPrimaryUtc: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_KEY_VALUE_STORE_ITEM_METADATA_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_KEY_VALUE_STORE_ITEM_METADATA_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_ITEM_METADATA_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_ITEM_METADATA_EX1")
            .field("LastModifiedOnPrimaryUtc", &self.LastModifiedOnPrimaryUtc)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_ITEM_METADATA_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_KEY_VALUE_STORE_ITEM_METADATA_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.LastModifiedOnPrimaryUtc == other.LastModifiedOnPrimaryUtc
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_KEY_VALUE_STORE_ITEM_METADATA_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_KEY_VALUE_STORE_ITEM_METADATA_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_KEY_VALUE_STORE_MIGRATION_QUERY_RESULT {
    pub CurrentPhase: FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE,
    pub State: FABRIC_KEY_VALUE_STORE_MIGRATION_STATE,
    pub NextPhase: FABRIC_KEY_VALUE_STORE_MIGRATION_PHASE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_KEY_VALUE_STORE_MIGRATION_QUERY_RESULT {}
impl Clone for FABRIC_KEY_VALUE_STORE_MIGRATION_QUERY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_MIGRATION_QUERY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_MIGRATION_QUERY_RESULT")
            .field("CurrentPhase", &self.CurrentPhase)
            .field("State", &self.State)
            .field("NextPhase", &self.NextPhase)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_MIGRATION_QUERY_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_KEY_VALUE_STORE_MIGRATION_QUERY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.CurrentPhase == other.CurrentPhase
            && self.State == other.State
            && self.NextPhase == other.NextPhase
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_KEY_VALUE_STORE_MIGRATION_QUERY_RESULT {}
impl Default for FABRIC_KEY_VALUE_STORE_MIGRATION_QUERY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS {
    pub TransactionDrainTimeoutInSeconds: u32,
    pub SecondaryNotificationMode: FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS {}
impl Clone for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS")
            .field(
                "TransactionDrainTimeoutInSeconds",
                &self.TransactionDrainTimeoutInSeconds,
            )
            .field("SecondaryNotificationMode", &self.SecondaryNotificationMode)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS {
    fn eq(&self, other: &Self) -> bool {
        self.TransactionDrainTimeoutInSeconds == other.TransactionDrainTimeoutInSeconds
            && self.SecondaryNotificationMode == other.SecondaryNotificationMode
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS {}
impl Default for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX1 {
    pub EnableCopyNotificationPrefetch: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX1")
            .field(
                "EnableCopyNotificationPrefetch",
                &self.EnableCopyNotificationPrefetch,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.EnableCopyNotificationPrefetch == other.EnableCopyNotificationPrefetch
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX2 {
    pub FullCopyMode: FABRIC_KEY_VALUE_STORE_FULL_COPY_MODE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX2 {}
impl Clone for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX2")
            .field("FullCopyMode", &self.FullCopyMode)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.FullCopyMode == other.FullCopyMode && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX2 {}
impl Default for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX3 {
    pub LogTruncationIntervalInMinutes: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX3 {}
impl Clone for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX3")
            .field(
                "LogTruncationIntervalInMinutes",
                &self.LogTruncationIntervalInMinutes,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.LogTruncationIntervalInMinutes == other.LogTruncationIntervalInMinutes
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX3 {}
impl Default for FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS {
    pub InlineReopen: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS")
            .field("InlineReopen", &self.InlineReopen)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS {
    fn eq(&self, other: &Self) -> bool {
        self.InlineReopen == other.InlineReopen && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS_EX1 {
    pub EnableLsnCheck: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS_EX1")
            .field("EnableLsnCheck", &self.EnableLsnCheck)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.EnableLsnCheck == other.EnableLsnCheck && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT {
    pub DatabaseRowCountEstimate: i64,
    pub DatabaseLogicalSizeEstimate: i64,
    pub CopyNotificationCurrentKeyFilter: windows_core::PCWSTR,
    pub CopyNotificationCurrentProgress: i64,
    pub StatusDetails: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT {}
impl Clone for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT")
            .field("DatabaseRowCountEstimate", &self.DatabaseRowCountEstimate)
            .field(
                "DatabaseLogicalSizeEstimate",
                &self.DatabaseLogicalSizeEstimate,
            )
            .field(
                "CopyNotificationCurrentKeyFilter",
                &self.CopyNotificationCurrentKeyFilter,
            )
            .field(
                "CopyNotificationCurrentProgress",
                &self.CopyNotificationCurrentProgress,
            )
            .field("StatusDetails", &self.StatusDetails)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.DatabaseRowCountEstimate == other.DatabaseRowCountEstimate
            && self.DatabaseLogicalSizeEstimate == other.DatabaseLogicalSizeEstimate
            && self.CopyNotificationCurrentKeyFilter == other.CopyNotificationCurrentKeyFilter
            && self.CopyNotificationCurrentProgress == other.CopyNotificationCurrentProgress
            && self.StatusDetails == other.StatusDetails
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT {}
impl Default for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT_EX1 {
    pub ProviderKind: FABRIC_KEY_VALUE_STORE_PROVIDER_KIND,
    pub MigrationStatus: *const FABRIC_KEY_VALUE_STORE_MIGRATION_QUERY_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT_EX1 {}
impl Clone for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT_EX1")
            .field("ProviderKind", &self.ProviderKind)
            .field("MigrationStatus", &self.MigrationStatus)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ProviderKind == other.ProviderKind
            && self.MigrationStatus == other.MigrationStatus
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT_EX1 {}
impl Default for FABRIC_KEY_VALUE_STORE_STATUS_QUERY_RESULT_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS {
    pub SerializationBlockSize: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS {}
impl Clone for FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS")
            .field("SerializationBlockSize", &self.SerializationBlockSize)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS {
    fn eq(&self, other: &Self) -> bool {
        self.SerializationBlockSize == other.SerializationBlockSize
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS {}
impl Default for FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_LOAD_METRIC {
    pub Name: windows_core::PCWSTR,
    pub Value: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_LOAD_METRIC {}
impl Clone for FABRIC_LOAD_METRIC {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_LOAD_METRIC {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOAD_METRIC")
            .field("Name", &self.Name)
            .field("Value", &self.Value)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_LOAD_METRIC {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_LOAD_METRIC {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name && self.Value == other.Value && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_LOAD_METRIC {}
impl Default for FABRIC_LOAD_METRIC {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_LOAD_METRIC_INFORMATION {
    pub Name: windows_core::PCWSTR,
    pub IsBalancedBefore: windows::Win32::Foundation::BOOLEAN,
    pub IsBalancedAfter: windows::Win32::Foundation::BOOLEAN,
    pub DeviationBefore: f64,
    pub DeviationAfter: f64,
    pub BalancingThreshold: f64,
    pub Action: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_LOAD_METRIC_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_LOAD_METRIC_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_LOAD_METRIC_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOAD_METRIC_INFORMATION")
            .field("Name", &self.Name)
            .field("IsBalancedBefore", &self.IsBalancedBefore)
            .field("IsBalancedAfter", &self.IsBalancedAfter)
            .field("DeviationBefore", &self.DeviationBefore)
            .field("DeviationAfter", &self.DeviationAfter)
            .field("BalancingThreshold", &self.BalancingThreshold)
            .field("Action", &self.Action)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_LOAD_METRIC_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_LOAD_METRIC_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.IsBalancedBefore == other.IsBalancedBefore
            && self.IsBalancedAfter == other.IsBalancedAfter
            && self.DeviationBefore == other.DeviationBefore
            && self.DeviationAfter == other.DeviationAfter
            && self.BalancingThreshold == other.BalancingThreshold
            && self.Action == other.Action
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_LOAD_METRIC_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_LOAD_METRIC_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_LOAD_METRIC_INFORMATION_EX1 {
    pub ActivityThreshold: u32,
    pub ClusterCapacity: i64,
    pub ClusterLoad: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_LOAD_METRIC_INFORMATION_EX1 {}
impl Clone for FABRIC_LOAD_METRIC_INFORMATION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_LOAD_METRIC_INFORMATION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOAD_METRIC_INFORMATION_EX1")
            .field("ActivityThreshold", &self.ActivityThreshold)
            .field("ClusterCapacity", &self.ClusterCapacity)
            .field("ClusterLoad", &self.ClusterLoad)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_LOAD_METRIC_INFORMATION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_LOAD_METRIC_INFORMATION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ActivityThreshold == other.ActivityThreshold
            && self.ClusterCapacity == other.ClusterCapacity
            && self.ClusterLoad == other.ClusterLoad
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_LOAD_METRIC_INFORMATION_EX1 {}
impl Default for FABRIC_LOAD_METRIC_INFORMATION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_LOAD_METRIC_INFORMATION_EX2 {
    pub RemainingUnbufferedCapacity: i64,
    pub NodeBufferPercentage: f64,
    pub BufferedCapacity: i64,
    pub RemainingBufferedCapacity: i64,
    pub IsClusterCapacityViolation: windows::Win32::Foundation::BOOLEAN,
    pub MinNodeLoadValue: i64,
    pub MinNodeLoadNodeId: FABRIC_NODE_ID,
    pub MaxNodeLoadValue: i64,
    pub MaxNodeLoadNodeId: FABRIC_NODE_ID,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_LOAD_METRIC_INFORMATION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_LOAD_METRIC_INFORMATION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_LOAD_METRIC_INFORMATION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOAD_METRIC_INFORMATION_EX2")
            .field(
                "RemainingUnbufferedCapacity",
                &self.RemainingUnbufferedCapacity,
            )
            .field("NodeBufferPercentage", &self.NodeBufferPercentage)
            .field("BufferedCapacity", &self.BufferedCapacity)
            .field("RemainingBufferedCapacity", &self.RemainingBufferedCapacity)
            .field(
                "IsClusterCapacityViolation",
                &self.IsClusterCapacityViolation,
            )
            .field("MinNodeLoadValue", &self.MinNodeLoadValue)
            .field("MinNodeLoadNodeId", &self.MinNodeLoadNodeId)
            .field("MaxNodeLoadValue", &self.MaxNodeLoadValue)
            .field("MaxNodeLoadNodeId", &self.MaxNodeLoadNodeId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_LOAD_METRIC_INFORMATION_EX2 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_LOAD_METRIC_INFORMATION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.RemainingUnbufferedCapacity == other.RemainingUnbufferedCapacity
            && self.NodeBufferPercentage == other.NodeBufferPercentage
            && self.BufferedCapacity == other.BufferedCapacity
            && self.RemainingBufferedCapacity == other.RemainingBufferedCapacity
            && self.IsClusterCapacityViolation == other.IsClusterCapacityViolation
            && self.MinNodeLoadValue == other.MinNodeLoadValue
            && self.MinNodeLoadNodeId == other.MinNodeLoadNodeId
            && self.MaxNodeLoadValue == other.MaxNodeLoadValue
            && self.MaxNodeLoadNodeId == other.MaxNodeLoadNodeId
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_LOAD_METRIC_INFORMATION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_LOAD_METRIC_INFORMATION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_LOAD_METRIC_INFORMATION_EX3 {
    pub CurrentClusterLoad: f64,
    pub BufferedClusterCapacityRemaining: f64,
    pub ClusterCapacityRemaining: f64,
    pub MaximumNodeLoad: f64,
    pub MinimumNodeLoad: f64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_LOAD_METRIC_INFORMATION_EX3 {}
impl Clone for FABRIC_LOAD_METRIC_INFORMATION_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_LOAD_METRIC_INFORMATION_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOAD_METRIC_INFORMATION_EX3")
            .field("CurrentClusterLoad", &self.CurrentClusterLoad)
            .field(
                "BufferedClusterCapacityRemaining",
                &self.BufferedClusterCapacityRemaining,
            )
            .field("ClusterCapacityRemaining", &self.ClusterCapacityRemaining)
            .field("MaximumNodeLoad", &self.MaximumNodeLoad)
            .field("MinimumNodeLoad", &self.MinimumNodeLoad)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_LOAD_METRIC_INFORMATION_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_LOAD_METRIC_INFORMATION_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.CurrentClusterLoad == other.CurrentClusterLoad
            && self.BufferedClusterCapacityRemaining == other.BufferedClusterCapacityRemaining
            && self.ClusterCapacityRemaining == other.ClusterCapacityRemaining
            && self.MaximumNodeLoad == other.MaximumNodeLoad
            && self.MinimumNodeLoad == other.MinimumNodeLoad
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_LOAD_METRIC_INFORMATION_EX3 {}
impl Default for FABRIC_LOAD_METRIC_INFORMATION_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_LOAD_METRIC_INFORMATION_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_LOAD_METRIC_INFORMATION,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_LOAD_METRIC_INFORMATION_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_LOAD_METRIC_INFORMATION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_LOAD_METRIC_INFORMATION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOAD_METRIC_INFORMATION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_LOAD_METRIC_INFORMATION_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_LOAD_METRIC_INFORMATION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_LOAD_METRIC_INFORMATION_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_LOAD_METRIC_INFORMATION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_LOAD_METRIC_REPORT {
    pub Name: windows_core::PCWSTR,
    pub Value: u32,
    pub LastReportedUtc: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_LOAD_METRIC_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_LOAD_METRIC_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_LOAD_METRIC_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOAD_METRIC_REPORT")
            .field("Name", &self.Name)
            .field("Value", &self.Value)
            .field("LastReportedUtc", &self.LastReportedUtc)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_LOAD_METRIC_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_LOAD_METRIC_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Value == other.Value
            && self.LastReportedUtc == other.LastReportedUtc
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_LOAD_METRIC_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_LOAD_METRIC_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_LOAD_METRIC_REPORT_EX1 {
    pub CurrentValue: f64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_LOAD_METRIC_REPORT_EX1 {}
impl Clone for FABRIC_LOAD_METRIC_REPORT_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_LOAD_METRIC_REPORT_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOAD_METRIC_REPORT_EX1")
            .field("CurrentValue", &self.CurrentValue)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_LOAD_METRIC_REPORT_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_LOAD_METRIC_REPORT_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.CurrentValue == other.CurrentValue && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_LOAD_METRIC_REPORT_EX1 {}
impl Default for FABRIC_LOAD_METRIC_REPORT_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_LOAD_METRIC_REPORT_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_LOAD_METRIC_REPORT,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_LOAD_METRIC_REPORT_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_LOAD_METRIC_REPORT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_LOAD_METRIC_REPORT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOAD_METRIC_REPORT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_LOAD_METRIC_REPORT_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_LOAD_METRIC_REPORT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_LOAD_METRIC_REPORT_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_LOAD_METRIC_REPORT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION {
    pub NetworkAddressPrefix: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION {}
impl Clone for FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION")
            .field("NetworkAddressPrefix", &self.NetworkAddressPrefix)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkAddressPrefix == other.NetworkAddressPrefix && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION {}
impl Default for FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_LOCAL_NETWORK_DESCRIPTION {
    pub NetworkConfiguration: *const FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_LOCAL_NETWORK_DESCRIPTION {}
impl Clone for FABRIC_LOCAL_NETWORK_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_LOCAL_NETWORK_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOCAL_NETWORK_DESCRIPTION")
            .field("NetworkConfiguration", &self.NetworkConfiguration)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_LOCAL_NETWORK_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_LOCAL_NETWORK_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkConfiguration == other.NetworkConfiguration && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_LOCAL_NETWORK_DESCRIPTION {}
impl Default for FABRIC_LOCAL_NETWORK_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_LOCAL_NETWORK_INFORMATION {
    pub NetworkName: windows_core::PCWSTR,
    pub NetworkConfiguration: *const FABRIC_LOCAL_NETWORK_CONFIGURATION_DESCRIPTION,
    pub NetworkStatus: FABRIC_NETWORK_STATUS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_LOCAL_NETWORK_INFORMATION {}
impl Clone for FABRIC_LOCAL_NETWORK_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_LOCAL_NETWORK_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_LOCAL_NETWORK_INFORMATION")
            .field("NetworkName", &self.NetworkName)
            .field("NetworkConfiguration", &self.NetworkConfiguration)
            .field("NetworkStatus", &self.NetworkStatus)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_LOCAL_NETWORK_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_LOCAL_NETWORK_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkName == other.NetworkName
            && self.NetworkConfiguration == other.NetworkConfiguration
            && self.NetworkStatus == other.NetworkStatus
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_LOCAL_NETWORK_INFORMATION {}
impl Default for FABRIC_LOCAL_NETWORK_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_MOVE_PRIMARY_DESCRIPTION2 {
    pub Kind: FABRIC_MOVE_PRIMARY_DESCRIPTION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_MOVE_PRIMARY_DESCRIPTION2 {}
impl Clone for FABRIC_MOVE_PRIMARY_DESCRIPTION2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_MOVE_PRIMARY_DESCRIPTION2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_MOVE_PRIMARY_DESCRIPTION2")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_MOVE_PRIMARY_DESCRIPTION2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_MOVE_PRIMARY_DESCRIPTION2 {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_MOVE_PRIMARY_DESCRIPTION2 {}
impl Default for FABRIC_MOVE_PRIMARY_DESCRIPTION2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME {
    pub NodeName: windows_core::PCWSTR,
    pub ServiceName: *mut u16,
    pub PartitionId: windows_core::GUID,
    pub IgnoreConstraints: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME")
            .field("NodeName", &self.NodeName)
            .field("ServiceName", &self.ServiceName)
            .field("PartitionId", &self.PartitionId)
            .field("IgnoreConstraints", &self.IgnoreConstraints)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ServiceName == other.ServiceName
            && self.PartitionId == other.PartitionId
            && self.IgnoreConstraints == other.IgnoreConstraints
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_MOVE_PRIMARY_RESULT {
    pub NodeName: windows_core::PCWSTR,
    pub ServiceName: *mut u16,
    pub PartitionId: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_MOVE_PRIMARY_RESULT {}
impl Clone for FABRIC_MOVE_PRIMARY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_MOVE_PRIMARY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_MOVE_PRIMARY_RESULT")
            .field("NodeName", &self.NodeName)
            .field("ServiceName", &self.ServiceName)
            .field("PartitionId", &self.PartitionId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_MOVE_PRIMARY_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_MOVE_PRIMARY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ServiceName == other.ServiceName
            && self.PartitionId == other.PartitionId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_MOVE_PRIMARY_RESULT {}
impl Default for FABRIC_MOVE_PRIMARY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_MOVE_SECONDARY_DESCRIPTION2 {
    pub Kind: FABRIC_MOVE_SECONDARY_DESCRIPTION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_MOVE_SECONDARY_DESCRIPTION2 {}
impl Clone for FABRIC_MOVE_SECONDARY_DESCRIPTION2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_MOVE_SECONDARY_DESCRIPTION2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_MOVE_SECONDARY_DESCRIPTION2")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_MOVE_SECONDARY_DESCRIPTION2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_MOVE_SECONDARY_DESCRIPTION2 {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_MOVE_SECONDARY_DESCRIPTION2 {}
impl Default for FABRIC_MOVE_SECONDARY_DESCRIPTION2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME {
    pub CurrentNodeName: windows_core::PCWSTR,
    pub NewNodeName: windows_core::PCWSTR,
    pub ServiceName: *mut u16,
    pub PartitionId: windows_core::GUID,
    pub IgnoreConstraints: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME")
            .field("CurrentNodeName", &self.CurrentNodeName)
            .field("NewNodeName", &self.NewNodeName)
            .field("ServiceName", &self.ServiceName)
            .field("PartitionId", &self.PartitionId)
            .field("IgnoreConstraints", &self.IgnoreConstraints)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.CurrentNodeName == other.CurrentNodeName
            && self.NewNodeName == other.NewNodeName
            && self.ServiceName == other.ServiceName
            && self.PartitionId == other.PartitionId
            && self.IgnoreConstraints == other.IgnoreConstraints
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_MOVE_SECONDARY_RESULT {
    pub CurrentNodeName: windows_core::PCWSTR,
    pub NewNodeName: windows_core::PCWSTR,
    pub ServiceName: *mut u16,
    pub PartitionId: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_MOVE_SECONDARY_RESULT {}
impl Clone for FABRIC_MOVE_SECONDARY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_MOVE_SECONDARY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_MOVE_SECONDARY_RESULT")
            .field("CurrentNodeName", &self.CurrentNodeName)
            .field("NewNodeName", &self.NewNodeName)
            .field("ServiceName", &self.ServiceName)
            .field("PartitionId", &self.PartitionId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_MOVE_SECONDARY_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_MOVE_SECONDARY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.CurrentNodeName == other.CurrentNodeName
            && self.NewNodeName == other.NewNodeName
            && self.ServiceName == other.ServiceName
            && self.PartitionId == other.PartitionId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_MOVE_SECONDARY_RESULT {}
impl Default for FABRIC_MOVE_SECONDARY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NAMED_PARTITION_INFORMATION {
    pub Id: windows_core::GUID,
    pub Name: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NAMED_PARTITION_INFORMATION {}
impl Clone for FABRIC_NAMED_PARTITION_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NAMED_PARTITION_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NAMED_PARTITION_INFORMATION")
            .field("Id", &self.Id)
            .field("Name", &self.Name)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NAMED_PARTITION_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NAMED_PARTITION_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.Id == other.Id && self.Name == other.Name && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NAMED_PARTITION_INFORMATION {}
impl Default for FABRIC_NAMED_PARTITION_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NAMED_PARTITION_SCHEME_DESCRIPTION {
    pub PartitionCount: i32,
    pub Names: *const windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NAMED_PARTITION_SCHEME_DESCRIPTION {}
impl Clone for FABRIC_NAMED_PARTITION_SCHEME_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NAMED_PARTITION_SCHEME_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NAMED_PARTITION_SCHEME_DESCRIPTION")
            .field("PartitionCount", &self.PartitionCount)
            .field("Names", &self.Names)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NAMED_PARTITION_SCHEME_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NAMED_PARTITION_SCHEME_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionCount == other.PartitionCount
            && self.Names == other.Names
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NAMED_PARTITION_SCHEME_DESCRIPTION {}
impl Default for FABRIC_NAMED_PARTITION_SCHEME_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NAMED_PROPERTY {
    pub Metadata: *const FABRIC_NAMED_PROPERTY_METADATA,
    pub Value: *mut u8,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NAMED_PROPERTY {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NAMED_PROPERTY {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NAMED_PROPERTY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NAMED_PROPERTY")
            .field("Metadata", &self.Metadata)
            .field("Value", &self.Value)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NAMED_PROPERTY {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NAMED_PROPERTY {
    fn eq(&self, other: &Self) -> bool {
        self.Metadata == other.Metadata
            && self.Value == other.Value
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NAMED_PROPERTY {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NAMED_PROPERTY {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NAMED_PROPERTY_METADATA {
    pub PropertyName: windows_core::PCWSTR,
    pub TypeId: FABRIC_PROPERTY_TYPE_ID,
    pub ValueSize: i32,
    pub SequenceNumber: i64,
    pub LastModifiedUtc: windows::Win32::Foundation::FILETIME,
    pub Name: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NAMED_PROPERTY_METADATA {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NAMED_PROPERTY_METADATA {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NAMED_PROPERTY_METADATA {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NAMED_PROPERTY_METADATA")
            .field("PropertyName", &self.PropertyName)
            .field("TypeId", &self.TypeId)
            .field("ValueSize", &self.ValueSize)
            .field("SequenceNumber", &self.SequenceNumber)
            .field("LastModifiedUtc", &self.LastModifiedUtc)
            .field("Name", &self.Name)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NAMED_PROPERTY_METADATA {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NAMED_PROPERTY_METADATA {
    fn eq(&self, other: &Self) -> bool {
        self.PropertyName == other.PropertyName
            && self.TypeId == other.TypeId
            && self.ValueSize == other.ValueSize
            && self.SequenceNumber == other.SequenceNumber
            && self.LastModifiedUtc == other.LastModifiedUtc
            && self.Name == other.Name
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NAMED_PROPERTY_METADATA {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NAMED_PROPERTY_METADATA {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NAMED_PROPERTY_METADATA_EX1 {
    pub CustomTypeId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NAMED_PROPERTY_METADATA_EX1 {}
impl Clone for FABRIC_NAMED_PROPERTY_METADATA_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NAMED_PROPERTY_METADATA_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NAMED_PROPERTY_METADATA_EX1")
            .field("CustomTypeId", &self.CustomTypeId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NAMED_PROPERTY_METADATA_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NAMED_PROPERTY_METADATA_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.CustomTypeId == other.CustomTypeId && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NAMED_PROPERTY_METADATA_EX1 {}
impl Default for FABRIC_NAMED_PROPERTY_METADATA_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NAMED_REPARTITION_DESCRIPTION {
    pub NamesToAddCount: u32,
    pub NamesToAdd: *const windows_core::PCWSTR,
    pub NamesToRemoveCount: u32,
    pub NamesToRemove: *const windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NAMED_REPARTITION_DESCRIPTION {}
impl Clone for FABRIC_NAMED_REPARTITION_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NAMED_REPARTITION_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NAMED_REPARTITION_DESCRIPTION")
            .field("NamesToAddCount", &self.NamesToAddCount)
            .field("NamesToAdd", &self.NamesToAdd)
            .field("NamesToRemoveCount", &self.NamesToRemoveCount)
            .field("NamesToRemove", &self.NamesToRemove)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NAMED_REPARTITION_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NAMED_REPARTITION_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NamesToAddCount == other.NamesToAddCount
            && self.NamesToAdd == other.NamesToAdd
            && self.NamesToRemoveCount == other.NamesToRemoveCount
            && self.NamesToRemove == other.NamesToRemove
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NAMED_REPARTITION_DESCRIPTION {}
impl Default for FABRIC_NAMED_REPARTITION_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION {
    pub NetworkName: windows_core::PCWSTR,
    pub ApplicationNameFilter: *mut u16,
    pub PagingDescription: *const FABRIC_QUERY_PAGING_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION {}
impl Clone for FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION")
            .field("NetworkName", &self.NetworkName)
            .field("ApplicationNameFilter", &self.ApplicationNameFilter)
            .field("PagingDescription", &self.PagingDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkName == other.NetworkName
            && self.ApplicationNameFilter == other.ApplicationNameFilter
            && self.PagingDescription == other.PagingDescription
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION {}
impl Default for FABRIC_NETWORK_APPLICATION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM {
    pub ApplicationName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM")
            .field("ApplicationName", &self.ApplicationName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM {}
impl Default for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_NETWORK_APPLICATION_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST {}
impl Clone for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST {}
impl Default for FABRIC_NETWORK_APPLICATION_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NETWORK_DESCRIPTION {
    pub NetworkType: FABRIC_NETWORK_TYPE,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NETWORK_DESCRIPTION {}
impl Clone for FABRIC_NETWORK_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NETWORK_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NETWORK_DESCRIPTION")
            .field("NetworkType", &self.NetworkType)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NETWORK_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NETWORK_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkType == other.NetworkType && self.Value == other.Value
    }
}
impl Eq for FABRIC_NETWORK_DESCRIPTION {}
impl Default for FABRIC_NETWORK_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NETWORK_INFORMATION {
    pub NetworkType: FABRIC_NETWORK_TYPE,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NETWORK_INFORMATION {}
impl Clone for FABRIC_NETWORK_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NETWORK_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NETWORK_INFORMATION")
            .field("NetworkType", &self.NetworkType)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NETWORK_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NETWORK_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkType == other.NetworkType && self.Value == other.Value
    }
}
impl Eq for FABRIC_NETWORK_INFORMATION {}
impl Default for FABRIC_NETWORK_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NETWORK_NODE_QUERY_DESCRIPTION {
    pub NetworkName: windows_core::PCWSTR,
    pub NodeNameFilter: windows_core::PCWSTR,
    pub PagingDescription: *const FABRIC_QUERY_PAGING_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NETWORK_NODE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_NETWORK_NODE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NETWORK_NODE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NETWORK_NODE_QUERY_DESCRIPTION")
            .field("NetworkName", &self.NetworkName)
            .field("NodeNameFilter", &self.NodeNameFilter)
            .field("PagingDescription", &self.PagingDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NETWORK_NODE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NETWORK_NODE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkName == other.NetworkName
            && self.NodeNameFilter == other.NodeNameFilter
            && self.PagingDescription == other.PagingDescription
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NETWORK_NODE_QUERY_DESCRIPTION {}
impl Default for FABRIC_NETWORK_NODE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM {
    pub NodeName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM")
            .field("NodeName", &self.NodeName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NETWORK_NODE_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_NETWORK_NODE_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_NETWORK_NODE_QUERY_RESULT_LIST {}
impl Clone for FABRIC_NETWORK_NODE_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NETWORK_NODE_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NETWORK_NODE_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NETWORK_NODE_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NETWORK_NODE_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_NETWORK_NODE_QUERY_RESULT_LIST {}
impl Default for FABRIC_NETWORK_NODE_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NETWORK_QUERY_DESCRIPTION {
    pub NetworkNameFilter: windows_core::PCWSTR,
    pub NetworkStatusFilter: u32,
    pub PagingDescription: *const FABRIC_QUERY_PAGING_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NETWORK_QUERY_DESCRIPTION {}
impl Clone for FABRIC_NETWORK_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NETWORK_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NETWORK_QUERY_DESCRIPTION")
            .field("NetworkNameFilter", &self.NetworkNameFilter)
            .field("NetworkStatusFilter", &self.NetworkStatusFilter)
            .field("PagingDescription", &self.PagingDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NETWORK_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NETWORK_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NetworkNameFilter == other.NetworkNameFilter
            && self.NetworkStatusFilter == other.NetworkStatusFilter
            && self.PagingDescription == other.PagingDescription
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NETWORK_QUERY_DESCRIPTION {}
impl Default for FABRIC_NETWORK_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NETWORK_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_NETWORK_INFORMATION,
}
impl Copy for FABRIC_NETWORK_QUERY_RESULT_LIST {}
impl Clone for FABRIC_NETWORK_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NETWORK_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NETWORK_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NETWORK_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NETWORK_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_NETWORK_QUERY_RESULT_LIST {}
impl Default for FABRIC_NETWORK_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODES_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub TotalCount: u32,
    pub MaxPercentUnhealthyNodes: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODES_HEALTH_EVALUATION {}
impl Clone for FABRIC_NODES_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODES_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODES_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("TotalCount", &self.TotalCount)
            .field("MaxPercentUnhealthyNodes", &self.MaxPercentUnhealthyNodes)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODES_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODES_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.TotalCount == other.TotalCount
            && self.MaxPercentUnhealthyNodes == other.MaxPercentUnhealthyNodes
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODES_HEALTH_EVALUATION {}
impl Default for FABRIC_NODES_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_CONTEXT {
    pub NodeName: windows_core::PCWSTR,
    pub NodeType: windows_core::PCWSTR,
    pub IPAddressOrFQDN: windows_core::PCWSTR,
    pub NodeInstanceId: u64,
    pub NodeId: FABRIC_NODE_ID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_CONTEXT {}
impl Clone for FABRIC_NODE_CONTEXT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_CONTEXT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_CONTEXT")
            .field("NodeName", &self.NodeName)
            .field("NodeType", &self.NodeType)
            .field("IPAddressOrFQDN", &self.IPAddressOrFQDN)
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("NodeId", &self.NodeId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_CONTEXT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_CONTEXT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.NodeType == other.NodeType
            && self.IPAddressOrFQDN == other.IPAddressOrFQDN
            && self.NodeInstanceId == other.NodeInstanceId
            && self.NodeId == other.NodeId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_CONTEXT {}
impl Default for FABRIC_NODE_CONTEXT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM {
    pub EffectiveIntent: FABRIC_NODE_DEACTIVATION_INTENT,
    pub Status: FABRIC_NODE_DEACTIVATION_STATUS,
    pub Tasks: *const FABRIC_NODE_DEACTIVATION_TASK_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM")
            .field("EffectiveIntent", &self.EffectiveIntent)
            .field("Status", &self.Status)
            .field("Tasks", &self.Tasks)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.EffectiveIntent == other.EffectiveIntent
            && self.Status == other.Status
            && self.Tasks == other.Tasks
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM {}
impl Default for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM_EX1 {
    pub PendingSafetyChecks: *const FABRIC_SAFETY_CHECK_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM_EX1")
            .field("PendingSafetyChecks", &self.PendingSafetyChecks)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.PendingSafetyChecks == other.PendingSafetyChecks && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_DEACTIVATION_TASK {
    pub TaskId: *const FABRIC_NODE_DEACTIVATION_TASK_ID,
    pub Intent: FABRIC_NODE_DEACTIVATION_INTENT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_DEACTIVATION_TASK {}
impl Clone for FABRIC_NODE_DEACTIVATION_TASK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_DEACTIVATION_TASK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_DEACTIVATION_TASK")
            .field("TaskId", &self.TaskId)
            .field("Intent", &self.Intent)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_DEACTIVATION_TASK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_DEACTIVATION_TASK {
    fn eq(&self, other: &Self) -> bool {
        self.TaskId == other.TaskId
            && self.Intent == other.Intent
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_DEACTIVATION_TASK {}
impl Default for FABRIC_NODE_DEACTIVATION_TASK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_DEACTIVATION_TASK_ID {
    pub Id: windows_core::PCWSTR,
    pub Type: FABRIC_NODE_DEACTIVATION_TASK_TYPE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_DEACTIVATION_TASK_ID {}
impl Clone for FABRIC_NODE_DEACTIVATION_TASK_ID {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_DEACTIVATION_TASK_ID {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_DEACTIVATION_TASK_ID")
            .field("Id", &self.Id)
            .field("Type", &self.Type)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_DEACTIVATION_TASK_ID {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_DEACTIVATION_TASK_ID {
    fn eq(&self, other: &Self) -> bool {
        self.Id == other.Id && self.Type == other.Type && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_DEACTIVATION_TASK_ID {}
impl Default for FABRIC_NODE_DEACTIVATION_TASK_ID {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_DEACTIVATION_TASK_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_NODE_DEACTIVATION_TASK,
}
impl Copy for FABRIC_NODE_DEACTIVATION_TASK_LIST {}
impl Clone for FABRIC_NODE_DEACTIVATION_TASK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_DEACTIVATION_TASK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_DEACTIVATION_TASK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_DEACTIVATION_TASK_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_DEACTIVATION_TASK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_NODE_DEACTIVATION_TASK_LIST {}
impl Default for FABRIC_NODE_DEACTIVATION_TASK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NODE_HEALTH {
    pub NodeName: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub HealthEvents: *const FABRIC_HEALTH_EVENT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NODE_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NODE_HEALTH {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NODE_HEALTH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH")
            .field("NodeName", &self.NodeName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("HealthEvents", &self.HealthEvents)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NODE_HEALTH {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NODE_HEALTH {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.HealthEvents == other.HealthEvents
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NODE_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NODE_HEALTH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub NodeName: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_HEALTH_EVALUATION {}
impl Clone for FABRIC_NODE_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("NodeName", &self.NodeName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.NodeName == other.NodeName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_HEALTH_EVALUATION {}
impl Default for FABRIC_NODE_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_HEALTH_EX1 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_HEALTH_EX1 {}
impl Clone for FABRIC_NODE_HEALTH_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_HEALTH_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_EX1")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_HEALTH_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_HEALTH_EX1 {}
impl Default for FABRIC_NODE_HEALTH_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NODE_HEALTH_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub HealthPolicy: *const FABRIC_CLUSTER_HEALTH_POLICY,
    pub EventsFilter: *const FABRIC_HEALTH_EVENTS_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NODE_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NODE_HEALTH_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NODE_HEALTH_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("HealthPolicy", &self.HealthPolicy)
            .field("EventsFilter", &self.EventsFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NODE_HEALTH_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.HealthPolicy == other.HealthPolicy
            && self.EventsFilter == other.EventsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NODE_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NODE_HEALTH_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NODE_HEALTH_REPORT {
    pub NodeName: windows_core::PCWSTR,
    pub HealthInformation: *const FABRIC_HEALTH_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NODE_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NODE_HEALTH_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NODE_HEALTH_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_REPORT")
            .field("NodeName", &self.NodeName)
            .field("HealthInformation", &self.HealthInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NODE_HEALTH_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.HealthInformation == other.HealthInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NODE_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NODE_HEALTH_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_HEALTH_STATE {
    pub NodeName: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_HEALTH_STATE {}
impl Clone for FABRIC_NODE_HEALTH_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_HEALTH_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_STATE")
            .field("NodeName", &self.NodeName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_HEALTH_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_HEALTH_STATE {}
impl Default for FABRIC_NODE_HEALTH_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_HEALTH_STATES_FILTER {
    pub HealthStateFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_HEALTH_STATES_FILTER {}
impl Clone for FABRIC_NODE_HEALTH_STATES_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_HEALTH_STATES_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_STATES_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_STATES_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_HEALTH_STATES_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_HEALTH_STATES_FILTER {}
impl Default for FABRIC_NODE_HEALTH_STATES_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_HEALTH_STATE_CHUNK {
    pub NodeName: windows_core::PCWSTR,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_HEALTH_STATE_CHUNK {}
impl Clone for FABRIC_NODE_HEALTH_STATE_CHUNK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_HEALTH_STATE_CHUNK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_STATE_CHUNK")
            .field("NodeName", &self.NodeName)
            .field("HealthState", &self.HealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_STATE_CHUNK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_HEALTH_STATE_CHUNK {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.HealthState == other.HealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_HEALTH_STATE_CHUNK {}
impl Default for FABRIC_NODE_HEALTH_STATE_CHUNK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_HEALTH_STATE_CHUNK_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_NODE_HEALTH_STATE_CHUNK,
    pub TotalCount: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_HEALTH_STATE_CHUNK_LIST {}
impl Clone for FABRIC_NODE_HEALTH_STATE_CHUNK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_HEALTH_STATE_CHUNK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_STATE_CHUNK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .field("TotalCount", &self.TotalCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_STATE_CHUNK_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_HEALTH_STATE_CHUNK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count
            && self.Items == other.Items
            && self.TotalCount == other.TotalCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_HEALTH_STATE_CHUNK_LIST {}
impl Default for FABRIC_NODE_HEALTH_STATE_CHUNK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_HEALTH_STATE_FILTER {
    pub HealthStateFilter: u32,
    pub NodeNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_HEALTH_STATE_FILTER {}
impl Clone for FABRIC_NODE_HEALTH_STATE_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_HEALTH_STATE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_STATE_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("NodeNameFilter", &self.NodeNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_STATE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_HEALTH_STATE_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter
            && self.NodeNameFilter == other.NodeNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_HEALTH_STATE_FILTER {}
impl Default for FABRIC_NODE_HEALTH_STATE_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_HEALTH_STATE_FILTER_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_NODE_HEALTH_STATE_FILTER,
}
impl Copy for FABRIC_NODE_HEALTH_STATE_FILTER_LIST {}
impl Clone for FABRIC_NODE_HEALTH_STATE_FILTER_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_HEALTH_STATE_FILTER_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_STATE_FILTER_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_STATE_FILTER_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_HEALTH_STATE_FILTER_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_NODE_HEALTH_STATE_FILTER_LIST {}
impl Default for FABRIC_NODE_HEALTH_STATE_FILTER_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_HEALTH_STATE_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_NODE_HEALTH_STATE,
}
impl Copy for FABRIC_NODE_HEALTH_STATE_LIST {}
impl Clone for FABRIC_NODE_HEALTH_STATE_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_HEALTH_STATE_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_HEALTH_STATE_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_HEALTH_STATE_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_HEALTH_STATE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_NODE_HEALTH_STATE_LIST {}
impl Default for FABRIC_NODE_HEALTH_STATE_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_ID {
    pub Low: u64,
    pub High: u64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_ID {}
impl Clone for FABRIC_NODE_ID {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_ID {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_ID")
            .field("Low", &self.Low)
            .field("High", &self.High)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_ID {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_ID {
    fn eq(&self, other: &Self) -> bool {
        self.Low == other.Low && self.High == other.High && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_ID {}
impl Default for FABRIC_NODE_ID {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NODE_LOAD_INFORMATION {
    pub NodeName: windows_core::PCWSTR,
    pub NodeLoadMetricInformation: *const FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NODE_LOAD_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NODE_LOAD_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NODE_LOAD_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_LOAD_INFORMATION")
            .field("NodeName", &self.NodeName)
            .field("NodeLoadMetricInformation", &self.NodeLoadMetricInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NODE_LOAD_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NODE_LOAD_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.NodeLoadMetricInformation == other.NodeLoadMetricInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NODE_LOAD_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NODE_LOAD_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION {}
impl Clone for FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION {}
impl Default for FABRIC_NODE_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NODE_LOAD_METRIC_INFORMATION {
    pub Name: windows_core::PCWSTR,
    pub NodeCapacity: i64,
    pub NodeLoad: i64,
    pub NodeRemainingCapacity: i64,
    pub IsCapacityViolation: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NODE_LOAD_METRIC_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NODE_LOAD_METRIC_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NODE_LOAD_METRIC_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_LOAD_METRIC_INFORMATION")
            .field("Name", &self.Name)
            .field("NodeCapacity", &self.NodeCapacity)
            .field("NodeLoad", &self.NodeLoad)
            .field("NodeRemainingCapacity", &self.NodeRemainingCapacity)
            .field("IsCapacityViolation", &self.IsCapacityViolation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NODE_LOAD_METRIC_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NODE_LOAD_METRIC_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.NodeCapacity == other.NodeCapacity
            && self.NodeLoad == other.NodeLoad
            && self.NodeRemainingCapacity == other.NodeRemainingCapacity
            && self.IsCapacityViolation == other.IsCapacityViolation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NODE_LOAD_METRIC_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NODE_LOAD_METRIC_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_LOAD_METRIC_INFORMATION_EX1 {
    pub NodeBufferedCapacity: i64,
    pub NodeRemainingBufferedCapacity: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX1 {}
impl Clone for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_LOAD_METRIC_INFORMATION_EX1")
            .field("NodeBufferedCapacity", &self.NodeBufferedCapacity)
            .field(
                "NodeRemainingBufferedCapacity",
                &self.NodeRemainingBufferedCapacity,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.NodeBufferedCapacity == other.NodeBufferedCapacity
            && self.NodeRemainingBufferedCapacity == other.NodeRemainingBufferedCapacity
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX1 {}
impl Default for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_LOAD_METRIC_INFORMATION_EX2 {
    pub CurrentNodeLoad: f64,
    pub NodeCapacityRemaining: f64,
    pub BufferedNodeCapacityRemaining: f64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX2 {}
impl Clone for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_LOAD_METRIC_INFORMATION_EX2")
            .field("CurrentNodeLoad", &self.CurrentNodeLoad)
            .field("NodeCapacityRemaining", &self.NodeCapacityRemaining)
            .field(
                "BufferedNodeCapacityRemaining",
                &self.BufferedNodeCapacityRemaining,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.CurrentNodeLoad == other.CurrentNodeLoad
            && self.NodeCapacityRemaining == other.NodeCapacityRemaining
            && self.BufferedNodeCapacityRemaining == other.BufferedNodeCapacityRemaining
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX2 {}
impl Default for FABRIC_NODE_LOAD_METRIC_INFORMATION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_NODE_LOAD_METRIC_INFORMATION,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NODE_LOAD_METRIC_INFORMATION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_QUERY_DESCRIPTION {
    pub NodeNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_NODE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_DESCRIPTION")
            .field("NodeNameFilter", &self.NodeNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeNameFilter == other.NodeNameFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_QUERY_DESCRIPTION {}
impl Default for FABRIC_NODE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_QUERY_DESCRIPTION_EX1 {
    pub ContinuationToken: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_QUERY_DESCRIPTION_EX1 {}
impl Clone for FABRIC_NODE_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_DESCRIPTION_EX1")
            .field("ContinuationToken", &self.ContinuationToken)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ContinuationToken == other.ContinuationToken && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_QUERY_DESCRIPTION_EX1 {}
impl Default for FABRIC_NODE_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_QUERY_DESCRIPTION_EX2 {
    pub NodeStatusFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_QUERY_DESCRIPTION_EX2 {}
impl Clone for FABRIC_NODE_QUERY_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_QUERY_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_DESCRIPTION_EX2")
            .field("NodeStatusFilter", &self.NodeStatusFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_QUERY_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_QUERY_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.NodeStatusFilter == other.NodeStatusFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_QUERY_DESCRIPTION_EX2 {}
impl Default for FABRIC_NODE_QUERY_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_QUERY_DESCRIPTION_EX3 {
    pub MaxResults: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_QUERY_DESCRIPTION_EX3 {}
impl Clone for FABRIC_NODE_QUERY_DESCRIPTION_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_QUERY_DESCRIPTION_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_DESCRIPTION_EX3")
            .field("MaxResults", &self.MaxResults)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_QUERY_DESCRIPTION_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_QUERY_DESCRIPTION_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.MaxResults == other.MaxResults && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_QUERY_DESCRIPTION_EX3 {}
impl Default for FABRIC_NODE_QUERY_DESCRIPTION_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NODE_QUERY_RESULT_ITEM {
    pub NodeName: windows_core::PCWSTR,
    pub IpAddressOrFQDN: windows_core::PCWSTR,
    pub NodeType: windows_core::PCWSTR,
    pub CodeVersion: windows_core::PCWSTR,
    pub ConfigVersion: windows_core::PCWSTR,
    pub NodeStatus: FABRIC_QUERY_NODE_STATUS,
    pub NodeUpTimeInSeconds: i64,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub IsSeedNode: windows::Win32::Foundation::BOOLEAN,
    pub UpgradeDomain: windows_core::PCWSTR,
    pub FaultDomain: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NODE_QUERY_RESULT_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NODE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NODE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_RESULT_ITEM")
            .field("NodeName", &self.NodeName)
            .field("IpAddressOrFQDN", &self.IpAddressOrFQDN)
            .field("NodeType", &self.NodeType)
            .field("CodeVersion", &self.CodeVersion)
            .field("ConfigVersion", &self.ConfigVersion)
            .field("NodeStatus", &self.NodeStatus)
            .field("NodeUpTimeInSeconds", &self.NodeUpTimeInSeconds)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("IsSeedNode", &self.IsSeedNode)
            .field("UpgradeDomain", &self.UpgradeDomain)
            .field("FaultDomain", &self.FaultDomain)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NODE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NODE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.IpAddressOrFQDN == other.IpAddressOrFQDN
            && self.NodeType == other.NodeType
            && self.CodeVersion == other.CodeVersion
            && self.ConfigVersion == other.ConfigVersion
            && self.NodeStatus == other.NodeStatus
            && self.NodeUpTimeInSeconds == other.NodeUpTimeInSeconds
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.IsSeedNode == other.IsSeedNode
            && self.UpgradeDomain == other.UpgradeDomain
            && self.FaultDomain == other.FaultDomain
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NODE_QUERY_RESULT_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NODE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_QUERY_RESULT_ITEM_EX1 {
    pub NodeId: FABRIC_NODE_ID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_NODE_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_RESULT_ITEM_EX1")
            .field("NodeId", &self.NodeId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.NodeId == other.NodeId && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_NODE_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_QUERY_RESULT_ITEM_EX2 {
    pub NodeInstanceId: u64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_QUERY_RESULT_ITEM_EX2 {}
impl Clone for FABRIC_NODE_QUERY_RESULT_ITEM_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_QUERY_RESULT_ITEM_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_RESULT_ITEM_EX2")
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_QUERY_RESULT_ITEM_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_QUERY_RESULT_ITEM_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.NodeInstanceId == other.NodeInstanceId && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_QUERY_RESULT_ITEM_EX2 {}
impl Default for FABRIC_NODE_QUERY_RESULT_ITEM_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_QUERY_RESULT_ITEM_EX3 {
    pub NodeDeactivationInfo: *const FABRIC_NODE_DEACTIVATION_QUERY_RESULT_ITEM,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_QUERY_RESULT_ITEM_EX3 {}
impl Clone for FABRIC_NODE_QUERY_RESULT_ITEM_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_QUERY_RESULT_ITEM_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_RESULT_ITEM_EX3")
            .field("NodeDeactivationInfo", &self.NodeDeactivationInfo)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_QUERY_RESULT_ITEM_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_QUERY_RESULT_ITEM_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.NodeDeactivationInfo == other.NodeDeactivationInfo && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_QUERY_RESULT_ITEM_EX3 {}
impl Default for FABRIC_NODE_QUERY_RESULT_ITEM_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NODE_QUERY_RESULT_ITEM_EX4 {
    pub IsStopped: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NODE_QUERY_RESULT_ITEM_EX4 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NODE_QUERY_RESULT_ITEM_EX4 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NODE_QUERY_RESULT_ITEM_EX4 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_RESULT_ITEM_EX4")
            .field("IsStopped", &self.IsStopped)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NODE_QUERY_RESULT_ITEM_EX4 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NODE_QUERY_RESULT_ITEM_EX4 {
    fn eq(&self, other: &Self) -> bool {
        self.IsStopped == other.IsStopped && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NODE_QUERY_RESULT_ITEM_EX4 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NODE_QUERY_RESULT_ITEM_EX4 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_QUERY_RESULT_ITEM_EX5 {
    pub NodeDownTimeInSeconds: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_QUERY_RESULT_ITEM_EX5 {}
impl Clone for FABRIC_NODE_QUERY_RESULT_ITEM_EX5 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_QUERY_RESULT_ITEM_EX5 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_RESULT_ITEM_EX5")
            .field("NodeDownTimeInSeconds", &self.NodeDownTimeInSeconds)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_QUERY_RESULT_ITEM_EX5 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_QUERY_RESULT_ITEM_EX5 {
    fn eq(&self, other: &Self) -> bool {
        self.NodeDownTimeInSeconds == other.NodeDownTimeInSeconds && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_QUERY_RESULT_ITEM_EX5 {}
impl Default for FABRIC_NODE_QUERY_RESULT_ITEM_EX5 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NODE_QUERY_RESULT_ITEM_EX6 {
    pub NodeUpAt: windows::Win32::Foundation::FILETIME,
    pub NodeDownAt: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NODE_QUERY_RESULT_ITEM_EX6 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NODE_QUERY_RESULT_ITEM_EX6 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NODE_QUERY_RESULT_ITEM_EX6 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_RESULT_ITEM_EX6")
            .field("NodeUpAt", &self.NodeUpAt)
            .field("NodeDownAt", &self.NodeDownAt)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NODE_QUERY_RESULT_ITEM_EX6 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NODE_QUERY_RESULT_ITEM_EX6 {
    fn eq(&self, other: &Self) -> bool {
        self.NodeUpAt == other.NodeUpAt
            && self.NodeDownAt == other.NodeDownAt
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NODE_QUERY_RESULT_ITEM_EX6 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NODE_QUERY_RESULT_ITEM_EX6 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_NODE_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_NODE_QUERY_RESULT_ITEM,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_NODE_QUERY_RESULT_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_NODE_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_NODE_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_NODE_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_NODE_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_NODE_QUERY_RESULT_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_NODE_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_RESULT {
    pub NodeName: windows_core::PCWSTR,
    pub NodeInstance: u64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_RESULT {}
impl Clone for FABRIC_NODE_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_RESULT")
            .field("NodeName", &self.NodeName)
            .field("NodeInstance", &self.NodeInstance)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.NodeInstance == other.NodeInstance
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_RESULT {}
impl Default for FABRIC_NODE_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_START_DESCRIPTION {
    pub OperationId: windows_core::GUID,
    pub NodeName: windows_core::PCWSTR,
    pub NodeInstanceId: u64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_START_DESCRIPTION {}
impl Clone for FABRIC_NODE_START_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_START_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_START_DESCRIPTION")
            .field("OperationId", &self.OperationId)
            .field("NodeName", &self.NodeName)
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_START_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_START_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.OperationId == other.OperationId
            && self.NodeName == other.NodeName
            && self.NodeInstanceId == other.NodeInstanceId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_START_DESCRIPTION {}
impl Default for FABRIC_NODE_START_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_STOP_DESCRIPTION {
    pub OperationId: windows_core::GUID,
    pub NodeName: windows_core::PCWSTR,
    pub NodeInstanceId: u64,
    pub StopDurationInSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_STOP_DESCRIPTION {}
impl Clone for FABRIC_NODE_STOP_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_STOP_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_STOP_DESCRIPTION")
            .field("OperationId", &self.OperationId)
            .field("NodeName", &self.NodeName)
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("StopDurationInSeconds", &self.StopDurationInSeconds)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_STOP_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_STOP_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.OperationId == other.OperationId
            && self.NodeName == other.NodeName
            && self.NodeInstanceId == other.NodeInstanceId
            && self.StopDurationInSeconds == other.StopDurationInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_STOP_DESCRIPTION {}
impl Default for FABRIC_NODE_STOP_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_TRANSITION_DESCRIPTION {
    pub NodeTransitionType: FABRIC_NODE_TRANSITION_TYPE,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_TRANSITION_DESCRIPTION {}
impl Clone for FABRIC_NODE_TRANSITION_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_TRANSITION_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_TRANSITION_DESCRIPTION")
            .field("NodeTransitionType", &self.NodeTransitionType)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_TRANSITION_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_TRANSITION_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeTransitionType == other.NodeTransitionType && self.Value == other.Value
    }
}
impl Eq for FABRIC_NODE_TRANSITION_DESCRIPTION {}
impl Default for FABRIC_NODE_TRANSITION_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_TRANSITION_PROGRESS {
    pub State: FABRIC_TEST_COMMAND_PROGRESS_STATE,
    pub Result: *mut FABRIC_NODE_TRANSITION_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_TRANSITION_PROGRESS {}
impl Clone for FABRIC_NODE_TRANSITION_PROGRESS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_TRANSITION_PROGRESS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_TRANSITION_PROGRESS")
            .field("State", &self.State)
            .field("Result", &self.Result)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_TRANSITION_PROGRESS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_TRANSITION_PROGRESS {
    fn eq(&self, other: &Self) -> bool {
        self.State == other.State && self.Result == other.Result && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_TRANSITION_PROGRESS {}
impl Default for FABRIC_NODE_TRANSITION_PROGRESS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_TRANSITION_RESULT {
    pub ErrorCode: windows_core::HRESULT,
    pub NodeResult: *mut FABRIC_NODE_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_TRANSITION_RESULT {}
impl Clone for FABRIC_NODE_TRANSITION_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_TRANSITION_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_TRANSITION_RESULT")
            .field("ErrorCode", &self.ErrorCode)
            .field("NodeResult", &self.NodeResult)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_TRANSITION_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_TRANSITION_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.ErrorCode == other.ErrorCode
            && self.NodeResult == other.NodeResult
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_TRANSITION_RESULT {}
impl Default for FABRIC_NODE_TRANSITION_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_UPGRADE_PROGRESS {
    pub NodeName: windows_core::PCWSTR,
    pub UpgradePhase: FABRIC_NODE_UPGRADE_PHASE,
    pub PendingSafetyChecks: *const FABRIC_UPGRADE_SAFETY_CHECK_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_NODE_UPGRADE_PROGRESS {}
impl Clone for FABRIC_NODE_UPGRADE_PROGRESS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_UPGRADE_PROGRESS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_UPGRADE_PROGRESS")
            .field("NodeName", &self.NodeName)
            .field("UpgradePhase", &self.UpgradePhase)
            .field("PendingSafetyChecks", &self.PendingSafetyChecks)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_UPGRADE_PROGRESS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_UPGRADE_PROGRESS {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.UpgradePhase == other.UpgradePhase
            && self.PendingSafetyChecks == other.PendingSafetyChecks
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_NODE_UPGRADE_PROGRESS {}
impl Default for FABRIC_NODE_UPGRADE_PROGRESS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_NODE_UPGRADE_PROGRESS_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_NODE_UPGRADE_PROGRESS,
}
impl Copy for FABRIC_NODE_UPGRADE_PROGRESS_LIST {}
impl Clone for FABRIC_NODE_UPGRADE_PROGRESS_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_NODE_UPGRADE_PROGRESS_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_NODE_UPGRADE_PROGRESS_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_NODE_UPGRADE_PROGRESS_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_NODE_UPGRADE_PROGRESS_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_NODE_UPGRADE_PROGRESS_LIST {}
impl Default for FABRIC_NODE_UPGRADE_PROGRESS_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_OPERATION_DATA_BUFFER {
    pub BufferSize: u32,
    pub Buffer: *mut u8,
}
impl Copy for FABRIC_OPERATION_DATA_BUFFER {}
impl Clone for FABRIC_OPERATION_DATA_BUFFER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_OPERATION_DATA_BUFFER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_OPERATION_DATA_BUFFER")
            .field("BufferSize", &self.BufferSize)
            .field("Buffer", &self.Buffer)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_OPERATION_DATA_BUFFER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_OPERATION_DATA_BUFFER {
    fn eq(&self, other: &Self) -> bool {
        self.BufferSize == other.BufferSize && self.Buffer == other.Buffer
    }
}
impl Eq for FABRIC_OPERATION_DATA_BUFFER {}
impl Default for FABRIC_OPERATION_DATA_BUFFER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_OPERATION_ID {
    pub PartitionId: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_OPERATION_ID {}
impl Clone for FABRIC_OPERATION_ID {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_OPERATION_ID {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_OPERATION_ID")
            .field("PartitionId", &self.PartitionId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_OPERATION_ID {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_OPERATION_ID {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_OPERATION_ID {}
impl Default for FABRIC_OPERATION_ID {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_OPERATION_METADATA {
    pub Type: FABRIC_OPERATION_TYPE,
    pub SequenceNumber: i64,
    pub AtomicGroupId: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_OPERATION_METADATA {}
impl Clone for FABRIC_OPERATION_METADATA {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_OPERATION_METADATA {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_OPERATION_METADATA")
            .field("Type", &self.Type)
            .field("SequenceNumber", &self.SequenceNumber)
            .field("AtomicGroupId", &self.AtomicGroupId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_OPERATION_METADATA {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_OPERATION_METADATA {
    fn eq(&self, other: &Self) -> bool {
        self.Type == other.Type
            && self.SequenceNumber == other.SequenceNumber
            && self.AtomicGroupId == other.AtomicGroupId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_OPERATION_METADATA {}
impl Default for FABRIC_OPERATION_METADATA {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ORCHESTRATION_UPGRADE_PROGRESS {
    pub UpgradeState: FABRIC_UPGRADE_STATE,
    pub ProgressStatus: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS {}
impl Clone for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ORCHESTRATION_UPGRADE_PROGRESS")
            .field("UpgradeState", &self.UpgradeState)
            .field("ProgressStatus", &self.ProgressStatus)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS {
    fn eq(&self, other: &Self) -> bool {
        self.UpgradeState == other.UpgradeState
            && self.ProgressStatus == other.ProgressStatus
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS {}
impl Default for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX1 {
    pub ConfigVersion: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX1 {}
impl Clone for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX1")
            .field("ConfigVersion", &self.ConfigVersion)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ConfigVersion == other.ConfigVersion && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX1 {}
impl Default for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX2 {
    pub Details: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX2 {}
impl Clone for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX2")
            .field("Details", &self.Details)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.Details == other.Details && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX2 {}
impl Default for FABRIC_ORCHESTRATION_UPGRADE_PROGRESS_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PACKAGE_SHARING_POLICY {
    pub PackageName: windows_core::PCWSTR,
    pub Scope: FABRIC_PACKAGE_SHARING_POLICY_SCOPE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PACKAGE_SHARING_POLICY {}
impl Clone for FABRIC_PACKAGE_SHARING_POLICY {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PACKAGE_SHARING_POLICY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PACKAGE_SHARING_POLICY")
            .field("PackageName", &self.PackageName)
            .field("Scope", &self.Scope)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PACKAGE_SHARING_POLICY {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PACKAGE_SHARING_POLICY {
    fn eq(&self, other: &Self) -> bool {
        self.PackageName == other.PackageName
            && self.Scope == other.Scope
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PACKAGE_SHARING_POLICY {}
impl Default for FABRIC_PACKAGE_SHARING_POLICY {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PACKAGE_SHARING_POLICY_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_PACKAGE_SHARING_POLICY,
}
impl Copy for FABRIC_PACKAGE_SHARING_POLICY_LIST {}
impl Clone for FABRIC_PACKAGE_SHARING_POLICY_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PACKAGE_SHARING_POLICY_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PACKAGE_SHARING_POLICY_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PACKAGE_SHARING_POLICY_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PACKAGE_SHARING_POLICY_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_PACKAGE_SHARING_POLICY_LIST {}
impl Default for FABRIC_PACKAGE_SHARING_POLICY_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub ApplicationNameFilter: *mut u16,
    pub IncludeHealthState: windows::Win32::Foundation::BOOLEAN,
    pub PagingDescription: *const FABRIC_QUERY_PAGING_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("ApplicationNameFilter", &self.ApplicationNameFilter)
            .field("IncludeHealthState", &self.IncludeHealthState)
            .field("PagingDescription", &self.PagingDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ApplicationNameFilter == other.ApplicationNameFilter
            && self.IncludeHealthState == other.IncludeHealthState
            && self.PagingDescription == other.PagingDescription
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_PAGED_DEPLOYED_APPLICATION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PAGING_STATUS {
    pub ContinuationToken: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PAGING_STATUS {}
impl Clone for FABRIC_PAGING_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PAGING_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PAGING_STATUS")
            .field("ContinuationToken", &self.ContinuationToken)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PAGING_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PAGING_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.ContinuationToken == other.ContinuationToken && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PAGING_STATUS {}
impl Default for FABRIC_PAGING_STATUS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITIONS_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub TotalCount: u32,
    pub MaxPercentUnhealthyPartitionsPerService: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITIONS_HEALTH_EVALUATION {}
impl Clone for FABRIC_PARTITIONS_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITIONS_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITIONS_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("TotalCount", &self.TotalCount)
            .field(
                "MaxPercentUnhealthyPartitionsPerService",
                &self.MaxPercentUnhealthyPartitionsPerService,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITIONS_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITIONS_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.TotalCount == other.TotalCount
            && self.MaxPercentUnhealthyPartitionsPerService
                == other.MaxPercentUnhealthyPartitionsPerService
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITIONS_HEALTH_EVALUATION {}
impl Default for FABRIC_PARTITIONS_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_DATA_LOSS_PROGRESS {
    pub State: FABRIC_TEST_COMMAND_PROGRESS_STATE,
    pub Result: *mut FABRIC_PARTITION_DATA_LOSS_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_DATA_LOSS_PROGRESS {}
impl Clone for FABRIC_PARTITION_DATA_LOSS_PROGRESS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_DATA_LOSS_PROGRESS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_DATA_LOSS_PROGRESS")
            .field("State", &self.State)
            .field("Result", &self.Result)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_DATA_LOSS_PROGRESS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_DATA_LOSS_PROGRESS {
    fn eq(&self, other: &Self) -> bool {
        self.State == other.State && self.Result == other.Result && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_DATA_LOSS_PROGRESS {}
impl Default for FABRIC_PARTITION_DATA_LOSS_PROGRESS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_DATA_LOSS_RESULT {
    pub SelectedPartition: *mut FABRIC_SELECTED_PARTITION,
    pub ErrorCode: windows_core::HRESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_DATA_LOSS_RESULT {}
impl Clone for FABRIC_PARTITION_DATA_LOSS_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_DATA_LOSS_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_DATA_LOSS_RESULT")
            .field("SelectedPartition", &self.SelectedPartition)
            .field("ErrorCode", &self.ErrorCode)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_DATA_LOSS_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_DATA_LOSS_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.SelectedPartition == other.SelectedPartition
            && self.ErrorCode == other.ErrorCode
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_DATA_LOSS_RESULT {}
impl Default for FABRIC_PARTITION_DATA_LOSS_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_PARTITION_HEALTH {
    pub PartitionId: windows_core::GUID,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub HealthEvents: *const FABRIC_HEALTH_EVENT_LIST,
    pub ReplicaHealthStates: *const FABRIC_REPLICA_HEALTH_STATE_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_PARTITION_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_PARTITION_HEALTH {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH")
            .field("PartitionId", &self.PartitionId)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("HealthEvents", &self.HealthEvents)
            .field("ReplicaHealthStates", &self.ReplicaHealthStates)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_PARTITION_HEALTH {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.HealthEvents == other.HealthEvents
            && self.ReplicaHealthStates == other.ReplicaHealthStates
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_PARTITION_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_PARTITION_HEALTH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub PartitionId: windows_core::GUID,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_HEALTH_EVALUATION {}
impl Clone for FABRIC_PARTITION_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("PartitionId", &self.PartitionId)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.PartitionId == other.PartitionId
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_HEALTH_EVALUATION {}
impl Default for FABRIC_PARTITION_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_HEALTH_EX1 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_HEALTH_EX1 {}
impl Clone for FABRIC_PARTITION_HEALTH_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_EX1")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_HEALTH_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_HEALTH_EX1 {}
impl Default for FABRIC_PARTITION_HEALTH_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_HEALTH_EX2 {
    pub HealthStatistics: *const FABRIC_HEALTH_STATISTICS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_HEALTH_EX2 {}
impl Clone for FABRIC_PARTITION_HEALTH_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_EX2")
            .field("HealthStatistics", &self.HealthStatistics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_HEALTH_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStatistics == other.HealthStatistics && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_HEALTH_EX2 {}
impl Default for FABRIC_PARTITION_HEALTH_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION {
    pub PartitionId: windows_core::GUID,
    pub HealthPolicy: *const FABRIC_APPLICATION_HEALTH_POLICY,
    pub EventsFilter: *const FABRIC_HEALTH_EVENTS_FILTER,
    pub ReplicasFilter: *const FABRIC_REPLICA_HEALTH_STATES_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION")
            .field("PartitionId", &self.PartitionId)
            .field("HealthPolicy", &self.HealthPolicy)
            .field("EventsFilter", &self.EventsFilter)
            .field("ReplicasFilter", &self.ReplicasFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.HealthPolicy == other.HealthPolicy
            && self.EventsFilter == other.EventsFilter
            && self.ReplicasFilter == other.ReplicasFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION_EX1 {
    pub HealthStatisticsFilter: *const FABRIC_PARTITION_HEALTH_STATISTICS_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION_EX1")
            .field("HealthStatisticsFilter", &self.HealthStatisticsFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStatisticsFilter == other.HealthStatisticsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_PARTITION_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_PARTITION_HEALTH_REPORT {
    pub PartitionId: windows_core::GUID,
    pub HealthInformation: *const FABRIC_HEALTH_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_PARTITION_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_PARTITION_HEALTH_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_REPORT")
            .field("PartitionId", &self.PartitionId)
            .field("HealthInformation", &self.HealthInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_PARTITION_HEALTH_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.HealthInformation == other.HealthInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_PARTITION_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_PARTITION_HEALTH_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_HEALTH_STATE {
    pub PartitionId: windows_core::GUID,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_HEALTH_STATE {}
impl Clone for FABRIC_PARTITION_HEALTH_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_STATE")
            .field("PartitionId", &self.PartitionId)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_HEALTH_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_HEALTH_STATE {}
impl Default for FABRIC_PARTITION_HEALTH_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_HEALTH_STATES_FILTER {
    pub HealthStateFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_HEALTH_STATES_FILTER {}
impl Clone for FABRIC_PARTITION_HEALTH_STATES_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_STATES_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_STATES_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_STATES_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_HEALTH_STATES_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_HEALTH_STATES_FILTER {}
impl Default for FABRIC_PARTITION_HEALTH_STATES_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_HEALTH_STATE_CHUNK {
    pub PartitionId: windows_core::GUID,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub ReplicaHealthStateChunks: *const FABRIC_REPLICA_HEALTH_STATE_CHUNK_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_HEALTH_STATE_CHUNK {}
impl Clone for FABRIC_PARTITION_HEALTH_STATE_CHUNK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_STATE_CHUNK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_STATE_CHUNK")
            .field("PartitionId", &self.PartitionId)
            .field("HealthState", &self.HealthState)
            .field("ReplicaHealthStateChunks", &self.ReplicaHealthStateChunks)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_STATE_CHUNK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_HEALTH_STATE_CHUNK {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.HealthState == other.HealthState
            && self.ReplicaHealthStateChunks == other.ReplicaHealthStateChunks
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_HEALTH_STATE_CHUNK {}
impl Default for FABRIC_PARTITION_HEALTH_STATE_CHUNK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_HEALTH_STATE_CHUNK_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_PARTITION_HEALTH_STATE_CHUNK,
    pub TotalCount: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_HEALTH_STATE_CHUNK_LIST {}
impl Clone for FABRIC_PARTITION_HEALTH_STATE_CHUNK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_STATE_CHUNK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_STATE_CHUNK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .field("TotalCount", &self.TotalCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_STATE_CHUNK_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_HEALTH_STATE_CHUNK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count
            && self.Items == other.Items
            && self.TotalCount == other.TotalCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_HEALTH_STATE_CHUNK_LIST {}
impl Default for FABRIC_PARTITION_HEALTH_STATE_CHUNK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_HEALTH_STATE_FILTER {
    pub HealthStateFilter: u32,
    pub PartitionIdFilter: windows_core::GUID,
    pub ReplicaFilters: *const FABRIC_REPLICA_HEALTH_STATE_FILTER_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_HEALTH_STATE_FILTER {}
impl Clone for FABRIC_PARTITION_HEALTH_STATE_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_STATE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_STATE_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("PartitionIdFilter", &self.PartitionIdFilter)
            .field("ReplicaFilters", &self.ReplicaFilters)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_STATE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_HEALTH_STATE_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter
            && self.PartitionIdFilter == other.PartitionIdFilter
            && self.ReplicaFilters == other.ReplicaFilters
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_HEALTH_STATE_FILTER {}
impl Default for FABRIC_PARTITION_HEALTH_STATE_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_HEALTH_STATE_FILTER_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_PARTITION_HEALTH_STATE_FILTER,
}
impl Copy for FABRIC_PARTITION_HEALTH_STATE_FILTER_LIST {}
impl Clone for FABRIC_PARTITION_HEALTH_STATE_FILTER_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_STATE_FILTER_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_STATE_FILTER_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_STATE_FILTER_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_HEALTH_STATE_FILTER_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_PARTITION_HEALTH_STATE_FILTER_LIST {}
impl Default for FABRIC_PARTITION_HEALTH_STATE_FILTER_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_HEALTH_STATE_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_PARTITION_HEALTH_STATE,
}
impl Copy for FABRIC_PARTITION_HEALTH_STATE_LIST {}
impl Clone for FABRIC_PARTITION_HEALTH_STATE_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_STATE_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_STATE_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_STATE_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_HEALTH_STATE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_PARTITION_HEALTH_STATE_LIST {}
impl Default for FABRIC_PARTITION_HEALTH_STATE_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_PARTITION_HEALTH_STATISTICS_FILTER {
    pub ExcludeHealthStatistics: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_PARTITION_HEALTH_STATISTICS_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_PARTITION_HEALTH_STATISTICS_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_PARTITION_HEALTH_STATISTICS_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_HEALTH_STATISTICS_FILTER")
            .field("ExcludeHealthStatistics", &self.ExcludeHealthStatistics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_PARTITION_HEALTH_STATISTICS_FILTER {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_PARTITION_HEALTH_STATISTICS_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.ExcludeHealthStatistics == other.ExcludeHealthStatistics
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_PARTITION_HEALTH_STATISTICS_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_PARTITION_HEALTH_STATISTICS_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_PARTITION_LOAD_INFORMATION {
    pub PartitionId: windows_core::GUID,
    pub PrimaryLoadMetricReports: *mut FABRIC_LOAD_METRIC_REPORT_LIST,
    pub SecondaryLoadMetricReports: *mut FABRIC_LOAD_METRIC_REPORT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_PARTITION_LOAD_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_PARTITION_LOAD_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_PARTITION_LOAD_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_LOAD_INFORMATION")
            .field("PartitionId", &self.PartitionId)
            .field("PrimaryLoadMetricReports", &self.PrimaryLoadMetricReports)
            .field(
                "SecondaryLoadMetricReports",
                &self.SecondaryLoadMetricReports,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_PARTITION_LOAD_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_PARTITION_LOAD_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.PrimaryLoadMetricReports == other.PrimaryLoadMetricReports
            && self.SecondaryLoadMetricReports == other.SecondaryLoadMetricReports
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_PARTITION_LOAD_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_PARTITION_LOAD_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    pub PartitionId: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION {}
impl Clone for FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION")
            .field("PartitionId", &self.PartitionId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION {}
impl Default for FABRIC_PARTITION_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_QUORUM_LOSS_PROGRESS {
    pub State: FABRIC_TEST_COMMAND_PROGRESS_STATE,
    pub Result: *mut FABRIC_PARTITION_QUORUM_LOSS_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_QUORUM_LOSS_PROGRESS {}
impl Clone for FABRIC_PARTITION_QUORUM_LOSS_PROGRESS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_QUORUM_LOSS_PROGRESS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_QUORUM_LOSS_PROGRESS")
            .field("State", &self.State)
            .field("Result", &self.Result)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_QUORUM_LOSS_PROGRESS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_QUORUM_LOSS_PROGRESS {
    fn eq(&self, other: &Self) -> bool {
        self.State == other.State && self.Result == other.Result && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_QUORUM_LOSS_PROGRESS {}
impl Default for FABRIC_PARTITION_QUORUM_LOSS_PROGRESS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_QUORUM_LOSS_RESULT {
    pub SelectedPartition: *mut FABRIC_SELECTED_PARTITION,
    pub ErrorCode: windows_core::HRESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_QUORUM_LOSS_RESULT {}
impl Clone for FABRIC_PARTITION_QUORUM_LOSS_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_QUORUM_LOSS_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_QUORUM_LOSS_RESULT")
            .field("SelectedPartition", &self.SelectedPartition)
            .field("ErrorCode", &self.ErrorCode)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_QUORUM_LOSS_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_QUORUM_LOSS_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.SelectedPartition == other.SelectedPartition
            && self.ErrorCode == other.ErrorCode
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_QUORUM_LOSS_RESULT {}
impl Default for FABRIC_PARTITION_QUORUM_LOSS_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_RESTART_PROGRESS {
    pub State: FABRIC_TEST_COMMAND_PROGRESS_STATE,
    pub Result: *mut FABRIC_PARTITION_RESTART_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_RESTART_PROGRESS {}
impl Clone for FABRIC_PARTITION_RESTART_PROGRESS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_RESTART_PROGRESS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_RESTART_PROGRESS")
            .field("State", &self.State)
            .field("Result", &self.Result)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_RESTART_PROGRESS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_RESTART_PROGRESS {
    fn eq(&self, other: &Self) -> bool {
        self.State == other.State && self.Result == other.Result && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_RESTART_PROGRESS {}
impl Default for FABRIC_PARTITION_RESTART_PROGRESS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_RESTART_RESULT {
    pub SelectedPartition: *mut FABRIC_SELECTED_PARTITION,
    pub ErrorCode: windows_core::HRESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_RESTART_RESULT {}
impl Clone for FABRIC_PARTITION_RESTART_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_RESTART_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_RESTART_RESULT")
            .field("SelectedPartition", &self.SelectedPartition)
            .field("ErrorCode", &self.ErrorCode)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_RESTART_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_RESTART_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.SelectedPartition == other.SelectedPartition
            && self.ErrorCode == other.ErrorCode
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_RESTART_RESULT {}
impl Default for FABRIC_PARTITION_RESTART_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_SAFETY_CHECK {
    pub PartitionId: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_SAFETY_CHECK {}
impl Clone for FABRIC_PARTITION_SAFETY_CHECK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_SAFETY_CHECK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_SAFETY_CHECK")
            .field("PartitionId", &self.PartitionId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_SAFETY_CHECK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_SAFETY_CHECK {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_SAFETY_CHECK {}
impl Default for FABRIC_PARTITION_SAFETY_CHECK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PARTITION_SELECTOR {
    pub ServiceName: *mut u16,
    pub PartitionSelectorType: FABRIC_PARTITION_SELECTOR_TYPE,
    pub PartitionKey: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PARTITION_SELECTOR {}
impl Clone for FABRIC_PARTITION_SELECTOR {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PARTITION_SELECTOR {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PARTITION_SELECTOR")
            .field("ServiceName", &self.ServiceName)
            .field("PartitionSelectorType", &self.PartitionSelectorType)
            .field("PartitionKey", &self.PartitionKey)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PARTITION_SELECTOR {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PARTITION_SELECTOR {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.PartitionSelectorType == other.PartitionSelectorType
            && self.PartitionKey == other.PartitionKey
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PARTITION_SELECTOR {}
impl Default for FABRIC_PARTITION_SELECTOR {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PLACEMENT_POLICY_INVALID_DOMAIN_DESCRIPTION {
    pub InvalidFaultDomain: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PLACEMENT_POLICY_INVALID_DOMAIN_DESCRIPTION {}
impl Clone for FABRIC_PLACEMENT_POLICY_INVALID_DOMAIN_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PLACEMENT_POLICY_INVALID_DOMAIN_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PLACEMENT_POLICY_INVALID_DOMAIN_DESCRIPTION")
            .field("InvalidFaultDomain", &self.InvalidFaultDomain)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PLACEMENT_POLICY_INVALID_DOMAIN_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PLACEMENT_POLICY_INVALID_DOMAIN_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.InvalidFaultDomain == other.InvalidFaultDomain && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PLACEMENT_POLICY_INVALID_DOMAIN_DESCRIPTION {}
impl Default for FABRIC_PLACEMENT_POLICY_INVALID_DOMAIN_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PLACEMENT_POLICY_NONPARTIALLY_PLACE_SERVICE_DESCRIPTION {
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PLACEMENT_POLICY_NONPARTIALLY_PLACE_SERVICE_DESCRIPTION {}
impl Clone for FABRIC_PLACEMENT_POLICY_NONPARTIALLY_PLACE_SERVICE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PLACEMENT_POLICY_NONPARTIALLY_PLACE_SERVICE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PLACEMENT_POLICY_NONPARTIALLY_PLACE_SERVICE_DESCRIPTION")
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PLACEMENT_POLICY_NONPARTIALLY_PLACE_SERVICE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PLACEMENT_POLICY_NONPARTIALLY_PLACE_SERVICE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PLACEMENT_POLICY_NONPARTIALLY_PLACE_SERVICE_DESCRIPTION {}
impl Default for FABRIC_PLACEMENT_POLICY_NONPARTIALLY_PLACE_SERVICE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PLACEMENT_POLICY_PREFERRED_PRIMARY_DOMAIN_DESCRIPTION {
    pub PreferredPrimaryFaultDomain: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PLACEMENT_POLICY_PREFERRED_PRIMARY_DOMAIN_DESCRIPTION {}
impl Clone for FABRIC_PLACEMENT_POLICY_PREFERRED_PRIMARY_DOMAIN_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PLACEMENT_POLICY_PREFERRED_PRIMARY_DOMAIN_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PLACEMENT_POLICY_PREFERRED_PRIMARY_DOMAIN_DESCRIPTION")
            .field(
                "PreferredPrimaryFaultDomain",
                &self.PreferredPrimaryFaultDomain,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PLACEMENT_POLICY_PREFERRED_PRIMARY_DOMAIN_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PLACEMENT_POLICY_PREFERRED_PRIMARY_DOMAIN_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.PreferredPrimaryFaultDomain == other.PreferredPrimaryFaultDomain
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PLACEMENT_POLICY_PREFERRED_PRIMARY_DOMAIN_DESCRIPTION {}
impl Default for FABRIC_PLACEMENT_POLICY_PREFERRED_PRIMARY_DOMAIN_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DESCRIPTION {
    pub RequiredFaultDomain: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DESCRIPTION {}
impl Clone for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DESCRIPTION")
            .field("RequiredFaultDomain", &self.RequiredFaultDomain)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.RequiredFaultDomain == other.RequiredFaultDomain && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DESCRIPTION {}
impl Default for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DISTRIBUTION_DESCRIPTION {
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DISTRIBUTION_DESCRIPTION {}
impl Clone for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DISTRIBUTION_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DISTRIBUTION_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DISTRIBUTION_DESCRIPTION")
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DISTRIBUTION_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DISTRIBUTION_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DISTRIBUTION_DESCRIPTION {}
impl Default for FABRIC_PLACEMENT_POLICY_REQUIRED_DOMAIN_DISTRIBUTION_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_PRIMARY_REPLICATOR_STATUS_QUERY_RESULT {
    pub ReplicationQueueStatus: *mut FABRIC_REPLICATOR_QUEUE_STATUS,
    pub RemoteReplicators: *mut FABRIC_REMOTE_REPLICATOR_STATUS_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_PRIMARY_REPLICATOR_STATUS_QUERY_RESULT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_PRIMARY_REPLICATOR_STATUS_QUERY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_PRIMARY_REPLICATOR_STATUS_QUERY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PRIMARY_REPLICATOR_STATUS_QUERY_RESULT")
            .field("ReplicationQueueStatus", &self.ReplicationQueueStatus)
            .field("RemoteReplicators", &self.RemoteReplicators)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_PRIMARY_REPLICATOR_STATUS_QUERY_RESULT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_PRIMARY_REPLICATOR_STATUS_QUERY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.ReplicationQueueStatus == other.ReplicationQueueStatus
            && self.RemoteReplicators == other.RemoteReplicators
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_PRIMARY_REPLICATOR_STATUS_QUERY_RESULT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_PRIMARY_REPLICATOR_STATUS_QUERY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PROPERTY_BATCH_OPERATION {
    pub Kind: FABRIC_PROPERTY_BATCH_OPERATION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PROPERTY_BATCH_OPERATION {}
impl Clone for FABRIC_PROPERTY_BATCH_OPERATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PROPERTY_BATCH_OPERATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PROPERTY_BATCH_OPERATION")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PROPERTY_BATCH_OPERATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PROPERTY_BATCH_OPERATION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_PROPERTY_BATCH_OPERATION {}
impl Default for FABRIC_PROPERTY_BATCH_OPERATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION {
    pub CodeVersionFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION {}
impl Clone for FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION")
            .field("CodeVersionFilter", &self.CodeVersionFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.CodeVersionFilter == other.CodeVersionFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION {}
impl Default for FABRIC_PROVISIONED_CODE_VERSION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM {
    pub CodeVersion: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM")
            .field("CodeVersion", &self.CodeVersion)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.CodeVersion == other.CodeVersion && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM {}
impl Default for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST {}
impl Clone for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST {}
impl Default for FABRIC_PROVISIONED_CODE_VERSION_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION {
    pub ConfigVersionFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION {}
impl Clone for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION")
            .field("ConfigVersionFilter", &self.ConfigVersionFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ConfigVersionFilter == other.ConfigVersionFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION {}
impl Default for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM {
    pub ConfigVersion: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM")
            .field("ConfigVersion", &self.ConfigVersion)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ConfigVersion == other.ConfigVersion && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM {}
impl Default for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST {}
impl Clone for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST {}
impl Default for FABRIC_PROVISIONED_CONFIG_VERSION_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    pub BuildPath: windows_core::PCWSTR,
    pub Async: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION")
            .field("BuildPath", &self.BuildPath)
            .field("Async", &self.Async)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.BuildPath == other.BuildPath
            && self.Async == other.Async
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE {
    pub Kind: FABRIC_PROVISION_APPLICATION_TYPE_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE {}
impl Clone for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE {}
impl Default for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_BASE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_EX1 {
    pub ApplicationPackageCleanupPolicy: FABRIC_APPLICATION_PACKAGE_CLEANUP_POLICY,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_EX1 {}
impl Clone for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_EX1")
            .field(
                "ApplicationPackageCleanupPolicy",
                &self.ApplicationPackageCleanupPolicy,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationPackageCleanupPolicy == other.ApplicationPackageCleanupPolicy
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_EX1 {}
impl Default for FABRIC_PROVISION_APPLICATION_TYPE_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PUT_CUSTOM_PROPERTY_OPERATION {
    pub PropertyName: windows_core::PCWSTR,
    pub PropertyTypeId: FABRIC_PROPERTY_TYPE_ID,
    pub PropertyValue: *mut core::ffi::c_void,
    pub PropertyCustomTypeId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PUT_CUSTOM_PROPERTY_OPERATION {}
impl Clone for FABRIC_PUT_CUSTOM_PROPERTY_OPERATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PUT_CUSTOM_PROPERTY_OPERATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PUT_CUSTOM_PROPERTY_OPERATION")
            .field("PropertyName", &self.PropertyName)
            .field("PropertyTypeId", &self.PropertyTypeId)
            .field("PropertyValue", &self.PropertyValue)
            .field("PropertyCustomTypeId", &self.PropertyCustomTypeId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PUT_CUSTOM_PROPERTY_OPERATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PUT_CUSTOM_PROPERTY_OPERATION {
    fn eq(&self, other: &Self) -> bool {
        self.PropertyName == other.PropertyName
            && self.PropertyTypeId == other.PropertyTypeId
            && self.PropertyValue == other.PropertyValue
            && self.PropertyCustomTypeId == other.PropertyCustomTypeId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PUT_CUSTOM_PROPERTY_OPERATION {}
impl Default for FABRIC_PUT_CUSTOM_PROPERTY_OPERATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_PUT_PROPERTY_OPERATION {
    pub PropertyName: windows_core::PCWSTR,
    pub PropertyTypeId: FABRIC_PROPERTY_TYPE_ID,
    pub PropertyValue: *mut core::ffi::c_void,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_PUT_PROPERTY_OPERATION {}
impl Clone for FABRIC_PUT_PROPERTY_OPERATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_PUT_PROPERTY_OPERATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_PUT_PROPERTY_OPERATION")
            .field("PropertyName", &self.PropertyName)
            .field("PropertyTypeId", &self.PropertyTypeId)
            .field("PropertyValue", &self.PropertyValue)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_PUT_PROPERTY_OPERATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_PUT_PROPERTY_OPERATION {
    fn eq(&self, other: &Self) -> bool {
        self.PropertyName == other.PropertyName
            && self.PropertyTypeId == other.PropertyTypeId
            && self.PropertyValue == other.PropertyValue
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_PUT_PROPERTY_OPERATION {}
impl Default for FABRIC_PUT_PROPERTY_OPERATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_QUERY_PAGING_DESCRIPTION {
    pub ContinuationToken: windows_core::PCWSTR,
    pub MaxResults: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_QUERY_PAGING_DESCRIPTION {}
impl Clone for FABRIC_QUERY_PAGING_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_QUERY_PAGING_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_QUERY_PAGING_DESCRIPTION")
            .field("ContinuationToken", &self.ContinuationToken)
            .field("MaxResults", &self.MaxResults)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_QUERY_PAGING_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_QUERY_PAGING_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ContinuationToken == other.ContinuationToken
            && self.MaxResults == other.MaxResults
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_QUERY_PAGING_DESCRIPTION {}
impl Default for FABRIC_QUERY_PAGING_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_RECONFIGURATION_INFORMATION_QUERY_RESULT {
    pub PreviousConfigurationRole: FABRIC_REPLICA_ROLE,
    pub ReconfigurationPhase: FABRIC_RECONFIGURATION_PHASE,
    pub ReconfigurationType: FABRIC_RECONFIGURATION_TYPE,
    pub ReconfigurationStartTimeUtc: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_RECONFIGURATION_INFORMATION_QUERY_RESULT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_RECONFIGURATION_INFORMATION_QUERY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_RECONFIGURATION_INFORMATION_QUERY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RECONFIGURATION_INFORMATION_QUERY_RESULT")
            .field("PreviousConfigurationRole", &self.PreviousConfigurationRole)
            .field("ReconfigurationPhase", &self.ReconfigurationPhase)
            .field("ReconfigurationType", &self.ReconfigurationType)
            .field(
                "ReconfigurationStartTimeUtc",
                &self.ReconfigurationStartTimeUtc,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_RECONFIGURATION_INFORMATION_QUERY_RESULT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_RECONFIGURATION_INFORMATION_QUERY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.PreviousConfigurationRole == other.PreviousConfigurationRole
            && self.ReconfigurationPhase == other.ReconfigurationPhase
            && self.ReconfigurationType == other.ReconfigurationType
            && self.ReconfigurationStartTimeUtc == other.ReconfigurationStartTimeUtc
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_RECONFIGURATION_INFORMATION_QUERY_RESULT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_RECONFIGURATION_INFORMATION_QUERY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL {
    pub AverageReceiveDurationMilliseconds: i64,
    pub AverageApplyDurationMilliseconds: i64,
    pub NotReceivedCount: i64,
    pub ReceivedAndNotAppliedCount: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL {}
impl Clone for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL")
            .field(
                "AverageReceiveDurationMilliseconds",
                &self.AverageReceiveDurationMilliseconds,
            )
            .field(
                "AverageApplyDurationMilliseconds",
                &self.AverageApplyDurationMilliseconds,
            )
            .field("NotReceivedCount", &self.NotReceivedCount)
            .field(
                "ReceivedAndNotAppliedCount",
                &self.ReceivedAndNotAppliedCount,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL {
    fn eq(&self, other: &Self) -> bool {
        self.AverageReceiveDurationMilliseconds == other.AverageReceiveDurationMilliseconds
            && self.AverageApplyDurationMilliseconds == other.AverageApplyDurationMilliseconds
            && self.NotReceivedCount == other.NotReceivedCount
            && self.ReceivedAndNotAppliedCount == other.ReceivedAndNotAppliedCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL {}
impl Default for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS {
    pub CopyStreamAcknowledgementDetails: *mut FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL,
    pub ReplicationStreamAcknowledgementDetails:
        *mut FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_DETAIL,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS {}
impl Clone for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS")
            .field(
                "CopyStreamAcknowledgementDetails",
                &self.CopyStreamAcknowledgementDetails,
            )
            .field(
                "ReplicationStreamAcknowledgementDetails",
                &self.ReplicationStreamAcknowledgementDetails,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.CopyStreamAcknowledgementDetails == other.CopyStreamAcknowledgementDetails
            && self.ReplicationStreamAcknowledgementDetails
                == other.ReplicationStreamAcknowledgementDetails
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS {}
impl Default for FABRIC_REMOTE_REPLICATOR_ACKNOWLEDGEMENT_STATUS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REMOTE_REPLICATOR_STATUS {
    pub ReplicaId: i64,
    pub LastAcknowledgementProcessedTimeUtc: windows::Win32::Foundation::FILETIME,
    pub LastReceivedReplicationSequenceNumber: i64,
    pub LastAppliedReplicationSequenceNumber: i64,
    pub IsInBuild: windows::Win32::Foundation::BOOLEAN,
    pub LastReceivedCopySequenceNumber: i64,
    pub LastAppliedCopySequenceNumber: i64,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REMOTE_REPLICATOR_STATUS {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REMOTE_REPLICATOR_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REMOTE_REPLICATOR_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REMOTE_REPLICATOR_STATUS")
            .field("ReplicaId", &self.ReplicaId)
            .field(
                "LastAcknowledgementProcessedTimeUtc",
                &self.LastAcknowledgementProcessedTimeUtc,
            )
            .field(
                "LastReceivedReplicationSequenceNumber",
                &self.LastReceivedReplicationSequenceNumber,
            )
            .field(
                "LastAppliedReplicationSequenceNumber",
                &self.LastAppliedReplicationSequenceNumber,
            )
            .field("IsInBuild", &self.IsInBuild)
            .field(
                "LastReceivedCopySequenceNumber",
                &self.LastReceivedCopySequenceNumber,
            )
            .field(
                "LastAppliedCopySequenceNumber",
                &self.LastAppliedCopySequenceNumber,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REMOTE_REPLICATOR_STATUS {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REMOTE_REPLICATOR_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.ReplicaId == other.ReplicaId
            && self.LastAcknowledgementProcessedTimeUtc == other.LastAcknowledgementProcessedTimeUtc
            && self.LastReceivedReplicationSequenceNumber
                == other.LastReceivedReplicationSequenceNumber
            && self.LastAppliedReplicationSequenceNumber
                == other.LastAppliedReplicationSequenceNumber
            && self.IsInBuild == other.IsInBuild
            && self.LastReceivedCopySequenceNumber == other.LastReceivedCopySequenceNumber
            && self.LastAppliedCopySequenceNumber == other.LastAppliedCopySequenceNumber
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REMOTE_REPLICATOR_STATUS {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REMOTE_REPLICATOR_STATUS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REMOTE_REPLICATOR_STATUS_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_REMOTE_REPLICATOR_STATUS,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REMOTE_REPLICATOR_STATUS_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REMOTE_REPLICATOR_STATUS_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REMOTE_REPLICATOR_STATUS_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REMOTE_REPLICATOR_STATUS_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REMOTE_REPLICATOR_STATUS_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REMOTE_REPLICATOR_STATUS_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REMOTE_REPLICATOR_STATUS_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REMOTE_REPLICATOR_STATUS_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REMOVE_REPLICA_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub PartitionId: windows_core::GUID,
    pub ReplicaOrInstanceId: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REMOVE_REPLICA_DESCRIPTION {}
impl Clone for FABRIC_REMOVE_REPLICA_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REMOVE_REPLICA_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REMOVE_REPLICA_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaOrInstanceId", &self.ReplicaOrInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REMOVE_REPLICA_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REMOVE_REPLICA_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.PartitionId == other.PartitionId
            && self.ReplicaOrInstanceId == other.ReplicaOrInstanceId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REMOVE_REPLICA_DESCRIPTION {}
impl Default for FABRIC_REMOVE_REPLICA_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REMOVE_REPLICA_DESCRIPTION_EX1 {
    pub ForceRemove: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REMOVE_REPLICA_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REMOVE_REPLICA_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REMOVE_REPLICA_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REMOVE_REPLICA_DESCRIPTION_EX1")
            .field("ForceRemove", &self.ForceRemove)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REMOVE_REPLICA_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REMOVE_REPLICA_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ForceRemove == other.ForceRemove && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REMOVE_REPLICA_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REMOVE_REPLICA_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPAIR_APPROVE_DESCRIPTION {
    pub Scope: *mut FABRIC_REPAIR_SCOPE_IDENTIFIER,
    pub RepairTaskId: windows_core::PCWSTR,
    pub Version: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPAIR_APPROVE_DESCRIPTION {}
impl Clone for FABRIC_REPAIR_APPROVE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPAIR_APPROVE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_APPROVE_DESCRIPTION")
            .field("Scope", &self.Scope)
            .field("RepairTaskId", &self.RepairTaskId)
            .field("Version", &self.Version)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPAIR_APPROVE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPAIR_APPROVE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Scope == other.Scope
            && self.RepairTaskId == other.RepairTaskId
            && self.Version == other.Version
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPAIR_APPROVE_DESCRIPTION {}
impl Default for FABRIC_REPAIR_APPROVE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPAIR_CANCEL_DESCRIPTION {
    pub Scope: *mut FABRIC_REPAIR_SCOPE_IDENTIFIER,
    pub RepairTaskId: windows_core::PCWSTR,
    pub Version: i64,
    pub RequestAbort: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPAIR_CANCEL_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPAIR_CANCEL_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPAIR_CANCEL_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_CANCEL_DESCRIPTION")
            .field("Scope", &self.Scope)
            .field("RepairTaskId", &self.RepairTaskId)
            .field("Version", &self.Version)
            .field("RequestAbort", &self.RequestAbort)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPAIR_CANCEL_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPAIR_CANCEL_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Scope == other.Scope
            && self.RepairTaskId == other.RepairTaskId
            && self.Version == other.Version
            && self.RequestAbort == other.RequestAbort
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPAIR_CANCEL_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPAIR_CANCEL_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPAIR_DELETE_DESCRIPTION {
    pub Scope: *mut FABRIC_REPAIR_SCOPE_IDENTIFIER,
    pub RepairTaskId: windows_core::PCWSTR,
    pub Version: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPAIR_DELETE_DESCRIPTION {}
impl Clone for FABRIC_REPAIR_DELETE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPAIR_DELETE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_DELETE_DESCRIPTION")
            .field("Scope", &self.Scope)
            .field("RepairTaskId", &self.RepairTaskId)
            .field("Version", &self.Version)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPAIR_DELETE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPAIR_DELETE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Scope == other.Scope
            && self.RepairTaskId == other.RepairTaskId
            && self.Version == other.Version
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPAIR_DELETE_DESCRIPTION {}
impl Default for FABRIC_REPAIR_DELETE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPAIR_EXECUTOR_STATE {
    pub Executor: windows_core::PCWSTR,
    pub ExecutorData: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPAIR_EXECUTOR_STATE {}
impl Clone for FABRIC_REPAIR_EXECUTOR_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPAIR_EXECUTOR_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_EXECUTOR_STATE")
            .field("Executor", &self.Executor)
            .field("ExecutorData", &self.ExecutorData)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPAIR_EXECUTOR_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPAIR_EXECUTOR_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.Executor == other.Executor
            && self.ExecutorData == other.ExecutorData
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPAIR_EXECUTOR_STATE {}
impl Default for FABRIC_REPAIR_EXECUTOR_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPAIR_IMPACT_DESCRIPTION {
    pub Kind: FABRIC_REPAIR_IMPACT_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPAIR_IMPACT_DESCRIPTION {}
impl Clone for FABRIC_REPAIR_IMPACT_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPAIR_IMPACT_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_IMPACT_DESCRIPTION")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPAIR_IMPACT_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPAIR_IMPACT_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_REPAIR_IMPACT_DESCRIPTION {}
impl Default for FABRIC_REPAIR_IMPACT_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPAIR_NODE_IMPACT {
    pub NodeName: windows_core::PCWSTR,
    pub ImpactLevel: FABRIC_REPAIR_NODE_IMPACT_LEVEL,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPAIR_NODE_IMPACT {}
impl Clone for FABRIC_REPAIR_NODE_IMPACT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPAIR_NODE_IMPACT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_NODE_IMPACT")
            .field("NodeName", &self.NodeName)
            .field("ImpactLevel", &self.ImpactLevel)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPAIR_NODE_IMPACT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPAIR_NODE_IMPACT {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ImpactLevel == other.ImpactLevel
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPAIR_NODE_IMPACT {}
impl Default for FABRIC_REPAIR_NODE_IMPACT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPAIR_NODE_IMPACT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_REPAIR_NODE_IMPACT,
}
impl Copy for FABRIC_REPAIR_NODE_IMPACT_LIST {}
impl Clone for FABRIC_REPAIR_NODE_IMPACT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPAIR_NODE_IMPACT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_NODE_IMPACT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPAIR_NODE_IMPACT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPAIR_NODE_IMPACT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_REPAIR_NODE_IMPACT_LIST {}
impl Default for FABRIC_REPAIR_NODE_IMPACT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPAIR_RESULT_DESCRIPTION {
    pub ResultStatus: FABRIC_REPAIR_TASK_RESULT,
    pub ResultCode: windows_core::HRESULT,
    pub ResultDetails: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPAIR_RESULT_DESCRIPTION {}
impl Clone for FABRIC_REPAIR_RESULT_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPAIR_RESULT_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_RESULT_DESCRIPTION")
            .field("ResultStatus", &self.ResultStatus)
            .field("ResultCode", &self.ResultCode)
            .field("ResultDetails", &self.ResultDetails)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPAIR_RESULT_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPAIR_RESULT_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ResultStatus == other.ResultStatus
            && self.ResultCode == other.ResultCode
            && self.ResultDetails == other.ResultDetails
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPAIR_RESULT_DESCRIPTION {}
impl Default for FABRIC_REPAIR_RESULT_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPAIR_SCOPE_IDENTIFIER {
    pub Kind: FABRIC_REPAIR_SCOPE_IDENTIFIER_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPAIR_SCOPE_IDENTIFIER {}
impl Clone for FABRIC_REPAIR_SCOPE_IDENTIFIER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPAIR_SCOPE_IDENTIFIER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_SCOPE_IDENTIFIER")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPAIR_SCOPE_IDENTIFIER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPAIR_SCOPE_IDENTIFIER {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_REPAIR_SCOPE_IDENTIFIER {}
impl Default for FABRIC_REPAIR_SCOPE_IDENTIFIER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPAIR_TARGET_DESCRIPTION {
    pub Kind: FABRIC_REPAIR_TARGET_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPAIR_TARGET_DESCRIPTION {}
impl Clone for FABRIC_REPAIR_TARGET_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPAIR_TARGET_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_TARGET_DESCRIPTION")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPAIR_TARGET_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPAIR_TARGET_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_REPAIR_TARGET_DESCRIPTION {}
impl Default for FABRIC_REPAIR_TARGET_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPAIR_TASK {
    pub Scope: *const FABRIC_REPAIR_SCOPE_IDENTIFIER,
    pub TaskId: windows_core::PCWSTR,
    pub Version: i64,
    pub Description: windows_core::PCWSTR,
    pub State: FABRIC_REPAIR_TASK_STATE,
    pub Flags: u32,
    pub Action: windows_core::PCWSTR,
    pub Target: *const FABRIC_REPAIR_TARGET_DESCRIPTION,
    pub ExecutorState: *mut FABRIC_REPAIR_EXECUTOR_STATE,
    pub Impact: *mut FABRIC_REPAIR_IMPACT_DESCRIPTION,
    pub Result: *mut FABRIC_REPAIR_RESULT_DESCRIPTION,
    pub History: *const FABRIC_REPAIR_TASK_HISTORY,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPAIR_TASK {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPAIR_TASK {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPAIR_TASK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_TASK")
            .field("Scope", &self.Scope)
            .field("TaskId", &self.TaskId)
            .field("Version", &self.Version)
            .field("Description", &self.Description)
            .field("State", &self.State)
            .field("Flags", &self.Flags)
            .field("Action", &self.Action)
            .field("Target", &self.Target)
            .field("ExecutorState", &self.ExecutorState)
            .field("Impact", &self.Impact)
            .field("Result", &self.Result)
            .field("History", &self.History)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPAIR_TASK {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPAIR_TASK {
    fn eq(&self, other: &Self) -> bool {
        self.Scope == other.Scope
            && self.TaskId == other.TaskId
            && self.Version == other.Version
            && self.Description == other.Description
            && self.State == other.State
            && self.Flags == other.Flags
            && self.Action == other.Action
            && self.Target == other.Target
            && self.ExecutorState == other.ExecutorState
            && self.Impact == other.Impact
            && self.Result == other.Result
            && self.History == other.History
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPAIR_TASK {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPAIR_TASK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPAIR_TASK_EX1 {
    pub PerformPreparingHealthCheck: windows::Win32::Foundation::BOOLEAN,
    pub PerformRestoringHealthCheck: windows::Win32::Foundation::BOOLEAN,
    pub PreparingHealthCheckState: FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE,
    pub RestoringHealthCheckState: FABRIC_REPAIR_TASK_HEALTH_CHECK_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPAIR_TASK_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPAIR_TASK_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPAIR_TASK_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_TASK_EX1")
            .field(
                "PerformPreparingHealthCheck",
                &self.PerformPreparingHealthCheck,
            )
            .field(
                "PerformRestoringHealthCheck",
                &self.PerformRestoringHealthCheck,
            )
            .field("PreparingHealthCheckState", &self.PreparingHealthCheckState)
            .field("RestoringHealthCheckState", &self.RestoringHealthCheckState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPAIR_TASK_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.PerformPreparingHealthCheck == other.PerformPreparingHealthCheck
            && self.PerformRestoringHealthCheck == other.PerformRestoringHealthCheck
            && self.PreparingHealthCheckState == other.PreparingHealthCheckState
            && self.RestoringHealthCheckState == other.RestoringHealthCheckState
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPAIR_TASK_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPAIR_TASK_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION {
    pub Scope: *mut FABRIC_REPAIR_SCOPE_IDENTIFIER,
    pub RepairTaskId: windows_core::PCWSTR,
    pub Version: i64,
    pub Flags: u32,
    pub PerformPreparingHealthCheck: windows::Win32::Foundation::BOOLEAN,
    pub PerformRestoringHealthCheck: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION")
            .field("Scope", &self.Scope)
            .field("RepairTaskId", &self.RepairTaskId)
            .field("Version", &self.Version)
            .field("Flags", &self.Flags)
            .field(
                "PerformPreparingHealthCheck",
                &self.PerformPreparingHealthCheck,
            )
            .field(
                "PerformRestoringHealthCheck",
                &self.PerformRestoringHealthCheck,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Scope == other.Scope
            && self.RepairTaskId == other.RepairTaskId
            && self.Version == other.Version
            && self.Flags == other.Flags
            && self.PerformPreparingHealthCheck == other.PerformPreparingHealthCheck
            && self.PerformRestoringHealthCheck == other.PerformRestoringHealthCheck
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPAIR_TASK_HEALTH_POLICY_UPDATE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPAIR_TASK_HISTORY {
    pub CreatedUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub ClaimedUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub PreparingUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub ApprovedUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub ExecutingUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub RestoringUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub CompletedUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPAIR_TASK_HISTORY {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPAIR_TASK_HISTORY {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPAIR_TASK_HISTORY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_TASK_HISTORY")
            .field("CreatedUtcTimestamp", &self.CreatedUtcTimestamp)
            .field("ClaimedUtcTimestamp", &self.ClaimedUtcTimestamp)
            .field("PreparingUtcTimestamp", &self.PreparingUtcTimestamp)
            .field("ApprovedUtcTimestamp", &self.ApprovedUtcTimestamp)
            .field("ExecutingUtcTimestamp", &self.ExecutingUtcTimestamp)
            .field("RestoringUtcTimestamp", &self.RestoringUtcTimestamp)
            .field("CompletedUtcTimestamp", &self.CompletedUtcTimestamp)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_HISTORY {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPAIR_TASK_HISTORY {
    fn eq(&self, other: &Self) -> bool {
        self.CreatedUtcTimestamp == other.CreatedUtcTimestamp
            && self.ClaimedUtcTimestamp == other.ClaimedUtcTimestamp
            && self.PreparingUtcTimestamp == other.PreparingUtcTimestamp
            && self.ApprovedUtcTimestamp == other.ApprovedUtcTimestamp
            && self.ExecutingUtcTimestamp == other.ExecutingUtcTimestamp
            && self.RestoringUtcTimestamp == other.RestoringUtcTimestamp
            && self.CompletedUtcTimestamp == other.CompletedUtcTimestamp
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPAIR_TASK_HISTORY {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPAIR_TASK_HISTORY {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPAIR_TASK_HISTORY_EX1 {
    pub PreparingHealthCheckStartUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub PreparingHealthCheckEndUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub RestoringHealthCheckStartUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub RestoringHealthCheckEndUtcTimestamp: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPAIR_TASK_HISTORY_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPAIR_TASK_HISTORY_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPAIR_TASK_HISTORY_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_TASK_HISTORY_EX1")
            .field(
                "PreparingHealthCheckStartUtcTimestamp",
                &self.PreparingHealthCheckStartUtcTimestamp,
            )
            .field(
                "PreparingHealthCheckEndUtcTimestamp",
                &self.PreparingHealthCheckEndUtcTimestamp,
            )
            .field(
                "RestoringHealthCheckStartUtcTimestamp",
                &self.RestoringHealthCheckStartUtcTimestamp,
            )
            .field(
                "RestoringHealthCheckEndUtcTimestamp",
                &self.RestoringHealthCheckEndUtcTimestamp,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_HISTORY_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPAIR_TASK_HISTORY_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.PreparingHealthCheckStartUtcTimestamp == other.PreparingHealthCheckStartUtcTimestamp
            && self.PreparingHealthCheckEndUtcTimestamp == other.PreparingHealthCheckEndUtcTimestamp
            && self.RestoringHealthCheckStartUtcTimestamp
                == other.RestoringHealthCheckStartUtcTimestamp
            && self.RestoringHealthCheckEndUtcTimestamp == other.RestoringHealthCheckEndUtcTimestamp
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPAIR_TASK_HISTORY_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPAIR_TASK_HISTORY_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPAIR_TASK_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_REPAIR_TASK,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPAIR_TASK_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPAIR_TASK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPAIR_TASK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_TASK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPAIR_TASK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPAIR_TASK_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPAIR_TASK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPAIR_TASK_QUERY_DESCRIPTION {
    pub Scope: *mut FABRIC_REPAIR_SCOPE_IDENTIFIER,
    pub TaskIdFilter: windows_core::PCWSTR,
    pub StateFilter: u32,
    pub ExecutorFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPAIR_TASK_QUERY_DESCRIPTION {}
impl Clone for FABRIC_REPAIR_TASK_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPAIR_TASK_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPAIR_TASK_QUERY_DESCRIPTION")
            .field("Scope", &self.Scope)
            .field("TaskIdFilter", &self.TaskIdFilter)
            .field("StateFilter", &self.StateFilter)
            .field("ExecutorFilter", &self.ExecutorFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPAIR_TASK_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPAIR_TASK_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Scope == other.Scope
            && self.TaskIdFilter == other.TaskIdFilter
            && self.StateFilter == other.StateFilter
            && self.ExecutorFilter == other.ExecutorFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPAIR_TASK_QUERY_DESCRIPTION {}
impl Default for FABRIC_REPAIR_TASK_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICAS_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub TotalCount: u32,
    pub MaxPercentUnhealthyReplicasPerPartition: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICAS_HEALTH_EVALUATION {}
impl Clone for FABRIC_REPLICAS_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICAS_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICAS_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("TotalCount", &self.TotalCount)
            .field(
                "MaxPercentUnhealthyReplicasPerPartition",
                &self.MaxPercentUnhealthyReplicasPerPartition,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICAS_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICAS_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.TotalCount == other.TotalCount
            && self.MaxPercentUnhealthyReplicasPerPartition
                == other.MaxPercentUnhealthyReplicasPerPartition
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICAS_HEALTH_EVALUATION {}
impl Default for FABRIC_REPLICAS_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICATOR_QUEUE_STATUS {
    pub QueueUtilizationPercentage: u32,
    pub QueueMemorySize: i64,
    pub FirstSequenceNumber: i64,
    pub CompletedSequenceNumber: i64,
    pub CommittedSequenceNumber: i64,
    pub LastSequenceNumber: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICATOR_QUEUE_STATUS {}
impl Clone for FABRIC_REPLICATOR_QUEUE_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICATOR_QUEUE_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICATOR_QUEUE_STATUS")
            .field(
                "QueueUtilizationPercentage",
                &self.QueueUtilizationPercentage,
            )
            .field("QueueMemorySize", &self.QueueMemorySize)
            .field("FirstSequenceNumber", &self.FirstSequenceNumber)
            .field("CompletedSequenceNumber", &self.CompletedSequenceNumber)
            .field("CommittedSequenceNumber", &self.CommittedSequenceNumber)
            .field("LastSequenceNumber", &self.LastSequenceNumber)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICATOR_QUEUE_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICATOR_QUEUE_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.QueueUtilizationPercentage == other.QueueUtilizationPercentage
            && self.QueueMemorySize == other.QueueMemorySize
            && self.FirstSequenceNumber == other.FirstSequenceNumber
            && self.CompletedSequenceNumber == other.CompletedSequenceNumber
            && self.CommittedSequenceNumber == other.CommittedSequenceNumber
            && self.LastSequenceNumber == other.LastSequenceNumber
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICATOR_QUEUE_STATUS {}
impl Default for FABRIC_REPLICATOR_QUEUE_STATUS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPLICATOR_SETTINGS {
    pub Flags: u32,
    pub RetryIntervalMilliseconds: u32,
    pub BatchAcknowledgementIntervalMilliseconds: u32,
    pub ReplicatorAddress: windows_core::PCWSTR,
    pub RequireServiceAck: windows::Win32::Foundation::BOOLEAN,
    pub InitialReplicationQueueSize: u32,
    pub MaxReplicationQueueSize: u32,
    pub InitialCopyQueueSize: u32,
    pub MaxCopyQueueSize: u32,
    pub SecurityCredentials: *const FABRIC_SECURITY_CREDENTIALS,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPLICATOR_SETTINGS {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPLICATOR_SETTINGS {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPLICATOR_SETTINGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICATOR_SETTINGS")
            .field("Flags", &self.Flags)
            .field("RetryIntervalMilliseconds", &self.RetryIntervalMilliseconds)
            .field(
                "BatchAcknowledgementIntervalMilliseconds",
                &self.BatchAcknowledgementIntervalMilliseconds,
            )
            .field("ReplicatorAddress", &self.ReplicatorAddress)
            .field("RequireServiceAck", &self.RequireServiceAck)
            .field(
                "InitialReplicationQueueSize",
                &self.InitialReplicationQueueSize,
            )
            .field("MaxReplicationQueueSize", &self.MaxReplicationQueueSize)
            .field("InitialCopyQueueSize", &self.InitialCopyQueueSize)
            .field("MaxCopyQueueSize", &self.MaxCopyQueueSize)
            .field("SecurityCredentials", &self.SecurityCredentials)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPLICATOR_SETTINGS {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPLICATOR_SETTINGS {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags
            && self.RetryIntervalMilliseconds == other.RetryIntervalMilliseconds
            && self.BatchAcknowledgementIntervalMilliseconds
                == other.BatchAcknowledgementIntervalMilliseconds
            && self.ReplicatorAddress == other.ReplicatorAddress
            && self.RequireServiceAck == other.RequireServiceAck
            && self.InitialReplicationQueueSize == other.InitialReplicationQueueSize
            && self.MaxReplicationQueueSize == other.MaxReplicationQueueSize
            && self.InitialCopyQueueSize == other.InitialCopyQueueSize
            && self.MaxCopyQueueSize == other.MaxCopyQueueSize
            && self.SecurityCredentials == other.SecurityCredentials
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPLICATOR_SETTINGS {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPLICATOR_SETTINGS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPLICATOR_SETTINGS_EX1 {
    pub MaxReplicationQueueMemorySize: u32,
    pub SecondaryClearAcknowledgedOperations: windows::Win32::Foundation::BOOLEAN,
    pub MaxReplicationMessageSize: u32,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPLICATOR_SETTINGS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPLICATOR_SETTINGS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPLICATOR_SETTINGS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICATOR_SETTINGS_EX1")
            .field(
                "MaxReplicationQueueMemorySize",
                &self.MaxReplicationQueueMemorySize,
            )
            .field(
                "SecondaryClearAcknowledgedOperations",
                &self.SecondaryClearAcknowledgedOperations,
            )
            .field("MaxReplicationMessageSize", &self.MaxReplicationMessageSize)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPLICATOR_SETTINGS_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPLICATOR_SETTINGS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.MaxReplicationQueueMemorySize == other.MaxReplicationQueueMemorySize
            && self.SecondaryClearAcknowledgedOperations
                == other.SecondaryClearAcknowledgedOperations
            && self.MaxReplicationMessageSize == other.MaxReplicationMessageSize
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPLICATOR_SETTINGS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPLICATOR_SETTINGS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPLICATOR_SETTINGS_EX2 {
    pub UseStreamFaultsAndEndOfStreamOperationAck: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPLICATOR_SETTINGS_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPLICATOR_SETTINGS_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPLICATOR_SETTINGS_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICATOR_SETTINGS_EX2")
            .field(
                "UseStreamFaultsAndEndOfStreamOperationAck",
                &self.UseStreamFaultsAndEndOfStreamOperationAck,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPLICATOR_SETTINGS_EX2 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPLICATOR_SETTINGS_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.UseStreamFaultsAndEndOfStreamOperationAck
            == other.UseStreamFaultsAndEndOfStreamOperationAck
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPLICATOR_SETTINGS_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPLICATOR_SETTINGS_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICATOR_SETTINGS_EX3 {
    pub InitialPrimaryReplicationQueueSize: u32,
    pub MaxPrimaryReplicationQueueSize: u32,
    pub MaxPrimaryReplicationQueueMemorySize: u32,
    pub InitialSecondaryReplicationQueueSize: u32,
    pub MaxSecondaryReplicationQueueSize: u32,
    pub MaxSecondaryReplicationQueueMemorySize: u32,
    pub PrimaryWaitForPendingQuorumsTimeoutMilliseconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICATOR_SETTINGS_EX3 {}
impl Clone for FABRIC_REPLICATOR_SETTINGS_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICATOR_SETTINGS_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICATOR_SETTINGS_EX3")
            .field(
                "InitialPrimaryReplicationQueueSize",
                &self.InitialPrimaryReplicationQueueSize,
            )
            .field(
                "MaxPrimaryReplicationQueueSize",
                &self.MaxPrimaryReplicationQueueSize,
            )
            .field(
                "MaxPrimaryReplicationQueueMemorySize",
                &self.MaxPrimaryReplicationQueueMemorySize,
            )
            .field(
                "InitialSecondaryReplicationQueueSize",
                &self.InitialSecondaryReplicationQueueSize,
            )
            .field(
                "MaxSecondaryReplicationQueueSize",
                &self.MaxSecondaryReplicationQueueSize,
            )
            .field(
                "MaxSecondaryReplicationQueueMemorySize",
                &self.MaxSecondaryReplicationQueueMemorySize,
            )
            .field(
                "PrimaryWaitForPendingQuorumsTimeoutMilliseconds",
                &self.PrimaryWaitForPendingQuorumsTimeoutMilliseconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICATOR_SETTINGS_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICATOR_SETTINGS_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.InitialPrimaryReplicationQueueSize == other.InitialPrimaryReplicationQueueSize
            && self.MaxPrimaryReplicationQueueSize == other.MaxPrimaryReplicationQueueSize
            && self.MaxPrimaryReplicationQueueMemorySize
                == other.MaxPrimaryReplicationQueueMemorySize
            && self.InitialSecondaryReplicationQueueSize
                == other.InitialSecondaryReplicationQueueSize
            && self.MaxSecondaryReplicationQueueSize == other.MaxSecondaryReplicationQueueSize
            && self.MaxSecondaryReplicationQueueMemorySize
                == other.MaxSecondaryReplicationQueueMemorySize
            && self.PrimaryWaitForPendingQuorumsTimeoutMilliseconds
                == other.PrimaryWaitForPendingQuorumsTimeoutMilliseconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICATOR_SETTINGS_EX3 {}
impl Default for FABRIC_REPLICATOR_SETTINGS_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICATOR_SETTINGS_EX4 {
    pub ReplicatorListenAddress: windows_core::PCWSTR,
    pub ReplicatorPublishAddress: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICATOR_SETTINGS_EX4 {}
impl Clone for FABRIC_REPLICATOR_SETTINGS_EX4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICATOR_SETTINGS_EX4 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICATOR_SETTINGS_EX4")
            .field("ReplicatorListenAddress", &self.ReplicatorListenAddress)
            .field("ReplicatorPublishAddress", &self.ReplicatorPublishAddress)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICATOR_SETTINGS_EX4 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICATOR_SETTINGS_EX4 {
    fn eq(&self, other: &Self) -> bool {
        self.ReplicatorListenAddress == other.ReplicatorListenAddress
            && self.ReplicatorPublishAddress == other.ReplicatorPublishAddress
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICATOR_SETTINGS_EX4 {}
impl Default for FABRIC_REPLICATOR_SETTINGS_EX4 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICATOR_STATUS_QUERY_RESULT {
    pub Role: FABRIC_REPLICA_ROLE,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICATOR_STATUS_QUERY_RESULT {}
impl Clone for FABRIC_REPLICATOR_STATUS_QUERY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICATOR_STATUS_QUERY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICATOR_STATUS_QUERY_RESULT")
            .field("Role", &self.Role)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICATOR_STATUS_QUERY_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICATOR_STATUS_QUERY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.Role == other.Role && self.Value == other.Value
    }
}
impl Eq for FABRIC_REPLICATOR_STATUS_QUERY_RESULT {}
impl Default for FABRIC_REPLICATOR_STATUS_QUERY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_HEALTH {
    pub Kind: FABRIC_SERVICE_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_HEALTH {}
impl Clone for FABRIC_REPLICA_HEALTH {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_HEALTH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_HEALTH")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_HEALTH {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_HEALTH {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_REPLICA_HEALTH {}
impl Default for FABRIC_REPLICA_HEALTH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub PartitionId: windows_core::GUID,
    pub ReplicaOrInstanceId: i64,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_HEALTH_EVALUATION {}
impl Clone for FABRIC_REPLICA_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaOrInstanceId", &self.ReplicaOrInstanceId)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.PartitionId == other.PartitionId
            && self.ReplicaOrInstanceId == other.ReplicaOrInstanceId
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICA_HEALTH_EVALUATION {}
impl Default for FABRIC_REPLICA_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION {
    pub PartitionId: windows_core::GUID,
    pub ReplicaOrInstanceId: i64,
    pub HealthPolicy: *const FABRIC_APPLICATION_HEALTH_POLICY,
    pub EventsFilter: *const FABRIC_HEALTH_EVENTS_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION")
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaOrInstanceId", &self.ReplicaOrInstanceId)
            .field("HealthPolicy", &self.HealthPolicy)
            .field("EventsFilter", &self.EventsFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.ReplicaOrInstanceId == other.ReplicaOrInstanceId
            && self.HealthPolicy == other.HealthPolicy
            && self.EventsFilter == other.EventsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPLICA_HEALTH_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_HEALTH_STATE {
    pub Kind: FABRIC_SERVICE_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_HEALTH_STATE {}
impl Clone for FABRIC_REPLICA_HEALTH_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_HEALTH_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_HEALTH_STATE")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_HEALTH_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_HEALTH_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_REPLICA_HEALTH_STATE {}
impl Default for FABRIC_REPLICA_HEALTH_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_HEALTH_STATES_FILTER {
    pub HealthStateFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_HEALTH_STATES_FILTER {}
impl Clone for FABRIC_REPLICA_HEALTH_STATES_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_HEALTH_STATES_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_HEALTH_STATES_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_HEALTH_STATES_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_HEALTH_STATES_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICA_HEALTH_STATES_FILTER {}
impl Default for FABRIC_REPLICA_HEALTH_STATES_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_HEALTH_STATE_CHUNK {
    pub ReplicaOrInstanceId: i64,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_HEALTH_STATE_CHUNK {}
impl Clone for FABRIC_REPLICA_HEALTH_STATE_CHUNK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_HEALTH_STATE_CHUNK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_HEALTH_STATE_CHUNK")
            .field("ReplicaOrInstanceId", &self.ReplicaOrInstanceId)
            .field("HealthState", &self.HealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_HEALTH_STATE_CHUNK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_HEALTH_STATE_CHUNK {
    fn eq(&self, other: &Self) -> bool {
        self.ReplicaOrInstanceId == other.ReplicaOrInstanceId
            && self.HealthState == other.HealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICA_HEALTH_STATE_CHUNK {}
impl Default for FABRIC_REPLICA_HEALTH_STATE_CHUNK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_HEALTH_STATE_CHUNK_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_REPLICA_HEALTH_STATE_CHUNK,
    pub TotalCount: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_HEALTH_STATE_CHUNK_LIST {}
impl Clone for FABRIC_REPLICA_HEALTH_STATE_CHUNK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_HEALTH_STATE_CHUNK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_HEALTH_STATE_CHUNK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .field("TotalCount", &self.TotalCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_HEALTH_STATE_CHUNK_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_HEALTH_STATE_CHUNK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count
            && self.Items == other.Items
            && self.TotalCount == other.TotalCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICA_HEALTH_STATE_CHUNK_LIST {}
impl Default for FABRIC_REPLICA_HEALTH_STATE_CHUNK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_HEALTH_STATE_FILTER {
    pub HealthStateFilter: u32,
    pub ReplicaOrInstanceIdFilter: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_HEALTH_STATE_FILTER {}
impl Clone for FABRIC_REPLICA_HEALTH_STATE_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_HEALTH_STATE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_HEALTH_STATE_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("ReplicaOrInstanceIdFilter", &self.ReplicaOrInstanceIdFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_HEALTH_STATE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_HEALTH_STATE_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter
            && self.ReplicaOrInstanceIdFilter == other.ReplicaOrInstanceIdFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICA_HEALTH_STATE_FILTER {}
impl Default for FABRIC_REPLICA_HEALTH_STATE_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_HEALTH_STATE_FILTER_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_REPLICA_HEALTH_STATE_FILTER,
}
impl Copy for FABRIC_REPLICA_HEALTH_STATE_FILTER_LIST {}
impl Clone for FABRIC_REPLICA_HEALTH_STATE_FILTER_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_HEALTH_STATE_FILTER_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_HEALTH_STATE_FILTER_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_HEALTH_STATE_FILTER_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_HEALTH_STATE_FILTER_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_REPLICA_HEALTH_STATE_FILTER_LIST {}
impl Default for FABRIC_REPLICA_HEALTH_STATE_FILTER_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_HEALTH_STATE_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_REPLICA_HEALTH_STATE,
}
impl Copy for FABRIC_REPLICA_HEALTH_STATE_LIST {}
impl Clone for FABRIC_REPLICA_HEALTH_STATE_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_HEALTH_STATE_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_HEALTH_STATE_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_HEALTH_STATE_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_HEALTH_STATE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_REPLICA_HEALTH_STATE_LIST {}
impl Default for FABRIC_REPLICA_HEALTH_STATE_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_INFORMATION {
    pub Id: i64,
    pub Role: FABRIC_REPLICA_ROLE,
    pub Status: FABRIC_REPLICA_STATUS,
    pub ReplicatorAddress: windows_core::PCWSTR,
    pub CurrentProgress: i64,
    pub CatchUpCapability: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_INFORMATION {}
impl Clone for FABRIC_REPLICA_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_INFORMATION")
            .field("Id", &self.Id)
            .field("Role", &self.Role)
            .field("Status", &self.Status)
            .field("ReplicatorAddress", &self.ReplicatorAddress)
            .field("CurrentProgress", &self.CurrentProgress)
            .field("CatchUpCapability", &self.CatchUpCapability)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.Id == other.Id
            && self.Role == other.Role
            && self.Status == other.Status
            && self.ReplicatorAddress == other.ReplicatorAddress
            && self.CurrentProgress == other.CurrentProgress
            && self.CatchUpCapability == other.CatchUpCapability
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICA_INFORMATION {}
impl Default for FABRIC_REPLICA_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPLICA_INFORMATION_EX1 {
    pub MustCatchup: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPLICA_INFORMATION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPLICA_INFORMATION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPLICA_INFORMATION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_INFORMATION_EX1")
            .field("MustCatchup", &self.MustCatchup)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPLICA_INFORMATION_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPLICA_INFORMATION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.MustCatchup == other.MustCatchup && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPLICA_INFORMATION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPLICA_INFORMATION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_REPLICA_LOAD_INFORMATION {
    pub PartitionId: windows_core::GUID,
    pub ReplicaOrInstanceId: i64,
    pub LoadMetricReports: *mut FABRIC_LOAD_METRIC_REPORT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_REPLICA_LOAD_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_REPLICA_LOAD_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_REPLICA_LOAD_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_LOAD_INFORMATION")
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaOrInstanceId", &self.ReplicaOrInstanceId)
            .field("LoadMetricReports", &self.LoadMetricReports)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_REPLICA_LOAD_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_REPLICA_LOAD_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.ReplicaOrInstanceId == other.ReplicaOrInstanceId
            && self.LoadMetricReports == other.LoadMetricReports
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_REPLICA_LOAD_INFORMATION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_REPLICA_LOAD_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION {
    pub PartitionId: windows_core::GUID,
    pub ReplicaOrInstanceId: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION {}
impl Clone for FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION")
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaOrInstanceId", &self.ReplicaOrInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.ReplicaOrInstanceId == other.ReplicaOrInstanceId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION {}
impl Default for FABRIC_REPLICA_LOAD_INFORMATION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_SET_CONFIGURATION {
    pub ReplicaCount: u32,
    pub Replicas: *const FABRIC_REPLICA_INFORMATION,
    pub WriteQuorum: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_SET_CONFIGURATION {}
impl Clone for FABRIC_REPLICA_SET_CONFIGURATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_SET_CONFIGURATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_SET_CONFIGURATION")
            .field("ReplicaCount", &self.ReplicaCount)
            .field("Replicas", &self.Replicas)
            .field("WriteQuorum", &self.WriteQuorum)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_SET_CONFIGURATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_SET_CONFIGURATION {
    fn eq(&self, other: &Self) -> bool {
        self.ReplicaCount == other.ReplicaCount
            && self.Replicas == other.Replicas
            && self.WriteQuorum == other.WriteQuorum
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICA_SET_CONFIGURATION {}
impl Default for FABRIC_REPLICA_SET_CONFIGURATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_REPLICA_STATUS_QUERY_RESULT {
    pub Kind: FABRIC_SERVICE_REPLICA_KIND,
    pub Value: *mut core::ffi::c_void,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_REPLICA_STATUS_QUERY_RESULT {}
impl Clone for FABRIC_REPLICA_STATUS_QUERY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_REPLICA_STATUS_QUERY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_REPLICA_STATUS_QUERY_RESULT")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_REPLICA_STATUS_QUERY_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_REPLICA_STATUS_QUERY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_REPLICA_STATUS_QUERY_RESULT {}
impl Default for FABRIC_REPLICA_STATUS_QUERY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RESOLVED_SERVICE_ENDPOINT {
    pub Address: windows_core::PCWSTR,
    pub Role: FABRIC_SERVICE_ENDPOINT_ROLE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RESOLVED_SERVICE_ENDPOINT {}
impl Clone for FABRIC_RESOLVED_SERVICE_ENDPOINT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RESOLVED_SERVICE_ENDPOINT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESOLVED_SERVICE_ENDPOINT")
            .field("Address", &self.Address)
            .field("Role", &self.Role)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_RESOLVED_SERVICE_ENDPOINT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RESOLVED_SERVICE_ENDPOINT {
    fn eq(&self, other: &Self) -> bool {
        self.Address == other.Address && self.Role == other.Role && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_RESOLVED_SERVICE_ENDPOINT {}
impl Default for FABRIC_RESOLVED_SERVICE_ENDPOINT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RESOLVED_SERVICE_PARTITION {
    pub Info: FABRIC_SERVICE_PARTITION_INFORMATION,
    pub EndpointCount: u32,
    pub Endpoints: *mut FABRIC_RESOLVED_SERVICE_ENDPOINT,
    pub ServiceName: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RESOLVED_SERVICE_PARTITION {}
impl Clone for FABRIC_RESOLVED_SERVICE_PARTITION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RESOLVED_SERVICE_PARTITION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESOLVED_SERVICE_PARTITION")
            .field("Info", &self.Info)
            .field("EndpointCount", &self.EndpointCount)
            .field("Endpoints", &self.Endpoints)
            .field("ServiceName", &self.ServiceName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_RESOLVED_SERVICE_PARTITION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RESOLVED_SERVICE_PARTITION {
    fn eq(&self, other: &Self) -> bool {
        self.Info == other.Info
            && self.EndpointCount == other.EndpointCount
            && self.Endpoints == other.Endpoints
            && self.ServiceName == other.ServiceName
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_RESOLVED_SERVICE_PARTITION {}
impl Default for FABRIC_RESOLVED_SERVICE_PARTITION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub ApplicationName: *mut u16,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub CodePackageName: windows_core::PCWSTR,
    pub CodePackageInstanceId: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION {}
impl Clone for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("CodePackageName", &self.CodePackageName)
            .field("CodePackageInstanceId", &self.CodePackageInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ApplicationName == other.ApplicationName
            && self.ServiceManifestName == other.ServiceManifestName
            && self.CodePackageName == other.CodePackageName
            && self.CodePackageInstanceId == other.CodePackageInstanceId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION {}
impl Default for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2 {
    pub Kind: FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2 {}
impl Clone for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2 {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2 {}
impl Default for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME {
    pub NodeName: windows_core::PCWSTR,
    pub ApplicationName: *mut u16,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub CodePackageName: windows_core::PCWSTR,
    pub CodePackageInstanceId: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME {}
impl Clone for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME")
            .field("NodeName", &self.NodeName)
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("CodePackageName", &self.CodePackageName)
            .field("CodePackageInstanceId", &self.CodePackageInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.ApplicationName == other.ApplicationName
            && self.ServiceManifestName == other.ServiceManifestName
            && self.CodePackageName == other.CodePackageName
            && self.CodePackageInstanceId == other.CodePackageInstanceId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME {}
impl Default for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME_EX1 {
    pub ServicePackageActivationId: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME_EX1 {}
impl Clone for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME_EX1")
            .field(
                "ServicePackageActivationId",
                &self.ServicePackageActivationId,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind
    for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME_EX1
{
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationId == other.ServicePackageActivationId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME_EX1 {}
impl Default for FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RESTART_NODE_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub NodeInstanceId: u64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RESTART_NODE_DESCRIPTION {}
impl Clone for FABRIC_RESTART_NODE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RESTART_NODE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESTART_NODE_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_RESTART_NODE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RESTART_NODE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.NodeInstanceId == other.NodeInstanceId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_RESTART_NODE_DESCRIPTION {}
impl Default for FABRIC_RESTART_NODE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RESTART_NODE_DESCRIPTION2 {
    pub Kind: FABRIC_RESTART_NODE_DESCRIPTION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RESTART_NODE_DESCRIPTION2 {}
impl Clone for FABRIC_RESTART_NODE_DESCRIPTION2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RESTART_NODE_DESCRIPTION2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESTART_NODE_DESCRIPTION2")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_RESTART_NODE_DESCRIPTION2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RESTART_NODE_DESCRIPTION2 {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_RESTART_NODE_DESCRIPTION2 {}
impl Default for FABRIC_RESTART_NODE_DESCRIPTION2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_RESTART_NODE_DESCRIPTION_EX1 {
    pub CreateFabricDump: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_RESTART_NODE_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_RESTART_NODE_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_RESTART_NODE_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESTART_NODE_DESCRIPTION_EX1")
            .field("CreateFabricDump", &self.CreateFabricDump)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_RESTART_NODE_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_RESTART_NODE_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.CreateFabricDump == other.CreateFabricDump && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_RESTART_NODE_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_RESTART_NODE_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_RESTART_NODE_DESCRIPTION_USING_NODE_NAME {
    pub NodeName: windows_core::PCWSTR,
    pub NodeInstanceId: u64,
    pub ShouldCreateFabricDump: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_RESTART_NODE_DESCRIPTION_USING_NODE_NAME {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_RESTART_NODE_DESCRIPTION_USING_NODE_NAME {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_RESTART_NODE_DESCRIPTION_USING_NODE_NAME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESTART_NODE_DESCRIPTION_USING_NODE_NAME")
            .field("NodeName", &self.NodeName)
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("ShouldCreateFabricDump", &self.ShouldCreateFabricDump)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_RESTART_NODE_DESCRIPTION_USING_NODE_NAME {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_RESTART_NODE_DESCRIPTION_USING_NODE_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.NodeInstanceId == other.NodeInstanceId
            && self.ShouldCreateFabricDump == other.ShouldCreateFabricDump
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_RESTART_NODE_DESCRIPTION_USING_NODE_NAME {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_RESTART_NODE_DESCRIPTION_USING_NODE_NAME {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RESTART_NODE_STATUS {
    pub NodeResult: *mut FABRIC_NODE_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RESTART_NODE_STATUS {}
impl Clone for FABRIC_RESTART_NODE_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RESTART_NODE_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESTART_NODE_STATUS")
            .field("NodeResult", &self.NodeResult)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_RESTART_NODE_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RESTART_NODE_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.NodeResult == other.NodeResult && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_RESTART_NODE_STATUS {}
impl Default for FABRIC_RESTART_NODE_STATUS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RESTART_REPLICA_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub PartitionId: windows_core::GUID,
    pub ReplicaOrInstanceId: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RESTART_REPLICA_DESCRIPTION {}
impl Clone for FABRIC_RESTART_REPLICA_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RESTART_REPLICA_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RESTART_REPLICA_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaOrInstanceId", &self.ReplicaOrInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_RESTART_REPLICA_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RESTART_REPLICA_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.PartitionId == other.PartitionId
            && self.ReplicaOrInstanceId == other.ReplicaOrInstanceId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_RESTART_REPLICA_DESCRIPTION {}
impl Default for FABRIC_RESTART_REPLICA_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ROLLING_UPGRADE_MONITORING_POLICY {
    pub FailureAction: FABRIC_MONITORED_UPGRADE_FAILURE_ACTION,
    pub HealthCheckWaitDurationInSeconds: u32,
    pub HealthCheckRetryTimeoutInSeconds: u32,
    pub UpgradeTimeoutInSeconds: u32,
    pub UpgradeDomainTimeoutInSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY {}
impl Clone for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ROLLING_UPGRADE_MONITORING_POLICY")
            .field("FailureAction", &self.FailureAction)
            .field(
                "HealthCheckWaitDurationInSeconds",
                &self.HealthCheckWaitDurationInSeconds,
            )
            .field(
                "HealthCheckRetryTimeoutInSeconds",
                &self.HealthCheckRetryTimeoutInSeconds,
            )
            .field("UpgradeTimeoutInSeconds", &self.UpgradeTimeoutInSeconds)
            .field(
                "UpgradeDomainTimeoutInSeconds",
                &self.UpgradeDomainTimeoutInSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY {
    fn eq(&self, other: &Self) -> bool {
        self.FailureAction == other.FailureAction
            && self.HealthCheckWaitDurationInSeconds == other.HealthCheckWaitDurationInSeconds
            && self.HealthCheckRetryTimeoutInSeconds == other.HealthCheckRetryTimeoutInSeconds
            && self.UpgradeTimeoutInSeconds == other.UpgradeTimeoutInSeconds
            && self.UpgradeDomainTimeoutInSeconds == other.UpgradeDomainTimeoutInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY {}
impl Default for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ROLLING_UPGRADE_MONITORING_POLICY_EX1 {
    pub HealthCheckStableDurationInSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY_EX1 {}
impl Clone for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ROLLING_UPGRADE_MONITORING_POLICY_EX1")
            .field(
                "HealthCheckStableDurationInSeconds",
                &self.HealthCheckStableDurationInSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthCheckStableDurationInSeconds == other.HealthCheckStableDurationInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY_EX1 {}
impl Default for FABRIC_ROLLING_UPGRADE_MONITORING_POLICY_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION {
    pub RollingUpgradeMode: FABRIC_ROLLING_UPGRADE_MODE,
    pub ForceRestart: windows::Win32::Foundation::BOOLEAN,
    pub UpgradeReplicaSetCheckTimeoutInSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION")
            .field("RollingUpgradeMode", &self.RollingUpgradeMode)
            .field("ForceRestart", &self.ForceRestart)
            .field(
                "UpgradeReplicaSetCheckTimeoutInSeconds",
                &self.UpgradeReplicaSetCheckTimeoutInSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.RollingUpgradeMode == other.RollingUpgradeMode
            && self.ForceRestart == other.ForceRestart
            && self.UpgradeReplicaSetCheckTimeoutInSeconds
                == other.UpgradeReplicaSetCheckTimeoutInSeconds
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX1 {
    pub MonitoringPolicy: *const FABRIC_ROLLING_UPGRADE_MONITORING_POLICY,
    pub HealthPolicy: *mut core::ffi::c_void,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX1 {}
impl Clone for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX1")
            .field("MonitoringPolicy", &self.MonitoringPolicy)
            .field("HealthPolicy", &self.HealthPolicy)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.MonitoringPolicy == other.MonitoringPolicy
            && self.HealthPolicy == other.HealthPolicy
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX1 {}
impl Default for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX2 {
    pub EnableDeltaHealthEvaluation: windows::Win32::Foundation::BOOLEAN,
    pub UpgradeHealthPolicy: *mut core::ffi::c_void,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX2")
            .field(
                "EnableDeltaHealthEvaluation",
                &self.EnableDeltaHealthEvaluation,
            )
            .field("UpgradeHealthPolicy", &self.UpgradeHealthPolicy)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.EnableDeltaHealthEvaluation == other.EnableDeltaHealthEvaluation
            && self.UpgradeHealthPolicy == other.UpgradeHealthPolicy
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX3 {
    pub ApplicationHealthPolicyMap: *const FABRIC_APPLICATION_HEALTH_POLICY_MAP,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX3 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX3")
            .field(
                "ApplicationHealthPolicyMap",
                &self.ApplicationHealthPolicyMap,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX3 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationHealthPolicyMap == other.ApplicationHealthPolicyMap
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX3 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_ROLLING_UPGRADE_POLICY_DESCRIPTION_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_RUNAS_POLICY_DESCRIPTION {
    pub UserName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_RUNAS_POLICY_DESCRIPTION {}
impl Clone for FABRIC_RUNAS_POLICY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_RUNAS_POLICY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_RUNAS_POLICY_DESCRIPTION")
            .field("UserName", &self.UserName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_RUNAS_POLICY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_RUNAS_POLICY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.UserName == other.UserName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_RUNAS_POLICY_DESCRIPTION {}
impl Default for FABRIC_RUNAS_POLICY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SAFETY_CHECK {
    pub Kind: FABRIC_SAFETY_CHECK_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SAFETY_CHECK {}
impl Clone for FABRIC_SAFETY_CHECK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SAFETY_CHECK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SAFETY_CHECK")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SAFETY_CHECK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SAFETY_CHECK {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_SAFETY_CHECK {}
impl Default for FABRIC_SAFETY_CHECK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SAFETY_CHECK_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SAFETY_CHECK,
}
impl Copy for FABRIC_SAFETY_CHECK_LIST {}
impl Clone for FABRIC_SAFETY_CHECK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SAFETY_CHECK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SAFETY_CHECK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SAFETY_CHECK_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SAFETY_CHECK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SAFETY_CHECK_LIST {}
impl Default for FABRIC_SAFETY_CHECK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SCALING_MECHANISM {
    pub ScalingMechanismKind: FABRIC_SCALING_MECHANISM_KIND,
    pub ScalingMechanismDescription: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SCALING_MECHANISM {}
impl Clone for FABRIC_SCALING_MECHANISM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SCALING_MECHANISM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SCALING_MECHANISM")
            .field("ScalingMechanismKind", &self.ScalingMechanismKind)
            .field(
                "ScalingMechanismDescription",
                &self.ScalingMechanismDescription,
            )
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SCALING_MECHANISM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SCALING_MECHANISM {
    fn eq(&self, other: &Self) -> bool {
        self.ScalingMechanismKind == other.ScalingMechanismKind
            && self.ScalingMechanismDescription == other.ScalingMechanismDescription
    }
}
impl Eq for FABRIC_SCALING_MECHANISM {}
impl Default for FABRIC_SCALING_MECHANISM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SCALING_MECHANISM_ADD_REMOVE_INCREMENTAL_NAMED_PARTITION {
    pub MaximumPartitionCount: i32,
    pub MinimumPartitionCount: i32,
    pub ScaleIncrement: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SCALING_MECHANISM_ADD_REMOVE_INCREMENTAL_NAMED_PARTITION {}
impl Clone for FABRIC_SCALING_MECHANISM_ADD_REMOVE_INCREMENTAL_NAMED_PARTITION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SCALING_MECHANISM_ADD_REMOVE_INCREMENTAL_NAMED_PARTITION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SCALING_MECHANISM_ADD_REMOVE_INCREMENTAL_NAMED_PARTITION")
            .field("MaximumPartitionCount", &self.MaximumPartitionCount)
            .field("MinimumPartitionCount", &self.MinimumPartitionCount)
            .field("ScaleIncrement", &self.ScaleIncrement)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SCALING_MECHANISM_ADD_REMOVE_INCREMENTAL_NAMED_PARTITION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SCALING_MECHANISM_ADD_REMOVE_INCREMENTAL_NAMED_PARTITION {
    fn eq(&self, other: &Self) -> bool {
        self.MaximumPartitionCount == other.MaximumPartitionCount
            && self.MinimumPartitionCount == other.MinimumPartitionCount
            && self.ScaleIncrement == other.ScaleIncrement
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SCALING_MECHANISM_ADD_REMOVE_INCREMENTAL_NAMED_PARTITION {}
impl Default for FABRIC_SCALING_MECHANISM_ADD_REMOVE_INCREMENTAL_NAMED_PARTITION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SCALING_MECHANISM_PARTITION_INSTANCE_COUNT {
    pub MaximumInstanceCount: i32,
    pub MinimumInstanceCount: i32,
    pub ScaleIncrement: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SCALING_MECHANISM_PARTITION_INSTANCE_COUNT {}
impl Clone for FABRIC_SCALING_MECHANISM_PARTITION_INSTANCE_COUNT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SCALING_MECHANISM_PARTITION_INSTANCE_COUNT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SCALING_MECHANISM_PARTITION_INSTANCE_COUNT")
            .field("MaximumInstanceCount", &self.MaximumInstanceCount)
            .field("MinimumInstanceCount", &self.MinimumInstanceCount)
            .field("ScaleIncrement", &self.ScaleIncrement)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SCALING_MECHANISM_PARTITION_INSTANCE_COUNT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SCALING_MECHANISM_PARTITION_INSTANCE_COUNT {
    fn eq(&self, other: &Self) -> bool {
        self.MaximumInstanceCount == other.MaximumInstanceCount
            && self.MinimumInstanceCount == other.MinimumInstanceCount
            && self.ScaleIncrement == other.ScaleIncrement
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SCALING_MECHANISM_PARTITION_INSTANCE_COUNT {}
impl Default for FABRIC_SCALING_MECHANISM_PARTITION_INSTANCE_COUNT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SCALING_TRIGGER {
    pub ScalingTriggerKind: FABRIC_SCALING_TRIGGER_KIND,
    pub ScalingTriggerDescription: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SCALING_TRIGGER {}
impl Clone for FABRIC_SCALING_TRIGGER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SCALING_TRIGGER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SCALING_TRIGGER")
            .field("ScalingTriggerKind", &self.ScalingTriggerKind)
            .field("ScalingTriggerDescription", &self.ScalingTriggerDescription)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SCALING_TRIGGER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SCALING_TRIGGER {
    fn eq(&self, other: &Self) -> bool {
        self.ScalingTriggerKind == other.ScalingTriggerKind
            && self.ScalingTriggerDescription == other.ScalingTriggerDescription
    }
}
impl Eq for FABRIC_SCALING_TRIGGER {}
impl Default for FABRIC_SCALING_TRIGGER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SCALING_TRIGGER_AVERAGE_PARTITION_LOAD {
    pub MetricName: windows_core::PCWSTR,
    pub LowerLoadThreshold: f64,
    pub UpperLoadThreshold: f64,
    pub ScaleIntervalInSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SCALING_TRIGGER_AVERAGE_PARTITION_LOAD {}
impl Clone for FABRIC_SCALING_TRIGGER_AVERAGE_PARTITION_LOAD {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SCALING_TRIGGER_AVERAGE_PARTITION_LOAD {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SCALING_TRIGGER_AVERAGE_PARTITION_LOAD")
            .field("MetricName", &self.MetricName)
            .field("LowerLoadThreshold", &self.LowerLoadThreshold)
            .field("UpperLoadThreshold", &self.UpperLoadThreshold)
            .field("ScaleIntervalInSeconds", &self.ScaleIntervalInSeconds)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SCALING_TRIGGER_AVERAGE_PARTITION_LOAD {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SCALING_TRIGGER_AVERAGE_PARTITION_LOAD {
    fn eq(&self, other: &Self) -> bool {
        self.MetricName == other.MetricName
            && self.LowerLoadThreshold == other.LowerLoadThreshold
            && self.UpperLoadThreshold == other.UpperLoadThreshold
            && self.ScaleIntervalInSeconds == other.ScaleIntervalInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SCALING_TRIGGER_AVERAGE_PARTITION_LOAD {}
impl Default for FABRIC_SCALING_TRIGGER_AVERAGE_PARTITION_LOAD {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD {
    pub MetricName: windows_core::PCWSTR,
    pub LowerLoadThreshold: f64,
    pub UpperLoadThreshold: f64,
    pub ScaleIntervalInSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD {}
impl Clone for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD")
            .field("MetricName", &self.MetricName)
            .field("LowerLoadThreshold", &self.LowerLoadThreshold)
            .field("UpperLoadThreshold", &self.UpperLoadThreshold)
            .field("ScaleIntervalInSeconds", &self.ScaleIntervalInSeconds)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD {
    fn eq(&self, other: &Self) -> bool {
        self.MetricName == other.MetricName
            && self.LowerLoadThreshold == other.LowerLoadThreshold
            && self.UpperLoadThreshold == other.UpperLoadThreshold
            && self.ScaleIntervalInSeconds == other.ScaleIntervalInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD {}
impl Default for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD_EX1 {
    pub UseOnlyPrimaryLoad: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD_EX1")
            .field("UseOnlyPrimaryLoad", &self.UseOnlyPrimaryLoad)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UseOnlyPrimaryLoad == other.UseOnlyPrimaryLoad && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_SCALING_TRIGGER_AVERAGE_SERVICE_LOAD_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_SECONDARY_REPLICATOR_STATUS_QUERY_RESULT {
    pub ReplicationQueueStatus: *mut FABRIC_REPLICATOR_QUEUE_STATUS,
    pub LastReplicationOperationReceivedTimeUtc: windows::Win32::Foundation::FILETIME,
    pub IsInBuild: windows::Win32::Foundation::BOOLEAN,
    pub CopyQueueStatus: *mut FABRIC_REPLICATOR_QUEUE_STATUS,
    pub LastCopyOperationReceivedTimeUtc: windows::Win32::Foundation::FILETIME,
    pub LastAcknowledgementSentTimeUtc: windows::Win32::Foundation::FILETIME,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_SECONDARY_REPLICATOR_STATUS_QUERY_RESULT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_SECONDARY_REPLICATOR_STATUS_QUERY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_SECONDARY_REPLICATOR_STATUS_QUERY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SECONDARY_REPLICATOR_STATUS_QUERY_RESULT")
            .field("ReplicationQueueStatus", &self.ReplicationQueueStatus)
            .field(
                "LastReplicationOperationReceivedTimeUtc",
                &self.LastReplicationOperationReceivedTimeUtc,
            )
            .field("IsInBuild", &self.IsInBuild)
            .field("CopyQueueStatus", &self.CopyQueueStatus)
            .field(
                "LastCopyOperationReceivedTimeUtc",
                &self.LastCopyOperationReceivedTimeUtc,
            )
            .field(
                "LastAcknowledgementSentTimeUtc",
                &self.LastAcknowledgementSentTimeUtc,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_SECONDARY_REPLICATOR_STATUS_QUERY_RESULT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_SECONDARY_REPLICATOR_STATUS_QUERY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.ReplicationQueueStatus == other.ReplicationQueueStatus
            && self.LastReplicationOperationReceivedTimeUtc
                == other.LastReplicationOperationReceivedTimeUtc
            && self.IsInBuild == other.IsInBuild
            && self.CopyQueueStatus == other.CopyQueueStatus
            && self.LastCopyOperationReceivedTimeUtc == other.LastCopyOperationReceivedTimeUtc
            && self.LastAcknowledgementSentTimeUtc == other.LastAcknowledgementSentTimeUtc
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_SECONDARY_REPLICATOR_STATUS_QUERY_RESULT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_SECONDARY_REPLICATOR_STATUS_QUERY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SECRET {
    pub Name: windows_core::PCWSTR,
    pub Version: windows_core::PCWSTR,
    pub Value: windows_core::PCWSTR,
    pub Kind: windows_core::PCWSTR,
    pub ContentType: windows_core::PCWSTR,
}
impl Copy for FABRIC_SECRET {}
impl Clone for FABRIC_SECRET {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SECRET {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SECRET")
            .field("Name", &self.Name)
            .field("Version", &self.Version)
            .field("Value", &self.Value)
            .field("Kind", &self.Kind)
            .field("ContentType", &self.ContentType)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SECRET {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SECRET {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Version == other.Version
            && self.Value == other.Value
            && self.Kind == other.Kind
            && self.ContentType == other.ContentType
    }
}
impl Eq for FABRIC_SECRET {}
impl Default for FABRIC_SECRET {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SECRET_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_SECRET,
}
impl Copy for FABRIC_SECRET_LIST {}
impl Clone for FABRIC_SECRET_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SECRET_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SECRET_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SECRET_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SECRET_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SECRET_LIST {}
impl Default for FABRIC_SECRET_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SECRET_REFERENCE {
    pub Name: windows_core::PCWSTR,
    pub Version: windows_core::PCWSTR,
}
impl Copy for FABRIC_SECRET_REFERENCE {}
impl Clone for FABRIC_SECRET_REFERENCE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SECRET_REFERENCE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SECRET_REFERENCE")
            .field("Name", &self.Name)
            .field("Version", &self.Version)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SECRET_REFERENCE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SECRET_REFERENCE {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name && self.Version == other.Version
    }
}
impl Eq for FABRIC_SECRET_REFERENCE {}
impl Default for FABRIC_SECRET_REFERENCE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SECRET_REFERENCE_LIST {
    pub Count: u32,
    pub Items: *mut FABRIC_SECRET_REFERENCE,
}
impl Copy for FABRIC_SECRET_REFERENCE_LIST {}
impl Clone for FABRIC_SECRET_REFERENCE_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SECRET_REFERENCE_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SECRET_REFERENCE_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SECRET_REFERENCE_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SECRET_REFERENCE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SECRET_REFERENCE_LIST {}
impl Default for FABRIC_SECRET_REFERENCE_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SECURITY_CREDENTIALS {
    pub Kind: FABRIC_SECURITY_CREDENTIAL_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SECURITY_CREDENTIALS {}
impl Clone for FABRIC_SECURITY_CREDENTIALS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SECURITY_CREDENTIALS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SECURITY_CREDENTIALS")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SECURITY_CREDENTIALS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SECURITY_CREDENTIALS {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_SECURITY_CREDENTIALS {}
impl Default for FABRIC_SECURITY_CREDENTIALS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SECURITY_GROUP_DESCRIPTION {
    pub Name: windows_core::PCWSTR,
    pub Sid: windows_core::PCWSTR,
    pub DomainGroupMembers: *const FABRIC_STRING_LIST,
    pub SystemGroupMembers: *const FABRIC_STRING_LIST,
    pub DomainUserMembers: *const FABRIC_STRING_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SECURITY_GROUP_DESCRIPTION {}
impl Clone for FABRIC_SECURITY_GROUP_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SECURITY_GROUP_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SECURITY_GROUP_DESCRIPTION")
            .field("Name", &self.Name)
            .field("Sid", &self.Sid)
            .field("DomainGroupMembers", &self.DomainGroupMembers)
            .field("SystemGroupMembers", &self.SystemGroupMembers)
            .field("DomainUserMembers", &self.DomainUserMembers)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SECURITY_GROUP_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SECURITY_GROUP_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Sid == other.Sid
            && self.DomainGroupMembers == other.DomainGroupMembers
            && self.SystemGroupMembers == other.SystemGroupMembers
            && self.DomainUserMembers == other.DomainUserMembers
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SECURITY_GROUP_DESCRIPTION {}
impl Default for FABRIC_SECURITY_GROUP_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SECURITY_GROUP_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SECURITY_GROUP_DESCRIPTION,
}
impl Copy for FABRIC_SECURITY_GROUP_DESCRIPTION_LIST {}
impl Clone for FABRIC_SECURITY_GROUP_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SECURITY_GROUP_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SECURITY_GROUP_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SECURITY_GROUP_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SECURITY_GROUP_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SECURITY_GROUP_DESCRIPTION_LIST {}
impl Default for FABRIC_SECURITY_GROUP_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SECURITY_USER_DESCRIPTION {
    pub Name: windows_core::PCWSTR,
    pub Sid: windows_core::PCWSTR,
    pub ParentSystemGroups: *const FABRIC_STRING_LIST,
    pub ParentApplicationGroups: *const FABRIC_STRING_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SECURITY_USER_DESCRIPTION {}
impl Clone for FABRIC_SECURITY_USER_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SECURITY_USER_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SECURITY_USER_DESCRIPTION")
            .field("Name", &self.Name)
            .field("Sid", &self.Sid)
            .field("ParentSystemGroups", &self.ParentSystemGroups)
            .field("ParentApplicationGroups", &self.ParentApplicationGroups)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SECURITY_USER_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SECURITY_USER_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Sid == other.Sid
            && self.ParentSystemGroups == other.ParentSystemGroups
            && self.ParentApplicationGroups == other.ParentApplicationGroups
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SECURITY_USER_DESCRIPTION {}
impl Default for FABRIC_SECURITY_USER_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SECURITY_USER_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SECURITY_USER_DESCRIPTION,
}
impl Copy for FABRIC_SECURITY_USER_DESCRIPTION_LIST {}
impl Clone for FABRIC_SECURITY_USER_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SECURITY_USER_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SECURITY_USER_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SECURITY_USER_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SECURITY_USER_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SECURITY_USER_DESCRIPTION_LIST {}
impl Default for FABRIC_SECURITY_USER_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SEED_NODE_SAFETY_CHECK {
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SEED_NODE_SAFETY_CHECK {}
impl Clone for FABRIC_SEED_NODE_SAFETY_CHECK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SEED_NODE_SAFETY_CHECK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SEED_NODE_SAFETY_CHECK")
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SEED_NODE_SAFETY_CHECK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SEED_NODE_SAFETY_CHECK {
    fn eq(&self, other: &Self) -> bool {
        self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SEED_NODE_SAFETY_CHECK {}
impl Default for FABRIC_SEED_NODE_SAFETY_CHECK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SELECTED_PARTITION {
    pub ServiceName: *mut u16,
    pub PartitionId: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SELECTED_PARTITION {}
impl Clone for FABRIC_SELECTED_PARTITION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SELECTED_PARTITION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SELECTED_PARTITION")
            .field("ServiceName", &self.ServiceName)
            .field("PartitionId", &self.PartitionId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SELECTED_PARTITION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SELECTED_PARTITION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.PartitionId == other.PartitionId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SELECTED_PARTITION {}
impl Default for FABRIC_SELECTED_PARTITION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICES_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub ServiceTypeName: windows_core::PCWSTR,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub TotalCount: u32,
    pub MaxPercentUnhealthyServices: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICES_HEALTH_EVALUATION {}
impl Clone for FABRIC_SERVICES_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICES_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICES_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("TotalCount", &self.TotalCount)
            .field(
                "MaxPercentUnhealthyServices",
                &self.MaxPercentUnhealthyServices,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICES_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICES_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.ServiceTypeName == other.ServiceTypeName
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.TotalCount == other.TotalCount
            && self.MaxPercentUnhealthyServices == other.MaxPercentUnhealthyServices
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICES_HEALTH_EVALUATION {}
impl Default for FABRIC_SERVICES_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_CORRELATION_DESCRIPTION {
    pub ServiceName: *mut u16,
    pub Scheme: FABRIC_SERVICE_CORRELATION_SCHEME,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_CORRELATION_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_CORRELATION_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_CORRELATION_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_CORRELATION_DESCRIPTION")
            .field("ServiceName", &self.ServiceName)
            .field("Scheme", &self.Scheme)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_CORRELATION_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_CORRELATION_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.Scheme == other.Scheme
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_CORRELATION_DESCRIPTION {}
impl Default for FABRIC_SERVICE_CORRELATION_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_DESCRIPTION {
    pub Kind: FABRIC_SERVICE_DESCRIPTION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_DESCRIPTION")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_SERVICE_DESCRIPTION {}
impl Default for FABRIC_SERVICE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub ServiceName: *mut u16,
    pub ServiceDnsName: windows_core::PCWSTR,
    pub ServiceTypeName: windows_core::PCWSTR,
    pub ServicePackageActivationMode: FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE,
    pub InitializationDataSize: u32,
    pub InitializationData: *mut u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceName", &self.ServiceName)
            .field("ServiceDnsName", &self.ServiceDnsName)
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field(
                "ServicePackageActivationMode",
                &self.ServicePackageActivationMode,
            )
            .field("InitializationDataSize", &self.InitializationDataSize)
            .field("InitializationData", &self.InitializationData)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ServiceName == other.ServiceName
            && self.ServiceDnsName == other.ServiceDnsName
            && self.ServiceTypeName == other.ServiceTypeName
            && self.ServicePackageActivationMode == other.ServicePackageActivationMode
            && self.InitializationDataSize == other.InitializationDataSize
            && self.InitializationData == other.InitializationData
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION {}
impl Default for FABRIC_SERVICE_FROM_TEMPLATE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_DESCRIPTION {
    pub Description: *mut FABRIC_SERVICE_DESCRIPTION,
    pub MemberCount: u32,
    pub MemberDescriptions: *mut FABRIC_SERVICE_GROUP_MEMBER_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_GROUP_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_GROUP_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_DESCRIPTION")
            .field("Description", &self.Description)
            .field("MemberCount", &self.MemberCount)
            .field("MemberDescriptions", &self.MemberDescriptions)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.MemberCount == other.MemberCount
            && self.MemberDescriptions == other.MemberDescriptions
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_GROUP_DESCRIPTION {}
impl Default for FABRIC_SERVICE_GROUP_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub ServiceName: *mut u16,
    pub ServiceTypeName: windows_core::PCWSTR,
    pub ServicePackageActivationMode: FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE,
    pub InitializationDataSize: u32,
    pub InitializationData: *mut u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceName", &self.ServiceName)
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field(
                "ServicePackageActivationMode",
                &self.ServicePackageActivationMode,
            )
            .field("InitializationDataSize", &self.InitializationDataSize)
            .field("InitializationData", &self.InitializationData)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ServiceName == other.ServiceName
            && self.ServiceTypeName == other.ServiceTypeName
            && self.ServicePackageActivationMode == other.ServicePackageActivationMode
            && self.InitializationDataSize == other.InitializationDataSize
            && self.InitializationData == other.InitializationData
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION {}
impl Default for FABRIC_SERVICE_GROUP_FROM_TEMPLATE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_MEMBER_DESCRIPTION {
    pub ServiceType: windows_core::PCWSTR,
    pub ServiceName: *mut u16,
    pub InitializationDataSize: u32,
    pub InitializationData: *const u8,
    pub MetricCount: u32,
    pub Metrics: *mut FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_GROUP_MEMBER_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_GROUP_MEMBER_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_MEMBER_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_MEMBER_DESCRIPTION")
            .field("ServiceType", &self.ServiceType)
            .field("ServiceName", &self.ServiceName)
            .field("InitializationDataSize", &self.InitializationDataSize)
            .field("InitializationData", &self.InitializationData)
            .field("MetricCount", &self.MetricCount)
            .field("Metrics", &self.Metrics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_MEMBER_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_MEMBER_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceType == other.ServiceType
            && self.ServiceName == other.ServiceName
            && self.InitializationDataSize == other.InitializationDataSize
            && self.InitializationData == other.InitializationData
            && self.MetricCount == other.MetricCount
            && self.Metrics == other.Metrics
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_GROUP_MEMBER_DESCRIPTION {}
impl Default for FABRIC_SERVICE_GROUP_MEMBER_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM {
    pub ServiceType: windows_core::PCWSTR,
    pub ServiceName: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM")
            .field("ServiceType", &self.ServiceType)
            .field("ServiceName", &self.ServiceName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceType == other.ServiceType
            && self.ServiceName == other.ServiceName
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM {}
impl Default for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST {}
impl Clone for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST {}
impl Default for FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub ServiceNameFilter: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceNameFilter", &self.ServiceNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ServiceNameFilter == other.ServiceNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION {}
impl Default for FABRIC_SERVICE_GROUP_MEMBER_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM {
    pub ServiceName: *mut u16,
    pub Members: *mut FABRIC_SERVICE_GROUP_MEMBER_MEMBER_QUERY_RESULT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM")
            .field("ServiceName", &self.ServiceName)
            .field("Members", &self.Members)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.Members == other.Members
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM {}
impl Default for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST {}
impl Clone for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST {}
impl Default for FABRIC_SERVICE_GROUP_MEMBER_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION {
    pub ApplicationTypeName: windows_core::PCWSTR,
    pub ApplicationTypeVersion: windows_core::PCWSTR,
    pub ServiceGroupTypeNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION")
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field("ApplicationTypeVersion", &self.ApplicationTypeVersion)
            .field(
                "ServiceGroupTypeNameFilter",
                &self.ServiceGroupTypeNameFilter,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeName == other.ApplicationTypeName
            && self.ApplicationTypeVersion == other.ApplicationTypeVersion
            && self.ServiceGroupTypeNameFilter == other.ServiceGroupTypeNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION {}
impl Default for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM {
    pub ServiceGroupMemberTypeDescription: *mut FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST,
    pub ServiceManifestVersion: windows_core::PCWSTR,
    pub ServiceManifestName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM")
            .field(
                "ServiceGroupMemberTypeDescription",
                &self.ServiceGroupMemberTypeDescription,
            )
            .field("ServiceManifestVersion", &self.ServiceManifestVersion)
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceGroupMemberTypeDescription == other.ServiceGroupMemberTypeDescription
            && self.ServiceManifestVersion == other.ServiceManifestVersion
            && self.ServiceManifestName == other.ServiceManifestName
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST {}
impl Clone for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST {}
impl Default for FABRIC_SERVICE_GROUP_MEMBER_TYPE_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION {
    pub Description: *const FABRIC_SERVICE_TYPE_DESCRIPTION,
    pub Members: *const FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST,
    pub UseImplicitFactory: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION")
            .field("Description", &self.Description)
            .field("Members", &self.Members)
            .field("UseImplicitFactory", &self.UseImplicitFactory)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.Members == other.Members
            && self.UseImplicitFactory == other.UseImplicitFactory
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION {
    pub ServiceTypeName: windows_core::PCWSTR,
    pub LoadMetrics: *const FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION")
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("LoadMetrics", &self.LoadMetrics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceTypeName == other.ServiceTypeName
            && self.LoadMetrics == other.LoadMetrics
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION {}
impl Default for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION,
}
impl Copy for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST {}
impl Clone for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST {}
impl Default for FABRIC_SERVICE_GROUP_TYPE_MEMBER_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION {
    pub Description: *mut FABRIC_SERVICE_UPDATE_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION")
            .field("Description", &self.Description)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION {}
impl Default for FABRIC_SERVICE_GROUP_UPDATE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_SERVICE_HEALTH {
    pub ServiceName: *mut u16,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub HealthEvents: *const FABRIC_HEALTH_EVENT_LIST,
    pub PartitionHealthStates: *const FABRIC_PARTITION_HEALTH_STATE_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_SERVICE_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_SERVICE_HEALTH {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH")
            .field("ServiceName", &self.ServiceName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("HealthEvents", &self.HealthEvents)
            .field("PartitionHealthStates", &self.PartitionHealthStates)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_SERVICE_HEALTH {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.HealthEvents == other.HealthEvents
            && self.PartitionHealthStates == other.PartitionHealthStates
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_SERVICE_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_SERVICE_HEALTH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub ServiceName: *mut u16,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_HEALTH_EVALUATION {}
impl Clone for FABRIC_SERVICE_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("ServiceName", &self.ServiceName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.ServiceName == other.ServiceName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_HEALTH_EVALUATION {}
impl Default for FABRIC_SERVICE_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_HEALTH_EX1 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_HEALTH_EX1 {}
impl Clone for FABRIC_SERVICE_HEALTH_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_EX1")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_HEALTH_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_HEALTH_EX1 {}
impl Default for FABRIC_SERVICE_HEALTH_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_HEALTH_EX2 {
    pub HealthStatistics: *const FABRIC_HEALTH_STATISTICS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_HEALTH_EX2 {}
impl Clone for FABRIC_SERVICE_HEALTH_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_EX2")
            .field("HealthStatistics", &self.HealthStatistics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_HEALTH_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStatistics == other.HealthStatistics && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_HEALTH_EX2 {}
impl Default for FABRIC_SERVICE_HEALTH_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION {
    pub ServiceName: *mut u16,
    pub HealthPolicy: *const FABRIC_APPLICATION_HEALTH_POLICY,
    pub EventsFilter: *const FABRIC_HEALTH_EVENTS_FILTER,
    pub PartitionsFilter: *const FABRIC_PARTITION_HEALTH_STATES_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION")
            .field("ServiceName", &self.ServiceName)
            .field("HealthPolicy", &self.HealthPolicy)
            .field("EventsFilter", &self.EventsFilter)
            .field("PartitionsFilter", &self.PartitionsFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.HealthPolicy == other.HealthPolicy
            && self.EventsFilter == other.EventsFilter
            && self.PartitionsFilter == other.PartitionsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION_EX1 {
    pub HealthStatisticsFilter: *const FABRIC_SERVICE_HEALTH_STATISTICS_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION_EX1")
            .field("HealthStatisticsFilter", &self.HealthStatisticsFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStatisticsFilter == other.HealthStatisticsFilter
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_SERVICE_HEALTH_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_SERVICE_HEALTH_REPORT {
    pub ServiceName: *mut u16,
    pub HealthInformation: *const FABRIC_HEALTH_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_SERVICE_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_SERVICE_HEALTH_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_REPORT")
            .field("ServiceName", &self.ServiceName)
            .field("HealthInformation", &self.HealthInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_SERVICE_HEALTH_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.HealthInformation == other.HealthInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_SERVICE_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_SERVICE_HEALTH_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_HEALTH_STATE {
    pub ServiceName: *mut u16,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_HEALTH_STATE {}
impl Clone for FABRIC_SERVICE_HEALTH_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_STATE")
            .field("ServiceName", &self.ServiceName)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_HEALTH_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_HEALTH_STATE {}
impl Default for FABRIC_SERVICE_HEALTH_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_HEALTH_STATES_FILTER {
    pub HealthStateFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_HEALTH_STATES_FILTER {}
impl Clone for FABRIC_SERVICE_HEALTH_STATES_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_STATES_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_STATES_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_STATES_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_HEALTH_STATES_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_HEALTH_STATES_FILTER {}
impl Default for FABRIC_SERVICE_HEALTH_STATES_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_HEALTH_STATE_CHUNK {
    pub ServiceName: *mut u16,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub PartitionHealthStateChunks: *const FABRIC_PARTITION_HEALTH_STATE_CHUNK_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_HEALTH_STATE_CHUNK {}
impl Clone for FABRIC_SERVICE_HEALTH_STATE_CHUNK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_STATE_CHUNK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_STATE_CHUNK")
            .field("ServiceName", &self.ServiceName)
            .field("HealthState", &self.HealthState)
            .field(
                "PartitionHealthStateChunks",
                &self.PartitionHealthStateChunks,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_STATE_CHUNK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_HEALTH_STATE_CHUNK {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.HealthState == other.HealthState
            && self.PartitionHealthStateChunks == other.PartitionHealthStateChunks
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_HEALTH_STATE_CHUNK {}
impl Default for FABRIC_SERVICE_HEALTH_STATE_CHUNK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_HEALTH_STATE_CHUNK_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_HEALTH_STATE_CHUNK,
    pub TotalCount: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_HEALTH_STATE_CHUNK_LIST {}
impl Clone for FABRIC_SERVICE_HEALTH_STATE_CHUNK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_STATE_CHUNK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_STATE_CHUNK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .field("TotalCount", &self.TotalCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_STATE_CHUNK_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_HEALTH_STATE_CHUNK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count
            && self.Items == other.Items
            && self.TotalCount == other.TotalCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_HEALTH_STATE_CHUNK_LIST {}
impl Default for FABRIC_SERVICE_HEALTH_STATE_CHUNK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_HEALTH_STATE_FILTER {
    pub HealthStateFilter: u32,
    pub ServiceNameFilter: *mut u16,
    pub PartitionFilters: *const FABRIC_PARTITION_HEALTH_STATE_FILTER_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_HEALTH_STATE_FILTER {}
impl Clone for FABRIC_SERVICE_HEALTH_STATE_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_STATE_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_STATE_FILTER")
            .field("HealthStateFilter", &self.HealthStateFilter)
            .field("ServiceNameFilter", &self.ServiceNameFilter)
            .field("PartitionFilters", &self.PartitionFilters)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_STATE_FILTER {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_HEALTH_STATE_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.HealthStateFilter == other.HealthStateFilter
            && self.ServiceNameFilter == other.ServiceNameFilter
            && self.PartitionFilters == other.PartitionFilters
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_HEALTH_STATE_FILTER {}
impl Default for FABRIC_SERVICE_HEALTH_STATE_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_HEALTH_STATE_FILTER_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_HEALTH_STATE_FILTER,
}
impl Copy for FABRIC_SERVICE_HEALTH_STATE_FILTER_LIST {}
impl Clone for FABRIC_SERVICE_HEALTH_STATE_FILTER_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_STATE_FILTER_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_STATE_FILTER_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_STATE_FILTER_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_HEALTH_STATE_FILTER_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_HEALTH_STATE_FILTER_LIST {}
impl Default for FABRIC_SERVICE_HEALTH_STATE_FILTER_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_HEALTH_STATE_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_HEALTH_STATE,
}
impl Copy for FABRIC_SERVICE_HEALTH_STATE_LIST {}
impl Clone for FABRIC_SERVICE_HEALTH_STATE_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_STATE_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_STATE_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_STATE_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_HEALTH_STATE_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_HEALTH_STATE_LIST {}
impl Default for FABRIC_SERVICE_HEALTH_STATE_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_SERVICE_HEALTH_STATISTICS_FILTER {
    pub ExcludeHealthStatistics: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_SERVICE_HEALTH_STATISTICS_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_SERVICE_HEALTH_STATISTICS_FILTER {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_SERVICE_HEALTH_STATISTICS_FILTER {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_HEALTH_STATISTICS_FILTER")
            .field("ExcludeHealthStatistics", &self.ExcludeHealthStatistics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_SERVICE_HEALTH_STATISTICS_FILTER {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_SERVICE_HEALTH_STATISTICS_FILTER {
    fn eq(&self, other: &Self) -> bool {
        self.ExcludeHealthStatistics == other.ExcludeHealthStatistics
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_SERVICE_HEALTH_STATISTICS_FILTER {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_SERVICE_HEALTH_STATISTICS_FILTER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION {
    pub Name: windows_core::PCWSTR,
    pub Weight: FABRIC_SERVICE_LOAD_METRIC_WEIGHT,
    pub PrimaryDefaultLoad: u32,
    pub SecondaryDefaultLoad: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION")
            .field("Name", &self.Name)
            .field("Weight", &self.Weight)
            .field("PrimaryDefaultLoad", &self.PrimaryDefaultLoad)
            .field("SecondaryDefaultLoad", &self.SecondaryDefaultLoad)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.Weight == other.Weight
            && self.PrimaryDefaultLoad == other.PrimaryDefaultLoad
            && self.SecondaryDefaultLoad == other.SecondaryDefaultLoad
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION {}
impl Default for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION,
}
impl Copy for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST {}
impl Clone for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST {}
impl Default for FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_NAME_QUERY_DESCRIPTION {
    pub PartitionId: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_NAME_QUERY_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_NAME_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_NAME_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_NAME_QUERY_DESCRIPTION")
            .field("PartitionId", &self.PartitionId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_NAME_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_NAME_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_NAME_QUERY_DESCRIPTION {}
impl Default for FABRIC_SERVICE_NAME_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_NAME_QUERY_RESULT {
    pub ServiceName: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_NAME_QUERY_RESULT {}
impl Clone for FABRIC_SERVICE_NAME_QUERY_RESULT {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_NAME_QUERY_RESULT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_NAME_QUERY_RESULT")
            .field("ServiceName", &self.ServiceName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_NAME_QUERY_RESULT {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_NAME_QUERY_RESULT {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_NAME_QUERY_RESULT {}
impl Default for FABRIC_SERVICE_NAME_QUERY_RESULT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_NOTIFICATION {
    pub ServiceName: *mut u16,
    pub PartitionId: windows_core::GUID,
    pub EndpointCount: u32,
    pub Endpoints: *mut FABRIC_RESOLVED_SERVICE_ENDPOINT,
    pub PartitionInfo: *mut FABRIC_SERVICE_PARTITION_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_NOTIFICATION {}
impl Clone for FABRIC_SERVICE_NOTIFICATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_NOTIFICATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_NOTIFICATION")
            .field("ServiceName", &self.ServiceName)
            .field("PartitionId", &self.PartitionId)
            .field("EndpointCount", &self.EndpointCount)
            .field("Endpoints", &self.Endpoints)
            .field("PartitionInfo", &self.PartitionInfo)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_NOTIFICATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_NOTIFICATION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.PartitionId == other.PartitionId
            && self.EndpointCount == other.EndpointCount
            && self.Endpoints == other.Endpoints
            && self.PartitionInfo == other.PartitionInfo
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_NOTIFICATION {}
impl Default for FABRIC_SERVICE_NOTIFICATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION {
    pub Name: *mut u16,
    pub Flags: FABRIC_SERVICE_NOTIFICATION_FILTER_FLAGS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION")
            .field("Name", &self.Name)
            .field("Flags", &self.Flags)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name && self.Flags == other.Flags && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION {}
impl Default for FABRIC_SERVICE_NOTIFICATION_FILTER_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_PARTITION_INFORMATION {
    pub Kind: FABRIC_SERVICE_PARTITION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_PARTITION_INFORMATION {}
impl Clone for FABRIC_SERVICE_PARTITION_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_PARTITION_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_PARTITION_INFORMATION")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_PARTITION_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_PARTITION_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_SERVICE_PARTITION_INFORMATION {}
impl Default for FABRIC_SERVICE_PARTITION_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION {
    pub ServiceName: *mut u16,
    pub PartitionIdFilter: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION")
            .field("ServiceName", &self.ServiceName)
            .field("PartitionIdFilter", &self.PartitionIdFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.PartitionIdFilter == other.PartitionIdFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION {}
impl Default for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION_EX1 {
    pub ContinuationToken: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION_EX1 {}
impl Clone for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION_EX1")
            .field("ContinuationToken", &self.ContinuationToken)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ContinuationToken == other.ContinuationToken && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION_EX1 {}
impl Default for FABRIC_SERVICE_PARTITION_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    pub Kind: FABRIC_SERVICE_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM {}
impl Default for FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_PARTITION_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST {}
impl Clone for FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST {}
impl Default for FABRIC_SERVICE_PARTITION_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION {
    pub Type: FABRIC_PLACEMENT_POLICY_TYPE,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION")
            .field("Type", &self.Type)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Type == other.Type && self.Value == other.Value
    }
}
impl Eq for FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION {}
impl Default for FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_PLACEMENT_POLICY_LIST {
    pub PolicyCount: u32,
    pub Policies: *mut FABRIC_SERVICE_PLACEMENT_POLICY_DESCRIPTION,
}
impl Copy for FABRIC_SERVICE_PLACEMENT_POLICY_LIST {}
impl Clone for FABRIC_SERVICE_PLACEMENT_POLICY_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_PLACEMENT_POLICY_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_PLACEMENT_POLICY_LIST")
            .field("PolicyCount", &self.PolicyCount)
            .field("Policies", &self.Policies)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_PLACEMENT_POLICY_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_PLACEMENT_POLICY_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.PolicyCount == other.PolicyCount && self.Policies == other.Policies
    }
}
impl Eq for FABRIC_SERVICE_PLACEMENT_POLICY_LIST {}
impl Default for FABRIC_SERVICE_PLACEMENT_POLICY_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_QUERY_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub ServiceNameFilter: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_QUERY_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceNameFilter", &self.ServiceNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ServiceNameFilter == other.ServiceNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_QUERY_DESCRIPTION {}
impl Default for FABRIC_SERVICE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_QUERY_DESCRIPTION_EX1 {
    pub ContinuationToken: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_QUERY_DESCRIPTION_EX1 {}
impl Clone for FABRIC_SERVICE_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_QUERY_DESCRIPTION_EX1")
            .field("ContinuationToken", &self.ContinuationToken)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ContinuationToken == other.ContinuationToken && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_QUERY_DESCRIPTION_EX1 {}
impl Default for FABRIC_SERVICE_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_QUERY_DESCRIPTION_EX2 {
    pub ServiceTypeNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_QUERY_DESCRIPTION_EX2 {}
impl Clone for FABRIC_SERVICE_QUERY_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_QUERY_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_QUERY_DESCRIPTION_EX2")
            .field("ServiceTypeNameFilter", &self.ServiceTypeNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_QUERY_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_QUERY_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceTypeNameFilter == other.ServiceTypeNameFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_QUERY_DESCRIPTION_EX2 {}
impl Default for FABRIC_SERVICE_QUERY_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_QUERY_DESCRIPTION_EX3 {
    pub MaxResults: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_QUERY_DESCRIPTION_EX3 {}
impl Clone for FABRIC_SERVICE_QUERY_DESCRIPTION_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_QUERY_DESCRIPTION_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_QUERY_DESCRIPTION_EX3")
            .field("MaxResults", &self.MaxResults)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_QUERY_DESCRIPTION_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_QUERY_DESCRIPTION_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.MaxResults == other.MaxResults && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_QUERY_DESCRIPTION_EX3 {}
impl Default for FABRIC_SERVICE_QUERY_DESCRIPTION_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_QUERY_RESULT_ITEM {
    pub Kind: FABRIC_SERVICE_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_SERVICE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_QUERY_RESULT_ITEM")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_SERVICE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_SERVICE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_SERVICE_QUERY_RESULT_LIST {}
impl Clone for FABRIC_SERVICE_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_QUERY_RESULT_LIST {}
impl Default for FABRIC_SERVICE_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION {
    pub PartitionId: windows_core::GUID,
    pub ReplicaIdOrInstanceIdFilter: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION")
            .field("PartitionId", &self.PartitionId)
            .field(
                "ReplicaIdOrInstanceIdFilter",
                &self.ReplicaIdOrInstanceIdFilter,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.ReplicaIdOrInstanceIdFilter == other.ReplicaIdOrInstanceIdFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION {}
impl Default for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX1 {
    pub ReplicaStatusFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX1 {}
impl Clone for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX1")
            .field("ReplicaStatusFilter", &self.ReplicaStatusFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ReplicaStatusFilter == other.ReplicaStatusFilter && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX1 {}
impl Default for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX2 {
    pub ContinuationToken: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX2 {}
impl Clone for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX2")
            .field("ContinuationToken", &self.ContinuationToken)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.ContinuationToken == other.ContinuationToken && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX2 {}
impl Default for FABRIC_SERVICE_REPLICA_QUERY_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    pub Kind: FABRIC_SERVICE_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM {}
impl Default for FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_REPLICA_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST {}
impl Clone for FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST {}
impl Default for FABRIC_SERVICE_REPLICA_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_SCALING_POLICY {
    pub ServiceScalingPolicyTrigger: FABRIC_SCALING_TRIGGER,
    pub ServiceScalingPolicyMechanism: FABRIC_SCALING_MECHANISM,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_SCALING_POLICY {}
impl Clone for FABRIC_SERVICE_SCALING_POLICY {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_SCALING_POLICY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_SCALING_POLICY")
            .field(
                "ServiceScalingPolicyTrigger",
                &self.ServiceScalingPolicyTrigger,
            )
            .field(
                "ServiceScalingPolicyMechanism",
                &self.ServiceScalingPolicyMechanism,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_SCALING_POLICY {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_SCALING_POLICY {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceScalingPolicyTrigger == other.ServiceScalingPolicyTrigger
            && self.ServiceScalingPolicyMechanism == other.ServiceScalingPolicyMechanism
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_SCALING_POLICY {}
impl Default for FABRIC_SERVICE_SCALING_POLICY {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_DESCRIPTION {
    pub Kind: FABRIC_SERVICE_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_TYPE_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_TYPE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_DESCRIPTION")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_SERVICE_TYPE_DESCRIPTION {}
impl Default for FABRIC_SERVICE_TYPE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION {
    pub Name: windows_core::PCWSTR,
    pub Value: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION {}
impl Clone for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION")
            .field("Name", &self.Name)
            .field("Value", &self.Value)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name && self.Value == other.Value && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION {}
impl Default for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION,
}
impl Copy for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST {}
impl Clone for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST {}
impl Default for FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_TYPE_DESCRIPTION,
}
impl Copy for FABRIC_SERVICE_TYPE_DESCRIPTION_LIST {}
impl Clone for FABRIC_SERVICE_TYPE_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_TYPE_DESCRIPTION_LIST {}
impl Default for FABRIC_SERVICE_TYPE_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_HEALTH_POLICY {
    pub MaxPercentUnhealthyServices: u8,
    pub MaxPercentUnhealthyPartitionsPerService: u8,
    pub MaxPercentUnhealthyReplicasPerPartition: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_TYPE_HEALTH_POLICY {}
impl Clone for FABRIC_SERVICE_TYPE_HEALTH_POLICY {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_HEALTH_POLICY {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_HEALTH_POLICY")
            .field(
                "MaxPercentUnhealthyServices",
                &self.MaxPercentUnhealthyServices,
            )
            .field(
                "MaxPercentUnhealthyPartitionsPerService",
                &self.MaxPercentUnhealthyPartitionsPerService,
            )
            .field(
                "MaxPercentUnhealthyReplicasPerPartition",
                &self.MaxPercentUnhealthyReplicasPerPartition,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_HEALTH_POLICY {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_HEALTH_POLICY {
    fn eq(&self, other: &Self) -> bool {
        self.MaxPercentUnhealthyServices == other.MaxPercentUnhealthyServices
            && self.MaxPercentUnhealthyPartitionsPerService
                == other.MaxPercentUnhealthyPartitionsPerService
            && self.MaxPercentUnhealthyReplicasPerPartition
                == other.MaxPercentUnhealthyReplicasPerPartition
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_TYPE_HEALTH_POLICY {}
impl Default for FABRIC_SERVICE_TYPE_HEALTH_POLICY {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP {
    pub Count: u32,
    pub Items: *mut FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP_ITEM,
}
impl Copy for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP {}
impl Clone for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP {}
impl Default for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP_ITEM {
    pub ServiceTypeName: windows_core::PCWSTR,
    pub ServiceTypeHealthPolicy: *const FABRIC_SERVICE_TYPE_HEALTH_POLICY,
}
impl Copy for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP_ITEM {}
impl Clone for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP_ITEM")
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("ServiceTypeHealthPolicy", &self.ServiceTypeHealthPolicy)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceTypeName == other.ServiceTypeName
            && self.ServiceTypeHealthPolicy == other.ServiceTypeHealthPolicy
    }
}
impl Eq for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP_ITEM {}
impl Default for FABRIC_SERVICE_TYPE_HEALTH_POLICY_MAP_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION {
    pub ApplicationTypeName: windows_core::PCWSTR,
    pub ApplicationTypeVersion: windows_core::PCWSTR,
    pub ServiceTypeNameFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION")
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field("ApplicationTypeVersion", &self.ApplicationTypeVersion)
            .field("ServiceTypeNameFilter", &self.ServiceTypeNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeName == other.ApplicationTypeName
            && self.ApplicationTypeVersion == other.ApplicationTypeVersion
            && self.ServiceTypeNameFilter == other.ServiceTypeNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION {}
impl Default for FABRIC_SERVICE_TYPE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM {
    pub ServiceTypeDescription: *mut FABRIC_SERVICE_TYPE_DESCRIPTION,
    pub ServiceManifestVersion: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM")
            .field("ServiceTypeDescription", &self.ServiceTypeDescription)
            .field("ServiceManifestVersion", &self.ServiceManifestVersion)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceTypeDescription == other.ServiceTypeDescription
            && self.ServiceManifestVersion == other.ServiceManifestVersion
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    pub ServiceManifestName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1")
            .field("ServiceManifestName", &self.ServiceManifestName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceManifestName == other.ServiceManifestName && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX2 {
    pub IsServiceGroup: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX2")
            .field("IsServiceGroup", &self.IsServiceGroup)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX2 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.IsServiceGroup == other.IsServiceGroup && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_SERVICE_TYPE_QUERY_RESULT_ITEM,
}
impl Copy for FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST {}
impl Clone for FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST {}
impl Default for FABRIC_SERVICE_TYPE_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SERVICE_UPDATE_DESCRIPTION {
    pub Kind: FABRIC_SERVICE_DESCRIPTION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SERVICE_UPDATE_DESCRIPTION {}
impl Clone for FABRIC_SERVICE_UPDATE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SERVICE_UPDATE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SERVICE_UPDATE_DESCRIPTION")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SERVICE_UPDATE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SERVICE_UPDATE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_SERVICE_UPDATE_DESCRIPTION {}
impl Default for FABRIC_SERVICE_UPDATE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SINGLETON_PARTITION_INFORMATION {
    pub Id: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SINGLETON_PARTITION_INFORMATION {}
impl Clone for FABRIC_SINGLETON_PARTITION_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SINGLETON_PARTITION_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SINGLETON_PARTITION_INFORMATION")
            .field("Id", &self.Id)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SINGLETON_PARTITION_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SINGLETON_PARTITION_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.Id == other.Id && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SINGLETON_PARTITION_INFORMATION {}
impl Default for FABRIC_SINGLETON_PARTITION_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STARTED_EVENT {
    pub TimeStampUtc: windows::Win32::Foundation::FILETIME,
    pub ChaosParameters: *mut FABRIC_CHAOS_PARAMETERS,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STARTED_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STARTED_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STARTED_EVENT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STARTED_EVENT")
            .field("TimeStampUtc", &self.TimeStampUtc)
            .field("ChaosParameters", &self.ChaosParameters)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STARTED_EVENT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STARTED_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.TimeStampUtc == other.TimeStampUtc
            && self.ChaosParameters == other.ChaosParameters
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STARTED_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STARTED_EVENT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_START_APPROVED_UPGRADES_DESCRIPTION {
    pub OperationId: windows_core::GUID,
    pub ClusterConfigPath: windows_core::PCWSTR,
    pub RollbackOnFailure: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_START_APPROVED_UPGRADES_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_START_APPROVED_UPGRADES_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_START_APPROVED_UPGRADES_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_APPROVED_UPGRADES_DESCRIPTION")
            .field("OperationId", &self.OperationId)
            .field("ClusterConfigPath", &self.ClusterConfigPath)
            .field("RollbackOnFailure", &self.RollbackOnFailure)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_START_APPROVED_UPGRADES_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_START_APPROVED_UPGRADES_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.OperationId == other.OperationId
            && self.ClusterConfigPath == other.ClusterConfigPath
            && self.RollbackOnFailure == other.RollbackOnFailure
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_START_APPROVED_UPGRADES_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_START_APPROVED_UPGRADES_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_START_CHAOS_DESCRIPTION {
    pub ChaosParameters: *mut FABRIC_CHAOS_PARAMETERS,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_START_CHAOS_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_START_CHAOS_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_START_CHAOS_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_CHAOS_DESCRIPTION")
            .field("ChaosParameters", &self.ChaosParameters)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_START_CHAOS_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_START_CHAOS_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ChaosParameters == other.ChaosParameters && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_START_CHAOS_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_START_CHAOS_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_START_NODE_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub NodeInstanceId: u64,
    pub IPAddressOrFQDN: windows_core::PCWSTR,
    pub ClusterConnectionPort: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_START_NODE_DESCRIPTION {}
impl Clone for FABRIC_START_NODE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_START_NODE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_NODE_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("IPAddressOrFQDN", &self.IPAddressOrFQDN)
            .field("ClusterConnectionPort", &self.ClusterConnectionPort)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_START_NODE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_START_NODE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.NodeInstanceId == other.NodeInstanceId
            && self.IPAddressOrFQDN == other.IPAddressOrFQDN
            && self.ClusterConnectionPort == other.ClusterConnectionPort
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_START_NODE_DESCRIPTION {}
impl Default for FABRIC_START_NODE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_START_NODE_DESCRIPTION2 {
    pub Kind: FABRIC_START_NODE_DESCRIPTION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_START_NODE_DESCRIPTION2 {}
impl Clone for FABRIC_START_NODE_DESCRIPTION2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_START_NODE_DESCRIPTION2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_NODE_DESCRIPTION2")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_START_NODE_DESCRIPTION2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_START_NODE_DESCRIPTION2 {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_START_NODE_DESCRIPTION2 {}
impl Default for FABRIC_START_NODE_DESCRIPTION2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME {
    pub NodeName: windows_core::PCWSTR,
    pub NodeInstanceId: u64,
    pub IPAddressOrFQDN: windows_core::PCWSTR,
    pub ClusterConnectionPort: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME {}
impl Clone for FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME")
            .field("NodeName", &self.NodeName)
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("IPAddressOrFQDN", &self.IPAddressOrFQDN)
            .field("ClusterConnectionPort", &self.ClusterConnectionPort)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.NodeInstanceId == other.NodeInstanceId
            && self.IPAddressOrFQDN == other.IPAddressOrFQDN
            && self.ClusterConnectionPort == other.ClusterConnectionPort
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME {}
impl Default for FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_START_NODE_STATUS {
    pub NodeResult: *mut FABRIC_NODE_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_START_NODE_STATUS {}
impl Clone for FABRIC_START_NODE_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_START_NODE_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_NODE_STATUS")
            .field("NodeResult", &self.NodeResult)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_START_NODE_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_START_NODE_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.NodeResult == other.NodeResult && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_START_NODE_STATUS {}
impl Default for FABRIC_START_NODE_STATUS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION {
    pub OperationId: windows_core::GUID,
    pub PartitionSelector: *mut FABRIC_PARTITION_SELECTOR,
    pub DataLossMode: FABRIC_DATA_LOSS_MODE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION {}
impl Clone for FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION")
            .field("OperationId", &self.OperationId)
            .field("PartitionSelector", &self.PartitionSelector)
            .field("DataLossMode", &self.DataLossMode)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.OperationId == other.OperationId
            && self.PartitionSelector == other.PartitionSelector
            && self.DataLossMode == other.DataLossMode
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION {}
impl Default for FABRIC_START_PARTITION_DATA_LOSS_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION {
    pub OperationId: windows_core::GUID,
    pub PartitionSelector: *mut FABRIC_PARTITION_SELECTOR,
    pub QuorumLossMode: FABRIC_QUORUM_LOSS_MODE,
    pub QuorumLossDurationInMilliSeconds: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION {}
impl Clone for FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION")
            .field("OperationId", &self.OperationId)
            .field("PartitionSelector", &self.PartitionSelector)
            .field("QuorumLossMode", &self.QuorumLossMode)
            .field(
                "QuorumLossDurationInMilliSeconds",
                &self.QuorumLossDurationInMilliSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.OperationId == other.OperationId
            && self.PartitionSelector == other.PartitionSelector
            && self.QuorumLossMode == other.QuorumLossMode
            && self.QuorumLossDurationInMilliSeconds == other.QuorumLossDurationInMilliSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION {}
impl Default for FABRIC_START_PARTITION_QUORUM_LOSS_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_START_PARTITION_RESTART_DESCRIPTION {
    pub OperationId: windows_core::GUID,
    pub PartitionSelector: *mut FABRIC_PARTITION_SELECTOR,
    pub RestartPartitionMode: FABRIC_RESTART_PARTITION_MODE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_START_PARTITION_RESTART_DESCRIPTION {}
impl Clone for FABRIC_START_PARTITION_RESTART_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_START_PARTITION_RESTART_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_PARTITION_RESTART_DESCRIPTION")
            .field("OperationId", &self.OperationId)
            .field("PartitionSelector", &self.PartitionSelector)
            .field("RestartPartitionMode", &self.RestartPartitionMode)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_START_PARTITION_RESTART_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_START_PARTITION_RESTART_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.OperationId == other.OperationId
            && self.PartitionSelector == other.PartitionSelector
            && self.RestartPartitionMode == other.RestartPartitionMode
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_START_PARTITION_RESTART_DESCRIPTION {}
impl Default for FABRIC_START_PARTITION_RESTART_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_START_UPGRADE_DESCRIPTION {
    pub ClusterConfig: windows_core::PCWSTR,
    pub HealthCheckRetryTimeoutInSeconds: u32,
    pub HealthCheckWaitDurationInSeconds: u32,
    pub HealthCheckStableDurationInSeconds: u32,
    pub UpgradeDomainTimeoutInSeconds: u32,
    pub UpgradeTimeoutInSeconds: u32,
    pub MaxPercentUnhealthyApplications: u8,
    pub MaxPercentUnhealthyNodes: u8,
    pub MaxPercentDeltaUnhealthyNodes: u8,
    pub MaxPercentUpgradeDomainDeltaUnhealthyNodes: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_START_UPGRADE_DESCRIPTION {}
impl Clone for FABRIC_START_UPGRADE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_START_UPGRADE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_UPGRADE_DESCRIPTION")
            .field("ClusterConfig", &self.ClusterConfig)
            .field(
                "HealthCheckRetryTimeoutInSeconds",
                &self.HealthCheckRetryTimeoutInSeconds,
            )
            .field(
                "HealthCheckWaitDurationInSeconds",
                &self.HealthCheckWaitDurationInSeconds,
            )
            .field(
                "HealthCheckStableDurationInSeconds",
                &self.HealthCheckStableDurationInSeconds,
            )
            .field(
                "UpgradeDomainTimeoutInSeconds",
                &self.UpgradeDomainTimeoutInSeconds,
            )
            .field("UpgradeTimeoutInSeconds", &self.UpgradeTimeoutInSeconds)
            .field(
                "MaxPercentUnhealthyApplications",
                &self.MaxPercentUnhealthyApplications,
            )
            .field("MaxPercentUnhealthyNodes", &self.MaxPercentUnhealthyNodes)
            .field(
                "MaxPercentDeltaUnhealthyNodes",
                &self.MaxPercentDeltaUnhealthyNodes,
            )
            .field(
                "MaxPercentUpgradeDomainDeltaUnhealthyNodes",
                &self.MaxPercentUpgradeDomainDeltaUnhealthyNodes,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_START_UPGRADE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_START_UPGRADE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ClusterConfig == other.ClusterConfig
            && self.HealthCheckRetryTimeoutInSeconds == other.HealthCheckRetryTimeoutInSeconds
            && self.HealthCheckWaitDurationInSeconds == other.HealthCheckWaitDurationInSeconds
            && self.HealthCheckStableDurationInSeconds == other.HealthCheckStableDurationInSeconds
            && self.UpgradeDomainTimeoutInSeconds == other.UpgradeDomainTimeoutInSeconds
            && self.UpgradeTimeoutInSeconds == other.UpgradeTimeoutInSeconds
            && self.MaxPercentUnhealthyApplications == other.MaxPercentUnhealthyApplications
            && self.MaxPercentUnhealthyNodes == other.MaxPercentUnhealthyNodes
            && self.MaxPercentDeltaUnhealthyNodes == other.MaxPercentDeltaUnhealthyNodes
            && self.MaxPercentUpgradeDomainDeltaUnhealthyNodes
                == other.MaxPercentUpgradeDomainDeltaUnhealthyNodes
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_START_UPGRADE_DESCRIPTION {}
impl Default for FABRIC_START_UPGRADE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_START_UPGRADE_DESCRIPTION_EX1 {
    pub ApplicationHealthPolicyMap: *const FABRIC_APPLICATION_HEALTH_POLICY_MAP,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_START_UPGRADE_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_START_UPGRADE_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_START_UPGRADE_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_START_UPGRADE_DESCRIPTION_EX1")
            .field(
                "ApplicationHealthPolicyMap",
                &self.ApplicationHealthPolicyMap,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_START_UPGRADE_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_START_UPGRADE_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationHealthPolicyMap == other.ApplicationHealthPolicyMap
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_START_UPGRADE_DESCRIPTION_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_START_UPGRADE_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATEFUL_SERVICE_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub ServiceName: *mut u16,
    pub ServiceTypeName: windows_core::PCWSTR,
    pub InitializationDataSize: u32,
    pub InitializationData: *mut u8,
    pub PartitionScheme: FABRIC_PARTITION_SCHEME,
    pub PartitionSchemeDescription: *mut core::ffi::c_void,
    pub TargetReplicaSetSize: i32,
    pub MinReplicaSetSize: i32,
    pub PlacementConstraints: windows_core::PCWSTR,
    pub CorrelationCount: u32,
    pub Correlations: *mut FABRIC_SERVICE_CORRELATION_DESCRIPTION,
    pub MetricCount: u32,
    pub Metrics: *mut FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION,
    pub HasPersistedState: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATEFUL_SERVICE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATEFUL_SERVICE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceName", &self.ServiceName)
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("InitializationDataSize", &self.InitializationDataSize)
            .field("InitializationData", &self.InitializationData)
            .field("PartitionScheme", &self.PartitionScheme)
            .field(
                "PartitionSchemeDescription",
                &self.PartitionSchemeDescription,
            )
            .field("TargetReplicaSetSize", &self.TargetReplicaSetSize)
            .field("MinReplicaSetSize", &self.MinReplicaSetSize)
            .field("PlacementConstraints", &self.PlacementConstraints)
            .field("CorrelationCount", &self.CorrelationCount)
            .field("Correlations", &self.Correlations)
            .field("MetricCount", &self.MetricCount)
            .field("Metrics", &self.Metrics)
            .field("HasPersistedState", &self.HasPersistedState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATEFUL_SERVICE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ServiceName == other.ServiceName
            && self.ServiceTypeName == other.ServiceTypeName
            && self.InitializationDataSize == other.InitializationDataSize
            && self.InitializationData == other.InitializationData
            && self.PartitionScheme == other.PartitionScheme
            && self.PartitionSchemeDescription == other.PartitionSchemeDescription
            && self.TargetReplicaSetSize == other.TargetReplicaSetSize
            && self.MinReplicaSetSize == other.MinReplicaSetSize
            && self.PlacementConstraints == other.PlacementConstraints
            && self.CorrelationCount == other.CorrelationCount
            && self.Correlations == other.Correlations
            && self.MetricCount == other.MetricCount
            && self.Metrics == other.Metrics
            && self.HasPersistedState == other.HasPersistedState
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATEFUL_SERVICE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATEFUL_SERVICE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX1 {
    pub PolicyList: *mut FABRIC_SERVICE_PLACEMENT_POLICY_LIST,
    pub FailoverSettings: *mut FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX1 {}
impl Clone for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX1")
            .field("PolicyList", &self.PolicyList)
            .field("FailoverSettings", &self.FailoverSettings)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.PolicyList == other.PolicyList
            && self.FailoverSettings == other.FailoverSettings
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX1 {}
impl Default for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX2 {
    pub IsDefaultMoveCostSpecified: windows::Win32::Foundation::BOOLEAN,
    pub DefaultMoveCost: FABRIC_MOVE_COST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX2")
            .field(
                "IsDefaultMoveCostSpecified",
                &self.IsDefaultMoveCostSpecified,
            )
            .field("DefaultMoveCost", &self.DefaultMoveCost)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.IsDefaultMoveCostSpecified == other.IsDefaultMoveCostSpecified
            && self.DefaultMoveCost == other.DefaultMoveCost
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX3 {
    pub ServicePackageActivationMode: FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE,
    pub ServiceDnsName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX3 {}
impl Clone for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX3")
            .field(
                "ServicePackageActivationMode",
                &self.ServicePackageActivationMode,
            )
            .field("ServiceDnsName", &self.ServiceDnsName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationMode == other.ServicePackageActivationMode
            && self.ServiceDnsName == other.ServiceDnsName
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX3 {}
impl Default for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX4 {
    pub ScalingPolicyCount: u32,
    pub ServiceScalingPolicies: *mut FABRIC_SERVICE_SCALING_POLICY,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX4 {}
impl Clone for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX4 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX4")
            .field("ScalingPolicyCount", &self.ScalingPolicyCount)
            .field("ServiceScalingPolicies", &self.ServiceScalingPolicies)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX4 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX4 {
    fn eq(&self, other: &Self) -> bool {
        self.ScalingPolicyCount == other.ScalingPolicyCount
            && self.ServiceScalingPolicies == other.ServiceScalingPolicies
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX4 {}
impl Default for FABRIC_STATEFUL_SERVICE_DESCRIPTION_EX4 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS {
    pub Flags: u32,
    pub ReplicaRestartWaitDurationSeconds: u32,
    pub QuorumLossWaitDurationSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS {}
impl Clone for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS")
            .field("Flags", &self.Flags)
            .field(
                "ReplicaRestartWaitDurationSeconds",
                &self.ReplicaRestartWaitDurationSeconds,
            )
            .field(
                "QuorumLossWaitDurationSeconds",
                &self.QuorumLossWaitDurationSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags
            && self.ReplicaRestartWaitDurationSeconds == other.ReplicaRestartWaitDurationSeconds
            && self.QuorumLossWaitDurationSeconds == other.QuorumLossWaitDurationSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS {}
impl Default for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_EX1 {
    pub StandByReplicaKeepDurationSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_EX1 {}
impl Clone for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_EX1")
            .field(
                "StandByReplicaKeepDurationSeconds",
                &self.StandByReplicaKeepDurationSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.StandByReplicaKeepDurationSeconds == other.StandByReplicaKeepDurationSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_EX1 {}
impl Default for FABRIC_STATEFUL_SERVICE_FAILOVER_SETTINGS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    pub PartitionInformation: *const FABRIC_SERVICE_PARTITION_INFORMATION,
    pub TargetReplicaSetSize: u32,
    pub MinReplicaSetSize: u32,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub PartitionStatus: FABRIC_QUERY_SERVICE_PARTITION_STATUS,
    pub LastQuorumLossDurationInSeconds: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM")
            .field("PartitionInformation", &self.PartitionInformation)
            .field("TargetReplicaSetSize", &self.TargetReplicaSetSize)
            .field("MinReplicaSetSize", &self.MinReplicaSetSize)
            .field("HealthState", &self.HealthState)
            .field("PartitionStatus", &self.PartitionStatus)
            .field(
                "LastQuorumLossDurationInSeconds",
                &self.LastQuorumLossDurationInSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionInformation == other.PartitionInformation
            && self.TargetReplicaSetSize == other.TargetReplicaSetSize
            && self.MinReplicaSetSize == other.MinReplicaSetSize
            && self.HealthState == other.HealthState
            && self.PartitionStatus == other.PartitionStatus
            && self.LastQuorumLossDurationInSeconds == other.LastQuorumLossDurationInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM {}
impl Default for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM_EX1 {
    pub PrimaryEpoch: FABRIC_EPOCH,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM_EX1")
            .field("PrimaryEpoch", &self.PrimaryEpoch)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.PrimaryEpoch == other.PrimaryEpoch && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_STATEFUL_SERVICE_PARTITION_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM {
    pub ServiceName: *mut u16,
    pub ServiceTypeName: windows_core::PCWSTR,
    pub ServiceManifestVersion: windows_core::PCWSTR,
    pub HasPersistedState: windows::Win32::Foundation::BOOLEAN,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM")
            .field("ServiceName", &self.ServiceName)
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("ServiceManifestVersion", &self.ServiceManifestVersion)
            .field("HasPersistedState", &self.HasPersistedState)
            .field("HealthState", &self.HealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.ServiceTypeName == other.ServiceTypeName
            && self.ServiceManifestVersion == other.ServiceManifestVersion
            && self.HasPersistedState == other.HasPersistedState
            && self.HealthState == other.HealthState
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX1 {
    pub ServiceStatus: FABRIC_QUERY_SERVICE_STATUS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX1")
            .field("ServiceStatus", &self.ServiceStatus)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceStatus == other.ServiceStatus && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX2 {
    pub IsServiceGroup: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX2")
            .field("IsServiceGroup", &self.IsServiceGroup)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX2 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.IsServiceGroup == other.IsServiceGroup && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATEFUL_SERVICE_QUERY_RESULT_ITEM_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH {
    pub PartitionId: windows_core::GUID,
    pub ReplicaId: i64,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub HealthEvents: *const FABRIC_HEALTH_EVENT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH")
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaId", &self.ReplicaId)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("HealthEvents", &self.HealthEvents)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.ReplicaId == other.ReplicaId
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.HealthEvents == other.HealthEvents
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_EX1 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_EX1 {}
impl Clone for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_EX1")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_EX1 {}
impl Default for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_REPORT {
    pub PartitionId: windows_core::GUID,
    pub ReplicaId: i64,
    pub HealthInformation: *const FABRIC_HEALTH_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_REPORT")
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaId", &self.ReplicaId)
            .field("HealthInformation", &self.HealthInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.ReplicaId == other.ReplicaId
            && self.HealthInformation == other.HealthInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE {
    pub PartitionId: windows_core::GUID,
    pub ReplicaId: i64,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE {}
impl Clone for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE")
            .field("PartitionId", &self.PartitionId)
            .field("ReplicaId", &self.ReplicaId)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.ReplicaId == other.ReplicaId
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE {}
impl Default for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE_EX1 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE_EX1 {}
impl Clone for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE_EX1")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE_EX1 {}
impl Default for FABRIC_STATEFUL_SERVICE_REPLICA_HEALTH_STATE_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    pub ReplicaId: i64,
    pub ReplicaRole: FABRIC_REPLICA_ROLE,
    pub ReplicaStatus: FABRIC_QUERY_SERVICE_REPLICA_STATUS,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub ReplicaAddress: windows_core::PCWSTR,
    pub NodeName: windows_core::PCWSTR,
    pub LastInBuildDurationInSeconds: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM")
            .field("ReplicaId", &self.ReplicaId)
            .field("ReplicaRole", &self.ReplicaRole)
            .field("ReplicaStatus", &self.ReplicaStatus)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("ReplicaAddress", &self.ReplicaAddress)
            .field("NodeName", &self.NodeName)
            .field(
                "LastInBuildDurationInSeconds",
                &self.LastInBuildDurationInSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ReplicaId == other.ReplicaId
            && self.ReplicaRole == other.ReplicaRole
            && self.ReplicaStatus == other.ReplicaStatus
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.ReplicaAddress == other.ReplicaAddress
            && self.NodeName == other.NodeName
            && self.LastInBuildDurationInSeconds == other.LastInBuildDurationInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {}
impl Default for FABRIC_STATEFUL_SERVICE_REPLICA_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION {
    pub ServiceTypeName: windows_core::PCWSTR,
    pub PlacementConstraints: windows_core::PCWSTR,
    pub LoadMetrics: *const FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST,
    pub Extensions: *const FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST,
    pub HasPersistedState: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION")
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("PlacementConstraints", &self.PlacementConstraints)
            .field("LoadMetrics", &self.LoadMetrics)
            .field("Extensions", &self.Extensions)
            .field("HasPersistedState", &self.HasPersistedState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceTypeName == other.ServiceTypeName
            && self.PlacementConstraints == other.PlacementConstraints
            && self.LoadMetrics == other.LoadMetrics
            && self.Extensions == other.Extensions
            && self.HasPersistedState == other.HasPersistedState
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION_EX1 {
    pub PolicyList: *mut FABRIC_SERVICE_PLACEMENT_POLICY_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION_EX1 {}
impl Clone for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION_EX1")
            .field("PolicyList", &self.PolicyList)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.PolicyList == other.PolicyList && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION_EX1 {}
impl Default for FABRIC_STATEFUL_SERVICE_TYPE_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION {
    pub Flags: u32,
    pub TargetReplicaSetSize: i32,
    pub ReplicaRestartWaitDurationSeconds: u32,
    pub QuorumLossWaitDurationSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION {}
impl Clone for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION")
            .field("Flags", &self.Flags)
            .field("TargetReplicaSetSize", &self.TargetReplicaSetSize)
            .field(
                "ReplicaRestartWaitDurationSeconds",
                &self.ReplicaRestartWaitDurationSeconds,
            )
            .field(
                "QuorumLossWaitDurationSeconds",
                &self.QuorumLossWaitDurationSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags
            && self.TargetReplicaSetSize == other.TargetReplicaSetSize
            && self.ReplicaRestartWaitDurationSeconds == other.ReplicaRestartWaitDurationSeconds
            && self.QuorumLossWaitDurationSeconds == other.QuorumLossWaitDurationSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION {}
impl Default for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX1 {
    pub StandByReplicaKeepDurationSeconds: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX1 {}
impl Clone for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX1")
            .field(
                "StandByReplicaKeepDurationSeconds",
                &self.StandByReplicaKeepDurationSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.StandByReplicaKeepDurationSeconds == other.StandByReplicaKeepDurationSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX1 {}
impl Default for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX2 {
    pub MinReplicaSetSize: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX2 {}
impl Clone for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX2")
            .field("MinReplicaSetSize", &self.MinReplicaSetSize)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.MinReplicaSetSize == other.MinReplicaSetSize && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX2 {}
impl Default for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX3 {
    pub PlacementConstraints: windows_core::PCWSTR,
    pub PolicyList: *mut FABRIC_SERVICE_PLACEMENT_POLICY_LIST,
    pub CorrelationCount: u32,
    pub Correlations: *mut FABRIC_SERVICE_CORRELATION_DESCRIPTION,
    pub MetricCount: u32,
    pub Metrics: *mut FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX3 {}
impl Clone for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX3")
            .field("PlacementConstraints", &self.PlacementConstraints)
            .field("PolicyList", &self.PolicyList)
            .field("CorrelationCount", &self.CorrelationCount)
            .field("Correlations", &self.Correlations)
            .field("MetricCount", &self.MetricCount)
            .field("Metrics", &self.Metrics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.PlacementConstraints == other.PlacementConstraints
            && self.PolicyList == other.PolicyList
            && self.CorrelationCount == other.CorrelationCount
            && self.Correlations == other.Correlations
            && self.MetricCount == other.MetricCount
            && self.Metrics == other.Metrics
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX3 {}
impl Default for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX4 {
    pub DefaultMoveCost: FABRIC_MOVE_COST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX4 {}
impl Clone for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX4 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX4")
            .field("DefaultMoveCost", &self.DefaultMoveCost)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX4 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX4 {
    fn eq(&self, other: &Self) -> bool {
        self.DefaultMoveCost == other.DefaultMoveCost && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX4 {}
impl Default for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX4 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX5 {
    pub RepartitionKind: FABRIC_SERVICE_PARTITION_KIND,
    pub RepartitionDescription: *mut core::ffi::c_void,
    pub ScalingPolicyCount: u32,
    pub ServiceScalingPolicies: *mut FABRIC_SERVICE_SCALING_POLICY,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX5 {}
impl Clone for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX5 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX5 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX5")
            .field("RepartitionKind", &self.RepartitionKind)
            .field("RepartitionDescription", &self.RepartitionDescription)
            .field("ScalingPolicyCount", &self.ScalingPolicyCount)
            .field("ServiceScalingPolicies", &self.ServiceScalingPolicies)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX5 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX5 {
    fn eq(&self, other: &Self) -> bool {
        self.RepartitionKind == other.RepartitionKind
            && self.RepartitionDescription == other.RepartitionDescription
            && self.ScalingPolicyCount == other.ScalingPolicyCount
            && self.ServiceScalingPolicies == other.ServiceScalingPolicies
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX5 {}
impl Default for FABRIC_STATEFUL_SERVICE_UPDATE_DESCRIPTION_EX5 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_DESCRIPTION {
    pub ApplicationName: *mut u16,
    pub ServiceName: *mut u16,
    pub ServiceTypeName: windows_core::PCWSTR,
    pub InitializationDataSize: u32,
    pub InitializationData: *mut u8,
    pub PartitionScheme: FABRIC_PARTITION_SCHEME,
    pub PartitionSchemeDescription: *mut core::ffi::c_void,
    pub InstanceCount: i32,
    pub PlacementConstraints: windows_core::PCWSTR,
    pub CorrelationCount: u32,
    pub Correlations: *mut FABRIC_SERVICE_CORRELATION_DESCRIPTION,
    pub MetricCount: u32,
    pub Metrics: *mut FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_DESCRIPTION {}
impl Clone for FABRIC_STATELESS_SERVICE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_DESCRIPTION")
            .field("ApplicationName", &self.ApplicationName)
            .field("ServiceName", &self.ServiceName)
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("InitializationDataSize", &self.InitializationDataSize)
            .field("InitializationData", &self.InitializationData)
            .field("PartitionScheme", &self.PartitionScheme)
            .field(
                "PartitionSchemeDescription",
                &self.PartitionSchemeDescription,
            )
            .field("InstanceCount", &self.InstanceCount)
            .field("PlacementConstraints", &self.PlacementConstraints)
            .field("CorrelationCount", &self.CorrelationCount)
            .field("Correlations", &self.Correlations)
            .field("MetricCount", &self.MetricCount)
            .field("Metrics", &self.Metrics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationName == other.ApplicationName
            && self.ServiceName == other.ServiceName
            && self.ServiceTypeName == other.ServiceTypeName
            && self.InitializationDataSize == other.InitializationDataSize
            && self.InitializationData == other.InitializationData
            && self.PartitionScheme == other.PartitionScheme
            && self.PartitionSchemeDescription == other.PartitionSchemeDescription
            && self.InstanceCount == other.InstanceCount
            && self.PlacementConstraints == other.PlacementConstraints
            && self.CorrelationCount == other.CorrelationCount
            && self.Correlations == other.Correlations
            && self.MetricCount == other.MetricCount
            && self.Metrics == other.Metrics
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_DESCRIPTION {}
impl Default for FABRIC_STATELESS_SERVICE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_DESCRIPTION_EX1 {
    pub PolicyList: *mut FABRIC_SERVICE_PLACEMENT_POLICY_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX1 {}
impl Clone for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_DESCRIPTION_EX1")
            .field("PolicyList", &self.PolicyList)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.PolicyList == other.PolicyList && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX1 {}
impl Default for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATELESS_SERVICE_DESCRIPTION_EX2 {
    pub IsDefaultMoveCostSpecified: windows::Win32::Foundation::BOOLEAN,
    pub DefaultMoveCost: FABRIC_MOVE_COST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_DESCRIPTION_EX2")
            .field(
                "IsDefaultMoveCostSpecified",
                &self.IsDefaultMoveCostSpecified,
            )
            .field("DefaultMoveCost", &self.DefaultMoveCost)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.IsDefaultMoveCostSpecified == other.IsDefaultMoveCostSpecified
            && self.DefaultMoveCost == other.DefaultMoveCost
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_DESCRIPTION_EX3 {
    pub ServicePackageActivationMode: FABRIC_SERVICE_PACKAGE_ACTIVATION_MODE,
    pub ServiceDnsName: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX3 {}
impl Clone for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_DESCRIPTION_EX3")
            .field(
                "ServicePackageActivationMode",
                &self.ServicePackageActivationMode,
            )
            .field("ServiceDnsName", &self.ServiceDnsName)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.ServicePackageActivationMode == other.ServicePackageActivationMode
            && self.ServiceDnsName == other.ServiceDnsName
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX3 {}
impl Default for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_DESCRIPTION_EX4 {
    pub ScalingPolicyCount: u32,
    pub ServiceScalingPolicies: *mut FABRIC_SERVICE_SCALING_POLICY,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX4 {}
impl Clone for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX4 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX4 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_DESCRIPTION_EX4")
            .field("ScalingPolicyCount", &self.ScalingPolicyCount)
            .field("ServiceScalingPolicies", &self.ServiceScalingPolicies)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX4 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX4 {
    fn eq(&self, other: &Self) -> bool {
        self.ScalingPolicyCount == other.ScalingPolicyCount
            && self.ServiceScalingPolicies == other.ServiceScalingPolicies
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX4 {}
impl Default for FABRIC_STATELESS_SERVICE_DESCRIPTION_EX4 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH {
    pub PartitionId: windows_core::GUID,
    pub InstanceId: i64,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub HealthEvents: *const FABRIC_HEALTH_EVENT_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH")
            .field("PartitionId", &self.PartitionId)
            .field("InstanceId", &self.InstanceId)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("HealthEvents", &self.HealthEvents)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.InstanceId == other.InstanceId
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.HealthEvents == other.HealthEvents
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_EX1 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_EX1 {}
impl Clone for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_EX1")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_EX1 {}
impl Default for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_REPORT {
    pub PartitionId: windows_core::GUID,
    pub InstanceId: i64,
    pub HealthInformation: *const FABRIC_HEALTH_INFORMATION,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_REPORT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_REPORT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_REPORT")
            .field("PartitionId", &self.PartitionId)
            .field("InstanceId", &self.InstanceId)
            .field("HealthInformation", &self.HealthInformation)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_REPORT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_REPORT {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.InstanceId == other.InstanceId
            && self.HealthInformation == other.HealthInformation
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_REPORT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_REPORT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE {
    pub PartitionId: windows_core::GUID,
    pub InstanceId: i64,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE {}
impl Clone for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE")
            .field("PartitionId", &self.PartitionId)
            .field("InstanceId", &self.InstanceId)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId
            && self.InstanceId == other.InstanceId
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE {}
impl Default for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE_EX1 {
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE_EX1 {}
impl Clone for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE_EX1")
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.UnhealthyEvaluations == other.UnhealthyEvaluations && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE_EX1 {}
impl Default for FABRIC_STATELESS_SERVICE_INSTANCE_HEALTH_STATE_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    pub InstanceId: i64,
    pub ReplicaStatus: FABRIC_QUERY_SERVICE_REPLICA_STATUS,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub ReplicaAddress: windows_core::PCWSTR,
    pub NodeName: windows_core::PCWSTR,
    pub LastInBuildDurationInSeconds: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM")
            .field("InstanceId", &self.InstanceId)
            .field("ReplicaStatus", &self.ReplicaStatus)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("ReplicaAddress", &self.ReplicaAddress)
            .field("NodeName", &self.NodeName)
            .field(
                "LastInBuildDurationInSeconds",
                &self.LastInBuildDurationInSeconds,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.InstanceId == other.InstanceId
            && self.ReplicaStatus == other.ReplicaStatus
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.ReplicaAddress == other.ReplicaAddress
            && self.NodeName == other.NodeName
            && self.LastInBuildDurationInSeconds == other.LastInBuildDurationInSeconds
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_STATELESS_SERVICE_INSTANCE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    pub PartitionInformation: *const FABRIC_SERVICE_PARTITION_INFORMATION,
    pub InstanceCount: u32,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub PartitionStatus: FABRIC_QUERY_SERVICE_PARTITION_STATUS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_PARTITION_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_STATELESS_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_PARTITION_QUERY_RESULT_ITEM")
            .field("PartitionInformation", &self.PartitionInformation)
            .field("InstanceCount", &self.InstanceCount)
            .field("HealthState", &self.HealthState)
            .field("PartitionStatus", &self.PartitionStatus)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionInformation == other.PartitionInformation
            && self.InstanceCount == other.InstanceCount
            && self.HealthState == other.HealthState
            && self.PartitionStatus == other.PartitionStatus
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_PARTITION_QUERY_RESULT_ITEM {}
impl Default for FABRIC_STATELESS_SERVICE_PARTITION_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM {
    pub ServiceName: *mut u16,
    pub ServiceTypeName: windows_core::PCWSTR,
    pub ServiceManifestVersion: windows_core::PCWSTR,
    pub HealthState: FABRIC_HEALTH_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM {}
impl Clone for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM")
            .field("ServiceName", &self.ServiceName)
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("ServiceManifestVersion", &self.ServiceManifestVersion)
            .field("HealthState", &self.HealthState)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.ServiceTypeName == other.ServiceTypeName
            && self.ServiceManifestVersion == other.ServiceManifestVersion
            && self.HealthState == other.HealthState
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM {}
impl Default for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX1 {
    pub ServiceStatus: FABRIC_QUERY_SERVICE_STATUS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX1 {}
impl Clone for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX1")
            .field("ServiceStatus", &self.ServiceStatus)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceStatus == other.ServiceStatus && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX1 {}
impl Default for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX2 {
    pub IsServiceGroup: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX2")
            .field("IsServiceGroup", &self.IsServiceGroup)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX2 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.IsServiceGroup == other.IsServiceGroup && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX2 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATELESS_SERVICE_QUERY_RESULT_ITEM_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION {
    pub ServiceTypeName: windows_core::PCWSTR,
    pub PlacementConstraints: windows_core::PCWSTR,
    pub LoadMetrics: *const FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION_LIST,
    pub Extensions: *const FABRIC_SERVICE_TYPE_DESCRIPTION_EXTENSION_LIST,
    pub UseImplicitHost: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION")
            .field("ServiceTypeName", &self.ServiceTypeName)
            .field("PlacementConstraints", &self.PlacementConstraints)
            .field("LoadMetrics", &self.LoadMetrics)
            .field("Extensions", &self.Extensions)
            .field("UseImplicitHost", &self.UseImplicitHost)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceTypeName == other.ServiceTypeName
            && self.PlacementConstraints == other.PlacementConstraints
            && self.LoadMetrics == other.LoadMetrics
            && self.Extensions == other.Extensions
            && self.UseImplicitHost == other.UseImplicitHost
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION_EX1 {
    pub PolicyList: *mut FABRIC_SERVICE_PLACEMENT_POLICY_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION_EX1 {}
impl Clone for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION_EX1")
            .field("PolicyList", &self.PolicyList)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.PolicyList == other.PolicyList && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION_EX1 {}
impl Default for FABRIC_STATELESS_SERVICE_TYPE_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION {
    pub Flags: u32,
    pub InstanceCount: i32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION {}
impl Clone for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION")
            .field("Flags", &self.Flags)
            .field("InstanceCount", &self.InstanceCount)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Flags == other.Flags
            && self.InstanceCount == other.InstanceCount
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION {}
impl Default for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX1 {
    pub PlacementConstraints: windows_core::PCWSTR,
    pub PolicyList: *mut FABRIC_SERVICE_PLACEMENT_POLICY_LIST,
    pub CorrelationCount: u32,
    pub Correlations: *mut FABRIC_SERVICE_CORRELATION_DESCRIPTION,
    pub MetricCount: u32,
    pub Metrics: *mut FABRIC_SERVICE_LOAD_METRIC_DESCRIPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX1 {}
impl Clone for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX1")
            .field("PlacementConstraints", &self.PlacementConstraints)
            .field("PolicyList", &self.PolicyList)
            .field("CorrelationCount", &self.CorrelationCount)
            .field("Correlations", &self.Correlations)
            .field("MetricCount", &self.MetricCount)
            .field("Metrics", &self.Metrics)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.PlacementConstraints == other.PlacementConstraints
            && self.PolicyList == other.PolicyList
            && self.CorrelationCount == other.CorrelationCount
            && self.Correlations == other.Correlations
            && self.MetricCount == other.MetricCount
            && self.Metrics == other.Metrics
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX1 {}
impl Default for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX2 {
    pub DefaultMoveCost: FABRIC_MOVE_COST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX2 {}
impl Clone for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX2")
            .field("DefaultMoveCost", &self.DefaultMoveCost)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.DefaultMoveCost == other.DefaultMoveCost && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX2 {}
impl Default for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX3 {
    pub RepartitionKind: FABRIC_SERVICE_PARTITION_KIND,
    pub RepartitionDescription: *mut core::ffi::c_void,
    pub ScalingPolicyCount: u32,
    pub ServiceScalingPolicies: *mut FABRIC_SERVICE_SCALING_POLICY,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX3 {}
impl Clone for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX3")
            .field("RepartitionKind", &self.RepartitionKind)
            .field("RepartitionDescription", &self.RepartitionDescription)
            .field("ScalingPolicyCount", &self.ScalingPolicyCount)
            .field("ServiceScalingPolicies", &self.ServiceScalingPolicies)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.RepartitionKind == other.RepartitionKind
            && self.RepartitionDescription == other.RepartitionDescription
            && self.ScalingPolicyCount == other.ScalingPolicyCount
            && self.ServiceScalingPolicies == other.ServiceScalingPolicies
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX3 {}
impl Default for FABRIC_STATELESS_SERVICE_UPDATE_DESCRIPTION_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_STOPPED_EVENT {
    pub TimeStampUtc: windows::Win32::Foundation::FILETIME,
    pub Reason: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_STOPPED_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_STOPPED_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_STOPPED_EVENT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STOPPED_EVENT")
            .field("TimeStampUtc", &self.TimeStampUtc)
            .field("Reason", &self.Reason)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_STOPPED_EVENT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_STOPPED_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.TimeStampUtc == other.TimeStampUtc
            && self.Reason == other.Reason
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_STOPPED_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_STOPPED_EVENT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STOP_NODE_DESCRIPTION {
    pub NodeName: windows_core::PCWSTR,
    pub NodeInstanceId: u64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STOP_NODE_DESCRIPTION {}
impl Clone for FABRIC_STOP_NODE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STOP_NODE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STOP_NODE_DESCRIPTION")
            .field("NodeName", &self.NodeName)
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STOP_NODE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STOP_NODE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.NodeInstanceId == other.NodeInstanceId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STOP_NODE_DESCRIPTION {}
impl Default for FABRIC_STOP_NODE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STOP_NODE_DESCRIPTION2 {
    pub Kind: FABRIC_STOP_NODE_DESCRIPTION_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STOP_NODE_DESCRIPTION2 {}
impl Clone for FABRIC_STOP_NODE_DESCRIPTION2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STOP_NODE_DESCRIPTION2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STOP_NODE_DESCRIPTION2")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STOP_NODE_DESCRIPTION2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STOP_NODE_DESCRIPTION2 {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_STOP_NODE_DESCRIPTION2 {}
impl Default for FABRIC_STOP_NODE_DESCRIPTION2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME {
    pub NodeName: windows_core::PCWSTR,
    pub NodeInstanceId: u64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME {}
impl Clone for FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME")
            .field("NodeName", &self.NodeName)
            .field("NodeInstanceId", &self.NodeInstanceId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.NodeName == other.NodeName
            && self.NodeInstanceId == other.NodeInstanceId
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME {}
impl Default for FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STOP_NODE_STATUS {
    pub NodeResult: *mut FABRIC_NODE_RESULT,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STOP_NODE_STATUS {}
impl Clone for FABRIC_STOP_NODE_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STOP_NODE_STATUS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STOP_NODE_STATUS")
            .field("NodeResult", &self.NodeResult)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STOP_NODE_STATUS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STOP_NODE_STATUS {
    fn eq(&self, other: &Self) -> bool {
        self.NodeResult == other.NodeResult && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STOP_NODE_STATUS {}
impl Default for FABRIC_STOP_NODE_STATUS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STORE_BACKUP_INFO {
    pub BackupFolder: windows_core::PCWSTR,
    pub BackupOption: FABRIC_STORE_BACKUP_OPTION,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STORE_BACKUP_INFO {}
impl Clone for FABRIC_STORE_BACKUP_INFO {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STORE_BACKUP_INFO {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STORE_BACKUP_INFO")
            .field("BackupFolder", &self.BackupFolder)
            .field("BackupOption", &self.BackupOption)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STORE_BACKUP_INFO {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STORE_BACKUP_INFO {
    fn eq(&self, other: &Self) -> bool {
        self.BackupFolder == other.BackupFolder
            && self.BackupOption == other.BackupOption
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STORE_BACKUP_INFO {}
impl Default for FABRIC_STORE_BACKUP_INFO {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STORE_BACKUP_INFO_EX1 {
    pub BackupChainId: windows_core::GUID,
    pub BackupIndex: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_STORE_BACKUP_INFO_EX1 {}
impl Clone for FABRIC_STORE_BACKUP_INFO_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STORE_BACKUP_INFO_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STORE_BACKUP_INFO_EX1")
            .field("BackupChainId", &self.BackupChainId)
            .field("BackupIndex", &self.BackupIndex)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STORE_BACKUP_INFO_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STORE_BACKUP_INFO_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.BackupChainId == other.BackupChainId
            && self.BackupIndex == other.BackupIndex
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_STORE_BACKUP_INFO_EX1 {}
impl Default for FABRIC_STORE_BACKUP_INFO_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STRING_LIST {
    pub Count: u32,
    pub Items: *const windows_core::PCWSTR,
}
impl Copy for FABRIC_STRING_LIST {}
impl Clone for FABRIC_STRING_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STRING_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STRING_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STRING_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STRING_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_STRING_LIST {}
impl Default for FABRIC_STRING_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_STRING_MAP {
    pub Count: u32,
    pub Items: *const FABRIC_APPLICATION_PARAMETER,
}
impl Copy for FABRIC_STRING_MAP {}
impl Clone for FABRIC_STRING_MAP {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_STRING_MAP {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_STRING_MAP")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_STRING_MAP {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_STRING_MAP {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_STRING_MAP {}
impl Default for FABRIC_STRING_MAP {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SYSTEM_APPLICATION_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SYSTEM_APPLICATION_HEALTH_EVALUATION {}
impl Clone for FABRIC_SYSTEM_APPLICATION_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SYSTEM_APPLICATION_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SYSTEM_APPLICATION_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SYSTEM_APPLICATION_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SYSTEM_APPLICATION_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SYSTEM_APPLICATION_HEALTH_EVALUATION {}
impl Default for FABRIC_SYSTEM_APPLICATION_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_SYSTEM_SERVICE_QUERY_DESCRIPTION {
    pub SystemServiceNameFilter: *mut u16,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_SYSTEM_SERVICE_QUERY_DESCRIPTION {}
impl Clone for FABRIC_SYSTEM_SERVICE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_SYSTEM_SERVICE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_SYSTEM_SERVICE_QUERY_DESCRIPTION")
            .field("SystemServiceNameFilter", &self.SystemServiceNameFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_SYSTEM_SERVICE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_SYSTEM_SERVICE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.SystemServiceNameFilter == other.SystemServiceNameFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_SYSTEM_SERVICE_QUERY_DESCRIPTION {}
impl Default for FABRIC_SYSTEM_SERVICE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_TEST_COMMAND_LIST_DESCRIPTION {
    pub TestCommandStateFilter: FABRIC_TEST_COMMAND_STATE_FILTER,
    pub TestCommandTypeFilter: FABRIC_TEST_COMMAND_TYPE_FILTER,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_TEST_COMMAND_LIST_DESCRIPTION {}
impl Clone for FABRIC_TEST_COMMAND_LIST_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_TEST_COMMAND_LIST_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_TEST_COMMAND_LIST_DESCRIPTION")
            .field("TestCommandStateFilter", &self.TestCommandStateFilter)
            .field("TestCommandTypeFilter", &self.TestCommandTypeFilter)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_TEST_COMMAND_LIST_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_TEST_COMMAND_LIST_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.TestCommandStateFilter == other.TestCommandStateFilter
            && self.TestCommandTypeFilter == other.TestCommandTypeFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_TEST_COMMAND_LIST_DESCRIPTION {}
impl Default for FABRIC_TEST_COMMAND_LIST_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_TEST_ERROR_EVENT {
    pub TimeStampUtc: windows::Win32::Foundation::FILETIME,
    pub Reason: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_TEST_ERROR_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_TEST_ERROR_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_TEST_ERROR_EVENT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_TEST_ERROR_EVENT")
            .field("TimeStampUtc", &self.TimeStampUtc)
            .field("Reason", &self.Reason)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_TEST_ERROR_EVENT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_TEST_ERROR_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.TimeStampUtc == other.TimeStampUtc
            && self.Reason == other.Reason
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_TEST_ERROR_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_TEST_ERROR_EVENT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UNIFORM_INT64_RANGE_PARTITION_SCHEME_DESCRIPTION {
    pub PartitionCount: i32,
    pub LowKey: i64,
    pub HighKey: i64,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UNIFORM_INT64_RANGE_PARTITION_SCHEME_DESCRIPTION {}
impl Clone for FABRIC_UNIFORM_INT64_RANGE_PARTITION_SCHEME_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UNIFORM_INT64_RANGE_PARTITION_SCHEME_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UNIFORM_INT64_RANGE_PARTITION_SCHEME_DESCRIPTION")
            .field("PartitionCount", &self.PartitionCount)
            .field("LowKey", &self.LowKey)
            .field("HighKey", &self.HighKey)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UNIFORM_INT64_RANGE_PARTITION_SCHEME_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UNIFORM_INT64_RANGE_PARTITION_SCHEME_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionCount == other.PartitionCount
            && self.LowKey == other.LowKey
            && self.HighKey == other.HighKey
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UNIFORM_INT64_RANGE_PARTITION_SCHEME_DESCRIPTION {}
impl Default for FABRIC_UNIFORM_INT64_RANGE_PARTITION_SCHEME_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UNPLACED_REPLICA_INFORMATION {
    pub ServiceName: *mut u16,
    pub PartitionId: windows_core::GUID,
    pub UnplacedReplicaReasons: *const FABRIC_STRING_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UNPLACED_REPLICA_INFORMATION {}
impl Clone for FABRIC_UNPLACED_REPLICA_INFORMATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UNPLACED_REPLICA_INFORMATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UNPLACED_REPLICA_INFORMATION")
            .field("ServiceName", &self.ServiceName)
            .field("PartitionId", &self.PartitionId)
            .field("UnplacedReplicaReasons", &self.UnplacedReplicaReasons)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UNPLACED_REPLICA_INFORMATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UNPLACED_REPLICA_INFORMATION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.PartitionId == other.PartitionId
            && self.UnplacedReplicaReasons == other.UnplacedReplicaReasons
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UNPLACED_REPLICA_INFORMATION {}
impl Default for FABRIC_UNPLACED_REPLICA_INFORMATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UNPLACED_REPLICA_INFORMATION_LIST {
    pub Count: u32,
    pub Items: *const windows_core::PCWSTR,
}
impl Copy for FABRIC_UNPLACED_REPLICA_INFORMATION_LIST {}
impl Clone for FABRIC_UNPLACED_REPLICA_INFORMATION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UNPLACED_REPLICA_INFORMATION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UNPLACED_REPLICA_INFORMATION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UNPLACED_REPLICA_INFORMATION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UNPLACED_REPLICA_INFORMATION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_UNPLACED_REPLICA_INFORMATION_LIST {}
impl Default for FABRIC_UNPLACED_REPLICA_INFORMATION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION {
    pub ServiceName: *mut u16,
    pub PartitionId: windows_core::GUID,
    pub OnlyQueryPrimaries: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION")
            .field("ServiceName", &self.ServiceName)
            .field("PartitionId", &self.PartitionId)
            .field("OnlyQueryPrimaries", &self.OnlyQueryPrimaries)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ServiceName == other.ServiceName
            && self.PartitionId == other.PartitionId
            && self.OnlyQueryPrimaries == other.OnlyQueryPrimaries
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_UNPLACED_REPLICA_INFORMATION_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION {
    pub ApplicationTypeName: windows_core::PCWSTR,
    pub ApplicationTypeVersion: windows_core::PCWSTR,
    pub Async: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION")
            .field("ApplicationTypeName", &self.ApplicationTypeName)
            .field("ApplicationTypeVersion", &self.ApplicationTypeVersion)
            .field("Async", &self.Async)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeName == other.ApplicationTypeName
            && self.ApplicationTypeVersion == other.ApplicationTypeVersion
            && self.Async == other.Async
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_UNPROVISION_APPLICATION_TYPE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_DESCRIPTION {
    pub CodeVersion: windows_core::PCWSTR,
    pub ConfigVersion: windows_core::PCWSTR,
    pub UpgradeKind: FABRIC_UPGRADE_KIND,
    pub UpgradePolicyDescription: *mut core::ffi::c_void,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_DESCRIPTION {}
impl Clone for FABRIC_UPGRADE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_DESCRIPTION")
            .field("CodeVersion", &self.CodeVersion)
            .field("ConfigVersion", &self.ConfigVersion)
            .field("UpgradeKind", &self.UpgradeKind)
            .field("UpgradePolicyDescription", &self.UpgradePolicyDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.CodeVersion == other.CodeVersion
            && self.ConfigVersion == other.ConfigVersion
            && self.UpgradeKind == other.UpgradeKind
            && self.UpgradePolicyDescription == other.UpgradePolicyDescription
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_DESCRIPTION {}
impl Default for FABRIC_UPGRADE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_DOMAIN_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UpgradeDomainName: windows_core::PCWSTR,
    pub BaselineErrorCount: u32,
    pub BaselineTotalCount: u32,
    pub TotalCount: u32,
    pub MaxPercentUpgradeDomainDeltaUnhealthyNodes: u8,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_DOMAIN_DELTA_NODES_CHECK_HEALTH_EVALUATION {}
impl Clone for FABRIC_UPGRADE_DOMAIN_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_DOMAIN_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_DOMAIN_DELTA_NODES_CHECK_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UpgradeDomainName", &self.UpgradeDomainName)
            .field("BaselineErrorCount", &self.BaselineErrorCount)
            .field("BaselineTotalCount", &self.BaselineTotalCount)
            .field("TotalCount", &self.TotalCount)
            .field(
                "MaxPercentUpgradeDomainDeltaUnhealthyNodes",
                &self.MaxPercentUpgradeDomainDeltaUnhealthyNodes,
            )
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_DOMAIN_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_DOMAIN_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UpgradeDomainName == other.UpgradeDomainName
            && self.BaselineErrorCount == other.BaselineErrorCount
            && self.BaselineTotalCount == other.BaselineTotalCount
            && self.TotalCount == other.TotalCount
            && self.MaxPercentUpgradeDomainDeltaUnhealthyNodes
                == other.MaxPercentUpgradeDomainDeltaUnhealthyNodes
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_DOMAIN_DELTA_NODES_CHECK_HEALTH_EVALUATION {}
impl Default for FABRIC_UPGRADE_DOMAIN_DELTA_NODES_CHECK_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UpgradeDomainName: windows_core::PCWSTR,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub TotalCount: u32,
    pub MaxPercentUnhealthyDeployedApplications: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {}
impl Clone for FABRIC_UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UpgradeDomainName", &self.UpgradeDomainName)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("TotalCount", &self.TotalCount)
            .field(
                "MaxPercentUnhealthyDeployedApplications",
                &self.MaxPercentUnhealthyDeployedApplications,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UpgradeDomainName == other.UpgradeDomainName
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.TotalCount == other.TotalCount
            && self.MaxPercentUnhealthyDeployedApplications
                == other.MaxPercentUnhealthyDeployedApplications
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {}
impl Default for FABRIC_UPGRADE_DOMAIN_DEPLOYED_APPLICATIONS_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_DOMAIN_NODES_HEALTH_EVALUATION {
    pub Description: windows_core::PCWSTR,
    pub AggregatedHealthState: FABRIC_HEALTH_STATE,
    pub UpgradeDomainName: windows_core::PCWSTR,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub TotalCount: u32,
    pub MaxPercentUnhealthyNodes: u8,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_DOMAIN_NODES_HEALTH_EVALUATION {}
impl Clone for FABRIC_UPGRADE_DOMAIN_NODES_HEALTH_EVALUATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_DOMAIN_NODES_HEALTH_EVALUATION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_DOMAIN_NODES_HEALTH_EVALUATION")
            .field("Description", &self.Description)
            .field("AggregatedHealthState", &self.AggregatedHealthState)
            .field("UpgradeDomainName", &self.UpgradeDomainName)
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field("TotalCount", &self.TotalCount)
            .field("MaxPercentUnhealthyNodes", &self.MaxPercentUnhealthyNodes)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_DOMAIN_NODES_HEALTH_EVALUATION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_DOMAIN_NODES_HEALTH_EVALUATION {
    fn eq(&self, other: &Self) -> bool {
        self.Description == other.Description
            && self.AggregatedHealthState == other.AggregatedHealthState
            && self.UpgradeDomainName == other.UpgradeDomainName
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.TotalCount == other.TotalCount
            && self.MaxPercentUnhealthyNodes == other.MaxPercentUnhealthyNodes
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_DOMAIN_NODES_HEALTH_EVALUATION {}
impl Default for FABRIC_UPGRADE_DOMAIN_NODES_HEALTH_EVALUATION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_DOMAIN_PROGRESS {
    pub UpgradeDomainName: windows_core::PCWSTR,
    pub NodeProgressList: *mut FABRIC_NODE_UPGRADE_PROGRESS_LIST,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_DOMAIN_PROGRESS {}
impl Clone for FABRIC_UPGRADE_DOMAIN_PROGRESS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_DOMAIN_PROGRESS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_DOMAIN_PROGRESS")
            .field("UpgradeDomainName", &self.UpgradeDomainName)
            .field("NodeProgressList", &self.NodeProgressList)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_DOMAIN_PROGRESS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_DOMAIN_PROGRESS {
    fn eq(&self, other: &Self) -> bool {
        self.UpgradeDomainName == other.UpgradeDomainName
            && self.NodeProgressList == other.NodeProgressList
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_DOMAIN_PROGRESS {}
impl Default for FABRIC_UPGRADE_DOMAIN_PROGRESS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION {
    pub Name: windows_core::PCWSTR,
    pub State: FABRIC_UPGRADE_DOMAIN_STATE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION {}
impl Clone for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION")
            .field("Name", &self.Name)
            .field("State", &self.State)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name && self.State == other.State && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION {}
impl Default for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION,
}
impl Copy for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST {}
impl Clone for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST {}
impl Default for FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE {
    pub CurrentCodeVersion: windows_core::PCWSTR,
    pub CurrentManifestVersion: windows_core::PCWSTR,
    pub TargetCodeVersion: windows_core::PCWSTR,
    pub TargetManifestVersion: windows_core::PCWSTR,
    pub PendingUpgradeType: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE {}
impl Clone for FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE")
            .field("CurrentCodeVersion", &self.CurrentCodeVersion)
            .field("CurrentManifestVersion", &self.CurrentManifestVersion)
            .field("TargetCodeVersion", &self.TargetCodeVersion)
            .field("TargetManifestVersion", &self.TargetManifestVersion)
            .field("PendingUpgradeType", &self.PendingUpgradeType)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE {
    fn eq(&self, other: &Self) -> bool {
        self.CurrentCodeVersion == other.CurrentCodeVersion
            && self.CurrentManifestVersion == other.CurrentManifestVersion
            && self.TargetCodeVersion == other.TargetCodeVersion
            && self.TargetManifestVersion == other.TargetManifestVersion
            && self.PendingUpgradeType == other.PendingUpgradeType
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE {}
impl Default for FABRIC_UPGRADE_ORCHESTRATION_SERVICE_STATE {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_PARTITION_SAFETY_CHECK {
    pub PartitionId: windows_core::GUID,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_PARTITION_SAFETY_CHECK {}
impl Clone for FABRIC_UPGRADE_PARTITION_SAFETY_CHECK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_PARTITION_SAFETY_CHECK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_PARTITION_SAFETY_CHECK")
            .field("PartitionId", &self.PartitionId)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_PARTITION_SAFETY_CHECK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_PARTITION_SAFETY_CHECK {
    fn eq(&self, other: &Self) -> bool {
        self.PartitionId == other.PartitionId && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_PARTITION_SAFETY_CHECK {}
impl Default for FABRIC_UPGRADE_PARTITION_SAFETY_CHECK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_PROGRESS {
    pub UpgradeDescription: *const FABRIC_UPGRADE_DESCRIPTION,
    pub UpgradeState: FABRIC_UPGRADE_STATE,
    pub UpgradeMode: FABRIC_ROLLING_UPGRADE_MODE,
    pub NextUpgradeDomain: windows_core::PCWSTR,
    pub UpgradeDomains: *const FABRIC_UPGRADE_DOMAIN_STATUS_DESCRIPTION_LIST,
    pub UpgradeDurationInSeconds: u32,
    pub CurrentUpgradeDomainDurationInSeconds: u32,
    pub UnhealthyEvaluations: *const FABRIC_HEALTH_EVALUATION_LIST,
    pub CurrentUpgradeDomainProgress: *const FABRIC_UPGRADE_DOMAIN_PROGRESS,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_PROGRESS {}
impl Clone for FABRIC_UPGRADE_PROGRESS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_PROGRESS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_PROGRESS")
            .field("UpgradeDescription", &self.UpgradeDescription)
            .field("UpgradeState", &self.UpgradeState)
            .field("UpgradeMode", &self.UpgradeMode)
            .field("NextUpgradeDomain", &self.NextUpgradeDomain)
            .field("UpgradeDomains", &self.UpgradeDomains)
            .field("UpgradeDurationInSeconds", &self.UpgradeDurationInSeconds)
            .field(
                "CurrentUpgradeDomainDurationInSeconds",
                &self.CurrentUpgradeDomainDurationInSeconds,
            )
            .field("UnhealthyEvaluations", &self.UnhealthyEvaluations)
            .field(
                "CurrentUpgradeDomainProgress",
                &self.CurrentUpgradeDomainProgress,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_PROGRESS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_PROGRESS {
    fn eq(&self, other: &Self) -> bool {
        self.UpgradeDescription == other.UpgradeDescription
            && self.UpgradeState == other.UpgradeState
            && self.UpgradeMode == other.UpgradeMode
            && self.NextUpgradeDomain == other.NextUpgradeDomain
            && self.UpgradeDomains == other.UpgradeDomains
            && self.UpgradeDurationInSeconds == other.UpgradeDurationInSeconds
            && self.CurrentUpgradeDomainDurationInSeconds
                == other.CurrentUpgradeDomainDurationInSeconds
            && self.UnhealthyEvaluations == other.UnhealthyEvaluations
            && self.CurrentUpgradeDomainProgress == other.CurrentUpgradeDomainProgress
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_PROGRESS {}
impl Default for FABRIC_UPGRADE_PROGRESS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_UPGRADE_PROGRESS_EX1 {
    pub StartTimestampUtc: windows::Win32::Foundation::FILETIME,
    pub FailureTimestampUtc: windows::Win32::Foundation::FILETIME,
    pub FailureReason: FABRIC_UPGRADE_FAILURE_REASON,
    pub UpgradeDomainProgressAtFailure: *const FABRIC_UPGRADE_DOMAIN_PROGRESS,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_UPGRADE_PROGRESS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_UPGRADE_PROGRESS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_UPGRADE_PROGRESS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_PROGRESS_EX1")
            .field("StartTimestampUtc", &self.StartTimestampUtc)
            .field("FailureTimestampUtc", &self.FailureTimestampUtc)
            .field("FailureReason", &self.FailureReason)
            .field(
                "UpgradeDomainProgressAtFailure",
                &self.UpgradeDomainProgressAtFailure,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_UPGRADE_PROGRESS_EX1 {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_UPGRADE_PROGRESS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.StartTimestampUtc == other.StartTimestampUtc
            && self.FailureTimestampUtc == other.FailureTimestampUtc
            && self.FailureReason == other.FailureReason
            && self.UpgradeDomainProgressAtFailure == other.UpgradeDomainProgressAtFailure
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_UPGRADE_PROGRESS_EX1 {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_UPGRADE_PROGRESS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_SAFETY_CHECK {
    pub Kind: FABRIC_UPGRADE_SAFETY_CHECK_KIND,
    pub Value: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_SAFETY_CHECK {}
impl Clone for FABRIC_UPGRADE_SAFETY_CHECK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_SAFETY_CHECK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_SAFETY_CHECK")
            .field("Kind", &self.Kind)
            .field("Value", &self.Value)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_SAFETY_CHECK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_SAFETY_CHECK {
    fn eq(&self, other: &Self) -> bool {
        self.Kind == other.Kind && self.Value == other.Value
    }
}
impl Eq for FABRIC_UPGRADE_SAFETY_CHECK {}
impl Default for FABRIC_UPGRADE_SAFETY_CHECK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_SAFETY_CHECK_LIST {
    pub Count: u32,
    pub Items: *const FABRIC_UPGRADE_SAFETY_CHECK,
}
impl Copy for FABRIC_UPGRADE_SAFETY_CHECK_LIST {}
impl Clone for FABRIC_UPGRADE_SAFETY_CHECK_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_SAFETY_CHECK_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_SAFETY_CHECK_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_SAFETY_CHECK_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_SAFETY_CHECK_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for FABRIC_UPGRADE_SAFETY_CHECK_LIST {}
impl Default for FABRIC_UPGRADE_SAFETY_CHECK_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK {
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK {}
impl Clone for FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK")
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK {
    fn eq(&self, other: &Self) -> bool {
        self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK {}
impl Default for FABRIC_UPGRADE_SEED_NODE_SAFETY_CHECK {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_UPGRADE_UPDATE_DESCRIPTION {
    pub UpgradeKind: FABRIC_UPGRADE_KIND,
    pub UpdateFlags: u32,
    pub UpgradePolicyDescription: *mut core::ffi::c_void,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_UPGRADE_UPDATE_DESCRIPTION {}
impl Clone for FABRIC_UPGRADE_UPDATE_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_UPGRADE_UPDATE_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_UPGRADE_UPDATE_DESCRIPTION")
            .field("UpgradeKind", &self.UpgradeKind)
            .field("UpdateFlags", &self.UpdateFlags)
            .field("UpgradePolicyDescription", &self.UpgradePolicyDescription)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_UPGRADE_UPDATE_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_UPGRADE_UPDATE_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.UpgradeKind == other.UpgradeKind
            && self.UpdateFlags == other.UpdateFlags
            && self.UpgradePolicyDescription == other.UpgradePolicyDescription
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_UPGRADE_UPDATE_DESCRIPTION {}
impl Default for FABRIC_UPGRADE_UPDATE_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_VALIDATION_FAILED_EVENT {
    pub TimeStampUtc: windows::Win32::Foundation::FILETIME,
    pub Reason: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_VALIDATION_FAILED_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_VALIDATION_FAILED_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_VALIDATION_FAILED_EVENT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_VALIDATION_FAILED_EVENT")
            .field("TimeStampUtc", &self.TimeStampUtc)
            .field("Reason", &self.Reason)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_VALIDATION_FAILED_EVENT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_VALIDATION_FAILED_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.TimeStampUtc == other.TimeStampUtc
            && self.Reason == other.Reason
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_VALIDATION_FAILED_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_VALIDATION_FAILED_EVENT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct FABRIC_WAITING_EVENT {
    pub TimeStampUtc: windows::Win32::Foundation::FILETIME,
    pub Reason: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for FABRIC_WAITING_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for FABRIC_WAITING_EVENT {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for FABRIC_WAITING_EVENT {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_WAITING_EVENT")
            .field("TimeStampUtc", &self.TimeStampUtc)
            .field("Reason", &self.Reason)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for FABRIC_WAITING_EVENT {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for FABRIC_WAITING_EVENT {
    fn eq(&self, other: &Self) -> bool {
        self.TimeStampUtc == other.TimeStampUtc
            && self.Reason == other.Reason
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for FABRIC_WAITING_EVENT {}
#[cfg(feature = "Win32_Foundation")]
impl Default for FABRIC_WAITING_EVENT {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_WINDOWS_CREDENTIALS {
    pub RemoteSpn: windows_core::PCWSTR,
    pub RemoteIdentityCount: u32,
    pub RemoteIdentities: *const windows_core::PCWSTR,
    pub ProtectionLevel: FABRIC_PROTECTION_LEVEL,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_WINDOWS_CREDENTIALS {}
impl Clone for FABRIC_WINDOWS_CREDENTIALS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_WINDOWS_CREDENTIALS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_WINDOWS_CREDENTIALS")
            .field("RemoteSpn", &self.RemoteSpn)
            .field("RemoteIdentityCount", &self.RemoteIdentityCount)
            .field("RemoteIdentities", &self.RemoteIdentities)
            .field("ProtectionLevel", &self.ProtectionLevel)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_WINDOWS_CREDENTIALS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_WINDOWS_CREDENTIALS {
    fn eq(&self, other: &Self) -> bool {
        self.RemoteSpn == other.RemoteSpn
            && self.RemoteIdentityCount == other.RemoteIdentityCount
            && self.RemoteIdentities == other.RemoteIdentities
            && self.ProtectionLevel == other.ProtectionLevel
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_WINDOWS_CREDENTIALS {}
impl Default for FABRIC_WINDOWS_CREDENTIALS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_X509_CREDENTIALS {
    pub AllowedCommonNameCount: u32,
    pub AllowedCommonNames: *const windows_core::PCWSTR,
    pub FindType: FABRIC_X509_FIND_TYPE,
    pub FindValue: *mut core::ffi::c_void,
    pub StoreLocation: FABRIC_X509_STORE_LOCATION,
    pub StoreName: windows_core::PCWSTR,
    pub ProtectionLevel: FABRIC_PROTECTION_LEVEL,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_X509_CREDENTIALS {}
impl Clone for FABRIC_X509_CREDENTIALS {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_X509_CREDENTIALS {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_X509_CREDENTIALS")
            .field("AllowedCommonNameCount", &self.AllowedCommonNameCount)
            .field("AllowedCommonNames", &self.AllowedCommonNames)
            .field("FindType", &self.FindType)
            .field("FindValue", &self.FindValue)
            .field("StoreLocation", &self.StoreLocation)
            .field("StoreName", &self.StoreName)
            .field("ProtectionLevel", &self.ProtectionLevel)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_X509_CREDENTIALS {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_X509_CREDENTIALS {
    fn eq(&self, other: &Self) -> bool {
        self.AllowedCommonNameCount == other.AllowedCommonNameCount
            && self.AllowedCommonNames == other.AllowedCommonNames
            && self.FindType == other.FindType
            && self.FindValue == other.FindValue
            && self.StoreLocation == other.StoreLocation
            && self.StoreName == other.StoreName
            && self.ProtectionLevel == other.ProtectionLevel
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_X509_CREDENTIALS {}
impl Default for FABRIC_X509_CREDENTIALS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_X509_CREDENTIALS2 {
    pub CertLoadPath: windows_core::PCWSTR,
    pub RemoteCertThumbprintCount: u32,
    pub RemoteCertThumbprints: *const windows_core::PCWSTR,
    pub RemoteX509NameCount: u32,
    pub RemoteX509Names: *mut FABRIC_X509_NAME,
    pub ProtectionLevel: FABRIC_PROTECTION_LEVEL,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_X509_CREDENTIALS2 {}
impl Clone for FABRIC_X509_CREDENTIALS2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_X509_CREDENTIALS2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_X509_CREDENTIALS2")
            .field("CertLoadPath", &self.CertLoadPath)
            .field("RemoteCertThumbprintCount", &self.RemoteCertThumbprintCount)
            .field("RemoteCertThumbprints", &self.RemoteCertThumbprints)
            .field("RemoteX509NameCount", &self.RemoteX509NameCount)
            .field("RemoteX509Names", &self.RemoteX509Names)
            .field("ProtectionLevel", &self.ProtectionLevel)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_X509_CREDENTIALS2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_X509_CREDENTIALS2 {
    fn eq(&self, other: &Self) -> bool {
        self.CertLoadPath == other.CertLoadPath
            && self.RemoteCertThumbprintCount == other.RemoteCertThumbprintCount
            && self.RemoteCertThumbprints == other.RemoteCertThumbprints
            && self.RemoteX509NameCount == other.RemoteX509NameCount
            && self.RemoteX509Names == other.RemoteX509Names
            && self.ProtectionLevel == other.ProtectionLevel
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_X509_CREDENTIALS2 {}
impl Default for FABRIC_X509_CREDENTIALS2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_X509_CREDENTIALS_EX1 {
    pub IssuerThumbprintCount: u32,
    pub IssuerThumbprints: *const windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_X509_CREDENTIALS_EX1 {}
impl Clone for FABRIC_X509_CREDENTIALS_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_X509_CREDENTIALS_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_X509_CREDENTIALS_EX1")
            .field("IssuerThumbprintCount", &self.IssuerThumbprintCount)
            .field("IssuerThumbprints", &self.IssuerThumbprints)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_X509_CREDENTIALS_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_X509_CREDENTIALS_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.IssuerThumbprintCount == other.IssuerThumbprintCount
            && self.IssuerThumbprints == other.IssuerThumbprints
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_X509_CREDENTIALS_EX1 {}
impl Default for FABRIC_X509_CREDENTIALS_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_X509_CREDENTIALS_EX2 {
    pub RemoteCertThumbprintCount: u32,
    pub RemoteCertThumbprints: *const windows_core::PCWSTR,
    pub RemoteX509NameCount: u32,
    pub RemoteX509Names: *mut FABRIC_X509_NAME,
    pub FindValueSecondary: *mut core::ffi::c_void,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_X509_CREDENTIALS_EX2 {}
impl Clone for FABRIC_X509_CREDENTIALS_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_X509_CREDENTIALS_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_X509_CREDENTIALS_EX2")
            .field("RemoteCertThumbprintCount", &self.RemoteCertThumbprintCount)
            .field("RemoteCertThumbprints", &self.RemoteCertThumbprints)
            .field("RemoteX509NameCount", &self.RemoteX509NameCount)
            .field("RemoteX509Names", &self.RemoteX509Names)
            .field("FindValueSecondary", &self.FindValueSecondary)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_X509_CREDENTIALS_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_X509_CREDENTIALS_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.RemoteCertThumbprintCount == other.RemoteCertThumbprintCount
            && self.RemoteCertThumbprints == other.RemoteCertThumbprints
            && self.RemoteX509NameCount == other.RemoteX509NameCount
            && self.RemoteX509Names == other.RemoteX509Names
            && self.FindValueSecondary == other.FindValueSecondary
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_X509_CREDENTIALS_EX2 {}
impl Default for FABRIC_X509_CREDENTIALS_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_X509_CREDENTIALS_EX3 {
    pub RemoteCertIssuerCount: u32,
    pub RemoteCertIssuers: *mut FABRIC_X509_ISSUER_NAME,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_X509_CREDENTIALS_EX3 {}
impl Clone for FABRIC_X509_CREDENTIALS_EX3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_X509_CREDENTIALS_EX3 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_X509_CREDENTIALS_EX3")
            .field("RemoteCertIssuerCount", &self.RemoteCertIssuerCount)
            .field("RemoteCertIssuers", &self.RemoteCertIssuers)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_X509_CREDENTIALS_EX3 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_X509_CREDENTIALS_EX3 {
    fn eq(&self, other: &Self) -> bool {
        self.RemoteCertIssuerCount == other.RemoteCertIssuerCount
            && self.RemoteCertIssuers == other.RemoteCertIssuers
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_X509_CREDENTIALS_EX3 {}
impl Default for FABRIC_X509_CREDENTIALS_EX3 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_X509_ISSUER_NAME {
    pub Name: windows_core::PCWSTR,
    pub IssuerStoreCount: u32,
    pub IssuerStores: *const windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_X509_ISSUER_NAME {}
impl Clone for FABRIC_X509_ISSUER_NAME {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_X509_ISSUER_NAME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_X509_ISSUER_NAME")
            .field("Name", &self.Name)
            .field("IssuerStoreCount", &self.IssuerStoreCount)
            .field("IssuerStores", &self.IssuerStores)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_X509_ISSUER_NAME {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_X509_ISSUER_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.IssuerStoreCount == other.IssuerStoreCount
            && self.IssuerStores == other.IssuerStores
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_X509_ISSUER_NAME {}
impl Default for FABRIC_X509_ISSUER_NAME {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct FABRIC_X509_NAME {
    pub Name: windows_core::PCWSTR,
    pub IssuerCertThumbprint: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for FABRIC_X509_NAME {}
impl Clone for FABRIC_X509_NAME {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for FABRIC_X509_NAME {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("FABRIC_X509_NAME")
            .field("Name", &self.Name)
            .field("IssuerCertThumbprint", &self.IssuerCertThumbprint)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for FABRIC_X509_NAME {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for FABRIC_X509_NAME {
    fn eq(&self, other: &Self) -> bool {
        self.Name == other.Name
            && self.IssuerCertThumbprint == other.IssuerCertThumbprint
            && self.Reserved == other.Reserved
    }
}
impl Eq for FABRIC_X509_NAME {}
impl Default for FABRIC_X509_NAME {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[cfg(feature = "Win32_Foundation")]
pub struct PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    pub ApplicationTypeNameFilter: windows_core::PCWSTR,
    pub MaxResults: i32,
    pub ContinuationToken: windows_core::PCWSTR,
    pub ExcludeApplicationParameters: windows::Win32::Foundation::BOOLEAN,
    pub Reserved: *mut core::ffi::c_void,
}
#[cfg(feature = "Win32_Foundation")]
impl Copy for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Clone for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    fn clone(&self) -> Self {
        *self
    }
}
#[cfg(feature = "Win32_Foundation")]
impl core::fmt::Debug for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION")
            .field("ApplicationTypeNameFilter", &self.ApplicationTypeNameFilter)
            .field("MaxResults", &self.MaxResults)
            .field("ContinuationToken", &self.ContinuationToken)
            .field(
                "ExcludeApplicationParameters",
                &self.ExcludeApplicationParameters,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
#[cfg(feature = "Win32_Foundation")]
impl windows_core::TypeKind for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    type TypeKind = windows_core::CopyType;
}
#[cfg(feature = "Win32_Foundation")]
impl PartialEq for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeNameFilter == other.ApplicationTypeNameFilter
            && self.MaxResults == other.MaxResults
            && self.ContinuationToken == other.ContinuationToken
            && self.ExcludeApplicationParameters == other.ExcludeApplicationParameters
            && self.Reserved == other.Reserved
    }
}
#[cfg(feature = "Win32_Foundation")]
impl Eq for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {}
#[cfg(feature = "Win32_Foundation")]
impl Default for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX1 {
    pub ApplicationTypeVersionFilter: windows_core::PCWSTR,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX1 {}
impl Clone for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX1 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX1 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX1")
            .field(
                "ApplicationTypeVersionFilter",
                &self.ApplicationTypeVersionFilter,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX1 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX1 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeVersionFilter == other.ApplicationTypeVersionFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX1 {}
impl Default for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX1 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX2 {
    pub ApplicationTypeDefinitionKindFilter: u32,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX2 {}
impl Clone for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX2 {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX2")
            .field(
                "ApplicationTypeDefinitionKindFilter",
                &self.ApplicationTypeDefinitionKindFilter,
            )
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX2 {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX2 {
    fn eq(&self, other: &Self) -> bool {
        self.ApplicationTypeDefinitionKindFilter == other.ApplicationTypeDefinitionKindFilter
            && self.Reserved == other.Reserved
    }
}
impl Eq for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX2 {}
impl Default for PAGED_FABRIC_APPLICATION_TYPE_QUERY_DESCRIPTION_EX2 {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct TEST_COMMAND_QUERY_RESULT_ITEM {
    pub OperationId: windows_core::GUID,
    pub TestCommandState: FABRIC_TEST_COMMAND_PROGRESS_STATE,
    pub TestCommandType: FABRIC_TEST_COMMAND_TYPE,
    pub Reserved: *mut core::ffi::c_void,
}
impl Copy for TEST_COMMAND_QUERY_RESULT_ITEM {}
impl Clone for TEST_COMMAND_QUERY_RESULT_ITEM {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for TEST_COMMAND_QUERY_RESULT_ITEM {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("TEST_COMMAND_QUERY_RESULT_ITEM")
            .field("OperationId", &self.OperationId)
            .field("TestCommandState", &self.TestCommandState)
            .field("TestCommandType", &self.TestCommandType)
            .field("Reserved", &self.Reserved)
            .finish()
    }
}
impl windows_core::TypeKind for TEST_COMMAND_QUERY_RESULT_ITEM {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for TEST_COMMAND_QUERY_RESULT_ITEM {
    fn eq(&self, other: &Self) -> bool {
        self.OperationId == other.OperationId
            && self.TestCommandState == other.TestCommandState
            && self.TestCommandType == other.TestCommandType
            && self.Reserved == other.Reserved
    }
}
impl Eq for TEST_COMMAND_QUERY_RESULT_ITEM {}
impl Default for TEST_COMMAND_QUERY_RESULT_ITEM {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
pub struct TEST_COMMAND_QUERY_RESULT_LIST {
    pub Count: u32,
    pub Items: *mut core::ffi::c_void,
}
impl Copy for TEST_COMMAND_QUERY_RESULT_LIST {}
impl Clone for TEST_COMMAND_QUERY_RESULT_LIST {
    fn clone(&self) -> Self {
        *self
    }
}
impl core::fmt::Debug for TEST_COMMAND_QUERY_RESULT_LIST {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.debug_struct("TEST_COMMAND_QUERY_RESULT_LIST")
            .field("Count", &self.Count)
            .field("Items", &self.Items)
            .finish()
    }
}
impl windows_core::TypeKind for TEST_COMMAND_QUERY_RESULT_LIST {
    type TypeKind = windows_core::CopyType;
}
impl PartialEq for TEST_COMMAND_QUERY_RESULT_LIST {
    fn eq(&self, other: &Self) -> bool {
        self.Count == other.Count && self.Items == other.Items
    }
}
impl Eq for TEST_COMMAND_QUERY_RESULT_LIST {}
impl Default for TEST_COMMAND_QUERY_RESULT_LIST {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
