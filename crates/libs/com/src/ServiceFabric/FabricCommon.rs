// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
#[inline]
pub unsafe fn FabricDecryptText<P0>(
    encryptedtext: P0,
    certstorelocation: super::FabricTypes::FABRIC_X509_STORE_LOCATION,
) -> windows_core::Result<IFabricStringResult>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
{
    #[link(name = "FabricCommon")]
    extern "system" {
        pub fn FabricDecryptText(
            encryptedtext: windows_core::PCWSTR,
            certstorelocation: super::FabricTypes::FABRIC_X509_STORE_LOCATION,
            decryptedtext: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricDecryptText(
        encryptedtext.param().abi(),
        certstorelocation,
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricDecryptValue<P0>(
    encryptedvalue: P0,
) -> windows_core::Result<IFabricStringResult>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
{
    #[link(name = "FabricCommon")]
    extern "system" {
        pub fn FabricDecryptValue(
            encryptedvalue: windows_core::PCWSTR,
            decryptedvalue: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricDecryptValue(encryptedvalue.param().abi(), &mut result__)
        .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricEncryptText<P0, P1, P2, P3>(
    text: P0,
    certthumbprint: P1,
    certstorename: P2,
    certstorelocation: super::FabricTypes::FABRIC_X509_STORE_LOCATION,
    algorithmoid: P3,
) -> windows_core::Result<IFabricStringResult>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
    P1: windows_core::Param<windows_core::PCWSTR>,
    P2: windows_core::Param<windows_core::PCWSTR>,
    P3: windows_core::Param<windows_core::PCSTR>,
{
    #[link(name = "FabricCommon")]
    extern "system" {
        pub fn FabricEncryptText(
            text: windows_core::PCWSTR,
            certthumbprint: windows_core::PCWSTR,
            certstorename: windows_core::PCWSTR,
            certstorelocation: super::FabricTypes::FABRIC_X509_STORE_LOCATION,
            algorithmoid: windows_core::PCSTR,
            encryptedvalue: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricEncryptText(
        text.param().abi(),
        certthumbprint.param().abi(),
        certstorename.param().abi(),
        certstorelocation,
        algorithmoid.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricEncryptText2<P0, P1, P2>(
    text: P0,
    certfilepath: P1,
    algorithmoid: P2,
) -> windows_core::Result<IFabricStringResult>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
    P1: windows_core::Param<windows_core::PCWSTR>,
    P2: windows_core::Param<windows_core::PCSTR>,
{
    #[link(name = "FabricCommon")]
    extern "system" {
        pub fn FabricEncryptText2(
            text: windows_core::PCWSTR,
            certfilepath: windows_core::PCWSTR,
            algorithmoid: windows_core::PCSTR,
            encryptedvalue: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricEncryptText2(
        text.param().abi(),
        certfilepath.param().abi(),
        algorithmoid.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricEncryptValue<P0, P1, P2>(
    certthumbprint: P0,
    certstorename: P1,
    text: P2,
) -> windows_core::Result<IFabricStringResult>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
    P1: windows_core::Param<windows_core::PCWSTR>,
    P2: windows_core::Param<windows_core::PCWSTR>,
{
    #[link(name = "FabricCommon")]
    extern "system" {
        pub fn FabricEncryptValue(
            certthumbprint: windows_core::PCWSTR,
            certstorename: windows_core::PCWSTR,
            text: windows_core::PCWSTR,
            encryptedvalue: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricEncryptValue(
        certthumbprint.param().abi(),
        certstorename.param().abi(),
        text.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricGetLastErrorMessage() -> windows_core::Result<IFabricStringResult> {
    #[link(name = "FabricCommon")]
    extern "system" {
        pub fn FabricGetLastErrorMessage(
            message: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricGetLastErrorMessage(&mut result__).and_then(|| windows_core::Type::from_abi(result__))
}
windows_core::imp::define_interface!(
    IFabricAsyncOperationCallback,
    IFabricAsyncOperationCallback_Vtbl,
    0x86f08d7e_14dd_4575_8489_b1d5d679029c
);
impl core::ops::Deref for IFabricAsyncOperationCallback {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricAsyncOperationCallback, windows_core::IUnknown);
impl IFabricAsyncOperationCallback {
    pub unsafe fn Invoke<P0>(&self, context: P0)
    where
        P0: windows_core::Param<IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).Invoke)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
    }
}
unsafe impl Send for IFabricAsyncOperationCallback {}
unsafe impl Sync for IFabricAsyncOperationCallback {}
#[repr(C)]
pub struct IFabricAsyncOperationCallback_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub Invoke: unsafe extern "system" fn(*mut core::ffi::c_void, *mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricAsyncOperationContext,
    IFabricAsyncOperationContext_Vtbl,
    0x841720bf_c9e8_4e6f_9c3f_6b7f4ac73bcd
);
impl core::ops::Deref for IFabricAsyncOperationContext {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricAsyncOperationContext, windows_core::IUnknown);
impl IFabricAsyncOperationContext {
    pub unsafe fn IsCompleted(&self) -> windows::Win32::Foundation::BOOLEAN {
        (windows_core::Interface::vtable(self).IsCompleted)(windows_core::Interface::as_raw(self))
    }
    pub unsafe fn CompletedSynchronously(&self) -> windows::Win32::Foundation::BOOLEAN {
        (windows_core::Interface::vtable(self).CompletedSynchronously)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn Callback(&self) -> windows_core::Result<IFabricAsyncOperationCallback> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).Callback)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn Cancel(&self) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).Cancel)(windows_core::Interface::as_raw(self)).ok()
    }
}
unsafe impl Send for IFabricAsyncOperationContext {}
unsafe impl Sync for IFabricAsyncOperationContext {}
#[repr(C)]
pub struct IFabricAsyncOperationContext_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub IsCompleted:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows::Win32::Foundation::BOOLEAN,
    pub CompletedSynchronously:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows::Win32::Foundation::BOOLEAN,
    pub Callback: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Cancel: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricGetReplicatorStatusResult,
    IFabricGetReplicatorStatusResult_Vtbl,
    0x30e10c61_a710_4f99_a623_bb1403265186
);
impl core::ops::Deref for IFabricGetReplicatorStatusResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricGetReplicatorStatusResult, windows_core::IUnknown);
impl IFabricGetReplicatorStatusResult {
    pub unsafe fn get_ReplicatorStatus(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_REPLICATOR_STATUS_QUERY_RESULT {
        (windows_core::Interface::vtable(self).get_ReplicatorStatus)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricGetReplicatorStatusResult {}
unsafe impl Sync for IFabricGetReplicatorStatusResult {}
#[repr(C)]
pub struct IFabricGetReplicatorStatusResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ReplicatorStatus:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_REPLICATOR_STATUS_QUERY_RESULT,
}
windows_core::imp::define_interface!(
    IFabricStringListResult,
    IFabricStringListResult_Vtbl,
    0xafab1c53_757b_4b0e_8b7e_237aeee6bfe9
);
impl core::ops::Deref for IFabricStringListResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStringListResult, windows_core::IUnknown);
impl IFabricStringListResult {
    pub unsafe fn GetStrings(
        &self,
        itemcount: *mut u32,
    ) -> windows_core::Result<*mut windows_core::PCWSTR> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetStrings)(
            windows_core::Interface::as_raw(self),
            itemcount,
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricStringListResult {}
unsafe impl Sync for IFabricStringListResult {}
#[repr(C)]
pub struct IFabricStringListResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetStrings: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStringResult,
    IFabricStringResult_Vtbl,
    0x4ae69614_7d0f_4cd4_b836_23017000d132
);
impl core::ops::Deref for IFabricStringResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStringResult, windows_core::IUnknown);
impl IFabricStringResult {
    pub unsafe fn get_String(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_String)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricStringResult {}
unsafe impl Sync for IFabricStringResult {}
#[repr(C)]
pub struct IFabricStringResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_String: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
}
pub trait IFabricAsyncOperationCallback_Impl: Sized {
    fn Invoke(&self, context: Option<&IFabricAsyncOperationContext>);
}
impl windows_core::RuntimeName for IFabricAsyncOperationCallback {}
impl IFabricAsyncOperationCallback_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricAsyncOperationCallback_Vtbl
    where
        Identity: IFabricAsyncOperationCallback_Impl,
    {
        unsafe extern "system" fn Invoke<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) where
            Identity: IFabricAsyncOperationCallback_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricAsyncOperationCallback_Impl::Invoke(
                this,
                windows_core::from_raw_borrowed(&context),
            )
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricAsyncOperationCallback as windows_core::Interface>::IID
    }
}
pub trait IFabricAsyncOperationContext_Impl: Sized {
    fn IsCompleted(&self) -> windows::Win32::Foundation::BOOLEAN;
    fn CompletedSynchronously(&self) -> windows::Win32::Foundation::BOOLEAN;
    fn Callback(&self) -> windows_core::Result<IFabricAsyncOperationCallback>;
    fn Cancel(&self) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricAsyncOperationContext {}
impl IFabricAsyncOperationContext_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricAsyncOperationContext_Vtbl
    where
        Identity: IFabricAsyncOperationContext_Impl,
    {
        unsafe extern "system" fn IsCompleted<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows::Win32::Foundation::BOOLEAN
        where
            Identity: IFabricAsyncOperationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricAsyncOperationContext_Impl::IsCompleted(this)
        }
        unsafe extern "system" fn CompletedSynchronously<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows::Win32::Foundation::BOOLEAN
        where
            Identity: IFabricAsyncOperationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricAsyncOperationContext_Impl::CompletedSynchronously(this)
        }
        unsafe extern "system" fn Callback<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAsyncOperationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAsyncOperationContext_Impl::Callback(this) {
                Ok(ok__) => {
                    callback.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAsyncOperationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricAsyncOperationContext_Impl::Cancel(this).into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            IsCompleted: IsCompleted::<Identity, OFFSET>,
            CompletedSynchronously: CompletedSynchronously::<Identity, OFFSET>,
            Callback: Callback::<Identity, OFFSET>,
            Cancel: Cancel::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricAsyncOperationContext as windows_core::Interface>::IID
    }
}
pub trait IFabricGetReplicatorStatusResult_Impl: Sized {
    fn get_ReplicatorStatus(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_REPLICATOR_STATUS_QUERY_RESULT;
}
impl windows_core::RuntimeName for IFabricGetReplicatorStatusResult {}
impl IFabricGetReplicatorStatusResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricGetReplicatorStatusResult_Vtbl
    where
        Identity: IFabricGetReplicatorStatusResult_Impl,
    {
        unsafe extern "system" fn get_ReplicatorStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_REPLICATOR_STATUS_QUERY_RESULT
        where
            Identity: IFabricGetReplicatorStatusResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricGetReplicatorStatusResult_Impl::get_ReplicatorStatus(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ReplicatorStatus: get_ReplicatorStatus::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricGetReplicatorStatusResult as windows_core::Interface>::IID
    }
}
pub trait IFabricStringListResult_Impl: Sized {
    fn GetStrings(&self, itemcount: *mut u32) -> windows_core::Result<*mut windows_core::PCWSTR>;
}
impl windows_core::RuntimeName for IFabricStringListResult {}
impl IFabricStringListResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStringListResult_Vtbl
    where
        Identity: IFabricStringListResult_Impl,
    {
        unsafe extern "system" fn GetStrings<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            itemcount: *mut u32,
            buffereditems: *mut *mut windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStringListResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStringListResult_Impl::GetStrings(
                this,
                core::mem::transmute_copy(&itemcount),
            ) {
                Ok(ok__) => {
                    buffereditems.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetStrings: GetStrings::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStringListResult as windows_core::Interface>::IID
    }
}
pub trait IFabricStringResult_Impl: Sized {
    fn get_String(&self) -> windows_core::PCWSTR;
}
impl windows_core::RuntimeName for IFabricStringResult {}
impl IFabricStringResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStringResult_Vtbl
    where
        Identity: IFabricStringResult_Impl,
    {
        unsafe extern "system" fn get_String<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricStringResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStringResult_Impl::get_String(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_String: get_String::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStringResult as windows_core::Interface>::IID
    }
}
