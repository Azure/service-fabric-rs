// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
#[inline]
pub unsafe fn FabricBeginCreateRuntime<P0, P1>(
    riid: *const windows_core::GUID,
    exithandler: P0,
    timeoutmilliseconds: u32,
    callback: P1,
) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
where
    P0: windows_core::Param<IFabricProcessExitHandler>,
    P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricBeginCreateRuntime(
            riid: *const windows_core::GUID,
            exithandler: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricBeginCreateRuntime(
        riid,
        exithandler.param().abi(),
        timeoutmilliseconds,
        callback.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricBeginGetActivationContext<P0>(
    riid: *const windows_core::GUID,
    timeoutmilliseconds: u32,
    callback: P0,
) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
where
    P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricBeginGetActivationContext(
            riid: *const windows_core::GUID,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricBeginGetActivationContext(
        riid,
        timeoutmilliseconds,
        callback.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricBeginGetCodePackageActivator<P0>(
    riid: *const windows_core::GUID,
    timeoutmilliseconds: u32,
    callback: P0,
) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
where
    P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricBeginGetCodePackageActivator(
            riid: *const windows_core::GUID,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricBeginGetCodePackageActivator(
        riid,
        timeoutmilliseconds,
        callback.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricBeginGetNodeContext<P0>(
    timeoutmilliseconds: u32,
    callback: P0,
) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
where
    P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricBeginGetNodeContext(
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricBeginGetNodeContext(timeoutmilliseconds, callback.param().abi(), &mut result__)
        .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricCreateKeyValueStoreReplica<P0, P1>(
    riid: *const windows_core::GUID,
    storename: P0,
    partitionid: windows_core::GUID,
    replicaid: i64,
    replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    localstorekind: super::FabricTypes::FABRIC_LOCAL_STORE_KIND,
    localstoresettings: *const core::ffi::c_void,
    storeeventhandler: P1,
) -> windows_core::Result<*mut core::ffi::c_void>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
    P1: windows_core::Param<IFabricStoreEventHandler>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricCreateKeyValueStoreReplica(
            riid: *const windows_core::GUID,
            storename: windows_core::PCWSTR,
            partitionid: windows_core::GUID,
            replicaid: i64,
            replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
            localstorekind: super::FabricTypes::FABRIC_LOCAL_STORE_KIND,
            localstoresettings: *const core::ffi::c_void,
            storeeventhandler: *mut core::ffi::c_void,
            keyvaluestore: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricCreateKeyValueStoreReplica(
        riid,
        storename.param().abi(),
        core::mem::transmute(partitionid),
        replicaid,
        replicatorsettings,
        localstorekind,
        localstoresettings,
        storeeventhandler.param().abi(),
        &mut result__,
    )
    .map(|| result__)
}
#[inline]
pub unsafe fn FabricCreateKeyValueStoreReplica2<P0, P1, P2>(
    riid: *const windows_core::GUID,
    storename: P0,
    partitionid: windows_core::GUID,
    replicaid: i64,
    replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    localstorekind: super::FabricTypes::FABRIC_LOCAL_STORE_KIND,
    localstoresettings: *const core::ffi::c_void,
    storeeventhandler: P1,
    secondaryeventhandler: P2,
    notificationmode: super::FabricTypes::FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE,
) -> windows_core::Result<*mut core::ffi::c_void>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
    P1: windows_core::Param<IFabricStoreEventHandler>,
    P2: windows_core::Param<IFabricSecondaryEventHandler>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricCreateKeyValueStoreReplica2(
            riid: *const windows_core::GUID,
            storename: windows_core::PCWSTR,
            partitionid: windows_core::GUID,
            replicaid: i64,
            replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
            localstorekind: super::FabricTypes::FABRIC_LOCAL_STORE_KIND,
            localstoresettings: *const core::ffi::c_void,
            storeeventhandler: *mut core::ffi::c_void,
            secondaryeventhandler: *mut core::ffi::c_void,
            notificationmode: super::FabricTypes::FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE,
            keyvaluestore: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricCreateKeyValueStoreReplica2(
        riid,
        storename.param().abi(),
        core::mem::transmute(partitionid),
        replicaid,
        replicatorsettings,
        localstorekind,
        localstoresettings,
        storeeventhandler.param().abi(),
        secondaryeventhandler.param().abi(),
        notificationmode,
        &mut result__,
    )
    .map(|| result__)
}
#[inline]
pub unsafe fn FabricCreateKeyValueStoreReplica3<P0, P1, P2>(
    riid: *const windows_core::GUID,
    storename: P0,
    partitionid: windows_core::GUID,
    replicaid: i64,
    replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    localstorekind: super::FabricTypes::FABRIC_LOCAL_STORE_KIND,
    localstoresettings: *const core::ffi::c_void,
    storeeventhandler: P1,
    secondaryeventhandler: P2,
    notificationmode: super::FabricTypes::FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE,
) -> windows_core::Result<*mut core::ffi::c_void>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
    P1: windows_core::Param<IFabricStoreEventHandler>,
    P2: windows_core::Param<IFabricSecondaryEventHandler>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricCreateKeyValueStoreReplica3(
            riid: *const windows_core::GUID,
            storename: windows_core::PCWSTR,
            partitionid: windows_core::GUID,
            replicaid: i64,
            replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
            localstorekind: super::FabricTypes::FABRIC_LOCAL_STORE_KIND,
            localstoresettings: *const core::ffi::c_void,
            storeeventhandler: *mut core::ffi::c_void,
            secondaryeventhandler: *mut core::ffi::c_void,
            notificationmode: super::FabricTypes::FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE,
            keyvaluestore: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricCreateKeyValueStoreReplica3(
        riid,
        storename.param().abi(),
        core::mem::transmute(partitionid),
        replicaid,
        replicatorsettings,
        localstorekind,
        localstoresettings,
        storeeventhandler.param().abi(),
        secondaryeventhandler.param().abi(),
        notificationmode,
        &mut result__,
    )
    .map(|| result__)
}
#[inline]
pub unsafe fn FabricCreateKeyValueStoreReplica4<P0, P1, P2, P3>(
    riid: *const windows_core::GUID,
    storename: P0,
    partitionid: windows_core::GUID,
    replicaid: i64,
    servicename: P1,
    replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    localstorekind: super::FabricTypes::FABRIC_LOCAL_STORE_KIND,
    localstoresettings: *const core::ffi::c_void,
    storeeventhandler: P2,
    secondaryeventhandler: P3,
    notificationmode: super::FabricTypes::FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE,
) -> windows_core::Result<*mut core::ffi::c_void>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
    P1: windows_core::Param<super::FabricTypes::FABRIC_URI>,
    P2: windows_core::Param<IFabricStoreEventHandler>,
    P3: windows_core::Param<IFabricSecondaryEventHandler>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricCreateKeyValueStoreReplica4(
            riid: *const windows_core::GUID,
            storename: windows_core::PCWSTR,
            partitionid: windows_core::GUID,
            replicaid: i64,
            servicename: super::FabricTypes::FABRIC_URI,
            replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
            localstorekind: super::FabricTypes::FABRIC_LOCAL_STORE_KIND,
            localstoresettings: *const core::ffi::c_void,
            storeeventhandler: *mut core::ffi::c_void,
            secondaryeventhandler: *mut core::ffi::c_void,
            notificationmode: super::FabricTypes::FABRIC_KEY_VALUE_STORE_NOTIFICATION_MODE,
            keyvaluestore: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricCreateKeyValueStoreReplica4(
        riid,
        storename.param().abi(),
        core::mem::transmute(partitionid),
        replicaid,
        servicename.param().abi(),
        replicatorsettings,
        localstorekind,
        localstoresettings,
        storeeventhandler.param().abi(),
        secondaryeventhandler.param().abi(),
        notificationmode,
        &mut result__,
    )
    .map(|| result__)
}
#[inline]
pub unsafe fn FabricCreateKeyValueStoreReplica5<P0, P1, P2, P3>(
    riid: *const windows_core::GUID,
    storename: P0,
    partitionid: windows_core::GUID,
    replicaid: i64,
    servicename: P1,
    replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    kvssettings: *const super::FabricTypes::FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS,
    localstorekind: super::FabricTypes::FABRIC_LOCAL_STORE_KIND,
    localstoresettings: *const core::ffi::c_void,
    storeeventhandler: P2,
    secondaryeventhandler: P3,
) -> windows_core::Result<*mut core::ffi::c_void>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
    P1: windows_core::Param<super::FabricTypes::FABRIC_URI>,
    P2: windows_core::Param<IFabricStoreEventHandler>,
    P3: windows_core::Param<IFabricSecondaryEventHandler>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricCreateKeyValueStoreReplica5(
            riid: *const windows_core::GUID,
            storename: windows_core::PCWSTR,
            partitionid: windows_core::GUID,
            replicaid: i64,
            servicename: super::FabricTypes::FABRIC_URI,
            replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
            kvssettings: *const super::FabricTypes::FABRIC_KEY_VALUE_STORE_REPLICA_SETTINGS,
            localstorekind: super::FabricTypes::FABRIC_LOCAL_STORE_KIND,
            localstoresettings: *const core::ffi::c_void,
            storeeventhandler: *mut core::ffi::c_void,
            secondaryeventhandler: *mut core::ffi::c_void,
            keyvaluestore: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricCreateKeyValueStoreReplica5(
        riid,
        storename.param().abi(),
        core::mem::transmute(partitionid),
        replicaid,
        servicename.param().abi(),
        replicatorsettings,
        kvssettings,
        localstorekind,
        localstoresettings,
        storeeventhandler.param().abi(),
        secondaryeventhandler.param().abi(),
        &mut result__,
    )
    .map(|| result__)
}
#[inline]
pub unsafe fn FabricCreateRuntime(
    riid: *const windows_core::GUID,
) -> windows_core::Result<*mut core::ffi::c_void> {
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricCreateRuntime(
            riid: *const windows_core::GUID,
            fabricruntime: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricCreateRuntime(riid, &mut result__).map(|| result__)
}
#[inline]
pub unsafe fn FabricEndCreateRuntime<P0>(
    context: P0,
) -> windows_core::Result<*mut core::ffi::c_void>
where
    P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricEndCreateRuntime(
            context: *mut core::ffi::c_void,
            fabricruntime: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricEndCreateRuntime(context.param().abi(), &mut result__).map(|| result__)
}
#[inline]
pub unsafe fn FabricEndGetActivationContext<P0>(
    context: P0,
) -> windows_core::Result<*mut core::ffi::c_void>
where
    P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricEndGetActivationContext(
            context: *mut core::ffi::c_void,
            activationcontext: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricEndGetActivationContext(context.param().abi(), &mut result__).map(|| result__)
}
#[inline]
pub unsafe fn FabricEndGetCodePackageActivator<P0>(
    context: P0,
) -> windows_core::Result<*mut core::ffi::c_void>
where
    P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricEndGetCodePackageActivator(
            context: *mut core::ffi::c_void,
            activator: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricEndGetCodePackageActivator(context.param().abi(), &mut result__).map(|| result__)
}
#[inline]
pub unsafe fn FabricEndGetNodeContext<P0>(
    context: P0,
) -> windows_core::Result<*mut core::ffi::c_void>
where
    P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricEndGetNodeContext(
            context: *mut core::ffi::c_void,
            nodecontext: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricEndGetNodeContext(context.param().abi(), &mut result__).map(|| result__)
}
#[inline]
pub unsafe fn FabricGetActivationContext(
    riid: *const windows_core::GUID,
) -> windows_core::Result<*mut core::ffi::c_void> {
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricGetActivationContext(
            riid: *const windows_core::GUID,
            activationcontext: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricGetActivationContext(riid, &mut result__).map(|| result__)
}
#[inline]
pub unsafe fn FabricGetCodePackageActivator(
    riid: *const windows_core::GUID,
) -> windows_core::Result<*mut core::ffi::c_void> {
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricGetCodePackageActivator(
            riid: *const windows_core::GUID,
            activator: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricGetCodePackageActivator(riid, &mut result__).map(|| result__)
}
#[inline]
pub unsafe fn FabricGetNodeContext() -> windows_core::Result<*mut core::ffi::c_void> {
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricGetNodeContext(
            nodecontext: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricGetNodeContext(&mut result__).map(|| result__)
}
#[inline]
pub unsafe fn FabricLoadEseLocalStoreSettings<P0, P1, P2>(
    codepackageactivationcontext: P0,
    configurationpackagename: P1,
    sectionname: P2,
) -> windows_core::Result<IFabricEseLocalStoreSettingsResult>
where
    P0: windows_core::Param<IFabricCodePackageActivationContext>,
    P1: windows_core::Param<windows_core::PCWSTR>,
    P2: windows_core::Param<windows_core::PCWSTR>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricLoadEseLocalStoreSettings(
            codepackageactivationcontext: *mut core::ffi::c_void,
            configurationpackagename: windows_core::PCWSTR,
            sectionname: windows_core::PCWSTR,
            settings: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricLoadEseLocalStoreSettings(
        codepackageactivationcontext.param().abi(),
        configurationpackagename.param().abi(),
        sectionname.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricLoadReplicatorSettings<P0, P1, P2>(
    codepackageactivationcontext: P0,
    configurationpackagename: P1,
    sectionname: P2,
) -> windows_core::Result<IFabricReplicatorSettingsResult>
where
    P0: windows_core::Param<IFabricCodePackageActivationContext>,
    P1: windows_core::Param<windows_core::PCWSTR>,
    P2: windows_core::Param<windows_core::PCWSTR>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricLoadReplicatorSettings(
            codepackageactivationcontext: *mut core::ffi::c_void,
            configurationpackagename: windows_core::PCWSTR,
            sectionname: windows_core::PCWSTR,
            replicatorsettings: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricLoadReplicatorSettings(
        codepackageactivationcontext.param().abi(),
        configurationpackagename.param().abi(),
        sectionname.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn FabricLoadSecurityCredentials<P0, P1, P2>(
    codepackageactivationcontext: P0,
    configurationpackagename: P1,
    sectionname: P2,
) -> windows_core::Result<IFabricSecurityCredentialsResult>
where
    P0: windows_core::Param<IFabricCodePackageActivationContext>,
    P1: windows_core::Param<windows_core::PCWSTR>,
    P2: windows_core::Param<windows_core::PCWSTR>,
{
    #[link(name = "FabricRuntime")]
    extern "system" {
        pub fn FabricLoadSecurityCredentials(
            codepackageactivationcontext: *mut core::ffi::c_void,
            configurationpackagename: windows_core::PCWSTR,
            sectionname: windows_core::PCWSTR,
            securitycredentials: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    FabricLoadSecurityCredentials(
        codepackageactivationcontext.param().abi(),
        configurationpackagename.param().abi(),
        sectionname.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
windows_core::imp::define_interface!(
    IFabricAtomicGroupStateProvider,
    IFabricAtomicGroupStateProvider_Vtbl,
    0x2b670953_6148_4f7d_a920_b390de43d913
);
impl core::ops::Deref for IFabricAtomicGroupStateProvider {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricAtomicGroupStateProvider, windows_core::IUnknown);
impl IFabricAtomicGroupStateProvider {
    pub unsafe fn BeginAtomicGroupCommit<P0>(
        &self,
        atomicgroupid: i64,
        commitsequencenumber: i64,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginAtomicGroupCommit)(
            windows_core::Interface::as_raw(self),
            atomicgroupid,
            commitsequencenumber,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndAtomicGroupCommit<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndAtomicGroupCommit)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginAtomicGroupRollback<P0>(
        &self,
        atomicgroupid: i64,
        rollbackequencenumber: i64,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginAtomicGroupRollback)(
            windows_core::Interface::as_raw(self),
            atomicgroupid,
            rollbackequencenumber,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndAtomicGroupRollback<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndAtomicGroupRollback)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginUndoProgress<P0>(
        &self,
        fromcommitsequencenumber: i64,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUndoProgress)(
            windows_core::Interface::as_raw(self),
            fromcommitsequencenumber,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUndoProgress<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUndoProgress)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricAtomicGroupStateProvider {}
unsafe impl Sync for IFabricAtomicGroupStateProvider {}
#[repr(C)]
pub struct IFabricAtomicGroupStateProvider_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginAtomicGroupCommit: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i64,
        i64,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndAtomicGroupCommit: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginAtomicGroupRollback: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i64,
        i64,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndAtomicGroupRollback: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginUndoProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i64,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUndoProgress: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricAtomicGroupStateReplicator,
    IFabricAtomicGroupStateReplicator_Vtbl,
    0x80d2155c_4fc2_4fde_9696_c2f39b471c3d
);
impl core::ops::Deref for IFabricAtomicGroupStateReplicator {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricAtomicGroupStateReplicator, windows_core::IUnknown);
impl IFabricAtomicGroupStateReplicator {
    pub unsafe fn CreateAtomicGroup(&self) -> windows_core::Result<i64> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).CreateAtomicGroup)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn BeginReplicateAtomicGroupOperation<P0, P1>(
        &self,
        atomicgroupid: i64,
        operationdata: P0,
        callback: P1,
        operationsequencenumber: *mut i64,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<IFabricOperationData>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginReplicateAtomicGroupOperation)(
            windows_core::Interface::as_raw(self),
            atomicgroupid,
            operationdata.param().abi(),
            callback.param().abi(),
            operationsequencenumber,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndReplicateAtomicGroupOperation<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndReplicateAtomicGroupOperation)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn BeginReplicateAtomicGroupCommit<P0>(
        &self,
        atomicgroupid: i64,
        callback: P0,
        commitsequencenumber: *mut i64,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginReplicateAtomicGroupCommit)(
            windows_core::Interface::as_raw(self),
            atomicgroupid,
            callback.param().abi(),
            commitsequencenumber,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndReplicateAtomicGroupCommit<P0>(&self, context: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndReplicateAtomicGroupCommit)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn BeginReplicateAtomicGroupRollback<P0>(
        &self,
        atomicgroupid: i64,
        callback: P0,
        rollbacksequencenumber: *mut i64,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginReplicateAtomicGroupRollback)(
            windows_core::Interface::as_raw(self),
            atomicgroupid,
            callback.param().abi(),
            rollbacksequencenumber,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndReplicateAtomicGroupRollback<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndReplicateAtomicGroupRollback)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricAtomicGroupStateReplicator {}
unsafe impl Sync for IFabricAtomicGroupStateReplicator {}
#[repr(C)]
pub struct IFabricAtomicGroupStateReplicator_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub CreateAtomicGroup:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i64) -> windows_core::HRESULT,
    pub BeginReplicateAtomicGroupOperation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i64,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndReplicateAtomicGroupOperation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub BeginReplicateAtomicGroupCommit: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i64,
        *mut core::ffi::c_void,
        *mut i64,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndReplicateAtomicGroupCommit: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub BeginReplicateAtomicGroupRollback: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i64,
        *mut core::ffi::c_void,
        *mut i64,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndReplicateAtomicGroupRollback: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricCodePackage,
    IFabricCodePackage_Vtbl,
    0x20792b45_4d13_41a4_af13_346e529f00c5
);
impl core::ops::Deref for IFabricCodePackage {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricCodePackage, windows_core::IUnknown);
impl IFabricCodePackage {
    pub unsafe fn get_Description(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_CODE_PACKAGE_DESCRIPTION {
        (windows_core::Interface::vtable(self).get_Description)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn get_Path(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_Path)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricCodePackage {}
unsafe impl Sync for IFabricCodePackage {}
#[repr(C)]
pub struct IFabricCodePackage_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Description:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_CODE_PACKAGE_DESCRIPTION,
    pub get_Path: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
}
windows_core::imp::define_interface!(
    IFabricCodePackage2,
    IFabricCodePackage2_Vtbl,
    0xcdf0a4e6_ad80_4cd6_b67e_e4c002428600
);
impl core::ops::Deref for IFabricCodePackage2 {
    type Target = IFabricCodePackage;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricCodePackage2,
    windows_core::IUnknown,
    IFabricCodePackage
);
impl IFabricCodePackage2 {
    pub unsafe fn get_SetupEntryPointRunAsPolicy(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_RUNAS_POLICY_DESCRIPTION {
        (windows_core::Interface::vtable(self).get_SetupEntryPointRunAsPolicy)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_EntryPointRunAsPolicy(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_RUNAS_POLICY_DESCRIPTION {
        (windows_core::Interface::vtable(self).get_EntryPointRunAsPolicy)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricCodePackage2 {}
unsafe impl Sync for IFabricCodePackage2 {}
#[repr(C)]
pub struct IFabricCodePackage2_Vtbl {
    pub base__: IFabricCodePackage_Vtbl,
    pub get_SetupEntryPointRunAsPolicy:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_RUNAS_POLICY_DESCRIPTION,
    pub get_EntryPointRunAsPolicy:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_RUNAS_POLICY_DESCRIPTION,
}
windows_core::imp::define_interface!(
    IFabricCodePackageActivationContext,
    IFabricCodePackageActivationContext_Vtbl,
    0x68a971e2_f15f_4d95_a79c_8a257909659e
);
impl core::ops::Deref for IFabricCodePackageActivationContext {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricCodePackageActivationContext,
    windows_core::IUnknown
);
impl IFabricCodePackageActivationContext {
    pub unsafe fn get_ContextId(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_ContextId)(windows_core::Interface::as_raw(self))
    }
    pub unsafe fn get_CodePackageName(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_CodePackageName)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_CodePackageVersion(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_CodePackageVersion)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_WorkDirectory(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_WorkDirectory)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn get_LogDirectory(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_LogDirectory)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn get_TempDirectory(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_TempDirectory)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn get_ServiceTypes(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_TYPE_DESCRIPTION_LIST {
        (windows_core::Interface::vtable(self).get_ServiceTypes)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn get_ServiceGroupTypes(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST {
        (windows_core::Interface::vtable(self).get_ServiceGroupTypes)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_ApplicationPrincipals(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION {
        (windows_core::Interface::vtable(self).get_ApplicationPrincipals)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_ServiceEndpointResources(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST {
        (windows_core::Interface::vtable(self).get_ServiceEndpointResources)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn GetServiceEndpointResource<P0>(
        &self,
        serviceendpointresourcename: P0,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_ENDPOINT_RESOURCE_DESCRIPTION>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetServiceEndpointResource)(
            windows_core::Interface::as_raw(self),
            serviceendpointresourcename.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetCodePackageNames(
        &self,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringListResult> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetCodePackageNames)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn GetConfigurationPackageNames(
        &self,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringListResult> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetConfigurationPackageNames)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn GetDataPackageNames(
        &self,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringListResult> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetDataPackageNames)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn GetCodePackage<P0>(
        &self,
        codepackagename: P0,
    ) -> windows_core::Result<IFabricCodePackage>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetCodePackage)(
            windows_core::Interface::as_raw(self),
            codepackagename.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn GetConfigurationPackage<P0>(
        &self,
        configpackagename: P0,
    ) -> windows_core::Result<IFabricConfigurationPackage>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetConfigurationPackage)(
            windows_core::Interface::as_raw(self),
            configpackagename.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn GetDataPackage<P0>(
        &self,
        datapackagename: P0,
    ) -> windows_core::Result<IFabricDataPackage>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetDataPackage)(
            windows_core::Interface::as_raw(self),
            datapackagename.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn RegisterCodePackageChangeHandler<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<IFabricCodePackageChangeHandler>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).RegisterCodePackageChangeHandler)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn UnregisterCodePackageChangeHandler(
        &self,
        callbackhandle: i64,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).UnregisterCodePackageChangeHandler)(
            windows_core::Interface::as_raw(self),
            callbackhandle,
        )
        .ok()
    }
    pub unsafe fn RegisterConfigurationPackageChangeHandler<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<IFabricConfigurationPackageChangeHandler>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).RegisterConfigurationPackageChangeHandler)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn UnregisterConfigurationPackageChangeHandler(
        &self,
        callbackhandle: i64,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).UnregisterConfigurationPackageChangeHandler)(
            windows_core::Interface::as_raw(self),
            callbackhandle,
        )
        .ok()
    }
    pub unsafe fn RegisterDataPackageChangeHandler<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<IFabricDataPackageChangeHandler>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).RegisterDataPackageChangeHandler)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn UnregisterDataPackageChangeHandler(
        &self,
        callbackhandle: i64,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).UnregisterDataPackageChangeHandler)(
            windows_core::Interface::as_raw(self),
            callbackhandle,
        )
        .ok()
    }
}
unsafe impl Send for IFabricCodePackageActivationContext {}
unsafe impl Sync for IFabricCodePackageActivationContext {}
#[repr(C)]
pub struct IFabricCodePackageActivationContext_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_ContextId :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> windows_core::PCWSTR , pub get_CodePackageName :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> windows_core::PCWSTR , pub get_CodePackageVersion :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> windows_core::PCWSTR , pub get_WorkDirectory :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> windows_core::PCWSTR , pub get_LogDirectory :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> windows_core::PCWSTR , pub get_TempDirectory :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> windows_core::PCWSTR , pub get_ServiceTypes :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_SERVICE_TYPE_DESCRIPTION_LIST , pub get_ServiceGroupTypes :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST , pub get_ApplicationPrincipals :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION , pub get_ServiceEndpointResources :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST , pub GetServiceEndpointResource :unsafe extern "system" fn ( * mut core::ffi::c_void , windows_core::PCWSTR , *mut *mut super::FabricTypes:: FABRIC_ENDPOINT_RESOURCE_DESCRIPTION , ) -> windows_core::HRESULT , pub GetCodePackageNames :unsafe extern "system" fn ( * mut core::ffi::c_void , *mut * mut core::ffi::c_void , ) -> windows_core::HRESULT , pub GetConfigurationPackageNames :unsafe extern "system" fn ( * mut core::ffi::c_void , *mut * mut core::ffi::c_void , ) -> windows_core::HRESULT , pub GetDataPackageNames :unsafe extern "system" fn ( * mut core::ffi::c_void , *mut * mut core::ffi::c_void , ) -> windows_core::HRESULT , pub GetCodePackage :unsafe extern "system" fn ( * mut core::ffi::c_void , windows_core::PCWSTR , *mut * mut core::ffi::c_void , ) -> windows_core::HRESULT , pub GetConfigurationPackage :unsafe extern "system" fn ( * mut core::ffi::c_void , windows_core::PCWSTR , *mut * mut core::ffi::c_void , ) -> windows_core::HRESULT , pub GetDataPackage :unsafe extern "system" fn ( * mut core::ffi::c_void , windows_core::PCWSTR , *mut * mut core::ffi::c_void , ) -> windows_core::HRESULT , pub RegisterCodePackageChangeHandler :unsafe extern "system" fn ( * mut core::ffi::c_void , * mut core::ffi::c_void , *mut i64 , ) -> windows_core::HRESULT , pub UnregisterCodePackageChangeHandler :unsafe extern "system" fn ( * mut core::ffi::c_void , i64 , ) -> windows_core::HRESULT , pub RegisterConfigurationPackageChangeHandler :unsafe extern "system" fn ( * mut core::ffi::c_void , * mut core::ffi::c_void , *mut i64 , ) -> windows_core::HRESULT , pub UnregisterConfigurationPackageChangeHandler :unsafe extern "system" fn ( * mut core::ffi::c_void , i64 , ) -> windows_core::HRESULT , pub RegisterDataPackageChangeHandler :unsafe extern "system" fn ( * mut core::ffi::c_void , * mut core::ffi::c_void , *mut i64 , ) -> windows_core::HRESULT , pub UnregisterDataPackageChangeHandler :unsafe extern "system" fn ( * mut core::ffi::c_void , i64 , ) -> windows_core::HRESULT , }
windows_core::imp::define_interface!(
    IFabricCodePackageActivationContext2,
    IFabricCodePackageActivationContext2_Vtbl,
    0x6c83d5c1_1954_4b80_9175_0d0e7c8715c9
);
impl core::ops::Deref for IFabricCodePackageActivationContext2 {
    type Target = IFabricCodePackageActivationContext;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricCodePackageActivationContext2,
    windows_core::IUnknown,
    IFabricCodePackageActivationContext
);
impl IFabricCodePackageActivationContext2 {
    pub unsafe fn get_ApplicationName(&self) -> super::FabricTypes::FABRIC_URI {
        (windows_core::Interface::vtable(self).get_ApplicationName)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_ApplicationTypeName(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_ApplicationTypeName)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn GetServiceManifestName(
        &self,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetServiceManifestName)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn GetServiceManifestVersion(
        &self,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetServiceManifestVersion)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricCodePackageActivationContext2 {}
unsafe impl Sync for IFabricCodePackageActivationContext2 {}
#[repr(C)]
pub struct IFabricCodePackageActivationContext2_Vtbl {
    pub base__: IFabricCodePackageActivationContext_Vtbl,
    pub get_ApplicationName:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> super::FabricTypes::FABRIC_URI,
    pub get_ApplicationTypeName:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
    pub GetServiceManifestName: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetServiceManifestVersion: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricCodePackageActivationContext3,
    IFabricCodePackageActivationContext3_Vtbl,
    0x6efee900_f491_4b03_bc5b_3a70de103593
);
impl core::ops::Deref for IFabricCodePackageActivationContext3 {
    type Target = IFabricCodePackageActivationContext2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricCodePackageActivationContext3,
    windows_core::IUnknown,
    IFabricCodePackageActivationContext,
    IFabricCodePackageActivationContext2
);
impl IFabricCodePackageActivationContext3 {
    pub unsafe fn ReportApplicationHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportApplicationHealth)(
            windows_core::Interface::as_raw(self),
            healthinfo,
        )
        .ok()
    }
    pub unsafe fn ReportDeployedApplicationHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportDeployedApplicationHealth)(
            windows_core::Interface::as_raw(self),
            healthinfo,
        )
        .ok()
    }
    pub unsafe fn ReportDeployedServicePackageHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportDeployedServicePackageHealth)(
            windows_core::Interface::as_raw(self),
            healthinfo,
        )
        .ok()
    }
}
unsafe impl Send for IFabricCodePackageActivationContext3 {}
unsafe impl Sync for IFabricCodePackageActivationContext3 {}
#[repr(C)]
pub struct IFabricCodePackageActivationContext3_Vtbl {
    pub base__: IFabricCodePackageActivationContext2_Vtbl,
    pub ReportApplicationHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::HRESULT,
    pub ReportDeployedApplicationHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::HRESULT,
    pub ReportDeployedServicePackageHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricCodePackageActivationContext4,
    IFabricCodePackageActivationContext4_Vtbl,
    0x99efebb6_a7b4_4d45_b45e_f191a66eef03
);
impl core::ops::Deref for IFabricCodePackageActivationContext4 {
    type Target = IFabricCodePackageActivationContext3;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricCodePackageActivationContext4,
    windows_core::IUnknown,
    IFabricCodePackageActivationContext,
    IFabricCodePackageActivationContext2,
    IFabricCodePackageActivationContext3
);
impl IFabricCodePackageActivationContext4 {
    pub unsafe fn ReportApplicationHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportApplicationHealth2)(
            windows_core::Interface::as_raw(self),
            healthinfo,
            sendoptions,
        )
        .ok()
    }
    pub unsafe fn ReportDeployedApplicationHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportDeployedApplicationHealth2)(
            windows_core::Interface::as_raw(self),
            healthinfo,
            sendoptions,
        )
        .ok()
    }
    pub unsafe fn ReportDeployedServicePackageHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportDeployedServicePackageHealth2)(
            windows_core::Interface::as_raw(self),
            healthinfo,
            sendoptions,
        )
        .ok()
    }
}
unsafe impl Send for IFabricCodePackageActivationContext4 {}
unsafe impl Sync for IFabricCodePackageActivationContext4 {}
#[repr(C)]
pub struct IFabricCodePackageActivationContext4_Vtbl {
    pub base__: IFabricCodePackageActivationContext3_Vtbl,
    pub ReportApplicationHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::HRESULT,
    pub ReportDeployedApplicationHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::HRESULT,
    pub ReportDeployedServicePackageHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    )
        -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricCodePackageActivationContext5,
    IFabricCodePackageActivationContext5_Vtbl,
    0xfe45387e_8711_4949_ac36_31dc95035513
);
impl core::ops::Deref for IFabricCodePackageActivationContext5 {
    type Target = IFabricCodePackageActivationContext4;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricCodePackageActivationContext5,
    windows_core::IUnknown,
    IFabricCodePackageActivationContext,
    IFabricCodePackageActivationContext2,
    IFabricCodePackageActivationContext3,
    IFabricCodePackageActivationContext4
);
impl IFabricCodePackageActivationContext5 {
    pub unsafe fn get_ServiceListenAddress(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_ServiceListenAddress)(
            windows_core::Interface::as_raw(self),
        )
    }
    pub unsafe fn get_ServicePublishAddress(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_ServicePublishAddress)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricCodePackageActivationContext5 {}
unsafe impl Sync for IFabricCodePackageActivationContext5 {}
#[repr(C)]
pub struct IFabricCodePackageActivationContext5_Vtbl {
    pub base__: IFabricCodePackageActivationContext4_Vtbl,
    pub get_ServiceListenAddress:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
    pub get_ServicePublishAddress:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
}
windows_core::imp::define_interface!(
    IFabricCodePackageActivationContext6,
    IFabricCodePackageActivationContext6_Vtbl,
    0xfa5fda9b_472c_45a0_9b60_a374691227a4
);
impl core::ops::Deref for IFabricCodePackageActivationContext6 {
    type Target = IFabricCodePackageActivationContext5;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricCodePackageActivationContext6,
    windows_core::IUnknown,
    IFabricCodePackageActivationContext,
    IFabricCodePackageActivationContext2,
    IFabricCodePackageActivationContext3,
    IFabricCodePackageActivationContext4,
    IFabricCodePackageActivationContext5
);
impl IFabricCodePackageActivationContext6 {
    pub unsafe fn GetDirectory<P0>(
        &self,
        logicaldirectoryname: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetDirectory)(
            windows_core::Interface::as_raw(self),
            logicaldirectoryname.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricCodePackageActivationContext6 {}
unsafe impl Sync for IFabricCodePackageActivationContext6 {}
#[repr(C)]
pub struct IFabricCodePackageActivationContext6_Vtbl {
    pub base__: IFabricCodePackageActivationContext5_Vtbl,
    pub GetDirectory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricCodePackageActivator,
    IFabricCodePackageActivator_Vtbl,
    0x70be1b10_b259_46fc_b813_0b75720e7183
);
impl core::ops::Deref for IFabricCodePackageActivator {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricCodePackageActivator, windows_core::IUnknown);
impl IFabricCodePackageActivator {
    pub unsafe fn BeginActivateCodePackage<P0>(
        &self,
        codepackagenames: *const super::FabricTypes::FABRIC_STRING_LIST,
        environment: *const super::FabricTypes::FABRIC_STRING_MAP,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginActivateCodePackage)(
            windows_core::Interface::as_raw(self),
            codepackagenames,
            environment,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndActivateCodePackage<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndActivateCodePackage)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginDeactivateCodePackage<P0>(
        &self,
        codepackagenames: *const super::FabricTypes::FABRIC_STRING_LIST,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginDeactivateCodePackage)(
            windows_core::Interface::as_raw(self),
            codepackagenames,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndDeactivateCodePackage<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndDeactivateCodePackage)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn AbortCodePackage(
        &self,
        codepackagenames: *const super::FabricTypes::FABRIC_STRING_LIST,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).AbortCodePackage)(
            windows_core::Interface::as_raw(self),
            codepackagenames,
        )
        .ok()
    }
    pub unsafe fn RegisterCodePackageEventHandler<P0>(
        &self,
        eventhandler: P0,
    ) -> windows_core::Result<u64>
    where
        P0: windows_core::Param<IFabricCodePackageEventHandler>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).RegisterCodePackageEventHandler)(
            windows_core::Interface::as_raw(self),
            eventhandler.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn UnregisterCodePackageEventHandler(
        &self,
        callbackhandle: u64,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).UnregisterCodePackageEventHandler)(
            windows_core::Interface::as_raw(self),
            callbackhandle,
        )
        .ok()
    }
}
unsafe impl Send for IFabricCodePackageActivator {}
unsafe impl Sync for IFabricCodePackageActivator {}
#[repr(C)]
pub struct IFabricCodePackageActivator_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginActivateCodePackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_STRING_LIST,
        *const super::FabricTypes::FABRIC_STRING_MAP,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndActivateCodePackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginDeactivateCodePackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_STRING_LIST,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndDeactivateCodePackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AbortCodePackage: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_STRING_LIST,
    ) -> windows_core::HRESULT,
    pub RegisterCodePackageEventHandler: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u64,
    ) -> windows_core::HRESULT,
    pub UnregisterCodePackageEventHandler:
        unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricCodePackageChangeHandler,
    IFabricCodePackageChangeHandler_Vtbl,
    0xb90d36cd_acb5_427a_b318_3b045981d0cc
);
impl core::ops::Deref for IFabricCodePackageChangeHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricCodePackageChangeHandler, windows_core::IUnknown);
impl IFabricCodePackageChangeHandler {
    pub unsafe fn OnPackageAdded<P0, P1>(&self, source: P0, codepackage: P1)
    where
        P0: windows_core::Param<IFabricCodePackageActivationContext>,
        P1: windows_core::Param<IFabricCodePackage>,
    {
        (windows_core::Interface::vtable(self).OnPackageAdded)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            codepackage.param().abi(),
        )
    }
    pub unsafe fn OnPackageRemoved<P0, P1>(&self, source: P0, codepackage: P1)
    where
        P0: windows_core::Param<IFabricCodePackageActivationContext>,
        P1: windows_core::Param<IFabricCodePackage>,
    {
        (windows_core::Interface::vtable(self).OnPackageRemoved)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            codepackage.param().abi(),
        )
    }
    pub unsafe fn OnPackageModified<P0, P1, P2>(
        &self,
        source: P0,
        previouscodepackage: P1,
        codepackage: P2,
    ) where
        P0: windows_core::Param<IFabricCodePackageActivationContext>,
        P1: windows_core::Param<IFabricCodePackage>,
        P2: windows_core::Param<IFabricCodePackage>,
    {
        (windows_core::Interface::vtable(self).OnPackageModified)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            previouscodepackage.param().abi(),
            codepackage.param().abi(),
        )
    }
}
unsafe impl Send for IFabricCodePackageChangeHandler {}
unsafe impl Sync for IFabricCodePackageChangeHandler {}
#[repr(C)]
pub struct IFabricCodePackageChangeHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnPackageAdded: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ),
    pub OnPackageRemoved: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ),
    pub OnPackageModified: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ),
}
windows_core::imp::define_interface!(
    IFabricCodePackageEventHandler,
    IFabricCodePackageEventHandler_Vtbl,
    0x899e0ca8_16df_458e_8915_d0307b4ab101
);
impl core::ops::Deref for IFabricCodePackageEventHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricCodePackageEventHandler, windows_core::IUnknown);
impl IFabricCodePackageEventHandler {
    pub unsafe fn OnCodePackageEvent<P0>(
        &self,
        source: P0,
        eventdesc: *const super::FabricTypes::FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION,
    ) where
        P0: windows_core::Param<IFabricCodePackageActivator>,
    {
        (windows_core::Interface::vtable(self).OnCodePackageEvent)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            eventdesc,
        )
    }
}
unsafe impl Send for IFabricCodePackageEventHandler {}
unsafe impl Sync for IFabricCodePackageEventHandler {}
#[repr(C)]
pub struct IFabricCodePackageEventHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnCodePackageEvent: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION,
    ),
}
windows_core::imp::define_interface!(
    IFabricConfigurationPackage,
    IFabricConfigurationPackage_Vtbl,
    0xac4c3bfa_2563_46b7_a71d_2dca7b0a8f4d
);
impl core::ops::Deref for IFabricConfigurationPackage {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricConfigurationPackage, windows_core::IUnknown);
impl IFabricConfigurationPackage {
    pub unsafe fn get_Description(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION {
        (windows_core::Interface::vtable(self).get_Description)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn get_Path(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_Path)(windows_core::Interface::as_raw(self))
    }
    pub unsafe fn get_Settings(&self) -> *mut super::FabricTypes::FABRIC_CONFIGURATION_SETTINGS {
        (windows_core::Interface::vtable(self).get_Settings)(windows_core::Interface::as_raw(self))
    }
    pub unsafe fn GetSection<P0>(
        &self,
        sectionname: P0,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_CONFIGURATION_SECTION>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetSection)(
            windows_core::Interface::as_raw(self),
            sectionname.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetValue<P0, P1>(
        &self,
        sectionname: P0,
        parametername: P1,
        isencrypted: *mut u8,
    ) -> windows_core::Result<windows_core::PCWSTR>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetValue)(
            windows_core::Interface::as_raw(self),
            sectionname.param().abi(),
            parametername.param().abi(),
            isencrypted,
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn DecryptValue<P0>(
        &self,
        encryptedvalue: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).DecryptValue)(
            windows_core::Interface::as_raw(self),
            encryptedvalue.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricConfigurationPackage {}
unsafe impl Sync for IFabricConfigurationPackage {}
#[repr(C)]
pub struct IFabricConfigurationPackage_Vtbl where { pub base__ : windows_core::IUnknown_Vtbl , pub get_Description :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION , pub get_Path :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> windows_core::PCWSTR , pub get_Settings :unsafe extern "system" fn ( * mut core::ffi::c_void , ) -> *mut super::FabricTypes:: FABRIC_CONFIGURATION_SETTINGS , pub GetSection :unsafe extern "system" fn ( * mut core::ffi::c_void , windows_core::PCWSTR , *mut *mut super::FabricTypes:: FABRIC_CONFIGURATION_SECTION , ) -> windows_core::HRESULT , pub GetValue :unsafe extern "system" fn ( * mut core::ffi::c_void , windows_core::PCWSTR , windows_core::PCWSTR , *mut u8 , *mut windows_core::PCWSTR , ) -> windows_core::HRESULT , pub DecryptValue :unsafe extern "system" fn ( * mut core::ffi::c_void , windows_core::PCWSTR , *mut * mut core::ffi::c_void , ) -> windows_core::HRESULT , }
windows_core::imp::define_interface!(
    IFabricConfigurationPackage2,
    IFabricConfigurationPackage2_Vtbl,
    0xd3161f31_708a_4f83_91ff_f2af15f74a2f
);
impl core::ops::Deref for IFabricConfigurationPackage2 {
    type Target = IFabricConfigurationPackage;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricConfigurationPackage2,
    windows_core::IUnknown,
    IFabricConfigurationPackage
);
impl IFabricConfigurationPackage2 {
    pub unsafe fn GetValues<P0, P1>(
        &self,
        sectionname: P0,
        parameterprefix: P1,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_CONFIGURATION_PARAMETER_LIST>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetValues)(
            windows_core::Interface::as_raw(self),
            sectionname.param().abi(),
            parameterprefix.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricConfigurationPackage2 {}
unsafe impl Sync for IFabricConfigurationPackage2 {}
#[repr(C)]
pub struct IFabricConfigurationPackage2_Vtbl {
    pub base__: IFabricConfigurationPackage_Vtbl,
    pub GetValues: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::PCWSTR,
        *mut *mut super::FabricTypes::FABRIC_CONFIGURATION_PARAMETER_LIST,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricConfigurationPackageChangeHandler,
    IFabricConfigurationPackageChangeHandler_Vtbl,
    0xc3954d48_b5ee_4ff4_9bc0_c30f6d0d3a85
);
impl core::ops::Deref for IFabricConfigurationPackageChangeHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricConfigurationPackageChangeHandler,
    windows_core::IUnknown
);
impl IFabricConfigurationPackageChangeHandler {
    pub unsafe fn OnPackageAdded<P0, P1>(&self, source: P0, configpackage: P1)
    where
        P0: windows_core::Param<IFabricCodePackageActivationContext>,
        P1: windows_core::Param<IFabricConfigurationPackage>,
    {
        (windows_core::Interface::vtable(self).OnPackageAdded)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            configpackage.param().abi(),
        )
    }
    pub unsafe fn OnPackageRemoved<P0, P1>(&self, source: P0, configpackage: P1)
    where
        P0: windows_core::Param<IFabricCodePackageActivationContext>,
        P1: windows_core::Param<IFabricConfigurationPackage>,
    {
        (windows_core::Interface::vtable(self).OnPackageRemoved)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            configpackage.param().abi(),
        )
    }
    pub unsafe fn OnPackageModified<P0, P1, P2>(
        &self,
        source: P0,
        previousconfigpackage: P1,
        configpackage: P2,
    ) where
        P0: windows_core::Param<IFabricCodePackageActivationContext>,
        P1: windows_core::Param<IFabricConfigurationPackage>,
        P2: windows_core::Param<IFabricConfigurationPackage>,
    {
        (windows_core::Interface::vtable(self).OnPackageModified)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            previousconfigpackage.param().abi(),
            configpackage.param().abi(),
        )
    }
}
unsafe impl Send for IFabricConfigurationPackageChangeHandler {}
unsafe impl Sync for IFabricConfigurationPackageChangeHandler {}
#[repr(C)]
pub struct IFabricConfigurationPackageChangeHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnPackageAdded: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ),
    pub OnPackageRemoved: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ),
    pub OnPackageModified: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ),
}
windows_core::imp::define_interface!(
    IFabricDataPackage,
    IFabricDataPackage_Vtbl,
    0xaa67de09_3657_435f_a2f6_b3a17a0a4371
);
impl core::ops::Deref for IFabricDataPackage {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricDataPackage, windows_core::IUnknown);
impl IFabricDataPackage {
    pub unsafe fn get_Description(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_DATA_PACKAGE_DESCRIPTION {
        (windows_core::Interface::vtable(self).get_Description)(windows_core::Interface::as_raw(
            self,
        ))
    }
    pub unsafe fn get_Path(&self) -> windows_core::PCWSTR {
        (windows_core::Interface::vtable(self).get_Path)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricDataPackage {}
unsafe impl Sync for IFabricDataPackage {}
#[repr(C)]
pub struct IFabricDataPackage_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Description:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_DATA_PACKAGE_DESCRIPTION,
    pub get_Path: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::PCWSTR,
}
windows_core::imp::define_interface!(
    IFabricDataPackageChangeHandler,
    IFabricDataPackageChangeHandler_Vtbl,
    0x8d0a726f_bd17_4b32_807b_be2a8024b2e0
);
impl core::ops::Deref for IFabricDataPackageChangeHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricDataPackageChangeHandler, windows_core::IUnknown);
impl IFabricDataPackageChangeHandler {
    pub unsafe fn OnPackageAdded<P0, P1>(&self, source: P0, datapackage: P1)
    where
        P0: windows_core::Param<IFabricCodePackageActivationContext>,
        P1: windows_core::Param<IFabricDataPackage>,
    {
        (windows_core::Interface::vtable(self).OnPackageAdded)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            datapackage.param().abi(),
        )
    }
    pub unsafe fn OnPackageRemoved<P0, P1>(&self, source: P0, datapackage: P1)
    where
        P0: windows_core::Param<IFabricCodePackageActivationContext>,
        P1: windows_core::Param<IFabricDataPackage>,
    {
        (windows_core::Interface::vtable(self).OnPackageRemoved)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            datapackage.param().abi(),
        )
    }
    pub unsafe fn OnPackageModified<P0, P1, P2>(
        &self,
        source: P0,
        previousdatapackage: P1,
        datapackage: P2,
    ) where
        P0: windows_core::Param<IFabricCodePackageActivationContext>,
        P1: windows_core::Param<IFabricDataPackage>,
        P2: windows_core::Param<IFabricDataPackage>,
    {
        (windows_core::Interface::vtable(self).OnPackageModified)(
            windows_core::Interface::as_raw(self),
            source.param().abi(),
            previousdatapackage.param().abi(),
            datapackage.param().abi(),
        )
    }
}
unsafe impl Send for IFabricDataPackageChangeHandler {}
unsafe impl Sync for IFabricDataPackageChangeHandler {}
#[repr(C)]
pub struct IFabricDataPackageChangeHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnPackageAdded: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ),
    pub OnPackageRemoved: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ),
    pub OnPackageModified: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ),
}
windows_core::imp::define_interface!(
    IFabricEseLocalStoreSettingsResult,
    IFabricEseLocalStoreSettingsResult_Vtbl,
    0xaace77ae_d8e1_4144_b1ee_5ac74fd54f65
);
impl core::ops::Deref for IFabricEseLocalStoreSettingsResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricEseLocalStoreSettingsResult, windows_core::IUnknown);
impl IFabricEseLocalStoreSettingsResult {
    pub unsafe fn get_Settings(&self) -> *mut super::FabricTypes::FABRIC_ESE_LOCAL_STORE_SETTINGS {
        (windows_core::Interface::vtable(self).get_Settings)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricEseLocalStoreSettingsResult {}
unsafe impl Sync for IFabricEseLocalStoreSettingsResult {}
#[repr(C)]
pub struct IFabricEseLocalStoreSettingsResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Settings:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_ESE_LOCAL_STORE_SETTINGS,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreEnumerator,
    IFabricKeyValueStoreEnumerator_Vtbl,
    0x6722b848_15bb_4528_bf54_c7bbe27b6f9a
);
impl core::ops::Deref for IFabricKeyValueStoreEnumerator {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricKeyValueStoreEnumerator, windows_core::IUnknown);
impl IFabricKeyValueStoreEnumerator {
    pub unsafe fn EnumerateByKey<P0>(
        &self,
        keyprefix: P0,
    ) -> windows_core::Result<IFabricKeyValueStoreItemEnumerator>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EnumerateByKey)(
            windows_core::Interface::as_raw(self),
            keyprefix.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EnumerateMetadataByKey<P0>(
        &self,
        keyprefix: P0,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataEnumerator>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EnumerateMetadataByKey)(
            windows_core::Interface::as_raw(self),
            keyprefix.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricKeyValueStoreEnumerator {}
unsafe impl Sync for IFabricKeyValueStoreEnumerator {}
#[repr(C)]
pub struct IFabricKeyValueStoreEnumerator_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub EnumerateByKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnumerateMetadataByKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreEnumerator2,
    IFabricKeyValueStoreEnumerator2_Vtbl,
    0x63dfd264_4f2b_4be6_8234_1fa200165fe9
);
impl core::ops::Deref for IFabricKeyValueStoreEnumerator2 {
    type Target = IFabricKeyValueStoreEnumerator;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreEnumerator2,
    windows_core::IUnknown,
    IFabricKeyValueStoreEnumerator
);
impl IFabricKeyValueStoreEnumerator2 {
    pub unsafe fn EnumerateByKey2<P0, P1>(
        &self,
        keyprefix: P0,
        strictprefix: P1,
    ) -> windows_core::Result<IFabricKeyValueStoreItemEnumerator>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows::Win32::Foundation::BOOLEAN>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EnumerateByKey2)(
            windows_core::Interface::as_raw(self),
            keyprefix.param().abi(),
            strictprefix.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EnumerateMetadataByKey2<P0, P1>(
        &self,
        keyprefix: P0,
        strictprefix: P1,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataEnumerator>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<windows::Win32::Foundation::BOOLEAN>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EnumerateMetadataByKey2)(
            windows_core::Interface::as_raw(self),
            keyprefix.param().abi(),
            strictprefix.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricKeyValueStoreEnumerator2 {}
unsafe impl Sync for IFabricKeyValueStoreEnumerator2 {}
#[repr(C)]
pub struct IFabricKeyValueStoreEnumerator2_Vtbl {
    pub base__: IFabricKeyValueStoreEnumerator_Vtbl,
    pub EnumerateByKey2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows::Win32::Foundation::BOOLEAN,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnumerateMetadataByKey2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows::Win32::Foundation::BOOLEAN,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreItemEnumerator,
    IFabricKeyValueStoreItemEnumerator_Vtbl,
    0xc202788f_54d3_44a6_8f3c_b4bbfcdb95d2
);
impl core::ops::Deref for IFabricKeyValueStoreItemEnumerator {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricKeyValueStoreItemEnumerator, windows_core::IUnknown);
impl IFabricKeyValueStoreItemEnumerator {
    pub unsafe fn MoveNext(&self) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).MoveNext)(windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn get_Current(&self) -> Option<IFabricKeyValueStoreItemResult> {
        (windows_core::Interface::vtable(self).get_Current)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricKeyValueStoreItemEnumerator {}
unsafe impl Sync for IFabricKeyValueStoreItemEnumerator {}
#[repr(C)]
pub struct IFabricKeyValueStoreItemEnumerator_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub MoveNext: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub get_Current:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> Option<IFabricKeyValueStoreItemResult>,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreItemEnumerator2,
    IFabricKeyValueStoreItemEnumerator2_Vtbl,
    0xda143bbc_81e1_48cd_afd7_b642bc5b9bfd
);
impl core::ops::Deref for IFabricKeyValueStoreItemEnumerator2 {
    type Target = IFabricKeyValueStoreItemEnumerator;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreItemEnumerator2,
    windows_core::IUnknown,
    IFabricKeyValueStoreItemEnumerator
);
impl IFabricKeyValueStoreItemEnumerator2 {
    pub unsafe fn TryMoveNext(&self) -> windows_core::Result<u8> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).TryMoveNext)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricKeyValueStoreItemEnumerator2 {}
unsafe impl Sync for IFabricKeyValueStoreItemEnumerator2 {}
#[repr(C)]
pub struct IFabricKeyValueStoreItemEnumerator2_Vtbl {
    pub base__: IFabricKeyValueStoreItemEnumerator_Vtbl,
    pub TryMoveNext:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u8) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreItemMetadataEnumerator,
    IFabricKeyValueStoreItemMetadataEnumerator_Vtbl,
    0x0bc06aee_fffa_4450_9099_116a5f0e0b53
);
impl core::ops::Deref for IFabricKeyValueStoreItemMetadataEnumerator {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreItemMetadataEnumerator,
    windows_core::IUnknown
);
impl IFabricKeyValueStoreItemMetadataEnumerator {
    pub unsafe fn MoveNext(&self) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).MoveNext)(windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn get_Current(&self) -> Option<IFabricKeyValueStoreItemMetadataResult> {
        (windows_core::Interface::vtable(self).get_Current)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricKeyValueStoreItemMetadataEnumerator {}
unsafe impl Sync for IFabricKeyValueStoreItemMetadataEnumerator {}
#[repr(C)]
pub struct IFabricKeyValueStoreItemMetadataEnumerator_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub MoveNext: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub get_Current: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    )
        -> Option<IFabricKeyValueStoreItemMetadataResult>,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreItemMetadataEnumerator2,
    IFabricKeyValueStoreItemMetadataEnumerator2_Vtbl,
    0x8803d53e_dd73_40fc_a662_1bfe999419ea
);
impl core::ops::Deref for IFabricKeyValueStoreItemMetadataEnumerator2 {
    type Target = IFabricKeyValueStoreItemMetadataEnumerator;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreItemMetadataEnumerator2,
    windows_core::IUnknown,
    IFabricKeyValueStoreItemMetadataEnumerator
);
impl IFabricKeyValueStoreItemMetadataEnumerator2 {
    pub unsafe fn TryMoveNext(&self) -> windows_core::Result<u8> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).TryMoveNext)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricKeyValueStoreItemMetadataEnumerator2 {}
unsafe impl Sync for IFabricKeyValueStoreItemMetadataEnumerator2 {}
#[repr(C)]
pub struct IFabricKeyValueStoreItemMetadataEnumerator2_Vtbl {
    pub base__: IFabricKeyValueStoreItemMetadataEnumerator_Vtbl,
    pub TryMoveNext:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u8) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreItemMetadataResult,
    IFabricKeyValueStoreItemMetadataResult_Vtbl,
    0x17c483a1_69e6_4bdc_a058_54fd4a1839fd
);
impl core::ops::Deref for IFabricKeyValueStoreItemMetadataResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreItemMetadataResult,
    windows_core::IUnknown
);
impl IFabricKeyValueStoreItemMetadataResult {
    pub unsafe fn get_Metadata(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_KEY_VALUE_STORE_ITEM_METADATA {
        (windows_core::Interface::vtable(self).get_Metadata)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricKeyValueStoreItemMetadataResult {}
unsafe impl Sync for IFabricKeyValueStoreItemMetadataResult {}
#[repr(C)]
pub struct IFabricKeyValueStoreItemMetadataResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Metadata:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> *mut super::FabricTypes::FABRIC_KEY_VALUE_STORE_ITEM_METADATA,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreItemResult,
    IFabricKeyValueStoreItemResult_Vtbl,
    0xc1f1c89d_b0b8_44dc_bc97_6c074c1a805e
);
impl core::ops::Deref for IFabricKeyValueStoreItemResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricKeyValueStoreItemResult, windows_core::IUnknown);
impl IFabricKeyValueStoreItemResult {
    pub unsafe fn get_Item(&self) -> *mut super::FabricTypes::FABRIC_KEY_VALUE_STORE_ITEM {
        (windows_core::Interface::vtable(self).get_Item)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricKeyValueStoreItemResult {}
unsafe impl Sync for IFabricKeyValueStoreItemResult {}
#[repr(C)]
pub struct IFabricKeyValueStoreItemResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Item: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    )
        -> *mut super::FabricTypes::FABRIC_KEY_VALUE_STORE_ITEM,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreNotification,
    IFabricKeyValueStoreNotification_Vtbl,
    0xcb660aa6_c51e_4f05_9526_93982b550e8f
);
impl core::ops::Deref for IFabricKeyValueStoreNotification {
    type Target = IFabricKeyValueStoreItemResult;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreNotification,
    windows_core::IUnknown,
    IFabricKeyValueStoreItemResult
);
impl IFabricKeyValueStoreNotification {
    pub unsafe fn IsDelete(&self) -> windows::Win32::Foundation::BOOLEAN {
        (windows_core::Interface::vtable(self).IsDelete)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricKeyValueStoreNotification {}
unsafe impl Sync for IFabricKeyValueStoreNotification {}
#[repr(C)]
pub struct IFabricKeyValueStoreNotification_Vtbl {
    pub base__: IFabricKeyValueStoreItemResult_Vtbl,
    pub IsDelete:
        unsafe extern "system" fn(*mut core::ffi::c_void) -> windows::Win32::Foundation::BOOLEAN,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreNotificationEnumerator,
    IFabricKeyValueStoreNotificationEnumerator_Vtbl,
    0xef25bc08_be76_43c7_adad_20f01fba3399
);
impl core::ops::Deref for IFabricKeyValueStoreNotificationEnumerator {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreNotificationEnumerator,
    windows_core::IUnknown
);
impl IFabricKeyValueStoreNotificationEnumerator {
    pub unsafe fn MoveNext(&self) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).MoveNext)(windows_core::Interface::as_raw(self)).ok()
    }
    pub unsafe fn get_Current(&self) -> Option<IFabricKeyValueStoreNotification> {
        (windows_core::Interface::vtable(self).get_Current)(windows_core::Interface::as_raw(self))
    }
    pub unsafe fn Reset(&self) {
        (windows_core::Interface::vtable(self).Reset)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricKeyValueStoreNotificationEnumerator {}
unsafe impl Sync for IFabricKeyValueStoreNotificationEnumerator {}
#[repr(C)]
pub struct IFabricKeyValueStoreNotificationEnumerator_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub MoveNext: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub get_Current: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    ) -> Option<IFabricKeyValueStoreNotification>,
    pub Reset: unsafe extern "system" fn(*mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreNotificationEnumerator2,
    IFabricKeyValueStoreNotificationEnumerator2_Vtbl,
    0x55eec7c6_ae81_407a_b84c_22771d314ac7
);
impl core::ops::Deref for IFabricKeyValueStoreNotificationEnumerator2 {
    type Target = IFabricKeyValueStoreNotificationEnumerator;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreNotificationEnumerator2,
    windows_core::IUnknown,
    IFabricKeyValueStoreNotificationEnumerator
);
impl IFabricKeyValueStoreNotificationEnumerator2 {
    pub unsafe fn TryMoveNext(&self) -> windows_core::Result<u8> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).TryMoveNext)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricKeyValueStoreNotificationEnumerator2 {}
unsafe impl Sync for IFabricKeyValueStoreNotificationEnumerator2 {}
#[repr(C)]
pub struct IFabricKeyValueStoreNotificationEnumerator2_Vtbl {
    pub base__: IFabricKeyValueStoreNotificationEnumerator_Vtbl,
    pub TryMoveNext:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut u8) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreReplica,
    IFabricKeyValueStoreReplica_Vtbl,
    0x97da35c4_38ed_4a2a_8f37_fbeb56382235
);
impl core::ops::Deref for IFabricKeyValueStoreReplica {
    type Target = IFabricStatefulServiceReplica;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreReplica,
    windows_core::IUnknown,
    IFabricStatefulServiceReplica
);
impl IFabricKeyValueStoreReplica {
    pub unsafe fn GetCurrentEpoch(
        &self,
        currentepoch: *mut super::FabricTypes::FABRIC_EPOCH,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).GetCurrentEpoch)(
            windows_core::Interface::as_raw(self),
            currentepoch,
        )
        .ok()
    }
    pub unsafe fn UpdateReplicatorSettings(
        &self,
        replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).UpdateReplicatorSettings)(
            windows_core::Interface::as_raw(self),
            replicatorsettings,
        )
        .ok()
    }
    pub unsafe fn CreateTransaction(&self) -> windows_core::Result<IFabricTransaction> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).CreateTransaction)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn Add<P0, P1>(
        &self,
        transaction: P0,
        key: P1,
        value: &[u8],
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).Add)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            value.len().try_into().unwrap(),
            core::mem::transmute(value.as_ptr()),
        )
        .ok()
    }
    pub unsafe fn Remove<P0, P1>(
        &self,
        transaction: P0,
        key: P1,
        checksequencenumber: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).Remove)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            checksequencenumber,
        )
        .ok()
    }
    pub unsafe fn Update<P0, P1>(
        &self,
        transaction: P0,
        key: P1,
        value: &[u8],
        checksequencenumber: i64,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).Update)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            value.len().try_into().unwrap(),
            core::mem::transmute(value.as_ptr()),
            checksequencenumber,
        )
        .ok()
    }
    pub unsafe fn Get<P0, P1>(
        &self,
        transaction: P0,
        key: P1,
    ) -> windows_core::Result<IFabricKeyValueStoreItemResult>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).Get)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn GetMetadata<P0, P1>(
        &self,
        transaction: P0,
        key: P1,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataResult>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetMetadata)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn Contains<P0, P1>(&self, transaction: P0, key: P1) -> windows_core::Result<u8>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).Contains)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn Enumerate<P0>(
        &self,
        transaction: P0,
    ) -> windows_core::Result<IFabricKeyValueStoreItemEnumerator>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).Enumerate)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EnumerateByKey<P0, P1>(
        &self,
        transaction: P0,
        keyprefix: P1,
    ) -> windows_core::Result<IFabricKeyValueStoreItemEnumerator>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EnumerateByKey)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            keyprefix.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EnumerateMetadata<P0>(
        &self,
        transaction: P0,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataEnumerator>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EnumerateMetadata)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EnumerateMetadataByKey<P0, P1>(
        &self,
        transaction: P0,
        keyprefix: P1,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataEnumerator>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EnumerateMetadataByKey)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            keyprefix.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricKeyValueStoreReplica {}
unsafe impl Sync for IFabricKeyValueStoreReplica {}
#[repr(C)]
pub struct IFabricKeyValueStoreReplica_Vtbl {
    pub base__: IFabricStatefulServiceReplica_Vtbl,
    pub GetCurrentEpoch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::FabricTypes::FABRIC_EPOCH,
    ) -> windows_core::HRESULT,
    pub UpdateReplicatorSettings: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    ) -> windows_core::HRESULT,
    pub CreateTransaction: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Add: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        i32,
        *const u8,
    ) -> windows_core::HRESULT,
    pub Remove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        i64,
    ) -> windows_core::HRESULT,
    pub Update: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        i32,
        *const u8,
        i64,
    ) -> windows_core::HRESULT,
    pub Get: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetMetadata: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Contains: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut u8,
    ) -> windows_core::HRESULT,
    pub Enumerate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnumerateByKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnumerateMetadata: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnumerateMetadataByKey: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreReplica2,
    IFabricKeyValueStoreReplica2_Vtbl,
    0xfef805b2_5aca_4caa_9c51_fb3bd577a792
);
impl core::ops::Deref for IFabricKeyValueStoreReplica2 {
    type Target = IFabricKeyValueStoreReplica;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreReplica2,
    windows_core::IUnknown,
    IFabricStatefulServiceReplica,
    IFabricKeyValueStoreReplica
);
impl IFabricKeyValueStoreReplica2 {
    pub unsafe fn Backup<P0>(&self, backupdirectory: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).Backup)(
            windows_core::Interface::as_raw(self),
            backupdirectory.param().abi(),
        )
        .ok()
    }
    pub unsafe fn Restore<P0>(&self, backupdirectory: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).Restore)(
            windows_core::Interface::as_raw(self),
            backupdirectory.param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateTransaction2(
        &self,
        settings: *const super::FabricTypes::FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS,
    ) -> windows_core::Result<IFabricTransaction> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).CreateTransaction2)(
            windows_core::Interface::as_raw(self),
            settings,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricKeyValueStoreReplica2 {}
unsafe impl Sync for IFabricKeyValueStoreReplica2 {}
#[repr(C)]
pub struct IFabricKeyValueStoreReplica2_Vtbl {
    pub base__: IFabricKeyValueStoreReplica_Vtbl,
    pub Backup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
    pub Restore: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
    pub CreateTransaction2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreReplica3,
    IFabricKeyValueStoreReplica3_Vtbl,
    0xc1297172_a8aa_4096_bdcc_1ece0c5d8c8f
);
impl core::ops::Deref for IFabricKeyValueStoreReplica3 {
    type Target = IFabricKeyValueStoreReplica2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreReplica3,
    windows_core::IUnknown,
    IFabricStatefulServiceReplica,
    IFabricKeyValueStoreReplica,
    IFabricKeyValueStoreReplica2
);
impl IFabricKeyValueStoreReplica3 {
    pub unsafe fn BeginBackup<P0, P1, P2>(
        &self,
        backupdirectory: P0,
        backupoption: super::FabricTypes::FABRIC_STORE_BACKUP_OPTION,
        postbackuphandler: P1,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<IFabricStorePostBackupHandler>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginBackup)(
            windows_core::Interface::as_raw(self),
            backupdirectory.param().abi(),
            backupoption,
            postbackuphandler.param().abi(),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndBackup<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndBackup)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricKeyValueStoreReplica3 {}
unsafe impl Sync for IFabricKeyValueStoreReplica3 {}
#[repr(C)]
pub struct IFabricKeyValueStoreReplica3_Vtbl {
    pub base__: IFabricKeyValueStoreReplica2_Vtbl,
    pub BeginBackup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        super::FabricTypes::FABRIC_STORE_BACKUP_OPTION,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndBackup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreReplica4,
    IFabricKeyValueStoreReplica4_Vtbl,
    0xff16d2f1_41a9_4c64_804a_a20bf28c04f3
);
impl core::ops::Deref for IFabricKeyValueStoreReplica4 {
    type Target = IFabricKeyValueStoreReplica3;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreReplica4,
    windows_core::IUnknown,
    IFabricStatefulServiceReplica,
    IFabricKeyValueStoreReplica,
    IFabricKeyValueStoreReplica2,
    IFabricKeyValueStoreReplica3
);
impl IFabricKeyValueStoreReplica4 {
    pub unsafe fn BeginRestore<P0, P1>(
        &self,
        backupdirectory: P0,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRestore)(
            windows_core::Interface::as_raw(self),
            backupdirectory.param().abi(),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRestore<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRestore)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricKeyValueStoreReplica4 {}
unsafe impl Sync for IFabricKeyValueStoreReplica4 {}
#[repr(C)]
pub struct IFabricKeyValueStoreReplica4_Vtbl {
    pub base__: IFabricKeyValueStoreReplica3_Vtbl,
    pub BeginRestore: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRestore: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreReplica5,
    IFabricKeyValueStoreReplica5_Vtbl,
    0x34f2da40_6227_448a_be72_c517b0d69432
);
impl core::ops::Deref for IFabricKeyValueStoreReplica5 {
    type Target = IFabricKeyValueStoreReplica4;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreReplica5,
    windows_core::IUnknown,
    IFabricStatefulServiceReplica,
    IFabricKeyValueStoreReplica,
    IFabricKeyValueStoreReplica2,
    IFabricKeyValueStoreReplica3,
    IFabricKeyValueStoreReplica4
);
impl IFabricKeyValueStoreReplica5 {
    pub unsafe fn TryAdd<P0, P1>(
        &self,
        transaction: P0,
        key: P1,
        value: &[u8],
    ) -> windows_core::Result<u8>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).TryAdd)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            value.len().try_into().unwrap(),
            core::mem::transmute(value.as_ptr()),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn TryRemove<P0, P1>(
        &self,
        transaction: P0,
        key: P1,
        checksequencenumber: i64,
    ) -> windows_core::Result<u8>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).TryRemove)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            checksequencenumber,
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn TryUpdate<P0, P1>(
        &self,
        transaction: P0,
        key: P1,
        value: &[u8],
        checksequencenumber: i64,
    ) -> windows_core::Result<u8>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).TryUpdate)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            value.len().try_into().unwrap(),
            core::mem::transmute(value.as_ptr()),
            checksequencenumber,
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn TryGet<P0, P1>(
        &self,
        transaction: P0,
        key: P1,
    ) -> windows_core::Result<IFabricKeyValueStoreItemResult>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).TryGet)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn TryGetMetadata<P0, P1>(
        &self,
        transaction: P0,
        key: P1,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataResult>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).TryGetMetadata)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            key.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EnumerateByKey2<P0, P1, P2>(
        &self,
        transaction: P0,
        keyprefix: P1,
        strictprefix: P2,
    ) -> windows_core::Result<IFabricKeyValueStoreItemEnumerator>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<windows::Win32::Foundation::BOOLEAN>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EnumerateByKey2)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            keyprefix.param().abi(),
            strictprefix.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EnumerateMetadataByKey2<P0, P1, P2>(
        &self,
        transaction: P0,
        keyprefix: P1,
        strictprefix: P2,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataEnumerator>
    where
        P0: windows_core::Param<IFabricTransactionBase>,
        P1: windows_core::Param<windows_core::PCWSTR>,
        P2: windows_core::Param<windows::Win32::Foundation::BOOLEAN>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EnumerateMetadataByKey2)(
            windows_core::Interface::as_raw(self),
            transaction.param().abi(),
            keyprefix.param().abi(),
            strictprefix.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricKeyValueStoreReplica5 {}
unsafe impl Sync for IFabricKeyValueStoreReplica5 {}
#[repr(C)]
pub struct IFabricKeyValueStoreReplica5_Vtbl {
    pub base__: IFabricKeyValueStoreReplica4_Vtbl,
    pub TryAdd: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        i32,
        *const u8,
        *mut u8,
    ) -> windows_core::HRESULT,
    pub TryRemove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        i64,
        *mut u8,
    ) -> windows_core::HRESULT,
    pub TryUpdate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        i32,
        *const u8,
        i64,
        *mut u8,
    ) -> windows_core::HRESULT,
    pub TryGet: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub TryGetMetadata: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnumerateByKey2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows::Win32::Foundation::BOOLEAN,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EnumerateMetadataByKey2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows::Win32::Foundation::BOOLEAN,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricKeyValueStoreReplica6,
    IFabricKeyValueStoreReplica6_Vtbl,
    0x56e77be1_e81f_4e42_8522_162c2d608184
);
impl core::ops::Deref for IFabricKeyValueStoreReplica6 {
    type Target = IFabricKeyValueStoreReplica5;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricKeyValueStoreReplica6,
    windows_core::IUnknown,
    IFabricStatefulServiceReplica,
    IFabricKeyValueStoreReplica,
    IFabricKeyValueStoreReplica2,
    IFabricKeyValueStoreReplica3,
    IFabricKeyValueStoreReplica4,
    IFabricKeyValueStoreReplica5
);
impl IFabricKeyValueStoreReplica6 {
    pub unsafe fn BeginRestore2<P0, P1>(
        &self,
        backupdirectory: P0,
        settings: *const super::FabricTypes::FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRestore2)(
            windows_core::Interface::as_raw(self),
            backupdirectory.param().abi(),
            settings,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricKeyValueStoreReplica6 {}
unsafe impl Sync for IFabricKeyValueStoreReplica6 {}
#[repr(C)]
pub struct IFabricKeyValueStoreReplica6_Vtbl {
    pub base__: IFabricKeyValueStoreReplica5_Vtbl,
    pub BeginRestore2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *const super::FabricTypes::FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricNodeContextResult,
    IFabricNodeContextResult_Vtbl,
    0x0952f885_6f5a_4ed3_abe4_90c403d1e3ce
);
impl core::ops::Deref for IFabricNodeContextResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricNodeContextResult, windows_core::IUnknown);
impl IFabricNodeContextResult {
    pub unsafe fn get_NodeContext(&self) -> *mut super::FabricTypes::FABRIC_NODE_CONTEXT {
        (windows_core::Interface::vtable(self).get_NodeContext)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricNodeContextResult {}
unsafe impl Sync for IFabricNodeContextResult {}
#[repr(C)]
pub struct IFabricNodeContextResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_NodeContext: unsafe extern "system" fn(
        *mut core::ffi::c_void,
    )
        -> *mut super::FabricTypes::FABRIC_NODE_CONTEXT,
}
windows_core::imp::define_interface!(
    IFabricNodeContextResult2,
    IFabricNodeContextResult2_Vtbl,
    0x472bf2e1_d617_4b5c_a91d_fabed9ff3550
);
impl core::ops::Deref for IFabricNodeContextResult2 {
    type Target = IFabricNodeContextResult;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricNodeContextResult2,
    windows_core::IUnknown,
    IFabricNodeContextResult
);
impl IFabricNodeContextResult2 {
    pub unsafe fn GetDirectory<P0>(
        &self,
        logicaldirectoryname: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetDirectory)(
            windows_core::Interface::as_raw(self),
            logicaldirectoryname.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricNodeContextResult2 {}
unsafe impl Sync for IFabricNodeContextResult2 {}
#[repr(C)]
pub struct IFabricNodeContextResult2_Vtbl {
    pub base__: IFabricNodeContextResult_Vtbl,
    pub GetDirectory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricOperation,
    IFabricOperation_Vtbl,
    0xf4ad6bfa_e23c_4a48_9617_c099cd59a23a
);
impl core::ops::Deref for IFabricOperation {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricOperation, windows_core::IUnknown);
impl IFabricOperation {
    pub unsafe fn get_Metadata(&self) -> *mut super::FabricTypes::FABRIC_OPERATION_METADATA {
        (windows_core::Interface::vtable(self).get_Metadata)(windows_core::Interface::as_raw(self))
    }
    pub unsafe fn GetData(
        &self,
        count: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_OPERATION_DATA_BUFFER> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetData)(
            windows_core::Interface::as_raw(self),
            count,
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn Acknowledge(&self) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).Acknowledge)(windows_core::Interface::as_raw(self))
            .ok()
    }
}
unsafe impl Send for IFabricOperation {}
unsafe impl Sync for IFabricOperation {}
#[repr(C)]
pub struct IFabricOperation_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Metadata:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_OPERATION_METADATA,
    pub GetData: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut super::FabricTypes::FABRIC_OPERATION_DATA_BUFFER,
    ) -> windows_core::HRESULT,
    pub Acknowledge: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricOperationData,
    IFabricOperationData_Vtbl,
    0xbab8ad87_37b7_482a_985d_baf38a785dcd
);
impl core::ops::Deref for IFabricOperationData {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricOperationData, windows_core::IUnknown);
impl IFabricOperationData {
    pub unsafe fn GetData(
        &self,
        count: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_OPERATION_DATA_BUFFER> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetData)(
            windows_core::Interface::as_raw(self),
            count,
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricOperationData {}
unsafe impl Sync for IFabricOperationData {}
#[repr(C)]
pub struct IFabricOperationData_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetData: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut u32,
        *mut *mut super::FabricTypes::FABRIC_OPERATION_DATA_BUFFER,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricOperationDataStream,
    IFabricOperationDataStream_Vtbl,
    0xc4e9084c_be92_49c9_8c18_d44d088c2e32
);
impl core::ops::Deref for IFabricOperationDataStream {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricOperationDataStream, windows_core::IUnknown);
impl IFabricOperationDataStream {
    pub unsafe fn BeginGetNext<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetNext)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetNext<P0>(&self, context: P0) -> windows_core::Result<IFabricOperationData>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetNext)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricOperationDataStream {}
unsafe impl Sync for IFabricOperationDataStream {}
#[repr(C)]
pub struct IFabricOperationDataStream_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginGetNext: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetNext: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricOperationStream,
    IFabricOperationStream_Vtbl,
    0xa98fb97a_d6b0_408a_a878_a9edb09c2587
);
impl core::ops::Deref for IFabricOperationStream {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricOperationStream, windows_core::IUnknown);
impl IFabricOperationStream {
    pub unsafe fn BeginGetOperation<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginGetOperation)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndGetOperation<P0>(&self, context: P0) -> windows_core::Result<IFabricOperation>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndGetOperation)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricOperationStream {}
unsafe impl Sync for IFabricOperationStream {}
#[repr(C)]
pub struct IFabricOperationStream_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginGetOperation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndGetOperation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricOperationStream2,
    IFabricOperationStream2_Vtbl,
    0x0930199b_590a_4065_bec9_5f93b6aae086
);
impl core::ops::Deref for IFabricOperationStream2 {
    type Target = IFabricOperationStream;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricOperationStream2,
    windows_core::IUnknown,
    IFabricOperationStream
);
impl IFabricOperationStream2 {
    pub unsafe fn ReportFault(
        &self,
        faulttype: super::FabricTypes::FABRIC_FAULT_TYPE,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportFault)(
            windows_core::Interface::as_raw(self),
            faulttype,
        )
        .ok()
    }
}
unsafe impl Send for IFabricOperationStream2 {}
unsafe impl Sync for IFabricOperationStream2 {}
#[repr(C)]
pub struct IFabricOperationStream2_Vtbl {
    pub base__: IFabricOperationStream_Vtbl,
    pub ReportFault: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_FAULT_TYPE,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricPrimaryReplicator,
    IFabricPrimaryReplicator_Vtbl,
    0x564e50dd_c3a4_4600_a60e_6658874307ae
);
impl core::ops::Deref for IFabricPrimaryReplicator {
    type Target = IFabricReplicator;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricPrimaryReplicator,
    windows_core::IUnknown,
    IFabricReplicator
);
impl IFabricPrimaryReplicator {
    pub unsafe fn BeginOnDataLoss<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginOnDataLoss)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndOnDataLoss<P0>(&self, context: P0) -> windows_core::Result<u8>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndOnDataLoss)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn UpdateCatchUpReplicaSetConfiguration(
        &self,
        currentconfiguration: *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
        previousconfiguration: *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).UpdateCatchUpReplicaSetConfiguration)(
            windows_core::Interface::as_raw(self),
            currentconfiguration,
            previousconfiguration,
        )
        .ok()
    }
    pub unsafe fn BeginWaitForCatchUpQuorum<P0>(
        &self,
        catchupmode: super::FabricTypes::FABRIC_REPLICA_SET_QUORUM_MODE,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginWaitForCatchUpQuorum)(
            windows_core::Interface::as_raw(self),
            catchupmode,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndWaitForCatchUpQuorum<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndWaitForCatchUpQuorum)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn UpdateCurrentReplicaSetConfiguration(
        &self,
        currentconfiguration: *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).UpdateCurrentReplicaSetConfiguration)(
            windows_core::Interface::as_raw(self),
            currentconfiguration,
        )
        .ok()
    }
    pub unsafe fn BeginBuildReplica<P0>(
        &self,
        replica: *const super::FabricTypes::FABRIC_REPLICA_INFORMATION,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginBuildReplica)(
            windows_core::Interface::as_raw(self),
            replica,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndBuildReplica<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndBuildReplica)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveReplica(&self, replicaid: i64) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).RemoveReplica)(
            windows_core::Interface::as_raw(self),
            replicaid,
        )
        .ok()
    }
}
unsafe impl Send for IFabricPrimaryReplicator {}
unsafe impl Sync for IFabricPrimaryReplicator {}
#[repr(C)]
pub struct IFabricPrimaryReplicator_Vtbl {
    pub base__: IFabricReplicator_Vtbl,
    pub BeginOnDataLoss: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndOnDataLoss: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u8,
    ) -> windows_core::HRESULT,
    pub UpdateCatchUpReplicaSetConfiguration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
        *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
    )
        -> windows_core::HRESULT,
    pub BeginWaitForCatchUpQuorum: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_REPLICA_SET_QUORUM_MODE,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndWaitForCatchUpQuorum: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub UpdateCurrentReplicaSetConfiguration: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
    )
        -> windows_core::HRESULT,
    pub BeginBuildReplica: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPLICA_INFORMATION,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndBuildReplica: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemoveReplica:
        unsafe extern "system" fn(*mut core::ffi::c_void, i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricProcessExitHandler,
    IFabricProcessExitHandler_Vtbl,
    0xc58d50a2_01f0_4267_bbe7_223b565c1346
);
impl core::ops::Deref for IFabricProcessExitHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricProcessExitHandler, windows_core::IUnknown);
impl IFabricProcessExitHandler {
    pub unsafe fn FabricProcessExited(&self) {
        (windows_core::Interface::vtable(self).FabricProcessExited)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricProcessExitHandler {}
unsafe impl Sync for IFabricProcessExitHandler {}
#[repr(C)]
pub struct IFabricProcessExitHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub FabricProcessExited: unsafe extern "system" fn(*mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricReplicator,
    IFabricReplicator_Vtbl,
    0x067f144a_e5be_4f5e_a181_8b5593e20242
);
impl core::ops::Deref for IFabricReplicator {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricReplicator, windows_core::IUnknown);
impl IFabricReplicator {
    pub unsafe fn BeginOpen<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginOpen)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndOpen<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndOpen)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginChangeRole<P0>(
        &self,
        epoch: *const super::FabricTypes::FABRIC_EPOCH,
        role: super::FabricTypes::FABRIC_REPLICA_ROLE,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginChangeRole)(
            windows_core::Interface::as_raw(self),
            epoch,
            role,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndChangeRole<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndChangeRole)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginUpdateEpoch<P0>(
        &self,
        epoch: *const super::FabricTypes::FABRIC_EPOCH,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpdateEpoch)(
            windows_core::Interface::as_raw(self),
            epoch,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpdateEpoch<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUpdateEpoch)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginClose<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginClose)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndClose<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndClose)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn Abort(&self) {
        (windows_core::Interface::vtable(self).Abort)(windows_core::Interface::as_raw(self))
    }
    pub unsafe fn GetCurrentProgress(&self) -> windows_core::Result<i64> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetCurrentProgress)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetCatchUpCapability(&self) -> windows_core::Result<i64> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetCatchUpCapability)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricReplicator {}
unsafe impl Sync for IFabricReplicator {}
#[repr(C)]
pub struct IFabricReplicator_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginOpen: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndOpen: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginChangeRole: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_EPOCH,
        super::FabricTypes::FABRIC_REPLICA_ROLE,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndChangeRole: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginUpdateEpoch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_EPOCH,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpdateEpoch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginClose: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndClose: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Abort: unsafe extern "system" fn(*mut core::ffi::c_void),
    pub GetCurrentProgress:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i64) -> windows_core::HRESULT,
    pub GetCatchUpCapability:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i64) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricReplicatorCatchupSpecificQuorum,
    IFabricReplicatorCatchupSpecificQuorum_Vtbl,
    0xaa3116fe_277d_482d_bd16_5366fa405757
);
impl core::ops::Deref for IFabricReplicatorCatchupSpecificQuorum {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricReplicatorCatchupSpecificQuorum,
    windows_core::IUnknown
);
impl IFabricReplicatorCatchupSpecificQuorum {}
unsafe impl Send for IFabricReplicatorCatchupSpecificQuorum {}
unsafe impl Sync for IFabricReplicatorCatchupSpecificQuorum {}
#[repr(C)]
pub struct IFabricReplicatorCatchupSpecificQuorum_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
}
windows_core::imp::define_interface!(
    IFabricReplicatorSettingsResult,
    IFabricReplicatorSettingsResult_Vtbl,
    0x718954f3_dc1e_4060_9806_0cbf36f71051
);
impl core::ops::Deref for IFabricReplicatorSettingsResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricReplicatorSettingsResult, windows_core::IUnknown);
impl IFabricReplicatorSettingsResult {
    pub unsafe fn get_ReplicatorSettings(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_REPLICATOR_SETTINGS {
        (windows_core::Interface::vtable(self).get_ReplicatorSettings)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricReplicatorSettingsResult {}
unsafe impl Sync for IFabricReplicatorSettingsResult {}
#[repr(C)]
pub struct IFabricReplicatorSettingsResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_ReplicatorSettings:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
}
windows_core::imp::define_interface!(
    IFabricRuntime,
    IFabricRuntime_Vtbl,
    0xcc53af8e_74cd_11df_ac3e_0024811e3892
);
impl core::ops::Deref for IFabricRuntime {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricRuntime, windows_core::IUnknown);
impl IFabricRuntime {
    pub unsafe fn BeginRegisterStatelessServiceFactory<P0, P1, P2>(
        &self,
        servicetypename: P0,
        factory: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<IFabricStatelessServiceFactory>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRegisterStatelessServiceFactory)(
            windows_core::Interface::as_raw(self),
            servicetypename.param().abi(),
            factory.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRegisterStatelessServiceFactory<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRegisterStatelessServiceFactory)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn RegisterStatelessServiceFactory<P0, P1>(
        &self,
        servicetypename: P0,
        factory: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<IFabricStatelessServiceFactory>,
    {
        (windows_core::Interface::vtable(self).RegisterStatelessServiceFactory)(
            windows_core::Interface::as_raw(self),
            servicetypename.param().abi(),
            factory.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginRegisterStatefulServiceFactory<P0, P1, P2>(
        &self,
        servicetypename: P0,
        factory: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<IFabricStatefulServiceFactory>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRegisterStatefulServiceFactory)(
            windows_core::Interface::as_raw(self),
            servicetypename.param().abi(),
            factory.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRegisterStatefulServiceFactory<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRegisterStatefulServiceFactory)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn RegisterStatefulServiceFactory<P0, P1>(
        &self,
        servicetypename: P0,
        factory: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<IFabricStatefulServiceFactory>,
    {
        (windows_core::Interface::vtable(self).RegisterStatefulServiceFactory)(
            windows_core::Interface::as_raw(self),
            servicetypename.param().abi(),
            factory.param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateServiceGroupFactoryBuilder(
        &self,
    ) -> windows_core::Result<IFabricServiceGroupFactoryBuilder> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).CreateServiceGroupFactoryBuilder)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginRegisterServiceGroupFactory<P0, P1, P2>(
        &self,
        groupservicetype: P0,
        factory: P1,
        timeoutmilliseconds: u32,
        callback: P2,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<IFabricServiceGroupFactory>,
        P2: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRegisterServiceGroupFactory)(
            windows_core::Interface::as_raw(self),
            groupservicetype.param().abi(),
            factory.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRegisterServiceGroupFactory<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndRegisterServiceGroupFactory)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn RegisterServiceGroupFactory<P0, P1>(
        &self,
        groupservicetype: P0,
        factory: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<IFabricServiceGroupFactory>,
    {
        (windows_core::Interface::vtable(self).RegisterServiceGroupFactory)(
            windows_core::Interface::as_raw(self),
            groupservicetype.param().abi(),
            factory.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricRuntime {}
unsafe impl Sync for IFabricRuntime {}
#[repr(C)]
pub struct IFabricRuntime_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginRegisterStatelessServiceFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndRegisterStatelessServiceFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RegisterStatelessServiceFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRegisterStatefulServiceFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    )
        -> windows_core::HRESULT,
    pub EndRegisterStatefulServiceFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RegisterStatefulServiceFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CreateServiceGroupFactoryBuilder: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginRegisterServiceGroupFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRegisterServiceGroupFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RegisterServiceGroupFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricSecondaryEventHandler,
    IFabricSecondaryEventHandler_Vtbl,
    0x7d124a7d_258e_49f2_a9b0_e800406103fb
);
impl core::ops::Deref for IFabricSecondaryEventHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricSecondaryEventHandler, windows_core::IUnknown);
impl IFabricSecondaryEventHandler {
    pub unsafe fn OnCopyComplete<P0>(&self, enumerator: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricKeyValueStoreEnumerator>,
    {
        (windows_core::Interface::vtable(self).OnCopyComplete)(
            windows_core::Interface::as_raw(self),
            enumerator.param().abi(),
        )
        .ok()
    }
    pub unsafe fn OnReplicationOperation<P0>(&self, enumerator: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricKeyValueStoreNotificationEnumerator>,
    {
        (windows_core::Interface::vtable(self).OnReplicationOperation)(
            windows_core::Interface::as_raw(self),
            enumerator.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricSecondaryEventHandler {}
unsafe impl Sync for IFabricSecondaryEventHandler {}
#[repr(C)]
pub struct IFabricSecondaryEventHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnCopyComplete: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub OnReplicationOperation: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricSecurityCredentialsResult,
    IFabricSecurityCredentialsResult_Vtbl,
    0x049a111d_6a30_48e9_8f69_470760d3efb9
);
impl core::ops::Deref for IFabricSecurityCredentialsResult {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricSecurityCredentialsResult, windows_core::IUnknown);
impl IFabricSecurityCredentialsResult {
    pub unsafe fn get_SecurityCredentials(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SECURITY_CREDENTIALS {
        (windows_core::Interface::vtable(self).get_SecurityCredentials)(
            windows_core::Interface::as_raw(self),
        )
    }
}
unsafe impl Send for IFabricSecurityCredentialsResult {}
unsafe impl Sync for IFabricSecurityCredentialsResult {}
#[repr(C)]
pub struct IFabricSecurityCredentialsResult_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_SecurityCredentials:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SECURITY_CREDENTIALS,
}
windows_core::imp::define_interface!(
    IFabricServiceGroupFactory,
    IFabricServiceGroupFactory_Vtbl,
    0x3860d61d_1e51_4a65_b109_d93c11311657
);
impl core::ops::Deref for IFabricServiceGroupFactory {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricServiceGroupFactory, windows_core::IUnknown);
impl IFabricServiceGroupFactory {}
unsafe impl Send for IFabricServiceGroupFactory {}
unsafe impl Sync for IFabricServiceGroupFactory {}
#[repr(C)]
pub struct IFabricServiceGroupFactory_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
}
windows_core::imp::define_interface!(
    IFabricServiceGroupFactoryBuilder,
    IFabricServiceGroupFactoryBuilder_Vtbl,
    0xa9fe8b06_19b1_49e6_8911_41d9d9219e1c
);
impl core::ops::Deref for IFabricServiceGroupFactoryBuilder {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricServiceGroupFactoryBuilder, windows_core::IUnknown);
impl IFabricServiceGroupFactoryBuilder {
    pub unsafe fn AddStatelessServiceFactory<P0, P1>(
        &self,
        memberservicetype: P0,
        factory: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<IFabricStatelessServiceFactory>,
    {
        (windows_core::Interface::vtable(self).AddStatelessServiceFactory)(
            windows_core::Interface::as_raw(self),
            memberservicetype.param().abi(),
            factory.param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddStatefulServiceFactory<P0, P1>(
        &self,
        memberservicetype: P0,
        factory: P1,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<IFabricStatefulServiceFactory>,
    {
        (windows_core::Interface::vtable(self).AddStatefulServiceFactory)(
            windows_core::Interface::as_raw(self),
            memberservicetype.param().abi(),
            factory.param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveServiceFactory<P0>(&self, memberservicetype: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).RemoveServiceFactory)(
            windows_core::Interface::as_raw(self),
            memberservicetype.param().abi(),
        )
        .ok()
    }
    pub unsafe fn ToServiceGroupFactory(&self) -> windows_core::Result<IFabricServiceGroupFactory> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).ToServiceGroupFactory)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricServiceGroupFactoryBuilder {}
unsafe impl Sync for IFabricServiceGroupFactoryBuilder {}
#[repr(C)]
pub struct IFabricServiceGroupFactoryBuilder_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub AddStatelessServiceFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub AddStatefulServiceFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RemoveServiceFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
    pub ToServiceGroupFactory: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricServiceGroupPartition,
    IFabricServiceGroupPartition_Vtbl,
    0x2b24299a_7489_467f_8e7f_4507bff73b86
);
impl core::ops::Deref for IFabricServiceGroupPartition {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricServiceGroupPartition, windows_core::IUnknown);
impl IFabricServiceGroupPartition {
    pub unsafe fn ResolveMember<P0>(
        &self,
        name: P0,
        riid: *const windows_core::GUID,
    ) -> windows_core::Result<*mut core::ffi::c_void>
    where
        P0: windows_core::Param<super::FabricTypes::FABRIC_URI>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).ResolveMember)(
            windows_core::Interface::as_raw(self),
            name.param().abi(),
            riid,
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricServiceGroupPartition {}
unsafe impl Sync for IFabricServiceGroupPartition {}
#[repr(C)]
pub struct IFabricServiceGroupPartition_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub ResolveMember: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_URI,
        *const windows_core::GUID,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStateProvider,
    IFabricStateProvider_Vtbl,
    0x3ebfec79_bd27_43f3_8be8_da38ee723951
);
impl core::ops::Deref for IFabricStateProvider {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStateProvider, windows_core::IUnknown);
impl IFabricStateProvider {
    pub unsafe fn BeginUpdateEpoch<P0>(
        &self,
        epoch: *const super::FabricTypes::FABRIC_EPOCH,
        previousepochlastsequencenumber: i64,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginUpdateEpoch)(
            windows_core::Interface::as_raw(self),
            epoch,
            previousepochlastsequencenumber,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndUpdateEpoch<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndUpdateEpoch)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetLastCommittedSequenceNumber(&self) -> windows_core::Result<i64> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetLastCommittedSequenceNumber)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn BeginOnDataLoss<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginOnDataLoss)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndOnDataLoss<P0>(&self, context: P0) -> windows_core::Result<u8>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndOnDataLoss)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetCopyContext(&self) -> windows_core::Result<IFabricOperationDataStream> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetCopyContext)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn GetCopyState<P0>(
        &self,
        uptosequencenumber: i64,
        copycontextstream: P0,
    ) -> windows_core::Result<IFabricOperationDataStream>
    where
        P0: windows_core::Param<IFabricOperationDataStream>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetCopyState)(
            windows_core::Interface::as_raw(self),
            uptosequencenumber,
            copycontextstream.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricStateProvider {}
unsafe impl Sync for IFabricStateProvider {}
#[repr(C)]
pub struct IFabricStateProvider_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginUpdateEpoch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_EPOCH,
        i64,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndUpdateEpoch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetLastCommittedSequenceNumber:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut i64) -> windows_core::HRESULT,
    pub BeginOnDataLoss: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndOnDataLoss: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u8,
    ) -> windows_core::HRESULT,
    pub GetCopyContext: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetCopyState: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        i64,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStateReplicator,
    IFabricStateReplicator_Vtbl,
    0x89e9a978_c771_44f2_92e8_3bf271cabe9c
);
impl core::ops::Deref for IFabricStateReplicator {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStateReplicator, windows_core::IUnknown);
impl IFabricStateReplicator {
    pub unsafe fn BeginReplicate<P0, P1>(
        &self,
        operationdata: P0,
        callback: P1,
        sequencenumber: *mut i64,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<IFabricOperationData>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginReplicate)(
            windows_core::Interface::as_raw(self),
            operationdata.param().abi(),
            callback.param().abi(),
            sequencenumber,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndReplicate<P0>(&self, context: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndReplicate)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetReplicationStream(&self) -> windows_core::Result<IFabricOperationStream> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetReplicationStream)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn GetCopyStream(&self) -> windows_core::Result<IFabricOperationStream> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetCopyStream)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn UpdateReplicatorSettings(
        &self,
        replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).UpdateReplicatorSettings)(
            windows_core::Interface::as_raw(self),
            replicatorsettings,
        )
        .ok()
    }
}
unsafe impl Send for IFabricStateReplicator {}
unsafe impl Sync for IFabricStateReplicator {}
#[repr(C)]
pub struct IFabricStateReplicator_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginReplicate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndReplicate: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub GetReplicationStream: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub GetCopyStream: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub UpdateReplicatorSettings: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStateReplicator2,
    IFabricStateReplicator2_Vtbl,
    0x4a28d542_658f_46f9_9bf4_79b7cae25c5d
);
impl core::ops::Deref for IFabricStateReplicator2 {
    type Target = IFabricStateReplicator;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricStateReplicator2,
    windows_core::IUnknown,
    IFabricStateReplicator
);
impl IFabricStateReplicator2 {
    pub unsafe fn GetReplicatorSettings(
        &self,
    ) -> windows_core::Result<IFabricReplicatorSettingsResult> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetReplicatorSettings)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricStateReplicator2 {}
unsafe impl Sync for IFabricStateReplicator2 {}
#[repr(C)]
pub struct IFabricStateReplicator2_Vtbl {
    pub base__: IFabricStateReplicator_Vtbl,
    pub GetReplicatorSettings: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStatefulServiceFactory,
    IFabricStatefulServiceFactory_Vtbl,
    0x77ff0c6b_6780_48ec_b4b0_61989327b0f2
);
impl core::ops::Deref for IFabricStatefulServiceFactory {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStatefulServiceFactory, windows_core::IUnknown);
impl IFabricStatefulServiceFactory {
    pub unsafe fn CreateReplica<P0, P1>(
        &self,
        servicetypename: P0,
        servicename: P1,
        initializationdata: &[u8],
        partitionid: windows_core::GUID,
        replicaid: i64,
    ) -> windows_core::Result<IFabricStatefulServiceReplica>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricTypes::FABRIC_URI>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).CreateReplica)(
            windows_core::Interface::as_raw(self),
            servicetypename.param().abi(),
            servicename.param().abi(),
            initializationdata.len().try_into().unwrap(),
            core::mem::transmute(initializationdata.as_ptr()),
            core::mem::transmute(partitionid),
            replicaid,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricStatefulServiceFactory {}
unsafe impl Sync for IFabricStatefulServiceFactory {}
#[repr(C)]
pub struct IFabricStatefulServiceFactory_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub CreateReplica: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        super::FabricTypes::FABRIC_URI,
        u32,
        *const u8,
        windows_core::GUID,
        i64,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStatefulServicePartition,
    IFabricStatefulServicePartition_Vtbl,
    0x5beccc37_8655_4f20_bd43_f50691d7cd16
);
impl core::ops::Deref for IFabricStatefulServicePartition {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStatefulServicePartition, windows_core::IUnknown);
impl IFabricStatefulServicePartition {
    pub unsafe fn GetPartitionInfo(
        &self,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_SERVICE_PARTITION_INFORMATION> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetPartitionInfo)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetReadStatus(
        &self,
    ) -> windows_core::Result<super::FabricTypes::FABRIC_SERVICE_PARTITION_ACCESS_STATUS> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetReadStatus)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn GetWriteStatus(
        &self,
    ) -> windows_core::Result<super::FabricTypes::FABRIC_SERVICE_PARTITION_ACCESS_STATUS> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetWriteStatus)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn CreateReplicator<P0>(
        &self,
        stateprovider: P0,
        replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
        replicator: *mut Option<IFabricReplicator>,
    ) -> windows_core::Result<IFabricStateReplicator>
    where
        P0: windows_core::Param<IFabricStateProvider>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).CreateReplicator)(
            windows_core::Interface::as_raw(self),
            stateprovider.param().abi(),
            replicatorsettings,
            core::mem::transmute(replicator),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn ReportLoad(
        &self,
        metrics: &[super::FabricTypes::FABRIC_LOAD_METRIC],
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportLoad)(
            windows_core::Interface::as_raw(self),
            metrics.len().try_into().unwrap(),
            core::mem::transmute(metrics.as_ptr()),
        )
        .ok()
    }
    pub unsafe fn ReportFault(
        &self,
        faulttype: super::FabricTypes::FABRIC_FAULT_TYPE,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportFault)(
            windows_core::Interface::as_raw(self),
            faulttype,
        )
        .ok()
    }
}
unsafe impl Send for IFabricStatefulServicePartition {}
unsafe impl Sync for IFabricStatefulServicePartition {}
#[repr(C)]
pub struct IFabricStatefulServicePartition_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetPartitionInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_INFORMATION,
    ) -> windows_core::HRESULT,
    pub GetReadStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_ACCESS_STATUS,
    ) -> windows_core::HRESULT,
    pub GetWriteStatus: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_ACCESS_STATUS,
    ) -> windows_core::HRESULT,
    pub CreateReplicator: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
        *mut *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub ReportLoad: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const super::FabricTypes::FABRIC_LOAD_METRIC,
    ) -> windows_core::HRESULT,
    pub ReportFault: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_FAULT_TYPE,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStatefulServicePartition1,
    IFabricStatefulServicePartition1_Vtbl,
    0xc9c66f2f_9dff_4c87_bbe4_a08b4c4074cf
);
impl core::ops::Deref for IFabricStatefulServicePartition1 {
    type Target = IFabricStatefulServicePartition;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricStatefulServicePartition1,
    windows_core::IUnknown,
    IFabricStatefulServicePartition
);
impl IFabricStatefulServicePartition1 {
    pub unsafe fn ReportMoveCost(
        &self,
        movecost: super::FabricTypes::FABRIC_MOVE_COST,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportMoveCost)(
            windows_core::Interface::as_raw(self),
            movecost,
        )
        .ok()
    }
}
unsafe impl Send for IFabricStatefulServicePartition1 {}
unsafe impl Sync for IFabricStatefulServicePartition1 {}
#[repr(C)]
pub struct IFabricStatefulServicePartition1_Vtbl {
    pub base__: IFabricStatefulServicePartition_Vtbl,
    pub ReportMoveCost: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_MOVE_COST,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStatefulServicePartition2,
    IFabricStatefulServicePartition2_Vtbl,
    0xdf27b476_fa25_459f_a7d3_87d3eec9c73c
);
impl core::ops::Deref for IFabricStatefulServicePartition2 {
    type Target = IFabricStatefulServicePartition1;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricStatefulServicePartition2,
    windows_core::IUnknown,
    IFabricStatefulServicePartition,
    IFabricStatefulServicePartition1
);
impl IFabricStatefulServicePartition2 {
    pub unsafe fn ReportReplicaHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportReplicaHealth)(
            windows_core::Interface::as_raw(self),
            healthinfo,
        )
        .ok()
    }
    pub unsafe fn ReportPartitionHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportPartitionHealth)(
            windows_core::Interface::as_raw(self),
            healthinfo,
        )
        .ok()
    }
}
unsafe impl Send for IFabricStatefulServicePartition2 {}
unsafe impl Sync for IFabricStatefulServicePartition2 {}
#[repr(C)]
pub struct IFabricStatefulServicePartition2_Vtbl {
    pub base__: IFabricStatefulServicePartition1_Vtbl,
    pub ReportReplicaHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::HRESULT,
    pub ReportPartitionHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStatefulServicePartition3,
    IFabricStatefulServicePartition3_Vtbl,
    0x51f1269d_b061_4c1c_96cf_6508cece813b
);
impl core::ops::Deref for IFabricStatefulServicePartition3 {
    type Target = IFabricStatefulServicePartition2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricStatefulServicePartition3,
    windows_core::IUnknown,
    IFabricStatefulServicePartition,
    IFabricStatefulServicePartition1,
    IFabricStatefulServicePartition2
);
impl IFabricStatefulServicePartition3 {
    pub unsafe fn ReportReplicaHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportReplicaHealth2)(
            windows_core::Interface::as_raw(self),
            healthinfo,
            sendoptions,
        )
        .ok()
    }
    pub unsafe fn ReportPartitionHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportPartitionHealth2)(
            windows_core::Interface::as_raw(self),
            healthinfo,
            sendoptions,
        )
        .ok()
    }
}
unsafe impl Send for IFabricStatefulServicePartition3 {}
unsafe impl Sync for IFabricStatefulServicePartition3 {}
#[repr(C)]
pub struct IFabricStatefulServicePartition3_Vtbl {
    pub base__: IFabricStatefulServicePartition2_Vtbl,
    pub ReportReplicaHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::HRESULT,
    pub ReportPartitionHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStatefulServiceReplica,
    IFabricStatefulServiceReplica_Vtbl,
    0x8ae3be0e_505d_4dc1_ad8f_0cb0f9576b8a
);
impl core::ops::Deref for IFabricStatefulServiceReplica {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStatefulServiceReplica, windows_core::IUnknown);
impl IFabricStatefulServiceReplica {
    pub unsafe fn BeginOpen<P0, P1>(
        &self,
        openmode: super::FabricTypes::FABRIC_REPLICA_OPEN_MODE,
        partition: P0,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<IFabricStatefulServicePartition>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginOpen)(
            windows_core::Interface::as_raw(self),
            openmode,
            partition.param().abi(),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndOpen<P0>(&self, context: P0) -> windows_core::Result<IFabricReplicator>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndOpen)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginChangeRole<P0>(
        &self,
        newrole: super::FabricTypes::FABRIC_REPLICA_ROLE,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginChangeRole)(
            windows_core::Interface::as_raw(self),
            newrole,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndChangeRole<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndChangeRole)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginClose<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginClose)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndClose<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndClose)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn Abort(&self) {
        (windows_core::Interface::vtable(self).Abort)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricStatefulServiceReplica {}
unsafe impl Sync for IFabricStatefulServiceReplica {}
#[repr(C)]
pub struct IFabricStatefulServiceReplica_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginOpen: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_REPLICA_OPEN_MODE,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndOpen: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginChangeRole: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_REPLICA_ROLE,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndChangeRole: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginClose: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndClose: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Abort: unsafe extern "system" fn(*mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricStatelessServiceFactory,
    IFabricStatelessServiceFactory_Vtbl,
    0xcc53af8f_74cd_11df_ac3e_0024811e3892
);
impl core::ops::Deref for IFabricStatelessServiceFactory {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStatelessServiceFactory, windows_core::IUnknown);
impl IFabricStatelessServiceFactory {
    pub unsafe fn CreateInstance<P0, P1>(
        &self,
        servicetypename: P0,
        servicename: P1,
        initializationdata: &[u8],
        partitionid: windows_core::GUID,
        instanceid: i64,
    ) -> windows_core::Result<IFabricStatelessServiceInstance>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
        P1: windows_core::Param<super::FabricTypes::FABRIC_URI>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).CreateInstance)(
            windows_core::Interface::as_raw(self),
            servicetypename.param().abi(),
            servicename.param().abi(),
            initializationdata.len().try_into().unwrap(),
            core::mem::transmute(initializationdata.as_ptr()),
            core::mem::transmute(partitionid),
            instanceid,
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
}
unsafe impl Send for IFabricStatelessServiceFactory {}
unsafe impl Sync for IFabricStatelessServiceFactory {}
#[repr(C)]
pub struct IFabricStatelessServiceFactory_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        super::FabricTypes::FABRIC_URI,
        u32,
        *const u8,
        windows_core::GUID,
        i64,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStatelessServiceInstance,
    IFabricStatelessServiceInstance_Vtbl,
    0xcc53af90_74cd_11df_ac3e_0024811e3892
);
impl core::ops::Deref for IFabricStatelessServiceInstance {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStatelessServiceInstance, windows_core::IUnknown);
impl IFabricStatelessServiceInstance {
    pub unsafe fn BeginOpen<P0, P1>(
        &self,
        partition: P0,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<IFabricStatelessServicePartition>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginOpen)(
            windows_core::Interface::as_raw(self),
            partition.param().abi(),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndOpen<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndOpen)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginClose<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginClose)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndClose<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndClose)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn Abort(&self) {
        (windows_core::Interface::vtable(self).Abort)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricStatelessServiceInstance {}
unsafe impl Sync for IFabricStatelessServiceInstance {}
#[repr(C)]
pub struct IFabricStatelessServiceInstance_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginOpen: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndOpen: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginClose: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndClose: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Abort: unsafe extern "system" fn(*mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricStatelessServicePartition,
    IFabricStatelessServicePartition_Vtbl,
    0xcc53af91_74cd_11df_ac3e_0024811e3892
);
impl core::ops::Deref for IFabricStatelessServicePartition {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStatelessServicePartition, windows_core::IUnknown);
impl IFabricStatelessServicePartition {
    pub unsafe fn GetPartitionInfo(
        &self,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_SERVICE_PARTITION_INFORMATION> {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).GetPartitionInfo)(
            windows_core::Interface::as_raw(self),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn ReportLoad(
        &self,
        metrics: &[super::FabricTypes::FABRIC_LOAD_METRIC],
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportLoad)(
            windows_core::Interface::as_raw(self),
            metrics.len().try_into().unwrap(),
            core::mem::transmute(metrics.as_ptr()),
        )
        .ok()
    }
    pub unsafe fn ReportFault(
        &self,
        faulttype: super::FabricTypes::FABRIC_FAULT_TYPE,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportFault)(
            windows_core::Interface::as_raw(self),
            faulttype,
        )
        .ok()
    }
}
unsafe impl Send for IFabricStatelessServicePartition {}
unsafe impl Sync for IFabricStatelessServicePartition {}
#[repr(C)]
pub struct IFabricStatelessServicePartition_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetPartitionInfo: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_INFORMATION,
    ) -> windows_core::HRESULT,
    pub ReportLoad: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *const super::FabricTypes::FABRIC_LOAD_METRIC,
    ) -> windows_core::HRESULT,
    pub ReportFault: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_FAULT_TYPE,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStatelessServicePartition1,
    IFabricStatelessServicePartition1_Vtbl,
    0xbf6bb505_7bd0_4371_b6c0_cba319a5e50b
);
impl core::ops::Deref for IFabricStatelessServicePartition1 {
    type Target = IFabricStatelessServicePartition;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricStatelessServicePartition1,
    windows_core::IUnknown,
    IFabricStatelessServicePartition
);
impl IFabricStatelessServicePartition1 {
    pub unsafe fn ReportMoveCost(
        &self,
        movecost: super::FabricTypes::FABRIC_MOVE_COST,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportMoveCost)(
            windows_core::Interface::as_raw(self),
            movecost,
        )
        .ok()
    }
}
unsafe impl Send for IFabricStatelessServicePartition1 {}
unsafe impl Sync for IFabricStatelessServicePartition1 {}
#[repr(C)]
pub struct IFabricStatelessServicePartition1_Vtbl {
    pub base__: IFabricStatelessServicePartition_Vtbl,
    pub ReportMoveCost: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        super::FabricTypes::FABRIC_MOVE_COST,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStatelessServicePartition2,
    IFabricStatelessServicePartition2_Vtbl,
    0x9ff35b6c_9d97_4312_93ad_7f34cbdb4ca4
);
impl core::ops::Deref for IFabricStatelessServicePartition2 {
    type Target = IFabricStatelessServicePartition1;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricStatelessServicePartition2,
    windows_core::IUnknown,
    IFabricStatelessServicePartition,
    IFabricStatelessServicePartition1
);
impl IFabricStatelessServicePartition2 {
    pub unsafe fn ReportInstanceHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportInstanceHealth)(
            windows_core::Interface::as_raw(self),
            healthinfo,
        )
        .ok()
    }
    pub unsafe fn ReportPartitionHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportPartitionHealth)(
            windows_core::Interface::as_raw(self),
            healthinfo,
        )
        .ok()
    }
}
unsafe impl Send for IFabricStatelessServicePartition2 {}
unsafe impl Sync for IFabricStatelessServicePartition2 {}
#[repr(C)]
pub struct IFabricStatelessServicePartition2_Vtbl {
    pub base__: IFabricStatelessServicePartition1_Vtbl,
    pub ReportInstanceHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::HRESULT,
    pub ReportPartitionHealth: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStatelessServicePartition3,
    IFabricStatelessServicePartition3_Vtbl,
    0xf2fa2000_70a7_4ed5_9d3e_0b7deca2433f
);
impl core::ops::Deref for IFabricStatelessServicePartition3 {
    type Target = IFabricStatelessServicePartition2;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricStatelessServicePartition3,
    windows_core::IUnknown,
    IFabricStatelessServicePartition,
    IFabricStatelessServicePartition1,
    IFabricStatelessServicePartition2
);
impl IFabricStatelessServicePartition3 {
    pub unsafe fn ReportInstanceHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportInstanceHealth2)(
            windows_core::Interface::as_raw(self),
            healthinfo,
            sendoptions,
        )
        .ok()
    }
    pub unsafe fn ReportPartitionHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()> {
        (windows_core::Interface::vtable(self).ReportPartitionHealth2)(
            windows_core::Interface::as_raw(self),
            healthinfo,
            sendoptions,
        )
        .ok()
    }
}
unsafe impl Send for IFabricStatelessServicePartition3 {}
unsafe impl Sync for IFabricStatelessServicePartition3 {}
#[repr(C)]
pub struct IFabricStatelessServicePartition3_Vtbl {
    pub base__: IFabricStatelessServicePartition2_Vtbl,
    pub ReportInstanceHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::HRESULT,
    pub ReportPartitionHealth2: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStoreEventHandler,
    IFabricStoreEventHandler_Vtbl,
    0x220e6da4_985b_4dee_8fe9_77521b838795
);
impl core::ops::Deref for IFabricStoreEventHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStoreEventHandler, windows_core::IUnknown);
impl IFabricStoreEventHandler {
    pub unsafe fn OnDataLoss(&self) {
        (windows_core::Interface::vtable(self).OnDataLoss)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricStoreEventHandler {}
unsafe impl Sync for IFabricStoreEventHandler {}
#[repr(C)]
pub struct IFabricStoreEventHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnDataLoss: unsafe extern "system" fn(*mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricStoreEventHandler2,
    IFabricStoreEventHandler2_Vtbl,
    0xcce4523f_614b_4d6a_98a3_1e197c0213ea
);
impl core::ops::Deref for IFabricStoreEventHandler2 {
    type Target = IFabricStoreEventHandler;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricStoreEventHandler2,
    windows_core::IUnknown,
    IFabricStoreEventHandler
);
impl IFabricStoreEventHandler2 {
    pub unsafe fn BeginOnDataLoss<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginOnDataLoss)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndOnDataLoss<P0>(&self, context: P0) -> windows_core::Result<u8>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndOnDataLoss)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricStoreEventHandler2 {}
unsafe impl Sync for IFabricStoreEventHandler2 {}
#[repr(C)]
pub struct IFabricStoreEventHandler2_Vtbl {
    pub base__: IFabricStoreEventHandler_Vtbl,
    pub BeginOnDataLoss: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndOnDataLoss: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u8,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricStorePostBackupHandler,
    IFabricStorePostBackupHandler_Vtbl,
    0x2af2e8a6_41df_4e32_9d2a_d73a711e652a
);
impl core::ops::Deref for IFabricStorePostBackupHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricStorePostBackupHandler, windows_core::IUnknown);
impl IFabricStorePostBackupHandler {
    pub unsafe fn BeginPostBackup<P0>(
        &self,
        info: *const super::FabricTypes::FABRIC_STORE_BACKUP_INFO,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginPostBackup)(
            windows_core::Interface::as_raw(self),
            info,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndPostBackup<P0>(&self, context: P0) -> windows_core::Result<u8>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndPostBackup)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
}
unsafe impl Send for IFabricStorePostBackupHandler {}
unsafe impl Sync for IFabricStorePostBackupHandler {}
#[repr(C)]
pub struct IFabricStorePostBackupHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginPostBackup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const super::FabricTypes::FABRIC_STORE_BACKUP_INFO,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndPostBackup: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut u8,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricTransaction,
    IFabricTransaction_Vtbl,
    0x19ee48b4_6d4d_470b_ac1e_2d3996a173c8
);
impl core::ops::Deref for IFabricTransaction {
    type Target = IFabricTransactionBase;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricTransaction,
    windows_core::IUnknown,
    IFabricTransactionBase
);
impl IFabricTransaction {
    pub unsafe fn BeginCommit<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginCommit)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndCommit<P0>(&self, context: P0) -> windows_core::Result<i64>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndCommit)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .map(|| result__)
    }
    pub unsafe fn Rollback(&self) {
        (windows_core::Interface::vtable(self).Rollback)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricTransaction {}
unsafe impl Sync for IFabricTransaction {}
#[repr(C)]
pub struct IFabricTransaction_Vtbl {
    pub base__: IFabricTransactionBase_Vtbl,
    pub BeginCommit: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndCommit: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut i64,
    ) -> windows_core::HRESULT,
    pub Rollback: unsafe extern "system" fn(*mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricTransactionBase,
    IFabricTransactionBase_Vtbl,
    0x32d656a1_7ad5_47b8_bd66_a2e302626b7e
);
impl core::ops::Deref for IFabricTransactionBase {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTransactionBase, windows_core::IUnknown);
impl IFabricTransactionBase {
    pub unsafe fn get_Id(&self) -> *mut windows_core::GUID {
        (windows_core::Interface::vtable(self).get_Id)(windows_core::Interface::as_raw(self))
    }
    pub unsafe fn get_IsolationLevel(
        &self,
    ) -> super::FabricTypes::FABRIC_TRANSACTION_ISOLATION_LEVEL {
        (windows_core::Interface::vtable(self).get_IsolationLevel)(windows_core::Interface::as_raw(
            self,
        ))
    }
}
unsafe impl Send for IFabricTransactionBase {}
unsafe impl Sync for IFabricTransactionBase {}
#[repr(C)]
pub struct IFabricTransactionBase_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub get_Id: unsafe extern "system" fn(*mut core::ffi::c_void) -> *mut windows_core::GUID,
    pub get_IsolationLevel:
        unsafe extern "system" fn(
            *mut core::ffi::c_void,
        )
            -> super::FabricTypes::FABRIC_TRANSACTION_ISOLATION_LEVEL,
}
pub const FabricRuntime: windows_core::GUID =
    windows_core::GUID::from_u128(0xcc53af8c_74cd_11df_ac3e_0024811e3892);
pub type FnFabricMain = Option<
    unsafe extern "system" fn(
        runtime: Option<IFabricRuntime>,
        activationcontext: Option<IFabricCodePackageActivationContext>,
    ) -> windows_core::HRESULT,
>;
pub trait IFabricAtomicGroupStateProvider_Impl: Sized {
    fn BeginAtomicGroupCommit(
        &self,
        atomicgroupid: i64,
        commitsequencenumber: i64,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndAtomicGroupCommit(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginAtomicGroupRollback(
        &self,
        atomicgroupid: i64,
        rollbackequencenumber: i64,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndAtomicGroupRollback(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginUndoProgress(
        &self,
        fromcommitsequencenumber: i64,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUndoProgress(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricAtomicGroupStateProvider {}
impl IFabricAtomicGroupStateProvider_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricAtomicGroupStateProvider_Vtbl
    where
        Identity: IFabricAtomicGroupStateProvider_Impl,
    {
        unsafe extern "system" fn BeginAtomicGroupCommit<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            atomicgroupid: i64,
            commitsequencenumber: i64,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAtomicGroupStateProvider_Impl::BeginAtomicGroupCommit(
                this,
                core::mem::transmute_copy(&atomicgroupid),
                core::mem::transmute_copy(&commitsequencenumber),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndAtomicGroupCommit<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricAtomicGroupStateProvider_Impl::EndAtomicGroupCommit(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginAtomicGroupRollback<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            atomicgroupid: i64,
            rollbackequencenumber: i64,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAtomicGroupStateProvider_Impl::BeginAtomicGroupRollback(
                this,
                core::mem::transmute_copy(&atomicgroupid),
                core::mem::transmute_copy(&rollbackequencenumber),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndAtomicGroupRollback<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricAtomicGroupStateProvider_Impl::EndAtomicGroupRollback(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginUndoProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            fromcommitsequencenumber: i64,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAtomicGroupStateProvider_Impl::BeginUndoProgress(
                this,
                core::mem::transmute_copy(&fromcommitsequencenumber),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUndoProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricAtomicGroupStateProvider_Impl::EndUndoProgress(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginAtomicGroupCommit: BeginAtomicGroupCommit::<Identity, OFFSET>,
            EndAtomicGroupCommit: EndAtomicGroupCommit::<Identity, OFFSET>,
            BeginAtomicGroupRollback: BeginAtomicGroupRollback::<Identity, OFFSET>,
            EndAtomicGroupRollback: EndAtomicGroupRollback::<Identity, OFFSET>,
            BeginUndoProgress: BeginUndoProgress::<Identity, OFFSET>,
            EndUndoProgress: EndUndoProgress::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricAtomicGroupStateProvider as windows_core::Interface>::IID
    }
}
pub trait IFabricAtomicGroupStateReplicator_Impl: Sized {
    fn CreateAtomicGroup(&self) -> windows_core::Result<i64>;
    fn BeginReplicateAtomicGroupOperation(
        &self,
        atomicgroupid: i64,
        operationdata: Option<&IFabricOperationData>,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
        operationsequencenumber: *mut i64,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndReplicateAtomicGroupOperation(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
    fn BeginReplicateAtomicGroupCommit(
        &self,
        atomicgroupid: i64,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
        commitsequencenumber: *mut i64,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndReplicateAtomicGroupCommit(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
    fn BeginReplicateAtomicGroupRollback(
        &self,
        atomicgroupid: i64,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
        rollbacksequencenumber: *mut i64,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndReplicateAtomicGroupRollback(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
}
impl windows_core::RuntimeName for IFabricAtomicGroupStateReplicator {}
impl IFabricAtomicGroupStateReplicator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricAtomicGroupStateReplicator_Vtbl
    where
        Identity: IFabricAtomicGroupStateReplicator_Impl,
    {
        unsafe extern "system" fn CreateAtomicGroup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            atomicgroupid: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAtomicGroupStateReplicator_Impl::CreateAtomicGroup(this) {
                Ok(ok__) => {
                    atomicgroupid.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginReplicateAtomicGroupOperation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            atomicgroupid: i64,
            operationdata: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            operationsequencenumber: *mut i64,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAtomicGroupStateReplicator_Impl::BeginReplicateAtomicGroupOperation(
                this,
                core::mem::transmute_copy(&atomicgroupid),
                windows_core::from_raw_borrowed(&operationdata),
                windows_core::from_raw_borrowed(&callback),
                core::mem::transmute_copy(&operationsequencenumber),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndReplicateAtomicGroupOperation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            operationsequencenumber: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAtomicGroupStateReplicator_Impl::EndReplicateAtomicGroupOperation(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    operationsequencenumber.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginReplicateAtomicGroupCommit<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            atomicgroupid: i64,
            callback: *mut core::ffi::c_void,
            commitsequencenumber: *mut i64,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAtomicGroupStateReplicator_Impl::BeginReplicateAtomicGroupCommit(
                this,
                core::mem::transmute_copy(&atomicgroupid),
                windows_core::from_raw_borrowed(&callback),
                core::mem::transmute_copy(&commitsequencenumber),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndReplicateAtomicGroupCommit<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            commitsequencenumber: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAtomicGroupStateReplicator_Impl::EndReplicateAtomicGroupCommit(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    commitsequencenumber.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginReplicateAtomicGroupRollback<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            atomicgroupid: i64,
            callback: *mut core::ffi::c_void,
            rollbacksequencenumber: *mut i64,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAtomicGroupStateReplicator_Impl::BeginReplicateAtomicGroupRollback(
                this,
                core::mem::transmute_copy(&atomicgroupid),
                windows_core::from_raw_borrowed(&callback),
                core::mem::transmute_copy(&rollbacksequencenumber),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndReplicateAtomicGroupRollback<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            rollbacksequencenumber: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricAtomicGroupStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricAtomicGroupStateReplicator_Impl::EndReplicateAtomicGroupRollback(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    rollbacksequencenumber.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            CreateAtomicGroup: CreateAtomicGroup::<Identity, OFFSET>,
            BeginReplicateAtomicGroupOperation: BeginReplicateAtomicGroupOperation::<
                Identity,
                OFFSET,
            >,
            EndReplicateAtomicGroupOperation: EndReplicateAtomicGroupOperation::<Identity, OFFSET>,
            BeginReplicateAtomicGroupCommit: BeginReplicateAtomicGroupCommit::<Identity, OFFSET>,
            EndReplicateAtomicGroupCommit: EndReplicateAtomicGroupCommit::<Identity, OFFSET>,
            BeginReplicateAtomicGroupRollback: BeginReplicateAtomicGroupRollback::<Identity, OFFSET>,
            EndReplicateAtomicGroupRollback: EndReplicateAtomicGroupRollback::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricAtomicGroupStateReplicator as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackage_Impl: Sized {
    fn get_Description(&self) -> *mut super::FabricTypes::FABRIC_CODE_PACKAGE_DESCRIPTION;
    fn get_Path(&self) -> windows_core::PCWSTR;
}
impl windows_core::RuntimeName for IFabricCodePackage {}
impl IFabricCodePackage_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackage_Vtbl
    where
        Identity: IFabricCodePackage_Impl,
    {
        unsafe extern "system" fn get_Description<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CODE_PACKAGE_DESCRIPTION
        where
            Identity: IFabricCodePackage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackage_Impl::get_Description(this)
        }
        unsafe extern "system" fn get_Path<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricCodePackage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackage_Impl::get_Path(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Description: get_Description::<Identity, OFFSET>,
            get_Path: get_Path::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackage as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackage2_Impl: Sized + IFabricCodePackage_Impl {
    fn get_SetupEntryPointRunAsPolicy(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_RUNAS_POLICY_DESCRIPTION;
    fn get_EntryPointRunAsPolicy(&self)
        -> *mut super::FabricTypes::FABRIC_RUNAS_POLICY_DESCRIPTION;
}
impl windows_core::RuntimeName for IFabricCodePackage2 {}
impl IFabricCodePackage2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackage2_Vtbl
    where
        Identity: IFabricCodePackage2_Impl,
    {
        unsafe extern "system" fn get_SetupEntryPointRunAsPolicy<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_RUNAS_POLICY_DESCRIPTION
        where
            Identity: IFabricCodePackage2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackage2_Impl::get_SetupEntryPointRunAsPolicy(this)
        }
        unsafe extern "system" fn get_EntryPointRunAsPolicy<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_RUNAS_POLICY_DESCRIPTION
        where
            Identity: IFabricCodePackage2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackage2_Impl::get_EntryPointRunAsPolicy(this)
        }
        Self {
            base__: IFabricCodePackage_Vtbl::new::<Identity, OFFSET>(),
            get_SetupEntryPointRunAsPolicy: get_SetupEntryPointRunAsPolicy::<Identity, OFFSET>,
            get_EntryPointRunAsPolicy: get_EntryPointRunAsPolicy::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackage2 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackage as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackageActivationContext_Impl: Sized {
    fn get_ContextId(&self) -> windows_core::PCWSTR;
    fn get_CodePackageName(&self) -> windows_core::PCWSTR;
    fn get_CodePackageVersion(&self) -> windows_core::PCWSTR;
    fn get_WorkDirectory(&self) -> windows_core::PCWSTR;
    fn get_LogDirectory(&self) -> windows_core::PCWSTR;
    fn get_TempDirectory(&self) -> windows_core::PCWSTR;
    fn get_ServiceTypes(&self) -> *mut super::FabricTypes::FABRIC_SERVICE_TYPE_DESCRIPTION_LIST;
    fn get_ServiceGroupTypes(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST;
    fn get_ApplicationPrincipals(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION;
    fn get_ServiceEndpointResources(
        &self,
    ) -> *mut super::FabricTypes::FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST;
    fn GetServiceEndpointResource(
        &self,
        serviceendpointresourcename: &windows_core::PCWSTR,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_ENDPOINT_RESOURCE_DESCRIPTION>;
    fn GetCodePackageNames(
        &self,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringListResult>;
    fn GetConfigurationPackageNames(
        &self,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringListResult>;
    fn GetDataPackageNames(
        &self,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringListResult>;
    fn GetCodePackage(
        &self,
        codepackagename: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricCodePackage>;
    fn GetConfigurationPackage(
        &self,
        configpackagename: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricConfigurationPackage>;
    fn GetDataPackage(
        &self,
        datapackagename: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricDataPackage>;
    fn RegisterCodePackageChangeHandler(
        &self,
        callback: Option<&IFabricCodePackageChangeHandler>,
    ) -> windows_core::Result<i64>;
    fn UnregisterCodePackageChangeHandler(&self, callbackhandle: i64) -> windows_core::Result<()>;
    fn RegisterConfigurationPackageChangeHandler(
        &self,
        callback: Option<&IFabricConfigurationPackageChangeHandler>,
    ) -> windows_core::Result<i64>;
    fn UnregisterConfigurationPackageChangeHandler(
        &self,
        callbackhandle: i64,
    ) -> windows_core::Result<()>;
    fn RegisterDataPackageChangeHandler(
        &self,
        callback: Option<&IFabricDataPackageChangeHandler>,
    ) -> windows_core::Result<i64>;
    fn UnregisterDataPackageChangeHandler(&self, callbackhandle: i64) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricCodePackageActivationContext {}
impl IFabricCodePackageActivationContext_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackageActivationContext_Vtbl
    where
        Identity: IFabricCodePackageActivationContext_Impl,
    {
        unsafe extern "system" fn get_ContextId<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::get_ContextId(this)
        }
        unsafe extern "system" fn get_CodePackageName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::get_CodePackageName(this)
        }
        unsafe extern "system" fn get_CodePackageVersion<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::get_CodePackageVersion(this)
        }
        unsafe extern "system" fn get_WorkDirectory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::get_WorkDirectory(this)
        }
        unsafe extern "system" fn get_LogDirectory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::get_LogDirectory(this)
        }
        unsafe extern "system" fn get_TempDirectory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::get_TempDirectory(this)
        }
        unsafe extern "system" fn get_ServiceTypes<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_TYPE_DESCRIPTION_LIST
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::get_ServiceTypes(this)
        }
        unsafe extern "system" fn get_ServiceGroupTypes<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SERVICE_GROUP_TYPE_DESCRIPTION_LIST
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::get_ServiceGroupTypes(this)
        }
        unsafe extern "system" fn get_ApplicationPrincipals<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_APPLICATION_PRINCIPALS_DESCRIPTION
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::get_ApplicationPrincipals(this)
        }
        unsafe extern "system" fn get_ServiceEndpointResources<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_ENDPOINT_RESOURCE_DESCRIPTION_LIST
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::get_ServiceEndpointResources(this)
        }
        unsafe extern "system" fn GetServiceEndpointResource<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            serviceendpointresourcename: windows_core::PCWSTR,
            bufferedvalue: *mut *mut super::FabricTypes::FABRIC_ENDPOINT_RESOURCE_DESCRIPTION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext_Impl::GetServiceEndpointResource(
                this,
                core::mem::transmute(&serviceendpointresourcename),
            ) {
                Ok(ok__) => {
                    bufferedvalue.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCodePackageNames<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            names: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext_Impl::GetCodePackageNames(this) {
                Ok(ok__) => {
                    names.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConfigurationPackageNames<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            names: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext_Impl::GetConfigurationPackageNames(this) {
                Ok(ok__) => {
                    names.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDataPackageNames<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            names: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext_Impl::GetDataPackageNames(this) {
                Ok(ok__) => {
                    names.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCodePackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            codepackagename: windows_core::PCWSTR,
            codepackage: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext_Impl::GetCodePackage(
                this,
                core::mem::transmute(&codepackagename),
            ) {
                Ok(ok__) => {
                    codepackage.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetConfigurationPackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            configpackagename: windows_core::PCWSTR,
            configpackage: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext_Impl::GetConfigurationPackage(
                this,
                core::mem::transmute(&configpackagename),
            ) {
                Ok(ok__) => {
                    configpackage.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetDataPackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            datapackagename: windows_core::PCWSTR,
            datapackage: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext_Impl::GetDataPackage(
                this,
                core::mem::transmute(&datapackagename),
            ) {
                Ok(ok__) => {
                    datapackage.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn RegisterCodePackageChangeHandler<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            callbackhandle: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext_Impl::RegisterCodePackageChangeHandler(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    callbackhandle.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterCodePackageChangeHandler<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callbackhandle: i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::UnregisterCodePackageChangeHandler(
                this,
                core::mem::transmute_copy(&callbackhandle),
            )
            .into()
        }
        unsafe extern "system" fn RegisterConfigurationPackageChangeHandler<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            callbackhandle: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext_Impl:: RegisterConfigurationPackageChangeHandler ( this , windows_core::from_raw_borrowed ( & callback ) , ) { Ok ( ok__ ) => { callbackhandle . write ( core::mem::transmute ( ok__ ) ) ; windows_core::HRESULT ( 0 ) } Err ( err ) => err . into ( ) }
        }
        unsafe extern "system" fn UnregisterConfigurationPackageChangeHandler<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callbackhandle: i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::UnregisterConfigurationPackageChangeHandler(
                this,
                core::mem::transmute_copy(&callbackhandle),
            )
            .into()
        }
        unsafe extern "system" fn RegisterDataPackageChangeHandler<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            callbackhandle: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext_Impl::RegisterDataPackageChangeHandler(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    callbackhandle.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterDataPackageChangeHandler<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callbackhandle: i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext_Impl::UnregisterDataPackageChangeHandler(
                this,
                core::mem::transmute_copy(&callbackhandle),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ContextId: get_ContextId::<Identity, OFFSET>,
            get_CodePackageName: get_CodePackageName::<Identity, OFFSET>,
            get_CodePackageVersion: get_CodePackageVersion::<Identity, OFFSET>,
            get_WorkDirectory: get_WorkDirectory::<Identity, OFFSET>,
            get_LogDirectory: get_LogDirectory::<Identity, OFFSET>,
            get_TempDirectory: get_TempDirectory::<Identity, OFFSET>,
            get_ServiceTypes: get_ServiceTypes::<Identity, OFFSET>,
            get_ServiceGroupTypes: get_ServiceGroupTypes::<Identity, OFFSET>,
            get_ApplicationPrincipals: get_ApplicationPrincipals::<Identity, OFFSET>,
            get_ServiceEndpointResources: get_ServiceEndpointResources::<Identity, OFFSET>,
            GetServiceEndpointResource: GetServiceEndpointResource::<Identity, OFFSET>,
            GetCodePackageNames: GetCodePackageNames::<Identity, OFFSET>,
            GetConfigurationPackageNames: GetConfigurationPackageNames::<Identity, OFFSET>,
            GetDataPackageNames: GetDataPackageNames::<Identity, OFFSET>,
            GetCodePackage: GetCodePackage::<Identity, OFFSET>,
            GetConfigurationPackage: GetConfigurationPackage::<Identity, OFFSET>,
            GetDataPackage: GetDataPackage::<Identity, OFFSET>,
            RegisterCodePackageChangeHandler: RegisterCodePackageChangeHandler::<Identity, OFFSET>,
            UnregisterCodePackageChangeHandler: UnregisterCodePackageChangeHandler::<
                Identity,
                OFFSET,
            >,
            RegisterConfigurationPackageChangeHandler: RegisterConfigurationPackageChangeHandler::<
                Identity,
                OFFSET,
            >,
            UnregisterConfigurationPackageChangeHandler:
                UnregisterConfigurationPackageChangeHandler::<Identity, OFFSET>,
            RegisterDataPackageChangeHandler: RegisterDataPackageChangeHandler::<Identity, OFFSET>,
            UnregisterDataPackageChangeHandler: UnregisterDataPackageChangeHandler::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackageActivationContext as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackageActivationContext2_Impl:
    Sized + IFabricCodePackageActivationContext_Impl
{
    fn get_ApplicationName(&self) -> super::FabricTypes::FABRIC_URI;
    fn get_ApplicationTypeName(&self) -> windows_core::PCWSTR;
    fn GetServiceManifestName(
        &self,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn GetServiceManifestVersion(
        &self,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
}
impl windows_core::RuntimeName for IFabricCodePackageActivationContext2 {}
impl IFabricCodePackageActivationContext2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackageActivationContext2_Vtbl
    where
        Identity: IFabricCodePackageActivationContext2_Impl,
    {
        unsafe extern "system" fn get_ApplicationName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_URI
        where
            Identity: IFabricCodePackageActivationContext2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext2_Impl::get_ApplicationName(this)
        }
        unsafe extern "system" fn get_ApplicationTypeName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricCodePackageActivationContext2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext2_Impl::get_ApplicationTypeName(this)
        }
        unsafe extern "system" fn GetServiceManifestName<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicemanifestname: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext2_Impl::GetServiceManifestName(this) {
                Ok(ok__) => {
                    servicemanifestname.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetServiceManifestVersion<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicemanifestversion: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext2_Impl::GetServiceManifestVersion(this) {
                Ok(ok__) => {
                    servicemanifestversion.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricCodePackageActivationContext_Vtbl::new::<Identity, OFFSET>(),
            get_ApplicationName: get_ApplicationName::<Identity, OFFSET>,
            get_ApplicationTypeName: get_ApplicationTypeName::<Identity, OFFSET>,
            GetServiceManifestName: GetServiceManifestName::<Identity, OFFSET>,
            GetServiceManifestVersion: GetServiceManifestVersion::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackageActivationContext2 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackageActivationContext3_Impl:
    Sized + IFabricCodePackageActivationContext2_Impl
{
    fn ReportApplicationHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()>;
    fn ReportDeployedApplicationHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()>;
    fn ReportDeployedServicePackageHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricCodePackageActivationContext3 {}
impl IFabricCodePackageActivationContext3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackageActivationContext3_Vtbl
    where
        Identity: IFabricCodePackageActivationContext3_Impl,
    {
        unsafe extern "system" fn ReportApplicationHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext3_Impl::ReportApplicationHealth(
                this,
                core::mem::transmute_copy(&healthinfo),
            )
            .into()
        }
        unsafe extern "system" fn ReportDeployedApplicationHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext3_Impl::ReportDeployedApplicationHealth(
                this,
                core::mem::transmute_copy(&healthinfo),
            )
            .into()
        }
        unsafe extern "system" fn ReportDeployedServicePackageHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext3_Impl::ReportDeployedServicePackageHealth(
                this,
                core::mem::transmute_copy(&healthinfo),
            )
            .into()
        }
        Self {
            base__: IFabricCodePackageActivationContext2_Vtbl::new::<Identity, OFFSET>(),
            ReportApplicationHealth: ReportApplicationHealth::<Identity, OFFSET>,
            ReportDeployedApplicationHealth: ReportDeployedApplicationHealth::<Identity, OFFSET>,
            ReportDeployedServicePackageHealth: ReportDeployedServicePackageHealth::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackageActivationContext3 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext2 as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackageActivationContext4_Impl:
    Sized + IFabricCodePackageActivationContext3_Impl
{
    fn ReportApplicationHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()>;
    fn ReportDeployedApplicationHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()>;
    fn ReportDeployedServicePackageHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricCodePackageActivationContext4 {}
impl IFabricCodePackageActivationContext4_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackageActivationContext4_Vtbl
    where
        Identity: IFabricCodePackageActivationContext4_Impl,
    {
        unsafe extern "system" fn ReportApplicationHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
            sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext4_Impl::ReportApplicationHealth2(
                this,
                core::mem::transmute_copy(&healthinfo),
                core::mem::transmute_copy(&sendoptions),
            )
            .into()
        }
        unsafe extern "system" fn ReportDeployedApplicationHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
            sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext4_Impl::ReportDeployedApplicationHealth2(
                this,
                core::mem::transmute_copy(&healthinfo),
                core::mem::transmute_copy(&sendoptions),
            )
            .into()
        }
        unsafe extern "system" fn ReportDeployedServicePackageHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
            sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext4_Impl::ReportDeployedServicePackageHealth2(
                this,
                core::mem::transmute_copy(&healthinfo),
                core::mem::transmute_copy(&sendoptions),
            )
            .into()
        }
        Self {
            base__: IFabricCodePackageActivationContext3_Vtbl::new::<Identity, OFFSET>(),
            ReportApplicationHealth2: ReportApplicationHealth2::<Identity, OFFSET>,
            ReportDeployedApplicationHealth2: ReportDeployedApplicationHealth2::<Identity, OFFSET>,
            ReportDeployedServicePackageHealth2: ReportDeployedServicePackageHealth2::<
                Identity,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackageActivationContext4 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext2 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext3 as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackageActivationContext5_Impl:
    Sized + IFabricCodePackageActivationContext4_Impl
{
    fn get_ServiceListenAddress(&self) -> windows_core::PCWSTR;
    fn get_ServicePublishAddress(&self) -> windows_core::PCWSTR;
}
impl windows_core::RuntimeName for IFabricCodePackageActivationContext5 {}
impl IFabricCodePackageActivationContext5_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackageActivationContext5_Vtbl
    where
        Identity: IFabricCodePackageActivationContext5_Impl,
    {
        unsafe extern "system" fn get_ServiceListenAddress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricCodePackageActivationContext5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext5_Impl::get_ServiceListenAddress(this)
        }
        unsafe extern "system" fn get_ServicePublishAddress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricCodePackageActivationContext5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivationContext5_Impl::get_ServicePublishAddress(this)
        }
        Self {
            base__: IFabricCodePackageActivationContext4_Vtbl::new::<Identity, OFFSET>(),
            get_ServiceListenAddress: get_ServiceListenAddress::<Identity, OFFSET>,
            get_ServicePublishAddress: get_ServicePublishAddress::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackageActivationContext5 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext2 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext3 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext4 as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackageActivationContext6_Impl:
    Sized + IFabricCodePackageActivationContext5_Impl
{
    fn GetDirectory(
        &self,
        logicaldirectoryname: &windows_core::PCWSTR,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
}
impl windows_core::RuntimeName for IFabricCodePackageActivationContext6 {}
impl IFabricCodePackageActivationContext6_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackageActivationContext6_Vtbl
    where
        Identity: IFabricCodePackageActivationContext6_Impl,
    {
        unsafe extern "system" fn GetDirectory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            logicaldirectoryname: windows_core::PCWSTR,
            directorypath: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivationContext6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivationContext6_Impl::GetDirectory(
                this,
                core::mem::transmute(&logicaldirectoryname),
            ) {
                Ok(ok__) => {
                    directorypath.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricCodePackageActivationContext5_Vtbl::new::<Identity, OFFSET>(),
            GetDirectory: GetDirectory::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackageActivationContext6 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext2 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext3 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext4 as windows_core::Interface>::IID
            || iid == &<IFabricCodePackageActivationContext5 as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackageActivator_Impl: Sized {
    fn BeginActivateCodePackage(
        &self,
        codepackagenames: *const super::FabricTypes::FABRIC_STRING_LIST,
        environment: *const super::FabricTypes::FABRIC_STRING_MAP,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndActivateCodePackage(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginDeactivateCodePackage(
        &self,
        codepackagenames: *const super::FabricTypes::FABRIC_STRING_LIST,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndDeactivateCodePackage(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn AbortCodePackage(
        &self,
        codepackagenames: *const super::FabricTypes::FABRIC_STRING_LIST,
    ) -> windows_core::Result<()>;
    fn RegisterCodePackageEventHandler(
        &self,
        eventhandler: Option<&IFabricCodePackageEventHandler>,
    ) -> windows_core::Result<u64>;
    fn UnregisterCodePackageEventHandler(&self, callbackhandle: u64) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricCodePackageActivator {}
impl IFabricCodePackageActivator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackageActivator_Vtbl
    where
        Identity: IFabricCodePackageActivator_Impl,
    {
        unsafe extern "system" fn BeginActivateCodePackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            codepackagenames: *const super::FabricTypes::FABRIC_STRING_LIST,
            environment: *const super::FabricTypes::FABRIC_STRING_MAP,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivator_Impl::BeginActivateCodePackage(
                this,
                core::mem::transmute_copy(&codepackagenames),
                core::mem::transmute_copy(&environment),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndActivateCodePackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivator_Impl::EndActivateCodePackage(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginDeactivateCodePackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            codepackagenames: *const super::FabricTypes::FABRIC_STRING_LIST,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivator_Impl::BeginDeactivateCodePackage(
                this,
                core::mem::transmute_copy(&codepackagenames),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndDeactivateCodePackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivator_Impl::EndDeactivateCodePackage(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn AbortCodePackage<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            codepackagenames: *const super::FabricTypes::FABRIC_STRING_LIST,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivator_Impl::AbortCodePackage(
                this,
                core::mem::transmute_copy(&codepackagenames),
            )
            .into()
        }
        unsafe extern "system" fn RegisterCodePackageEventHandler<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            eventhandler: *mut core::ffi::c_void,
            callbackhandle: *mut u64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricCodePackageActivator_Impl::RegisterCodePackageEventHandler(
                this,
                windows_core::from_raw_borrowed(&eventhandler),
            ) {
                Ok(ok__) => {
                    callbackhandle.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UnregisterCodePackageEventHandler<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callbackhandle: u64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricCodePackageActivator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageActivator_Impl::UnregisterCodePackageEventHandler(
                this,
                core::mem::transmute_copy(&callbackhandle),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginActivateCodePackage: BeginActivateCodePackage::<Identity, OFFSET>,
            EndActivateCodePackage: EndActivateCodePackage::<Identity, OFFSET>,
            BeginDeactivateCodePackage: BeginDeactivateCodePackage::<Identity, OFFSET>,
            EndDeactivateCodePackage: EndDeactivateCodePackage::<Identity, OFFSET>,
            AbortCodePackage: AbortCodePackage::<Identity, OFFSET>,
            RegisterCodePackageEventHandler: RegisterCodePackageEventHandler::<Identity, OFFSET>,
            UnregisterCodePackageEventHandler: UnregisterCodePackageEventHandler::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackageActivator as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackageChangeHandler_Impl: Sized {
    fn OnPackageAdded(
        &self,
        source: Option<&IFabricCodePackageActivationContext>,
        codepackage: Option<&IFabricCodePackage>,
    );
    fn OnPackageRemoved(
        &self,
        source: Option<&IFabricCodePackageActivationContext>,
        codepackage: Option<&IFabricCodePackage>,
    );
    fn OnPackageModified(
        &self,
        source: Option<&IFabricCodePackageActivationContext>,
        previouscodepackage: Option<&IFabricCodePackage>,
        codepackage: Option<&IFabricCodePackage>,
    );
}
impl windows_core::RuntimeName for IFabricCodePackageChangeHandler {}
impl IFabricCodePackageChangeHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackageChangeHandler_Vtbl
    where
        Identity: IFabricCodePackageChangeHandler_Impl,
    {
        unsafe extern "system" fn OnPackageAdded<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            codepackage: *mut core::ffi::c_void,
        ) where
            Identity: IFabricCodePackageChangeHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageChangeHandler_Impl::OnPackageAdded(
                this,
                windows_core::from_raw_borrowed(&source),
                windows_core::from_raw_borrowed(&codepackage),
            )
        }
        unsafe extern "system" fn OnPackageRemoved<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            codepackage: *mut core::ffi::c_void,
        ) where
            Identity: IFabricCodePackageChangeHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageChangeHandler_Impl::OnPackageRemoved(
                this,
                windows_core::from_raw_borrowed(&source),
                windows_core::from_raw_borrowed(&codepackage),
            )
        }
        unsafe extern "system" fn OnPackageModified<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            previouscodepackage: *mut core::ffi::c_void,
            codepackage: *mut core::ffi::c_void,
        ) where
            Identity: IFabricCodePackageChangeHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageChangeHandler_Impl::OnPackageModified(
                this,
                windows_core::from_raw_borrowed(&source),
                windows_core::from_raw_borrowed(&previouscodepackage),
                windows_core::from_raw_borrowed(&codepackage),
            )
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnPackageAdded: OnPackageAdded::<Identity, OFFSET>,
            OnPackageRemoved: OnPackageRemoved::<Identity, OFFSET>,
            OnPackageModified: OnPackageModified::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackageChangeHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricCodePackageEventHandler_Impl: Sized {
    fn OnCodePackageEvent(
        &self,
        source: Option<&IFabricCodePackageActivator>,
        eventdesc: *const super::FabricTypes::FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION,
    );
}
impl windows_core::RuntimeName for IFabricCodePackageEventHandler {}
impl IFabricCodePackageEventHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricCodePackageEventHandler_Vtbl
    where
        Identity: IFabricCodePackageEventHandler_Impl,
    {
        unsafe extern "system" fn OnCodePackageEvent<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            eventdesc: *const super::FabricTypes::FABRIC_CODE_PACKAGE_EVENT_DESCRIPTION,
        ) where
            Identity: IFabricCodePackageEventHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricCodePackageEventHandler_Impl::OnCodePackageEvent(
                this,
                windows_core::from_raw_borrowed(&source),
                core::mem::transmute_copy(&eventdesc),
            )
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnCodePackageEvent: OnCodePackageEvent::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricCodePackageEventHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricConfigurationPackage_Impl: Sized {
    fn get_Description(&self) -> *mut super::FabricTypes::FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION;
    fn get_Path(&self) -> windows_core::PCWSTR;
    fn get_Settings(&self) -> *mut super::FabricTypes::FABRIC_CONFIGURATION_SETTINGS;
    fn GetSection(
        &self,
        sectionname: &windows_core::PCWSTR,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_CONFIGURATION_SECTION>;
    fn GetValue(
        &self,
        sectionname: &windows_core::PCWSTR,
        parametername: &windows_core::PCWSTR,
        isencrypted: *mut u8,
    ) -> windows_core::Result<windows_core::PCWSTR>;
    fn DecryptValue(
        &self,
        encryptedvalue: &windows_core::PCWSTR,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
}
impl windows_core::RuntimeName for IFabricConfigurationPackage {}
impl IFabricConfigurationPackage_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricConfigurationPackage_Vtbl
    where
        Identity: IFabricConfigurationPackage_Impl,
    {
        unsafe extern "system" fn get_Description<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CONFIGURATION_PACKAGE_DESCRIPTION
        where
            Identity: IFabricConfigurationPackage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricConfigurationPackage_Impl::get_Description(this)
        }
        unsafe extern "system" fn get_Path<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricConfigurationPackage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricConfigurationPackage_Impl::get_Path(this)
        }
        unsafe extern "system" fn get_Settings<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_CONFIGURATION_SETTINGS
        where
            Identity: IFabricConfigurationPackage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricConfigurationPackage_Impl::get_Settings(this)
        }
        unsafe extern "system" fn GetSection<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sectionname: windows_core::PCWSTR,
            bufferedvalue: *mut *mut super::FabricTypes::FABRIC_CONFIGURATION_SECTION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricConfigurationPackage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricConfigurationPackage_Impl::GetSection(
                this,
                core::mem::transmute(&sectionname),
            ) {
                Ok(ok__) => {
                    bufferedvalue.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetValue<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sectionname: windows_core::PCWSTR,
            parametername: windows_core::PCWSTR,
            isencrypted: *mut u8,
            bufferedvalue: *mut windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricConfigurationPackage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricConfigurationPackage_Impl::GetValue(
                this,
                core::mem::transmute(&sectionname),
                core::mem::transmute(&parametername),
                core::mem::transmute_copy(&isencrypted),
            ) {
                Ok(ok__) => {
                    bufferedvalue.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn DecryptValue<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            encryptedvalue: windows_core::PCWSTR,
            decryptedvalue: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricConfigurationPackage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricConfigurationPackage_Impl::DecryptValue(
                this,
                core::mem::transmute(&encryptedvalue),
            ) {
                Ok(ok__) => {
                    decryptedvalue.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Description: get_Description::<Identity, OFFSET>,
            get_Path: get_Path::<Identity, OFFSET>,
            get_Settings: get_Settings::<Identity, OFFSET>,
            GetSection: GetSection::<Identity, OFFSET>,
            GetValue: GetValue::<Identity, OFFSET>,
            DecryptValue: DecryptValue::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricConfigurationPackage as windows_core::Interface>::IID
    }
}
pub trait IFabricConfigurationPackage2_Impl: Sized + IFabricConfigurationPackage_Impl {
    fn GetValues(
        &self,
        sectionname: &windows_core::PCWSTR,
        parameterprefix: &windows_core::PCWSTR,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_CONFIGURATION_PARAMETER_LIST>;
}
impl windows_core::RuntimeName for IFabricConfigurationPackage2 {}
impl IFabricConfigurationPackage2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricConfigurationPackage2_Vtbl
    where
        Identity: IFabricConfigurationPackage2_Impl,
    {
        unsafe extern "system" fn GetValues<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sectionname: windows_core::PCWSTR,
            parameterprefix: windows_core::PCWSTR,
            bufferedvalue: *mut *mut super::FabricTypes::FABRIC_CONFIGURATION_PARAMETER_LIST,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricConfigurationPackage2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricConfigurationPackage2_Impl::GetValues(
                this,
                core::mem::transmute(&sectionname),
                core::mem::transmute(&parameterprefix),
            ) {
                Ok(ok__) => {
                    bufferedvalue.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricConfigurationPackage_Vtbl::new::<Identity, OFFSET>(),
            GetValues: GetValues::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricConfigurationPackage2 as windows_core::Interface>::IID
            || iid == &<IFabricConfigurationPackage as windows_core::Interface>::IID
    }
}
pub trait IFabricConfigurationPackageChangeHandler_Impl: Sized {
    fn OnPackageAdded(
        &self,
        source: Option<&IFabricCodePackageActivationContext>,
        configpackage: Option<&IFabricConfigurationPackage>,
    );
    fn OnPackageRemoved(
        &self,
        source: Option<&IFabricCodePackageActivationContext>,
        configpackage: Option<&IFabricConfigurationPackage>,
    );
    fn OnPackageModified(
        &self,
        source: Option<&IFabricCodePackageActivationContext>,
        previousconfigpackage: Option<&IFabricConfigurationPackage>,
        configpackage: Option<&IFabricConfigurationPackage>,
    );
}
impl windows_core::RuntimeName for IFabricConfigurationPackageChangeHandler {}
impl IFabricConfigurationPackageChangeHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricConfigurationPackageChangeHandler_Vtbl
    where
        Identity: IFabricConfigurationPackageChangeHandler_Impl,
    {
        unsafe extern "system" fn OnPackageAdded<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            configpackage: *mut core::ffi::c_void,
        ) where
            Identity: IFabricConfigurationPackageChangeHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricConfigurationPackageChangeHandler_Impl::OnPackageAdded(
                this,
                windows_core::from_raw_borrowed(&source),
                windows_core::from_raw_borrowed(&configpackage),
            )
        }
        unsafe extern "system" fn OnPackageRemoved<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            configpackage: *mut core::ffi::c_void,
        ) where
            Identity: IFabricConfigurationPackageChangeHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricConfigurationPackageChangeHandler_Impl::OnPackageRemoved(
                this,
                windows_core::from_raw_borrowed(&source),
                windows_core::from_raw_borrowed(&configpackage),
            )
        }
        unsafe extern "system" fn OnPackageModified<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            previousconfigpackage: *mut core::ffi::c_void,
            configpackage: *mut core::ffi::c_void,
        ) where
            Identity: IFabricConfigurationPackageChangeHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricConfigurationPackageChangeHandler_Impl::OnPackageModified(
                this,
                windows_core::from_raw_borrowed(&source),
                windows_core::from_raw_borrowed(&previousconfigpackage),
                windows_core::from_raw_borrowed(&configpackage),
            )
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnPackageAdded: OnPackageAdded::<Identity, OFFSET>,
            OnPackageRemoved: OnPackageRemoved::<Identity, OFFSET>,
            OnPackageModified: OnPackageModified::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricConfigurationPackageChangeHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricDataPackage_Impl: Sized {
    fn get_Description(&self) -> *mut super::FabricTypes::FABRIC_DATA_PACKAGE_DESCRIPTION;
    fn get_Path(&self) -> windows_core::PCWSTR;
}
impl windows_core::RuntimeName for IFabricDataPackage {}
impl IFabricDataPackage_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricDataPackage_Vtbl
    where
        Identity: IFabricDataPackage_Impl,
    {
        unsafe extern "system" fn get_Description<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_DATA_PACKAGE_DESCRIPTION
        where
            Identity: IFabricDataPackage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricDataPackage_Impl::get_Description(this)
        }
        unsafe extern "system" fn get_Path<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::PCWSTR
        where
            Identity: IFabricDataPackage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricDataPackage_Impl::get_Path(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Description: get_Description::<Identity, OFFSET>,
            get_Path: get_Path::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricDataPackage as windows_core::Interface>::IID
    }
}
pub trait IFabricDataPackageChangeHandler_Impl: Sized {
    fn OnPackageAdded(
        &self,
        source: Option<&IFabricCodePackageActivationContext>,
        datapackage: Option<&IFabricDataPackage>,
    );
    fn OnPackageRemoved(
        &self,
        source: Option<&IFabricCodePackageActivationContext>,
        datapackage: Option<&IFabricDataPackage>,
    );
    fn OnPackageModified(
        &self,
        source: Option<&IFabricCodePackageActivationContext>,
        previousdatapackage: Option<&IFabricDataPackage>,
        datapackage: Option<&IFabricDataPackage>,
    );
}
impl windows_core::RuntimeName for IFabricDataPackageChangeHandler {}
impl IFabricDataPackageChangeHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricDataPackageChangeHandler_Vtbl
    where
        Identity: IFabricDataPackageChangeHandler_Impl,
    {
        unsafe extern "system" fn OnPackageAdded<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            datapackage: *mut core::ffi::c_void,
        ) where
            Identity: IFabricDataPackageChangeHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricDataPackageChangeHandler_Impl::OnPackageAdded(
                this,
                windows_core::from_raw_borrowed(&source),
                windows_core::from_raw_borrowed(&datapackage),
            )
        }
        unsafe extern "system" fn OnPackageRemoved<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            datapackage: *mut core::ffi::c_void,
        ) where
            Identity: IFabricDataPackageChangeHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricDataPackageChangeHandler_Impl::OnPackageRemoved(
                this,
                windows_core::from_raw_borrowed(&source),
                windows_core::from_raw_borrowed(&datapackage),
            )
        }
        unsafe extern "system" fn OnPackageModified<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            source: *mut core::ffi::c_void,
            previousdatapackage: *mut core::ffi::c_void,
            datapackage: *mut core::ffi::c_void,
        ) where
            Identity: IFabricDataPackageChangeHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricDataPackageChangeHandler_Impl::OnPackageModified(
                this,
                windows_core::from_raw_borrowed(&source),
                windows_core::from_raw_borrowed(&previousdatapackage),
                windows_core::from_raw_borrowed(&datapackage),
            )
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnPackageAdded: OnPackageAdded::<Identity, OFFSET>,
            OnPackageRemoved: OnPackageRemoved::<Identity, OFFSET>,
            OnPackageModified: OnPackageModified::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricDataPackageChangeHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricEseLocalStoreSettingsResult_Impl: Sized {
    fn get_Settings(&self) -> *mut super::FabricTypes::FABRIC_ESE_LOCAL_STORE_SETTINGS;
}
impl windows_core::RuntimeName for IFabricEseLocalStoreSettingsResult {}
impl IFabricEseLocalStoreSettingsResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricEseLocalStoreSettingsResult_Vtbl
    where
        Identity: IFabricEseLocalStoreSettingsResult_Impl,
    {
        unsafe extern "system" fn get_Settings<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_ESE_LOCAL_STORE_SETTINGS
        where
            Identity: IFabricEseLocalStoreSettingsResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricEseLocalStoreSettingsResult_Impl::get_Settings(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Settings: get_Settings::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricEseLocalStoreSettingsResult as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreEnumerator_Impl: Sized {
    fn EnumerateByKey(
        &self,
        keyprefix: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricKeyValueStoreItemEnumerator>;
    fn EnumerateMetadataByKey(
        &self,
        keyprefix: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataEnumerator>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreEnumerator {}
impl IFabricKeyValueStoreEnumerator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreEnumerator_Vtbl
    where
        Identity: IFabricKeyValueStoreEnumerator_Impl,
    {
        unsafe extern "system" fn EnumerateByKey<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            keyprefix: windows_core::PCWSTR,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreEnumerator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreEnumerator_Impl::EnumerateByKey(
                this,
                core::mem::transmute(&keyprefix),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateMetadataByKey<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            keyprefix: windows_core::PCWSTR,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreEnumerator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreEnumerator_Impl::EnumerateMetadataByKey(
                this,
                core::mem::transmute(&keyprefix),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            EnumerateByKey: EnumerateByKey::<Identity, OFFSET>,
            EnumerateMetadataByKey: EnumerateMetadataByKey::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreEnumerator as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreEnumerator2_Impl:
    Sized + IFabricKeyValueStoreEnumerator_Impl
{
    fn EnumerateByKey2(
        &self,
        keyprefix: &windows_core::PCWSTR,
        strictprefix: windows::Win32::Foundation::BOOLEAN,
    ) -> windows_core::Result<IFabricKeyValueStoreItemEnumerator>;
    fn EnumerateMetadataByKey2(
        &self,
        keyprefix: &windows_core::PCWSTR,
        strictprefix: windows::Win32::Foundation::BOOLEAN,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataEnumerator>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreEnumerator2 {}
impl IFabricKeyValueStoreEnumerator2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreEnumerator2_Vtbl
    where
        Identity: IFabricKeyValueStoreEnumerator2_Impl,
    {
        unsafe extern "system" fn EnumerateByKey2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            keyprefix: windows_core::PCWSTR,
            strictprefix: windows::Win32::Foundation::BOOLEAN,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreEnumerator2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreEnumerator2_Impl::EnumerateByKey2(
                this,
                core::mem::transmute(&keyprefix),
                core::mem::transmute_copy(&strictprefix),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateMetadataByKey2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            keyprefix: windows_core::PCWSTR,
            strictprefix: windows::Win32::Foundation::BOOLEAN,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreEnumerator2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreEnumerator2_Impl::EnumerateMetadataByKey2(
                this,
                core::mem::transmute(&keyprefix),
                core::mem::transmute_copy(&strictprefix),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricKeyValueStoreEnumerator_Vtbl::new::<Identity, OFFSET>(),
            EnumerateByKey2: EnumerateByKey2::<Identity, OFFSET>,
            EnumerateMetadataByKey2: EnumerateMetadataByKey2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreEnumerator2 as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreEnumerator as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreItemEnumerator_Impl: Sized {
    fn MoveNext(&self) -> windows_core::Result<()>;
    fn get_Current(&self) -> Option<IFabricKeyValueStoreItemResult>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreItemEnumerator {}
impl IFabricKeyValueStoreItemEnumerator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreItemEnumerator_Vtbl
    where
        Identity: IFabricKeyValueStoreItemEnumerator_Impl,
    {
        unsafe extern "system" fn MoveNext<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreItemEnumerator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreItemEnumerator_Impl::MoveNext(this).into()
        }
        unsafe extern "system" fn get_Current<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> Option<IFabricKeyValueStoreItemResult>
        where
            Identity: IFabricKeyValueStoreItemEnumerator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreItemEnumerator_Impl::get_Current(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            MoveNext: MoveNext::<Identity, OFFSET>,
            get_Current: get_Current::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreItemEnumerator as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreItemEnumerator2_Impl:
    Sized + IFabricKeyValueStoreItemEnumerator_Impl
{
    fn TryMoveNext(&self) -> windows_core::Result<u8>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreItemEnumerator2 {}
impl IFabricKeyValueStoreItemEnumerator2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreItemEnumerator2_Vtbl
    where
        Identity: IFabricKeyValueStoreItemEnumerator2_Impl,
    {
        unsafe extern "system" fn TryMoveNext<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            success: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreItemEnumerator2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreItemEnumerator2_Impl::TryMoveNext(this) {
                Ok(ok__) => {
                    success.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricKeyValueStoreItemEnumerator_Vtbl::new::<Identity, OFFSET>(),
            TryMoveNext: TryMoveNext::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreItemEnumerator2 as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreItemEnumerator as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreItemMetadataEnumerator_Impl: Sized {
    fn MoveNext(&self) -> windows_core::Result<()>;
    fn get_Current(&self) -> Option<IFabricKeyValueStoreItemMetadataResult>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreItemMetadataEnumerator {}
impl IFabricKeyValueStoreItemMetadataEnumerator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreItemMetadataEnumerator_Vtbl
    where
        Identity: IFabricKeyValueStoreItemMetadataEnumerator_Impl,
    {
        unsafe extern "system" fn MoveNext<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreItemMetadataEnumerator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreItemMetadataEnumerator_Impl::MoveNext(this).into()
        }
        unsafe extern "system" fn get_Current<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> Option<IFabricKeyValueStoreItemMetadataResult>
        where
            Identity: IFabricKeyValueStoreItemMetadataEnumerator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreItemMetadataEnumerator_Impl::get_Current(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            MoveNext: MoveNext::<Identity, OFFSET>,
            get_Current: get_Current::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreItemMetadataEnumerator as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreItemMetadataEnumerator2_Impl:
    Sized + IFabricKeyValueStoreItemMetadataEnumerator_Impl
{
    fn TryMoveNext(&self) -> windows_core::Result<u8>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreItemMetadataEnumerator2 {}
impl IFabricKeyValueStoreItemMetadataEnumerator2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreItemMetadataEnumerator2_Vtbl
    where
        Identity: IFabricKeyValueStoreItemMetadataEnumerator2_Impl,
    {
        unsafe extern "system" fn TryMoveNext<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            success: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreItemMetadataEnumerator2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreItemMetadataEnumerator2_Impl::TryMoveNext(this) {
                Ok(ok__) => {
                    success.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricKeyValueStoreItemMetadataEnumerator_Vtbl::new::<Identity, OFFSET>(),
            TryMoveNext: TryMoveNext::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreItemMetadataEnumerator2 as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreItemMetadataEnumerator as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreItemMetadataResult_Impl: Sized {
    fn get_Metadata(&self) -> *mut super::FabricTypes::FABRIC_KEY_VALUE_STORE_ITEM_METADATA;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreItemMetadataResult {}
impl IFabricKeyValueStoreItemMetadataResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreItemMetadataResult_Vtbl
    where
        Identity: IFabricKeyValueStoreItemMetadataResult_Impl,
    {
        unsafe extern "system" fn get_Metadata<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_KEY_VALUE_STORE_ITEM_METADATA
        where
            Identity: IFabricKeyValueStoreItemMetadataResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreItemMetadataResult_Impl::get_Metadata(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Metadata: get_Metadata::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreItemMetadataResult as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreItemResult_Impl: Sized {
    fn get_Item(&self) -> *mut super::FabricTypes::FABRIC_KEY_VALUE_STORE_ITEM;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreItemResult {}
impl IFabricKeyValueStoreItemResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreItemResult_Vtbl
    where
        Identity: IFabricKeyValueStoreItemResult_Impl,
    {
        unsafe extern "system" fn get_Item<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_KEY_VALUE_STORE_ITEM
        where
            Identity: IFabricKeyValueStoreItemResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreItemResult_Impl::get_Item(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Item: get_Item::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreItemResult as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreNotification_Impl:
    Sized + IFabricKeyValueStoreItemResult_Impl
{
    fn IsDelete(&self) -> windows::Win32::Foundation::BOOLEAN;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreNotification {}
impl IFabricKeyValueStoreNotification_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreNotification_Vtbl
    where
        Identity: IFabricKeyValueStoreNotification_Impl,
    {
        unsafe extern "system" fn IsDelete<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows::Win32::Foundation::BOOLEAN
        where
            Identity: IFabricKeyValueStoreNotification_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreNotification_Impl::IsDelete(this)
        }
        Self {
            base__: IFabricKeyValueStoreItemResult_Vtbl::new::<Identity, OFFSET>(),
            IsDelete: IsDelete::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreNotification as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreItemResult as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreNotificationEnumerator_Impl: Sized {
    fn MoveNext(&self) -> windows_core::Result<()>;
    fn get_Current(&self) -> Option<IFabricKeyValueStoreNotification>;
    fn Reset(&self);
}
impl windows_core::RuntimeName for IFabricKeyValueStoreNotificationEnumerator {}
impl IFabricKeyValueStoreNotificationEnumerator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreNotificationEnumerator_Vtbl
    where
        Identity: IFabricKeyValueStoreNotificationEnumerator_Impl,
    {
        unsafe extern "system" fn MoveNext<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreNotificationEnumerator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreNotificationEnumerator_Impl::MoveNext(this).into()
        }
        unsafe extern "system" fn get_Current<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> Option<IFabricKeyValueStoreNotification>
        where
            Identity: IFabricKeyValueStoreNotificationEnumerator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreNotificationEnumerator_Impl::get_Current(this)
        }
        unsafe extern "system" fn Reset<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) where
            Identity: IFabricKeyValueStoreNotificationEnumerator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreNotificationEnumerator_Impl::Reset(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            MoveNext: MoveNext::<Identity, OFFSET>,
            get_Current: get_Current::<Identity, OFFSET>,
            Reset: Reset::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreNotificationEnumerator as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreNotificationEnumerator2_Impl:
    Sized + IFabricKeyValueStoreNotificationEnumerator_Impl
{
    fn TryMoveNext(&self) -> windows_core::Result<u8>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreNotificationEnumerator2 {}
impl IFabricKeyValueStoreNotificationEnumerator2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreNotificationEnumerator2_Vtbl
    where
        Identity: IFabricKeyValueStoreNotificationEnumerator2_Impl,
    {
        unsafe extern "system" fn TryMoveNext<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            success: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreNotificationEnumerator2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreNotificationEnumerator2_Impl::TryMoveNext(this) {
                Ok(ok__) => {
                    success.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricKeyValueStoreNotificationEnumerator_Vtbl::new::<Identity, OFFSET>(),
            TryMoveNext: TryMoveNext::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreNotificationEnumerator2 as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreNotificationEnumerator as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreReplica_Impl: Sized + IFabricStatefulServiceReplica_Impl {
    fn GetCurrentEpoch(
        &self,
        currentepoch: *mut super::FabricTypes::FABRIC_EPOCH,
    ) -> windows_core::Result<()>;
    fn UpdateReplicatorSettings(
        &self,
        replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    ) -> windows_core::Result<()>;
    fn CreateTransaction(&self) -> windows_core::Result<IFabricTransaction>;
    fn Add(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
        valuesizeinbytes: i32,
        value: *const u8,
    ) -> windows_core::Result<()>;
    fn Remove(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
        checksequencenumber: i64,
    ) -> windows_core::Result<()>;
    fn Update(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
        valuesizeinbytes: i32,
        value: *const u8,
        checksequencenumber: i64,
    ) -> windows_core::Result<()>;
    fn Get(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricKeyValueStoreItemResult>;
    fn GetMetadata(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataResult>;
    fn Contains(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
    ) -> windows_core::Result<u8>;
    fn Enumerate(
        &self,
        transaction: Option<&IFabricTransactionBase>,
    ) -> windows_core::Result<IFabricKeyValueStoreItemEnumerator>;
    fn EnumerateByKey(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        keyprefix: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricKeyValueStoreItemEnumerator>;
    fn EnumerateMetadata(
        &self,
        transaction: Option<&IFabricTransactionBase>,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataEnumerator>;
    fn EnumerateMetadataByKey(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        keyprefix: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataEnumerator>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreReplica {}
impl IFabricKeyValueStoreReplica_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreReplica_Vtbl
    where
        Identity: IFabricKeyValueStoreReplica_Impl,
    {
        unsafe extern "system" fn GetCurrentEpoch<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            currentepoch: *mut super::FabricTypes::FABRIC_EPOCH,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreReplica_Impl::GetCurrentEpoch(
                this,
                core::mem::transmute_copy(&currentepoch),
            )
            .into()
        }
        unsafe extern "system" fn UpdateReplicatorSettings<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreReplica_Impl::UpdateReplicatorSettings(
                this,
                core::mem::transmute_copy(&replicatorsettings),
            )
            .into()
        }
        unsafe extern "system" fn CreateTransaction<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica_Impl::CreateTransaction(this) {
                Ok(ok__) => {
                    transaction.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Add<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            valuesizeinbytes: i32,
            value: *const u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreReplica_Impl::Add(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
                core::mem::transmute_copy(&valuesizeinbytes),
                core::mem::transmute_copy(&value),
            )
            .into()
        }
        unsafe extern "system" fn Remove<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            checksequencenumber: i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreReplica_Impl::Remove(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
                core::mem::transmute_copy(&checksequencenumber),
            )
            .into()
        }
        unsafe extern "system" fn Update<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            valuesizeinbytes: i32,
            value: *const u8,
            checksequencenumber: i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreReplica_Impl::Update(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
                core::mem::transmute_copy(&valuesizeinbytes),
                core::mem::transmute_copy(&value),
                core::mem::transmute_copy(&checksequencenumber),
            )
            .into()
        }
        unsafe extern "system" fn Get<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica_Impl::Get(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetMetadata<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica_Impl::GetMetadata(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Contains<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            result: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica_Impl::Contains(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Enumerate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica_Impl::Enumerate(
                this,
                windows_core::from_raw_borrowed(&transaction),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateByKey<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            keyprefix: windows_core::PCWSTR,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica_Impl::EnumerateByKey(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&keyprefix),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateMetadata<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica_Impl::EnumerateMetadata(
                this,
                windows_core::from_raw_borrowed(&transaction),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateMetadataByKey<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            keyprefix: windows_core::PCWSTR,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica_Impl::EnumerateMetadataByKey(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&keyprefix),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricStatefulServiceReplica_Vtbl::new::<Identity, OFFSET>(),
            GetCurrentEpoch: GetCurrentEpoch::<Identity, OFFSET>,
            UpdateReplicatorSettings: UpdateReplicatorSettings::<Identity, OFFSET>,
            CreateTransaction: CreateTransaction::<Identity, OFFSET>,
            Add: Add::<Identity, OFFSET>,
            Remove: Remove::<Identity, OFFSET>,
            Update: Update::<Identity, OFFSET>,
            Get: Get::<Identity, OFFSET>,
            GetMetadata: GetMetadata::<Identity, OFFSET>,
            Contains: Contains::<Identity, OFFSET>,
            Enumerate: Enumerate::<Identity, OFFSET>,
            EnumerateByKey: EnumerateByKey::<Identity, OFFSET>,
            EnumerateMetadata: EnumerateMetadata::<Identity, OFFSET>,
            EnumerateMetadataByKey: EnumerateMetadataByKey::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreReplica as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServiceReplica as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreReplica2_Impl: Sized + IFabricKeyValueStoreReplica_Impl {
    fn Backup(&self, backupdirectory: &windows_core::PCWSTR) -> windows_core::Result<()>;
    fn Restore(&self, backupdirectory: &windows_core::PCWSTR) -> windows_core::Result<()>;
    fn CreateTransaction2(
        &self,
        settings: *const super::FabricTypes::FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS,
    ) -> windows_core::Result<IFabricTransaction>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreReplica2 {}
impl IFabricKeyValueStoreReplica2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreReplica2_Vtbl
    where
        Identity: IFabricKeyValueStoreReplica2_Impl,
    {
        unsafe extern "system" fn Backup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            backupdirectory: windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreReplica2_Impl::Backup(this, core::mem::transmute(&backupdirectory))
                .into()
        }
        unsafe extern "system" fn Restore<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            backupdirectory: windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreReplica2_Impl::Restore(this, core::mem::transmute(&backupdirectory))
                .into()
        }
        unsafe extern "system" fn CreateTransaction2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            settings: *const super::FabricTypes::FABRIC_KEY_VALUE_STORE_TRANSACTION_SETTINGS,
            transaction: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica2_Impl::CreateTransaction2(
                this,
                core::mem::transmute_copy(&settings),
            ) {
                Ok(ok__) => {
                    transaction.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricKeyValueStoreReplica_Vtbl::new::<Identity, OFFSET>(),
            Backup: Backup::<Identity, OFFSET>,
            Restore: Restore::<Identity, OFFSET>,
            CreateTransaction2: CreateTransaction2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreReplica2 as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServiceReplica as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreReplica3_Impl: Sized + IFabricKeyValueStoreReplica2_Impl {
    fn BeginBackup(
        &self,
        backupdirectory: &windows_core::PCWSTR,
        backupoption: super::FabricTypes::FABRIC_STORE_BACKUP_OPTION,
        postbackuphandler: Option<&IFabricStorePostBackupHandler>,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndBackup(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreReplica3 {}
impl IFabricKeyValueStoreReplica3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreReplica3_Vtbl
    where
        Identity: IFabricKeyValueStoreReplica3_Impl,
    {
        unsafe extern "system" fn BeginBackup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            backupdirectory: windows_core::PCWSTR,
            backupoption: super::FabricTypes::FABRIC_STORE_BACKUP_OPTION,
            postbackuphandler: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica3_Impl::BeginBackup(
                this,
                core::mem::transmute(&backupdirectory),
                core::mem::transmute_copy(&backupoption),
                windows_core::from_raw_borrowed(&postbackuphandler),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndBackup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreReplica3_Impl::EndBackup(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricKeyValueStoreReplica2_Vtbl::new::<Identity, OFFSET>(),
            BeginBackup: BeginBackup::<Identity, OFFSET>,
            EndBackup: EndBackup::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreReplica3 as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServiceReplica as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica2 as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreReplica4_Impl: Sized + IFabricKeyValueStoreReplica3_Impl {
    fn BeginRestore(
        &self,
        backupdirectory: &windows_core::PCWSTR,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRestore(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreReplica4 {}
impl IFabricKeyValueStoreReplica4_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreReplica4_Vtbl
    where
        Identity: IFabricKeyValueStoreReplica4_Impl,
    {
        unsafe extern "system" fn BeginRestore<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            backupdirectory: windows_core::PCWSTR,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica4_Impl::BeginRestore(
                this,
                core::mem::transmute(&backupdirectory),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRestore<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica4_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricKeyValueStoreReplica4_Impl::EndRestore(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: IFabricKeyValueStoreReplica3_Vtbl::new::<Identity, OFFSET>(),
            BeginRestore: BeginRestore::<Identity, OFFSET>,
            EndRestore: EndRestore::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreReplica4 as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServiceReplica as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica2 as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica3 as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreReplica5_Impl: Sized + IFabricKeyValueStoreReplica4_Impl {
    fn TryAdd(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
        valuesizeinbytes: i32,
        value: *const u8,
    ) -> windows_core::Result<u8>;
    fn TryRemove(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
        checksequencenumber: i64,
    ) -> windows_core::Result<u8>;
    fn TryUpdate(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
        valuesizeinbytes: i32,
        value: *const u8,
        checksequencenumber: i64,
    ) -> windows_core::Result<u8>;
    fn TryGet(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricKeyValueStoreItemResult>;
    fn TryGetMetadata(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        key: &windows_core::PCWSTR,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataResult>;
    fn EnumerateByKey2(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        keyprefix: &windows_core::PCWSTR,
        strictprefix: windows::Win32::Foundation::BOOLEAN,
    ) -> windows_core::Result<IFabricKeyValueStoreItemEnumerator>;
    fn EnumerateMetadataByKey2(
        &self,
        transaction: Option<&IFabricTransactionBase>,
        keyprefix: &windows_core::PCWSTR,
        strictprefix: windows::Win32::Foundation::BOOLEAN,
    ) -> windows_core::Result<IFabricKeyValueStoreItemMetadataEnumerator>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreReplica5 {}
impl IFabricKeyValueStoreReplica5_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreReplica5_Vtbl
    where
        Identity: IFabricKeyValueStoreReplica5_Impl,
    {
        unsafe extern "system" fn TryAdd<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            valuesizeinbytes: i32,
            value: *const u8,
            added: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica5_Impl::TryAdd(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
                core::mem::transmute_copy(&valuesizeinbytes),
                core::mem::transmute_copy(&value),
            ) {
                Ok(ok__) => {
                    added.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TryRemove<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            checksequencenumber: i64,
            exists: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica5_Impl::TryRemove(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
                core::mem::transmute_copy(&checksequencenumber),
            ) {
                Ok(ok__) => {
                    exists.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TryUpdate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            valuesizeinbytes: i32,
            value: *const u8,
            checksequencenumber: i64,
            exists: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica5_Impl::TryUpdate(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
                core::mem::transmute_copy(&valuesizeinbytes),
                core::mem::transmute_copy(&value),
                core::mem::transmute_copy(&checksequencenumber),
            ) {
                Ok(ok__) => {
                    exists.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TryGet<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica5_Impl::TryGet(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn TryGetMetadata<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            key: windows_core::PCWSTR,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica5_Impl::TryGetMetadata(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&key),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateByKey2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            keyprefix: windows_core::PCWSTR,
            strictprefix: windows::Win32::Foundation::BOOLEAN,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica5_Impl::EnumerateByKey2(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&keyprefix),
                core::mem::transmute_copy(&strictprefix),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EnumerateMetadataByKey2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            transaction: *mut core::ffi::c_void,
            keyprefix: windows_core::PCWSTR,
            strictprefix: windows::Win32::Foundation::BOOLEAN,
            result: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica5_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica5_Impl::EnumerateMetadataByKey2(
                this,
                windows_core::from_raw_borrowed(&transaction),
                core::mem::transmute(&keyprefix),
                core::mem::transmute_copy(&strictprefix),
            ) {
                Ok(ok__) => {
                    result.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricKeyValueStoreReplica4_Vtbl::new::<Identity, OFFSET>(),
            TryAdd: TryAdd::<Identity, OFFSET>,
            TryRemove: TryRemove::<Identity, OFFSET>,
            TryUpdate: TryUpdate::<Identity, OFFSET>,
            TryGet: TryGet::<Identity, OFFSET>,
            TryGetMetadata: TryGetMetadata::<Identity, OFFSET>,
            EnumerateByKey2: EnumerateByKey2::<Identity, OFFSET>,
            EnumerateMetadataByKey2: EnumerateMetadataByKey2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreReplica5 as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServiceReplica as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica2 as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica3 as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica4 as windows_core::Interface>::IID
    }
}
pub trait IFabricKeyValueStoreReplica6_Impl: Sized + IFabricKeyValueStoreReplica5_Impl {
    fn BeginRestore2(
        &self,
        backupdirectory: &windows_core::PCWSTR,
        settings: *const super::FabricTypes::FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
}
impl windows_core::RuntimeName for IFabricKeyValueStoreReplica6 {}
impl IFabricKeyValueStoreReplica6_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricKeyValueStoreReplica6_Vtbl
    where
        Identity: IFabricKeyValueStoreReplica6_Impl,
    {
        unsafe extern "system" fn BeginRestore2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            backupdirectory: windows_core::PCWSTR,
            settings: *const super::FabricTypes::FABRIC_KEY_VALUE_STORE_RESTORE_SETTINGS,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricKeyValueStoreReplica6_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricKeyValueStoreReplica6_Impl::BeginRestore2(
                this,
                core::mem::transmute(&backupdirectory),
                core::mem::transmute_copy(&settings),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricKeyValueStoreReplica5_Vtbl::new::<Identity, OFFSET>(),
            BeginRestore2: BeginRestore2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricKeyValueStoreReplica6 as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServiceReplica as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica2 as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica3 as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica4 as windows_core::Interface>::IID
            || iid == &<IFabricKeyValueStoreReplica5 as windows_core::Interface>::IID
    }
}
pub trait IFabricNodeContextResult_Impl: Sized {
    fn get_NodeContext(&self) -> *mut super::FabricTypes::FABRIC_NODE_CONTEXT;
}
impl windows_core::RuntimeName for IFabricNodeContextResult {}
impl IFabricNodeContextResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricNodeContextResult_Vtbl
    where
        Identity: IFabricNodeContextResult_Impl,
    {
        unsafe extern "system" fn get_NodeContext<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_NODE_CONTEXT
        where
            Identity: IFabricNodeContextResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricNodeContextResult_Impl::get_NodeContext(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_NodeContext: get_NodeContext::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricNodeContextResult as windows_core::Interface>::IID
    }
}
pub trait IFabricNodeContextResult2_Impl: Sized + IFabricNodeContextResult_Impl {
    fn GetDirectory(
        &self,
        logicaldirectoryname: &windows_core::PCWSTR,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
}
impl windows_core::RuntimeName for IFabricNodeContextResult2 {}
impl IFabricNodeContextResult2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricNodeContextResult2_Vtbl
    where
        Identity: IFabricNodeContextResult2_Impl,
    {
        unsafe extern "system" fn GetDirectory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            logicaldirectoryname: windows_core::PCWSTR,
            directorypath: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricNodeContextResult2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricNodeContextResult2_Impl::GetDirectory(
                this,
                core::mem::transmute(&logicaldirectoryname),
            ) {
                Ok(ok__) => {
                    directorypath.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricNodeContextResult_Vtbl::new::<Identity, OFFSET>(),
            GetDirectory: GetDirectory::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricNodeContextResult2 as windows_core::Interface>::IID
            || iid == &<IFabricNodeContextResult as windows_core::Interface>::IID
    }
}
pub trait IFabricOperation_Impl: Sized {
    fn get_Metadata(&self) -> *mut super::FabricTypes::FABRIC_OPERATION_METADATA;
    fn GetData(
        &self,
        count: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_OPERATION_DATA_BUFFER>;
    fn Acknowledge(&self) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricOperation {}
impl IFabricOperation_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricOperation_Vtbl
    where
        Identity: IFabricOperation_Impl,
    {
        unsafe extern "system" fn get_Metadata<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_OPERATION_METADATA
        where
            Identity: IFabricOperation_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricOperation_Impl::get_Metadata(this)
        }
        unsafe extern "system" fn GetData<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            count: *mut u32,
            buffers: *mut *mut super::FabricTypes::FABRIC_OPERATION_DATA_BUFFER,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricOperation_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricOperation_Impl::GetData(this, core::mem::transmute_copy(&count)) {
                Ok(ok__) => {
                    buffers.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Acknowledge<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricOperation_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricOperation_Impl::Acknowledge(this).into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Metadata: get_Metadata::<Identity, OFFSET>,
            GetData: GetData::<Identity, OFFSET>,
            Acknowledge: Acknowledge::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricOperation as windows_core::Interface>::IID
    }
}
pub trait IFabricOperationData_Impl: Sized {
    fn GetData(
        &self,
        count: *mut u32,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_OPERATION_DATA_BUFFER>;
}
impl windows_core::RuntimeName for IFabricOperationData {}
impl IFabricOperationData_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricOperationData_Vtbl
    where
        Identity: IFabricOperationData_Impl,
    {
        unsafe extern "system" fn GetData<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            count: *mut u32,
            buffers: *mut *mut super::FabricTypes::FABRIC_OPERATION_DATA_BUFFER,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricOperationData_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricOperationData_Impl::GetData(this, core::mem::transmute_copy(&count)) {
                Ok(ok__) => {
                    buffers.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetData: GetData::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricOperationData as windows_core::Interface>::IID
    }
}
pub trait IFabricOperationDataStream_Impl: Sized {
    fn BeginGetNext(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetNext(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricOperationData>;
}
impl windows_core::RuntimeName for IFabricOperationDataStream {}
impl IFabricOperationDataStream_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricOperationDataStream_Vtbl
    where
        Identity: IFabricOperationDataStream_Impl,
    {
        unsafe extern "system" fn BeginGetNext<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricOperationDataStream_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricOperationDataStream_Impl::BeginGetNext(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetNext<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            operationdata: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricOperationDataStream_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricOperationDataStream_Impl::EndGetNext(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    operationdata.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginGetNext: BeginGetNext::<Identity, OFFSET>,
            EndGetNext: EndGetNext::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricOperationDataStream as windows_core::Interface>::IID
    }
}
pub trait IFabricOperationStream_Impl: Sized {
    fn BeginGetOperation(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndGetOperation(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricOperation>;
}
impl windows_core::RuntimeName for IFabricOperationStream {}
impl IFabricOperationStream_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricOperationStream_Vtbl
    where
        Identity: IFabricOperationStream_Impl,
    {
        unsafe extern "system" fn BeginGetOperation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricOperationStream_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricOperationStream_Impl::BeginGetOperation(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndGetOperation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            operation: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricOperationStream_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricOperationStream_Impl::EndGetOperation(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    operation.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginGetOperation: BeginGetOperation::<Identity, OFFSET>,
            EndGetOperation: EndGetOperation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricOperationStream as windows_core::Interface>::IID
    }
}
pub trait IFabricOperationStream2_Impl: Sized + IFabricOperationStream_Impl {
    fn ReportFault(
        &self,
        faulttype: super::FabricTypes::FABRIC_FAULT_TYPE,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricOperationStream2 {}
impl IFabricOperationStream2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricOperationStream2_Vtbl
    where
        Identity: IFabricOperationStream2_Impl,
    {
        unsafe extern "system" fn ReportFault<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            faulttype: super::FabricTypes::FABRIC_FAULT_TYPE,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricOperationStream2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricOperationStream2_Impl::ReportFault(this, core::mem::transmute_copy(&faulttype))
                .into()
        }
        Self {
            base__: IFabricOperationStream_Vtbl::new::<Identity, OFFSET>(),
            ReportFault: ReportFault::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricOperationStream2 as windows_core::Interface>::IID
            || iid == &<IFabricOperationStream as windows_core::Interface>::IID
    }
}
pub trait IFabricPrimaryReplicator_Impl: Sized + IFabricReplicator_Impl {
    fn BeginOnDataLoss(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndOnDataLoss(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<u8>;
    fn UpdateCatchUpReplicaSetConfiguration(
        &self,
        currentconfiguration: *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
        previousconfiguration: *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
    ) -> windows_core::Result<()>;
    fn BeginWaitForCatchUpQuorum(
        &self,
        catchupmode: super::FabricTypes::FABRIC_REPLICA_SET_QUORUM_MODE,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndWaitForCatchUpQuorum(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn UpdateCurrentReplicaSetConfiguration(
        &self,
        currentconfiguration: *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
    ) -> windows_core::Result<()>;
    fn BeginBuildReplica(
        &self,
        replica: *const super::FabricTypes::FABRIC_REPLICA_INFORMATION,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndBuildReplica(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn RemoveReplica(&self, replicaid: i64) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricPrimaryReplicator {}
impl IFabricPrimaryReplicator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricPrimaryReplicator_Vtbl
    where
        Identity: IFabricPrimaryReplicator_Impl,
    {
        unsafe extern "system" fn BeginOnDataLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPrimaryReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPrimaryReplicator_Impl::BeginOnDataLoss(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndOnDataLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            isstatechanged: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPrimaryReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPrimaryReplicator_Impl::EndOnDataLoss(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    isstatechanged.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateCatchUpReplicaSetConfiguration<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            currentconfiguration: *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
            previousconfiguration: *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPrimaryReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPrimaryReplicator_Impl::UpdateCatchUpReplicaSetConfiguration(
                this,
                core::mem::transmute_copy(&currentconfiguration),
                core::mem::transmute_copy(&previousconfiguration),
            )
            .into()
        }
        unsafe extern "system" fn BeginWaitForCatchUpQuorum<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            catchupmode: super::FabricTypes::FABRIC_REPLICA_SET_QUORUM_MODE,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPrimaryReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPrimaryReplicator_Impl::BeginWaitForCatchUpQuorum(
                this,
                core::mem::transmute_copy(&catchupmode),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndWaitForCatchUpQuorum<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPrimaryReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPrimaryReplicator_Impl::EndWaitForCatchUpQuorum(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn UpdateCurrentReplicaSetConfiguration<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            currentconfiguration: *const super::FabricTypes::FABRIC_REPLICA_SET_CONFIGURATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPrimaryReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPrimaryReplicator_Impl::UpdateCurrentReplicaSetConfiguration(
                this,
                core::mem::transmute_copy(&currentconfiguration),
            )
            .into()
        }
        unsafe extern "system" fn BeginBuildReplica<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            replica: *const super::FabricTypes::FABRIC_REPLICA_INFORMATION,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPrimaryReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricPrimaryReplicator_Impl::BeginBuildReplica(
                this,
                core::mem::transmute_copy(&replica),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndBuildReplica<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPrimaryReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPrimaryReplicator_Impl::EndBuildReplica(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn RemoveReplica<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            replicaid: i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricPrimaryReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricPrimaryReplicator_Impl::RemoveReplica(
                this,
                core::mem::transmute_copy(&replicaid),
            )
            .into()
        }
        Self {
            base__: IFabricReplicator_Vtbl::new::<Identity, OFFSET>(),
            BeginOnDataLoss: BeginOnDataLoss::<Identity, OFFSET>,
            EndOnDataLoss: EndOnDataLoss::<Identity, OFFSET>,
            UpdateCatchUpReplicaSetConfiguration: UpdateCatchUpReplicaSetConfiguration::<
                Identity,
                OFFSET,
            >,
            BeginWaitForCatchUpQuorum: BeginWaitForCatchUpQuorum::<Identity, OFFSET>,
            EndWaitForCatchUpQuorum: EndWaitForCatchUpQuorum::<Identity, OFFSET>,
            UpdateCurrentReplicaSetConfiguration: UpdateCurrentReplicaSetConfiguration::<
                Identity,
                OFFSET,
            >,
            BeginBuildReplica: BeginBuildReplica::<Identity, OFFSET>,
            EndBuildReplica: EndBuildReplica::<Identity, OFFSET>,
            RemoveReplica: RemoveReplica::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricPrimaryReplicator as windows_core::Interface>::IID
            || iid == &<IFabricReplicator as windows_core::Interface>::IID
    }
}
pub trait IFabricProcessExitHandler_Impl: Sized {
    fn FabricProcessExited(&self);
}
impl windows_core::RuntimeName for IFabricProcessExitHandler {}
impl IFabricProcessExitHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricProcessExitHandler_Vtbl
    where
        Identity: IFabricProcessExitHandler_Impl,
    {
        unsafe extern "system" fn FabricProcessExited<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) where
            Identity: IFabricProcessExitHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricProcessExitHandler_Impl::FabricProcessExited(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            FabricProcessExited: FabricProcessExited::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricProcessExitHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricReplicator_Impl: Sized {
    fn BeginOpen(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndOpen(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn BeginChangeRole(
        &self,
        epoch: *const super::FabricTypes::FABRIC_EPOCH,
        role: super::FabricTypes::FABRIC_REPLICA_ROLE,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndChangeRole(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginUpdateEpoch(
        &self,
        epoch: *const super::FabricTypes::FABRIC_EPOCH,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpdateEpoch(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginClose(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndClose(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn Abort(&self);
    fn GetCurrentProgress(&self) -> windows_core::Result<i64>;
    fn GetCatchUpCapability(&self) -> windows_core::Result<i64>;
}
impl windows_core::RuntimeName for IFabricReplicator {}
impl IFabricReplicator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricReplicator_Vtbl
    where
        Identity: IFabricReplicator_Impl,
    {
        unsafe extern "system" fn BeginOpen<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricReplicator_Impl::BeginOpen(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndOpen<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            replicationaddress: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricReplicator_Impl::EndOpen(this, windows_core::from_raw_borrowed(&context)) {
                Ok(ok__) => {
                    replicationaddress.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginChangeRole<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            epoch: *const super::FabricTypes::FABRIC_EPOCH,
            role: super::FabricTypes::FABRIC_REPLICA_ROLE,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricReplicator_Impl::BeginChangeRole(
                this,
                core::mem::transmute_copy(&epoch),
                core::mem::transmute_copy(&role),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndChangeRole<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricReplicator_Impl::EndChangeRole(this, windows_core::from_raw_borrowed(&context))
                .into()
        }
        unsafe extern "system" fn BeginUpdateEpoch<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            epoch: *const super::FabricTypes::FABRIC_EPOCH,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricReplicator_Impl::BeginUpdateEpoch(
                this,
                core::mem::transmute_copy(&epoch),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpdateEpoch<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricReplicator_Impl::EndUpdateEpoch(this, windows_core::from_raw_borrowed(&context))
                .into()
        }
        unsafe extern "system" fn BeginClose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricReplicator_Impl::BeginClose(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndClose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricReplicator_Impl::EndClose(this, windows_core::from_raw_borrowed(&context)).into()
        }
        unsafe extern "system" fn Abort<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricReplicator_Impl::Abort(this)
        }
        unsafe extern "system" fn GetCurrentProgress<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            lastsequencenumber: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricReplicator_Impl::GetCurrentProgress(this) {
                Ok(ok__) => {
                    lastsequencenumber.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCatchUpCapability<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            fromsequencenumber: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricReplicator_Impl::GetCatchUpCapability(this) {
                Ok(ok__) => {
                    fromsequencenumber.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginOpen: BeginOpen::<Identity, OFFSET>,
            EndOpen: EndOpen::<Identity, OFFSET>,
            BeginChangeRole: BeginChangeRole::<Identity, OFFSET>,
            EndChangeRole: EndChangeRole::<Identity, OFFSET>,
            BeginUpdateEpoch: BeginUpdateEpoch::<Identity, OFFSET>,
            EndUpdateEpoch: EndUpdateEpoch::<Identity, OFFSET>,
            BeginClose: BeginClose::<Identity, OFFSET>,
            EndClose: EndClose::<Identity, OFFSET>,
            Abort: Abort::<Identity, OFFSET>,
            GetCurrentProgress: GetCurrentProgress::<Identity, OFFSET>,
            GetCatchUpCapability: GetCatchUpCapability::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricReplicator as windows_core::Interface>::IID
    }
}
pub trait IFabricReplicatorCatchupSpecificQuorum_Impl: Sized {}
impl windows_core::RuntimeName for IFabricReplicatorCatchupSpecificQuorum {}
impl IFabricReplicatorCatchupSpecificQuorum_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricReplicatorCatchupSpecificQuorum_Vtbl
    where
        Identity: IFabricReplicatorCatchupSpecificQuorum_Impl,
    {
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricReplicatorCatchupSpecificQuorum as windows_core::Interface>::IID
    }
}
pub trait IFabricReplicatorSettingsResult_Impl: Sized {
    fn get_ReplicatorSettings(&self) -> *mut super::FabricTypes::FABRIC_REPLICATOR_SETTINGS;
}
impl windows_core::RuntimeName for IFabricReplicatorSettingsResult {}
impl IFabricReplicatorSettingsResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricReplicatorSettingsResult_Vtbl
    where
        Identity: IFabricReplicatorSettingsResult_Impl,
    {
        unsafe extern "system" fn get_ReplicatorSettings<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_REPLICATOR_SETTINGS
        where
            Identity: IFabricReplicatorSettingsResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricReplicatorSettingsResult_Impl::get_ReplicatorSettings(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_ReplicatorSettings: get_ReplicatorSettings::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricReplicatorSettingsResult as windows_core::Interface>::IID
    }
}
pub trait IFabricRuntime_Impl: Sized {
    fn BeginRegisterStatelessServiceFactory(
        &self,
        servicetypename: &windows_core::PCWSTR,
        factory: Option<&IFabricStatelessServiceFactory>,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRegisterStatelessServiceFactory(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn RegisterStatelessServiceFactory(
        &self,
        servicetypename: &windows_core::PCWSTR,
        factory: Option<&IFabricStatelessServiceFactory>,
    ) -> windows_core::Result<()>;
    fn BeginRegisterStatefulServiceFactory(
        &self,
        servicetypename: &windows_core::PCWSTR,
        factory: Option<&IFabricStatefulServiceFactory>,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRegisterStatefulServiceFactory(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn RegisterStatefulServiceFactory(
        &self,
        servicetypename: &windows_core::PCWSTR,
        factory: Option<&IFabricStatefulServiceFactory>,
    ) -> windows_core::Result<()>;
    fn CreateServiceGroupFactoryBuilder(
        &self,
    ) -> windows_core::Result<IFabricServiceGroupFactoryBuilder>;
    fn BeginRegisterServiceGroupFactory(
        &self,
        groupservicetype: &windows_core::PCWSTR,
        factory: Option<&IFabricServiceGroupFactory>,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRegisterServiceGroupFactory(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn RegisterServiceGroupFactory(
        &self,
        groupservicetype: &windows_core::PCWSTR,
        factory: Option<&IFabricServiceGroupFactory>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricRuntime {}
impl IFabricRuntime_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricRuntime_Vtbl
    where
        Identity: IFabricRuntime_Impl,
    {
        unsafe extern "system" fn BeginRegisterStatelessServiceFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicetypename: windows_core::PCWSTR,
            factory: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRuntime_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRuntime_Impl::BeginRegisterStatelessServiceFactory(
                this,
                core::mem::transmute(&servicetypename),
                windows_core::from_raw_borrowed(&factory),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRegisterStatelessServiceFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRuntime_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricRuntime_Impl::EndRegisterStatelessServiceFactory(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn RegisterStatelessServiceFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicetypename: windows_core::PCWSTR,
            factory: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRuntime_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricRuntime_Impl::RegisterStatelessServiceFactory(
                this,
                core::mem::transmute(&servicetypename),
                windows_core::from_raw_borrowed(&factory),
            )
            .into()
        }
        unsafe extern "system" fn BeginRegisterStatefulServiceFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicetypename: windows_core::PCWSTR,
            factory: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRuntime_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRuntime_Impl::BeginRegisterStatefulServiceFactory(
                this,
                core::mem::transmute(&servicetypename),
                windows_core::from_raw_borrowed(&factory),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRegisterStatefulServiceFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRuntime_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricRuntime_Impl::EndRegisterStatefulServiceFactory(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn RegisterStatefulServiceFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicetypename: windows_core::PCWSTR,
            factory: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRuntime_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricRuntime_Impl::RegisterStatefulServiceFactory(
                this,
                core::mem::transmute(&servicetypename),
                windows_core::from_raw_borrowed(&factory),
            )
            .into()
        }
        unsafe extern "system" fn CreateServiceGroupFactoryBuilder<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            builder: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRuntime_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRuntime_Impl::CreateServiceGroupFactoryBuilder(this) {
                Ok(ok__) => {
                    builder.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginRegisterServiceGroupFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            groupservicetype: windows_core::PCWSTR,
            factory: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRuntime_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricRuntime_Impl::BeginRegisterServiceGroupFactory(
                this,
                core::mem::transmute(&groupservicetype),
                windows_core::from_raw_borrowed(&factory),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRegisterServiceGroupFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRuntime_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricRuntime_Impl::EndRegisterServiceGroupFactory(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn RegisterServiceGroupFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            groupservicetype: windows_core::PCWSTR,
            factory: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricRuntime_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricRuntime_Impl::RegisterServiceGroupFactory(
                this,
                core::mem::transmute(&groupservicetype),
                windows_core::from_raw_borrowed(&factory),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginRegisterStatelessServiceFactory: BeginRegisterStatelessServiceFactory::<
                Identity,
                OFFSET,
            >,
            EndRegisterStatelessServiceFactory: EndRegisterStatelessServiceFactory::<
                Identity,
                OFFSET,
            >,
            RegisterStatelessServiceFactory: RegisterStatelessServiceFactory::<Identity, OFFSET>,
            BeginRegisterStatefulServiceFactory: BeginRegisterStatefulServiceFactory::<
                Identity,
                OFFSET,
            >,
            EndRegisterStatefulServiceFactory: EndRegisterStatefulServiceFactory::<Identity, OFFSET>,
            RegisterStatefulServiceFactory: RegisterStatefulServiceFactory::<Identity, OFFSET>,
            CreateServiceGroupFactoryBuilder: CreateServiceGroupFactoryBuilder::<Identity, OFFSET>,
            BeginRegisterServiceGroupFactory: BeginRegisterServiceGroupFactory::<Identity, OFFSET>,
            EndRegisterServiceGroupFactory: EndRegisterServiceGroupFactory::<Identity, OFFSET>,
            RegisterServiceGroupFactory: RegisterServiceGroupFactory::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricRuntime as windows_core::Interface>::IID
    }
}
pub trait IFabricSecondaryEventHandler_Impl: Sized {
    fn OnCopyComplete(
        &self,
        enumerator: Option<&IFabricKeyValueStoreEnumerator>,
    ) -> windows_core::Result<()>;
    fn OnReplicationOperation(
        &self,
        enumerator: Option<&IFabricKeyValueStoreNotificationEnumerator>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricSecondaryEventHandler {}
impl IFabricSecondaryEventHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricSecondaryEventHandler_Vtbl
    where
        Identity: IFabricSecondaryEventHandler_Impl,
    {
        unsafe extern "system" fn OnCopyComplete<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            enumerator: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricSecondaryEventHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricSecondaryEventHandler_Impl::OnCopyComplete(
                this,
                windows_core::from_raw_borrowed(&enumerator),
            )
            .into()
        }
        unsafe extern "system" fn OnReplicationOperation<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            enumerator: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricSecondaryEventHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricSecondaryEventHandler_Impl::OnReplicationOperation(
                this,
                windows_core::from_raw_borrowed(&enumerator),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnCopyComplete: OnCopyComplete::<Identity, OFFSET>,
            OnReplicationOperation: OnReplicationOperation::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricSecondaryEventHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricSecurityCredentialsResult_Impl: Sized {
    fn get_SecurityCredentials(&self) -> *mut super::FabricTypes::FABRIC_SECURITY_CREDENTIALS;
}
impl windows_core::RuntimeName for IFabricSecurityCredentialsResult {}
impl IFabricSecurityCredentialsResult_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricSecurityCredentialsResult_Vtbl
    where
        Identity: IFabricSecurityCredentialsResult_Impl,
    {
        unsafe extern "system" fn get_SecurityCredentials<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut super::FabricTypes::FABRIC_SECURITY_CREDENTIALS
        where
            Identity: IFabricSecurityCredentialsResult_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricSecurityCredentialsResult_Impl::get_SecurityCredentials(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_SecurityCredentials: get_SecurityCredentials::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricSecurityCredentialsResult as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceGroupFactory_Impl: Sized {}
impl windows_core::RuntimeName for IFabricServiceGroupFactory {}
impl IFabricServiceGroupFactory_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceGroupFactory_Vtbl
    where
        Identity: IFabricServiceGroupFactory_Impl,
    {
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceGroupFactory as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceGroupFactoryBuilder_Impl: Sized {
    fn AddStatelessServiceFactory(
        &self,
        memberservicetype: &windows_core::PCWSTR,
        factory: Option<&IFabricStatelessServiceFactory>,
    ) -> windows_core::Result<()>;
    fn AddStatefulServiceFactory(
        &self,
        memberservicetype: &windows_core::PCWSTR,
        factory: Option<&IFabricStatefulServiceFactory>,
    ) -> windows_core::Result<()>;
    fn RemoveServiceFactory(
        &self,
        memberservicetype: &windows_core::PCWSTR,
    ) -> windows_core::Result<()>;
    fn ToServiceGroupFactory(&self) -> windows_core::Result<IFabricServiceGroupFactory>;
}
impl windows_core::RuntimeName for IFabricServiceGroupFactoryBuilder {}
impl IFabricServiceGroupFactoryBuilder_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceGroupFactoryBuilder_Vtbl
    where
        Identity: IFabricServiceGroupFactoryBuilder_Impl,
    {
        unsafe extern "system" fn AddStatelessServiceFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            memberservicetype: windows_core::PCWSTR,
            factory: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupFactoryBuilder_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceGroupFactoryBuilder_Impl::AddStatelessServiceFactory(
                this,
                core::mem::transmute(&memberservicetype),
                windows_core::from_raw_borrowed(&factory),
            )
            .into()
        }
        unsafe extern "system" fn AddStatefulServiceFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            memberservicetype: windows_core::PCWSTR,
            factory: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupFactoryBuilder_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceGroupFactoryBuilder_Impl::AddStatefulServiceFactory(
                this,
                core::mem::transmute(&memberservicetype),
                windows_core::from_raw_borrowed(&factory),
            )
            .into()
        }
        unsafe extern "system" fn RemoveServiceFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            memberservicetype: windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupFactoryBuilder_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricServiceGroupFactoryBuilder_Impl::RemoveServiceFactory(
                this,
                core::mem::transmute(&memberservicetype),
            )
            .into()
        }
        unsafe extern "system" fn ToServiceGroupFactory<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            factory: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupFactoryBuilder_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceGroupFactoryBuilder_Impl::ToServiceGroupFactory(this) {
                Ok(ok__) => {
                    factory.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            AddStatelessServiceFactory: AddStatelessServiceFactory::<Identity, OFFSET>,
            AddStatefulServiceFactory: AddStatefulServiceFactory::<Identity, OFFSET>,
            RemoveServiceFactory: RemoveServiceFactory::<Identity, OFFSET>,
            ToServiceGroupFactory: ToServiceGroupFactory::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceGroupFactoryBuilder as windows_core::Interface>::IID
    }
}
pub trait IFabricServiceGroupPartition_Impl: Sized {
    fn ResolveMember(
        &self,
        name: super::FabricTypes::FABRIC_URI,
        riid: *const windows_core::GUID,
    ) -> windows_core::Result<*mut core::ffi::c_void>;
}
impl windows_core::RuntimeName for IFabricServiceGroupPartition {}
impl IFabricServiceGroupPartition_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricServiceGroupPartition_Vtbl
    where
        Identity: IFabricServiceGroupPartition_Impl,
    {
        unsafe extern "system" fn ResolveMember<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            name: super::FabricTypes::FABRIC_URI,
            riid: *const windows_core::GUID,
            member: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricServiceGroupPartition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricServiceGroupPartition_Impl::ResolveMember(
                this,
                core::mem::transmute_copy(&name),
                core::mem::transmute_copy(&riid),
            ) {
                Ok(ok__) => {
                    member.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            ResolveMember: ResolveMember::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricServiceGroupPartition as windows_core::Interface>::IID
    }
}
pub trait IFabricStateProvider_Impl: Sized {
    fn BeginUpdateEpoch(
        &self,
        epoch: *const super::FabricTypes::FABRIC_EPOCH,
        previousepochlastsequencenumber: i64,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndUpdateEpoch(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn GetLastCommittedSequenceNumber(&self) -> windows_core::Result<i64>;
    fn BeginOnDataLoss(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndOnDataLoss(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<u8>;
    fn GetCopyContext(&self) -> windows_core::Result<IFabricOperationDataStream>;
    fn GetCopyState(
        &self,
        uptosequencenumber: i64,
        copycontextstream: Option<&IFabricOperationDataStream>,
    ) -> windows_core::Result<IFabricOperationDataStream>;
}
impl windows_core::RuntimeName for IFabricStateProvider {}
impl IFabricStateProvider_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStateProvider_Vtbl
    where
        Identity: IFabricStateProvider_Impl,
    {
        unsafe extern "system" fn BeginUpdateEpoch<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            epoch: *const super::FabricTypes::FABRIC_EPOCH,
            previousepochlastsequencenumber: i64,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateProvider_Impl::BeginUpdateEpoch(
                this,
                core::mem::transmute_copy(&epoch),
                core::mem::transmute_copy(&previousepochlastsequencenumber),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndUpdateEpoch<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStateProvider_Impl::EndUpdateEpoch(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn GetLastCommittedSequenceNumber<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            sequencenumber: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateProvider_Impl::GetLastCommittedSequenceNumber(this) {
                Ok(ok__) => {
                    sequencenumber.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginOnDataLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateProvider_Impl::BeginOnDataLoss(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndOnDataLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            isstatechanged: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateProvider_Impl::EndOnDataLoss(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    isstatechanged.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCopyContext<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            copycontextstream: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateProvider_Impl::GetCopyContext(this) {
                Ok(ok__) => {
                    copycontextstream.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCopyState<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            uptosequencenumber: i64,
            copycontextstream: *mut core::ffi::c_void,
            copystatestream: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateProvider_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateProvider_Impl::GetCopyState(
                this,
                core::mem::transmute_copy(&uptosequencenumber),
                windows_core::from_raw_borrowed(&copycontextstream),
            ) {
                Ok(ok__) => {
                    copystatestream.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginUpdateEpoch: BeginUpdateEpoch::<Identity, OFFSET>,
            EndUpdateEpoch: EndUpdateEpoch::<Identity, OFFSET>,
            GetLastCommittedSequenceNumber: GetLastCommittedSequenceNumber::<Identity, OFFSET>,
            BeginOnDataLoss: BeginOnDataLoss::<Identity, OFFSET>,
            EndOnDataLoss: EndOnDataLoss::<Identity, OFFSET>,
            GetCopyContext: GetCopyContext::<Identity, OFFSET>,
            GetCopyState: GetCopyState::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStateProvider as windows_core::Interface>::IID
    }
}
pub trait IFabricStateReplicator_Impl: Sized {
    fn BeginReplicate(
        &self,
        operationdata: Option<&IFabricOperationData>,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
        sequencenumber: *mut i64,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndReplicate(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
    fn GetReplicationStream(&self) -> windows_core::Result<IFabricOperationStream>;
    fn GetCopyStream(&self) -> windows_core::Result<IFabricOperationStream>;
    fn UpdateReplicatorSettings(
        &self,
        replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricStateReplicator {}
impl IFabricStateReplicator_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStateReplicator_Vtbl
    where
        Identity: IFabricStateReplicator_Impl,
    {
        unsafe extern "system" fn BeginReplicate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            operationdata: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            sequencenumber: *mut i64,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateReplicator_Impl::BeginReplicate(
                this,
                windows_core::from_raw_borrowed(&operationdata),
                windows_core::from_raw_borrowed(&callback),
                core::mem::transmute_copy(&sequencenumber),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndReplicate<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            sequencenumber: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateReplicator_Impl::EndReplicate(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    sequencenumber.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReplicationStream<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            stream: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateReplicator_Impl::GetReplicationStream(this) {
                Ok(ok__) => {
                    stream.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCopyStream<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            stream: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateReplicator_Impl::GetCopyStream(this) {
                Ok(ok__) => {
                    stream.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn UpdateReplicatorSettings<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateReplicator_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStateReplicator_Impl::UpdateReplicatorSettings(
                this,
                core::mem::transmute_copy(&replicatorsettings),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginReplicate: BeginReplicate::<Identity, OFFSET>,
            EndReplicate: EndReplicate::<Identity, OFFSET>,
            GetReplicationStream: GetReplicationStream::<Identity, OFFSET>,
            GetCopyStream: GetCopyStream::<Identity, OFFSET>,
            UpdateReplicatorSettings: UpdateReplicatorSettings::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStateReplicator as windows_core::Interface>::IID
    }
}
pub trait IFabricStateReplicator2_Impl: Sized + IFabricStateReplicator_Impl {
    fn GetReplicatorSettings(&self) -> windows_core::Result<IFabricReplicatorSettingsResult>;
}
impl windows_core::RuntimeName for IFabricStateReplicator2 {}
impl IFabricStateReplicator2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStateReplicator2_Vtbl
    where
        Identity: IFabricStateReplicator2_Impl,
    {
        unsafe extern "system" fn GetReplicatorSettings<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            replicatorsettings: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStateReplicator2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStateReplicator2_Impl::GetReplicatorSettings(this) {
                Ok(ok__) => {
                    replicatorsettings.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricStateReplicator_Vtbl::new::<Identity, OFFSET>(),
            GetReplicatorSettings: GetReplicatorSettings::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStateReplicator2 as windows_core::Interface>::IID
            || iid == &<IFabricStateReplicator as windows_core::Interface>::IID
    }
}
pub trait IFabricStatefulServiceFactory_Impl: Sized {
    fn CreateReplica(
        &self,
        servicetypename: &windows_core::PCWSTR,
        servicename: super::FabricTypes::FABRIC_URI,
        initializationdatalength: u32,
        initializationdata: *const u8,
        partitionid: &windows_core::GUID,
        replicaid: i64,
    ) -> windows_core::Result<IFabricStatefulServiceReplica>;
}
impl windows_core::RuntimeName for IFabricStatefulServiceFactory {}
impl IFabricStatefulServiceFactory_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatefulServiceFactory_Vtbl
    where
        Identity: IFabricStatefulServiceFactory_Impl,
    {
        unsafe extern "system" fn CreateReplica<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicetypename: windows_core::PCWSTR,
            servicename: super::FabricTypes::FABRIC_URI,
            initializationdatalength: u32,
            initializationdata: *const u8,
            partitionid: windows_core::GUID,
            replicaid: i64,
            servicereplica: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServiceFactory_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatefulServiceFactory_Impl::CreateReplica(
                this,
                core::mem::transmute(&servicetypename),
                core::mem::transmute_copy(&servicename),
                core::mem::transmute_copy(&initializationdatalength),
                core::mem::transmute_copy(&initializationdata),
                core::mem::transmute(&partitionid),
                core::mem::transmute_copy(&replicaid),
            ) {
                Ok(ok__) => {
                    servicereplica.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            CreateReplica: CreateReplica::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatefulServiceFactory as windows_core::Interface>::IID
    }
}
pub trait IFabricStatefulServicePartition_Impl: Sized {
    fn GetPartitionInfo(
        &self,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_SERVICE_PARTITION_INFORMATION>;
    fn GetReadStatus(
        &self,
    ) -> windows_core::Result<super::FabricTypes::FABRIC_SERVICE_PARTITION_ACCESS_STATUS>;
    fn GetWriteStatus(
        &self,
    ) -> windows_core::Result<super::FabricTypes::FABRIC_SERVICE_PARTITION_ACCESS_STATUS>;
    fn CreateReplicator(
        &self,
        stateprovider: Option<&IFabricStateProvider>,
        replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
        replicator: *mut Option<IFabricReplicator>,
    ) -> windows_core::Result<IFabricStateReplicator>;
    fn ReportLoad(
        &self,
        metriccount: u32,
        metrics: *const super::FabricTypes::FABRIC_LOAD_METRIC,
    ) -> windows_core::Result<()>;
    fn ReportFault(
        &self,
        faulttype: super::FabricTypes::FABRIC_FAULT_TYPE,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricStatefulServicePartition {}
impl IFabricStatefulServicePartition_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatefulServicePartition_Vtbl
    where
        Identity: IFabricStatefulServicePartition_Impl,
    {
        unsafe extern "system" fn GetPartitionInfo<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            bufferedvalue: *mut *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_INFORMATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatefulServicePartition_Impl::GetPartitionInfo(this) {
                Ok(ok__) => {
                    bufferedvalue.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetReadStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            readstatus: *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_ACCESS_STATUS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatefulServicePartition_Impl::GetReadStatus(this) {
                Ok(ok__) => {
                    readstatus.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetWriteStatus<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            writestatus: *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_ACCESS_STATUS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatefulServicePartition_Impl::GetWriteStatus(this) {
                Ok(ok__) => {
                    writestatus.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CreateReplicator<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            stateprovider: *mut core::ffi::c_void,
            replicatorsettings: *const super::FabricTypes::FABRIC_REPLICATOR_SETTINGS,
            replicator: *mut *mut core::ffi::c_void,
            statereplicator: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatefulServicePartition_Impl::CreateReplicator(
                this,
                windows_core::from_raw_borrowed(&stateprovider),
                core::mem::transmute_copy(&replicatorsettings),
                core::mem::transmute_copy(&replicator),
            ) {
                Ok(ok__) => {
                    statereplicator.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReportLoad<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            metriccount: u32,
            metrics: *const super::FabricTypes::FABRIC_LOAD_METRIC,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatefulServicePartition_Impl::ReportLoad(
                this,
                core::mem::transmute_copy(&metriccount),
                core::mem::transmute_copy(&metrics),
            )
            .into()
        }
        unsafe extern "system" fn ReportFault<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            faulttype: super::FabricTypes::FABRIC_FAULT_TYPE,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatefulServicePartition_Impl::ReportFault(
                this,
                core::mem::transmute_copy(&faulttype),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetPartitionInfo: GetPartitionInfo::<Identity, OFFSET>,
            GetReadStatus: GetReadStatus::<Identity, OFFSET>,
            GetWriteStatus: GetWriteStatus::<Identity, OFFSET>,
            CreateReplicator: CreateReplicator::<Identity, OFFSET>,
            ReportLoad: ReportLoad::<Identity, OFFSET>,
            ReportFault: ReportFault::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatefulServicePartition as windows_core::Interface>::IID
    }
}
pub trait IFabricStatefulServicePartition1_Impl:
    Sized + IFabricStatefulServicePartition_Impl
{
    fn ReportMoveCost(
        &self,
        movecost: super::FabricTypes::FABRIC_MOVE_COST,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricStatefulServicePartition1 {}
impl IFabricStatefulServicePartition1_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatefulServicePartition1_Vtbl
    where
        Identity: IFabricStatefulServicePartition1_Impl,
    {
        unsafe extern "system" fn ReportMoveCost<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            movecost: super::FabricTypes::FABRIC_MOVE_COST,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition1_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatefulServicePartition1_Impl::ReportMoveCost(
                this,
                core::mem::transmute_copy(&movecost),
            )
            .into()
        }
        Self {
            base__: IFabricStatefulServicePartition_Vtbl::new::<Identity, OFFSET>(),
            ReportMoveCost: ReportMoveCost::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatefulServicePartition1 as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServicePartition as windows_core::Interface>::IID
    }
}
pub trait IFabricStatefulServicePartition2_Impl:
    Sized + IFabricStatefulServicePartition1_Impl
{
    fn ReportReplicaHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()>;
    fn ReportPartitionHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricStatefulServicePartition2 {}
impl IFabricStatefulServicePartition2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatefulServicePartition2_Vtbl
    where
        Identity: IFabricStatefulServicePartition2_Impl,
    {
        unsafe extern "system" fn ReportReplicaHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatefulServicePartition2_Impl::ReportReplicaHealth(
                this,
                core::mem::transmute_copy(&healthinfo),
            )
            .into()
        }
        unsafe extern "system" fn ReportPartitionHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatefulServicePartition2_Impl::ReportPartitionHealth(
                this,
                core::mem::transmute_copy(&healthinfo),
            )
            .into()
        }
        Self {
            base__: IFabricStatefulServicePartition1_Vtbl::new::<Identity, OFFSET>(),
            ReportReplicaHealth: ReportReplicaHealth::<Identity, OFFSET>,
            ReportPartitionHealth: ReportPartitionHealth::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatefulServicePartition2 as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServicePartition as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServicePartition1 as windows_core::Interface>::IID
    }
}
pub trait IFabricStatefulServicePartition3_Impl:
    Sized + IFabricStatefulServicePartition2_Impl
{
    fn ReportReplicaHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()>;
    fn ReportPartitionHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricStatefulServicePartition3 {}
impl IFabricStatefulServicePartition3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatefulServicePartition3_Vtbl
    where
        Identity: IFabricStatefulServicePartition3_Impl,
    {
        unsafe extern "system" fn ReportReplicaHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
            sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatefulServicePartition3_Impl::ReportReplicaHealth2(
                this,
                core::mem::transmute_copy(&healthinfo),
                core::mem::transmute_copy(&sendoptions),
            )
            .into()
        }
        unsafe extern "system" fn ReportPartitionHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
            sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServicePartition3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatefulServicePartition3_Impl::ReportPartitionHealth2(
                this,
                core::mem::transmute_copy(&healthinfo),
                core::mem::transmute_copy(&sendoptions),
            )
            .into()
        }
        Self {
            base__: IFabricStatefulServicePartition2_Vtbl::new::<Identity, OFFSET>(),
            ReportReplicaHealth2: ReportReplicaHealth2::<Identity, OFFSET>,
            ReportPartitionHealth2: ReportPartitionHealth2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatefulServicePartition3 as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServicePartition as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServicePartition1 as windows_core::Interface>::IID
            || iid == &<IFabricStatefulServicePartition2 as windows_core::Interface>::IID
    }
}
pub trait IFabricStatefulServiceReplica_Impl: Sized {
    fn BeginOpen(
        &self,
        openmode: super::FabricTypes::FABRIC_REPLICA_OPEN_MODE,
        partition: Option<&IFabricStatefulServicePartition>,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndOpen(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricReplicator>;
    fn BeginChangeRole(
        &self,
        newrole: super::FabricTypes::FABRIC_REPLICA_ROLE,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndChangeRole(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn BeginClose(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndClose(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn Abort(&self);
}
impl windows_core::RuntimeName for IFabricStatefulServiceReplica {}
impl IFabricStatefulServiceReplica_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatefulServiceReplica_Vtbl
    where
        Identity: IFabricStatefulServiceReplica_Impl,
    {
        unsafe extern "system" fn BeginOpen<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            openmode: super::FabricTypes::FABRIC_REPLICA_OPEN_MODE,
            partition: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServiceReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatefulServiceReplica_Impl::BeginOpen(
                this,
                core::mem::transmute_copy(&openmode),
                windows_core::from_raw_borrowed(&partition),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndOpen<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            replicator: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServiceReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatefulServiceReplica_Impl::EndOpen(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    replicator.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginChangeRole<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            newrole: super::FabricTypes::FABRIC_REPLICA_ROLE,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServiceReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatefulServiceReplica_Impl::BeginChangeRole(
                this,
                core::mem::transmute_copy(&newrole),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndChangeRole<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            serviceaddress: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServiceReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatefulServiceReplica_Impl::EndChangeRole(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    serviceaddress.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginClose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServiceReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatefulServiceReplica_Impl::BeginClose(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndClose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatefulServiceReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatefulServiceReplica_Impl::EndClose(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn Abort<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) where
            Identity: IFabricStatefulServiceReplica_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatefulServiceReplica_Impl::Abort(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginOpen: BeginOpen::<Identity, OFFSET>,
            EndOpen: EndOpen::<Identity, OFFSET>,
            BeginChangeRole: BeginChangeRole::<Identity, OFFSET>,
            EndChangeRole: EndChangeRole::<Identity, OFFSET>,
            BeginClose: BeginClose::<Identity, OFFSET>,
            EndClose: EndClose::<Identity, OFFSET>,
            Abort: Abort::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatefulServiceReplica as windows_core::Interface>::IID
    }
}
pub trait IFabricStatelessServiceFactory_Impl: Sized {
    fn CreateInstance(
        &self,
        servicetypename: &windows_core::PCWSTR,
        servicename: super::FabricTypes::FABRIC_URI,
        initializationdatalength: u32,
        initializationdata: *const u8,
        partitionid: &windows_core::GUID,
        instanceid: i64,
    ) -> windows_core::Result<IFabricStatelessServiceInstance>;
}
impl windows_core::RuntimeName for IFabricStatelessServiceFactory {}
impl IFabricStatelessServiceFactory_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatelessServiceFactory_Vtbl
    where
        Identity: IFabricStatelessServiceFactory_Impl,
    {
        unsafe extern "system" fn CreateInstance<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            servicetypename: windows_core::PCWSTR,
            servicename: super::FabricTypes::FABRIC_URI,
            initializationdatalength: u32,
            initializationdata: *const u8,
            partitionid: windows_core::GUID,
            instanceid: i64,
            serviceinstance: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServiceFactory_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatelessServiceFactory_Impl::CreateInstance(
                this,
                core::mem::transmute(&servicetypename),
                core::mem::transmute_copy(&servicename),
                core::mem::transmute_copy(&initializationdatalength),
                core::mem::transmute_copy(&initializationdata),
                core::mem::transmute(&partitionid),
                core::mem::transmute_copy(&instanceid),
            ) {
                Ok(ok__) => {
                    serviceinstance.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatelessServiceFactory as windows_core::Interface>::IID
    }
}
pub trait IFabricStatelessServiceInstance_Impl: Sized {
    fn BeginOpen(
        &self,
        partition: Option<&IFabricStatelessServicePartition>,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndOpen(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn BeginClose(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndClose(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn Abort(&self);
}
impl windows_core::RuntimeName for IFabricStatelessServiceInstance {}
impl IFabricStatelessServiceInstance_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatelessServiceInstance_Vtbl
    where
        Identity: IFabricStatelessServiceInstance_Impl,
    {
        unsafe extern "system" fn BeginOpen<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            partition: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServiceInstance_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatelessServiceInstance_Impl::BeginOpen(
                this,
                windows_core::from_raw_borrowed(&partition),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndOpen<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            serviceaddress: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServiceInstance_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatelessServiceInstance_Impl::EndOpen(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    serviceaddress.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginClose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServiceInstance_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatelessServiceInstance_Impl::BeginClose(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndClose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServiceInstance_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatelessServiceInstance_Impl::EndClose(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn Abort<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) where
            Identity: IFabricStatelessServiceInstance_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatelessServiceInstance_Impl::Abort(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginOpen: BeginOpen::<Identity, OFFSET>,
            EndOpen: EndOpen::<Identity, OFFSET>,
            BeginClose: BeginClose::<Identity, OFFSET>,
            EndClose: EndClose::<Identity, OFFSET>,
            Abort: Abort::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatelessServiceInstance as windows_core::Interface>::IID
    }
}
pub trait IFabricStatelessServicePartition_Impl: Sized {
    fn GetPartitionInfo(
        &self,
    ) -> windows_core::Result<*mut super::FabricTypes::FABRIC_SERVICE_PARTITION_INFORMATION>;
    fn ReportLoad(
        &self,
        metriccount: u32,
        metrics: *const super::FabricTypes::FABRIC_LOAD_METRIC,
    ) -> windows_core::Result<()>;
    fn ReportFault(
        &self,
        faulttype: super::FabricTypes::FABRIC_FAULT_TYPE,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricStatelessServicePartition {}
impl IFabricStatelessServicePartition_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatelessServicePartition_Vtbl
    where
        Identity: IFabricStatelessServicePartition_Impl,
    {
        unsafe extern "system" fn GetPartitionInfo<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            bufferedvalue: *mut *mut super::FabricTypes::FABRIC_SERVICE_PARTITION_INFORMATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServicePartition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStatelessServicePartition_Impl::GetPartitionInfo(this) {
                Ok(ok__) => {
                    bufferedvalue.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ReportLoad<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            metriccount: u32,
            metrics: *const super::FabricTypes::FABRIC_LOAD_METRIC,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServicePartition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatelessServicePartition_Impl::ReportLoad(
                this,
                core::mem::transmute_copy(&metriccount),
                core::mem::transmute_copy(&metrics),
            )
            .into()
        }
        unsafe extern "system" fn ReportFault<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            faulttype: super::FabricTypes::FABRIC_FAULT_TYPE,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServicePartition_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatelessServicePartition_Impl::ReportFault(
                this,
                core::mem::transmute_copy(&faulttype),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetPartitionInfo: GetPartitionInfo::<Identity, OFFSET>,
            ReportLoad: ReportLoad::<Identity, OFFSET>,
            ReportFault: ReportFault::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatelessServicePartition as windows_core::Interface>::IID
    }
}
pub trait IFabricStatelessServicePartition1_Impl:
    Sized + IFabricStatelessServicePartition_Impl
{
    fn ReportMoveCost(
        &self,
        movecost: super::FabricTypes::FABRIC_MOVE_COST,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricStatelessServicePartition1 {}
impl IFabricStatelessServicePartition1_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatelessServicePartition1_Vtbl
    where
        Identity: IFabricStatelessServicePartition1_Impl,
    {
        unsafe extern "system" fn ReportMoveCost<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            movecost: super::FabricTypes::FABRIC_MOVE_COST,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServicePartition1_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatelessServicePartition1_Impl::ReportMoveCost(
                this,
                core::mem::transmute_copy(&movecost),
            )
            .into()
        }
        Self {
            base__: IFabricStatelessServicePartition_Vtbl::new::<Identity, OFFSET>(),
            ReportMoveCost: ReportMoveCost::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatelessServicePartition1 as windows_core::Interface>::IID
            || iid == &<IFabricStatelessServicePartition as windows_core::Interface>::IID
    }
}
pub trait IFabricStatelessServicePartition2_Impl:
    Sized + IFabricStatelessServicePartition1_Impl
{
    fn ReportInstanceHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()>;
    fn ReportPartitionHealth(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricStatelessServicePartition2 {}
impl IFabricStatelessServicePartition2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatelessServicePartition2_Vtbl
    where
        Identity: IFabricStatelessServicePartition2_Impl,
    {
        unsafe extern "system" fn ReportInstanceHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServicePartition2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatelessServicePartition2_Impl::ReportInstanceHealth(
                this,
                core::mem::transmute_copy(&healthinfo),
            )
            .into()
        }
        unsafe extern "system" fn ReportPartitionHealth<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServicePartition2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatelessServicePartition2_Impl::ReportPartitionHealth(
                this,
                core::mem::transmute_copy(&healthinfo),
            )
            .into()
        }
        Self {
            base__: IFabricStatelessServicePartition1_Vtbl::new::<Identity, OFFSET>(),
            ReportInstanceHealth: ReportInstanceHealth::<Identity, OFFSET>,
            ReportPartitionHealth: ReportPartitionHealth::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatelessServicePartition2 as windows_core::Interface>::IID
            || iid == &<IFabricStatelessServicePartition as windows_core::Interface>::IID
            || iid == &<IFabricStatelessServicePartition1 as windows_core::Interface>::IID
    }
}
pub trait IFabricStatelessServicePartition3_Impl:
    Sized + IFabricStatelessServicePartition2_Impl
{
    fn ReportInstanceHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()>;
    fn ReportPartitionHealth2(
        &self,
        healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
        sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricStatelessServicePartition3 {}
impl IFabricStatelessServicePartition3_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStatelessServicePartition3_Vtbl
    where
        Identity: IFabricStatelessServicePartition3_Impl,
    {
        unsafe extern "system" fn ReportInstanceHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
            sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServicePartition3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatelessServicePartition3_Impl::ReportInstanceHealth2(
                this,
                core::mem::transmute_copy(&healthinfo),
                core::mem::transmute_copy(&sendoptions),
            )
            .into()
        }
        unsafe extern "system" fn ReportPartitionHealth2<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            healthinfo: *const super::FabricTypes::FABRIC_HEALTH_INFORMATION,
            sendoptions: *const super::FabricTypes::FABRIC_HEALTH_REPORT_SEND_OPTIONS,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStatelessServicePartition3_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStatelessServicePartition3_Impl::ReportPartitionHealth2(
                this,
                core::mem::transmute_copy(&healthinfo),
                core::mem::transmute_copy(&sendoptions),
            )
            .into()
        }
        Self {
            base__: IFabricStatelessServicePartition2_Vtbl::new::<Identity, OFFSET>(),
            ReportInstanceHealth2: ReportInstanceHealth2::<Identity, OFFSET>,
            ReportPartitionHealth2: ReportPartitionHealth2::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStatelessServicePartition3 as windows_core::Interface>::IID
            || iid == &<IFabricStatelessServicePartition as windows_core::Interface>::IID
            || iid == &<IFabricStatelessServicePartition1 as windows_core::Interface>::IID
            || iid == &<IFabricStatelessServicePartition2 as windows_core::Interface>::IID
    }
}
pub trait IFabricStoreEventHandler_Impl: Sized {
    fn OnDataLoss(&self);
}
impl windows_core::RuntimeName for IFabricStoreEventHandler {}
impl IFabricStoreEventHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStoreEventHandler_Vtbl
    where
        Identity: IFabricStoreEventHandler_Impl,
    {
        unsafe extern "system" fn OnDataLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) where
            Identity: IFabricStoreEventHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricStoreEventHandler_Impl::OnDataLoss(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnDataLoss: OnDataLoss::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStoreEventHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricStoreEventHandler2_Impl: Sized + IFabricStoreEventHandler_Impl {
    fn BeginOnDataLoss(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndOnDataLoss(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<u8>;
}
impl windows_core::RuntimeName for IFabricStoreEventHandler2 {}
impl IFabricStoreEventHandler2_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStoreEventHandler2_Vtbl
    where
        Identity: IFabricStoreEventHandler2_Impl,
    {
        unsafe extern "system" fn BeginOnDataLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStoreEventHandler2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStoreEventHandler2_Impl::BeginOnDataLoss(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndOnDataLoss<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            isstatechanged: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStoreEventHandler2_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStoreEventHandler2_Impl::EndOnDataLoss(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    isstatechanged.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: IFabricStoreEventHandler_Vtbl::new::<Identity, OFFSET>(),
            BeginOnDataLoss: BeginOnDataLoss::<Identity, OFFSET>,
            EndOnDataLoss: EndOnDataLoss::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStoreEventHandler2 as windows_core::Interface>::IID
            || iid == &<IFabricStoreEventHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricStorePostBackupHandler_Impl: Sized {
    fn BeginPostBackup(
        &self,
        info: *const super::FabricTypes::FABRIC_STORE_BACKUP_INFO,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndPostBackup(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<u8>;
}
impl windows_core::RuntimeName for IFabricStorePostBackupHandler {}
impl IFabricStorePostBackupHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricStorePostBackupHandler_Vtbl
    where
        Identity: IFabricStorePostBackupHandler_Impl,
    {
        unsafe extern "system" fn BeginPostBackup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            info: *const super::FabricTypes::FABRIC_STORE_BACKUP_INFO,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStorePostBackupHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStorePostBackupHandler_Impl::BeginPostBackup(
                this,
                core::mem::transmute_copy(&info),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndPostBackup<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            status: *mut u8,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricStorePostBackupHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricStorePostBackupHandler_Impl::EndPostBackup(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    status.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginPostBackup: BeginPostBackup::<Identity, OFFSET>,
            EndPostBackup: EndPostBackup::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricStorePostBackupHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricTransaction_Impl: Sized + IFabricTransactionBase_Impl {
    fn BeginCommit(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndCommit(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<i64>;
    fn Rollback(&self);
}
impl windows_core::RuntimeName for IFabricTransaction {}
impl IFabricTransaction_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransaction_Vtbl
    where
        Identity: IFabricTransaction_Impl,
    {
        unsafe extern "system" fn BeginCommit<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransaction_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransaction_Impl::BeginCommit(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndCommit<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            commitsequencenumber: *mut i64,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransaction_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransaction_Impl::EndCommit(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    commitsequencenumber.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Rollback<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) where
            Identity: IFabricTransaction_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransaction_Impl::Rollback(this)
        }
        Self {
            base__: IFabricTransactionBase_Vtbl::new::<Identity, OFFSET>(),
            BeginCommit: BeginCommit::<Identity, OFFSET>,
            EndCommit: EndCommit::<Identity, OFFSET>,
            Rollback: Rollback::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransaction as windows_core::Interface>::IID
            || iid == &<IFabricTransactionBase as windows_core::Interface>::IID
    }
}
pub trait IFabricTransactionBase_Impl: Sized {
    fn get_Id(&self) -> *mut windows_core::GUID;
    fn get_IsolationLevel(&self) -> super::FabricTypes::FABRIC_TRANSACTION_ISOLATION_LEVEL;
}
impl windows_core::RuntimeName for IFabricTransactionBase {}
impl IFabricTransactionBase_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransactionBase_Vtbl
    where
        Identity: IFabricTransactionBase_Impl,
    {
        unsafe extern "system" fn get_Id<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut windows_core::GUID
        where
            Identity: IFabricTransactionBase_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransactionBase_Impl::get_Id(this)
        }
        unsafe extern "system" fn get_IsolationLevel<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> super::FabricTypes::FABRIC_TRANSACTION_ISOLATION_LEVEL
        where
            Identity: IFabricTransactionBase_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransactionBase_Impl::get_IsolationLevel(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            get_Id: get_Id::<Identity, OFFSET>,
            get_IsolationLevel: get_IsolationLevel::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransactionBase as windows_core::Interface>::IID
    }
}
