// Bindings generated by `windows-bindgen` 0.58.0

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]
#[inline]
pub unsafe fn CreateFabricTransportClient<P0, P1, P2, P3>(
    interfaceid: *const windows_core::GUID,
    settings: *const FABRIC_TRANSPORT_SETTINGS,
    connectionaddress: P0,
    notificationhandler: P1,
    clienteventhandler: P2,
    messagedisposer: P3,
) -> windows_core::Result<IFabricTransportClient>
where
    P0: windows_core::Param<windows_core::PCWSTR>,
    P1: windows_core::Param<IFabricTransportCallbackMessageHandler>,
    P2: windows_core::Param<IFabricTransportClientEventHandler>,
    P3: windows_core::Param<IFabricTransportMessageDisposer>,
{
    #[link(name = "FabricTransport")]
    extern "system" {
        pub fn CreateFabricTransportClient(
            interfaceid: *const windows_core::GUID,
            settings: *const FABRIC_TRANSPORT_SETTINGS,
            connectionaddress: windows_core::PCWSTR,
            notificationhandler: *mut core::ffi::c_void,
            clienteventhandler: *mut core::ffi::c_void,
            messagedisposer: *mut core::ffi::c_void,
            client: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    CreateFabricTransportClient(
        interfaceid,
        settings,
        connectionaddress.param().abi(),
        notificationhandler.param().abi(),
        clienteventhandler.param().abi(),
        messagedisposer.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
#[inline]
pub unsafe fn CreateFabricTransportListener<P0, P1, P2>(
    interfaceid: *const windows_core::GUID,
    settings: *const FABRIC_TRANSPORT_SETTINGS,
    address: *const FABRIC_TRANSPORT_LISTEN_ADDRESS,
    requesthandler: P0,
    connectionhandler: P1,
    disposeprocessor: P2,
) -> windows_core::Result<IFabricTransportListener>
where
    P0: windows_core::Param<IFabricTransportMessageHandler>,
    P1: windows_core::Param<IFabricTransportConnectionHandler>,
    P2: windows_core::Param<IFabricTransportMessageDisposer>,
{
    #[link(name = "FabricTransport")]
    extern "system" {
        pub fn CreateFabricTransportListener(
            interfaceid: *const windows_core::GUID,
            settings: *const FABRIC_TRANSPORT_SETTINGS,
            address: *const FABRIC_TRANSPORT_LISTEN_ADDRESS,
            requesthandler: *mut core::ffi::c_void,
            connectionhandler: *mut core::ffi::c_void,
            disposeprocessor: *mut core::ffi::c_void,
            listener: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT;
    }
    let mut result__ = core::mem::zeroed();
    CreateFabricTransportListener(
        interfaceid,
        settings,
        address,
        requesthandler.param().abi(),
        connectionhandler.param().abi(),
        disposeprocessor.param().abi(),
        &mut result__,
    )
    .and_then(|| windows_core::Type::from_abi(result__))
}
windows_core::imp::define_interface!(
    IFabricTransportCallbackMessageHandler,
    IFabricTransportCallbackMessageHandler_Vtbl,
    0x9ba8ac7a_3464_4774_b9b9_1d7f0f1920ba
);
impl core::ops::Deref for IFabricTransportCallbackMessageHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(
    IFabricTransportCallbackMessageHandler,
    windows_core::IUnknown
);
impl IFabricTransportCallbackMessageHandler {
    pub unsafe fn HandleOneWay<P0>(&self, message: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricTransportMessage>,
    {
        (windows_core::Interface::vtable(self).HandleOneWay)(
            windows_core::Interface::as_raw(self),
            message.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricTransportCallbackMessageHandler {}
unsafe impl Sync for IFabricTransportCallbackMessageHandler {}
#[repr(C)]
pub struct IFabricTransportCallbackMessageHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub HandleOneWay: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricTransportClient,
    IFabricTransportClient_Vtbl,
    0x5b0634fe_6a52_4bd9_8059_892c72c1d73a
);
impl core::ops::Deref for IFabricTransportClient {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTransportClient, windows_core::IUnknown);
impl IFabricTransportClient {
    pub unsafe fn BeginRequest<P0, P1>(
        &self,
        message: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<IFabricTransportMessage>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginRequest)(
            windows_core::Interface::as_raw(self),
            message.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndRequest<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricTransportMessage>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndRequest)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn Send<P0>(&self, message: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricTransportMessage>,
    {
        (windows_core::Interface::vtable(self).Send)(
            windows_core::Interface::as_raw(self),
            message.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginOpen<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginOpen)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndOpen<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndOpen)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginClose<P0>(
        &self,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginClose)(
            windows_core::Interface::as_raw(self),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndClose<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndClose)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn Abort(&self) {
        (windows_core::Interface::vtable(self).Abort)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricTransportClient {}
unsafe impl Sync for IFabricTransportClient {}
#[repr(C)]
pub struct IFabricTransportClient_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginRequest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndRequest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Send: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginOpen: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndOpen: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginClose: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndClose: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Abort: unsafe extern "system" fn(*mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricTransportClientConnection,
    IFabricTransportClientConnection_Vtbl,
    0xa54c17f7_fe94_4838_b14d_e9b5c258e2d0
);
impl core::ops::Deref for IFabricTransportClientConnection {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTransportClientConnection, windows_core::IUnknown);
impl IFabricTransportClientConnection {
    pub unsafe fn Send<P0>(&self, message: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricTransportMessage>,
    {
        (windows_core::Interface::vtable(self).Send)(
            windows_core::Interface::as_raw(self),
            message.param().abi(),
        )
        .ok()
    }
    pub unsafe fn get_ClientId(&self) -> *mut u16 {
        (windows_core::Interface::vtable(self).get_ClientId)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricTransportClientConnection {}
unsafe impl Sync for IFabricTransportClientConnection {}
#[repr(C)]
pub struct IFabricTransportClientConnection_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub Send: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub get_ClientId: unsafe extern "system" fn(*mut core::ffi::c_void) -> *mut u16,
}
windows_core::imp::define_interface!(
    IFabricTransportClientEventHandler,
    IFabricTransportClientEventHandler_Vtbl,
    0x4935ab6f_a8bc_4b10_a69e_7a3ba3324892
);
impl core::ops::Deref for IFabricTransportClientEventHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTransportClientEventHandler, windows_core::IUnknown);
impl IFabricTransportClientEventHandler {
    pub unsafe fn OnConnected<P0>(&self, connectionaddress: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).OnConnected)(
            windows_core::Interface::as_raw(self),
            connectionaddress.param().abi(),
        )
        .ok()
    }
    pub unsafe fn OnDisconnected<P0>(
        &self,
        connectionaddress: P0,
        error: windows_core::HRESULT,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::PCWSTR>,
    {
        (windows_core::Interface::vtable(self).OnDisconnected)(
            windows_core::Interface::as_raw(self),
            connectionaddress.param().abi(),
            error,
        )
        .ok()
    }
}
unsafe impl Send for IFabricTransportClientEventHandler {}
unsafe impl Sync for IFabricTransportClientEventHandler {}
#[repr(C)]
pub struct IFabricTransportClientEventHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub OnConnected: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
    ) -> windows_core::HRESULT,
    pub OnDisconnected: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        windows_core::PCWSTR,
        windows_core::HRESULT,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricTransportConnectionHandler,
    IFabricTransportConnectionHandler_Vtbl,
    0xb069692d_e8f0_4f25_a3b6_b2992598a64c
);
impl core::ops::Deref for IFabricTransportConnectionHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTransportConnectionHandler, windows_core::IUnknown);
impl IFabricTransportConnectionHandler {
    pub unsafe fn BeginProcessConnect<P0, P1>(
        &self,
        clientconnection: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<IFabricTransportClientConnection>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginProcessConnect)(
            windows_core::Interface::as_raw(self),
            clientconnection.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndProcessConnect<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndProcessConnect)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn BeginProcessDisconnect<P0>(
        &self,
        clientid: *const u16,
        timeoutmilliseconds: u32,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginProcessDisconnect)(
            windows_core::Interface::as_raw(self),
            clientid,
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndProcessDisconnect<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndProcessDisconnect)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricTransportConnectionHandler {}
unsafe impl Sync for IFabricTransportConnectionHandler {}
#[repr(C)]
pub struct IFabricTransportConnectionHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginProcessConnect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndProcessConnect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginProcessDisconnect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const u16,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndProcessDisconnect: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IFabricTransportListener,
    IFabricTransportListener_Vtbl,
    0x1b63a266_1eeb_4f3e_8886_521458980d10
);
impl core::ops::Deref for IFabricTransportListener {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTransportListener, windows_core::IUnknown);
impl IFabricTransportListener {
    pub unsafe fn BeginOpen<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginOpen)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndOpen<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndOpen)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn BeginClose<P0>(
        &self,
        callback: P0,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginClose)(
            windows_core::Interface::as_raw(self),
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndClose<P0>(&self, context: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        (windows_core::Interface::vtable(self).EndClose)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
        )
        .ok()
    }
    pub unsafe fn Abort(&self) {
        (windows_core::Interface::vtable(self).Abort)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricTransportListener {}
unsafe impl Sync for IFabricTransportListener {}
#[repr(C)]
pub struct IFabricTransportListener_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginOpen: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndOpen: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub BeginClose: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndClose: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Abort: unsafe extern "system" fn(*mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricTransportMessage,
    IFabricTransportMessage_Vtbl,
    0xb4357dab_ef06_465f_b453_938f3b0ad4b5
);
impl core::ops::Deref for IFabricTransportMessage {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTransportMessage, windows_core::IUnknown);
impl IFabricTransportMessage {
    pub unsafe fn GetHeaderAndBodyBuffer(
        &self,
        headerbuffer: *mut *mut FABRIC_TRANSPORT_MESSAGE_BUFFER,
        msgbuffercount: *mut u32,
        msgbuffers: *mut *mut FABRIC_TRANSPORT_MESSAGE_BUFFER,
    ) {
        (windows_core::Interface::vtable(self).GetHeaderAndBodyBuffer)(
            windows_core::Interface::as_raw(self),
            headerbuffer,
            msgbuffercount,
            msgbuffers,
        )
    }
    pub unsafe fn Dispose(&self) {
        (windows_core::Interface::vtable(self).Dispose)(windows_core::Interface::as_raw(self))
    }
}
unsafe impl Send for IFabricTransportMessage {}
unsafe impl Sync for IFabricTransportMessage {}
#[repr(C)]
pub struct IFabricTransportMessage_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub GetHeaderAndBodyBuffer: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut FABRIC_TRANSPORT_MESSAGE_BUFFER,
        *mut u32,
        *mut *mut FABRIC_TRANSPORT_MESSAGE_BUFFER,
    ),
    pub Dispose: unsafe extern "system" fn(*mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricTransportMessageDisposer,
    IFabricTransportMessageDisposer_Vtbl,
    0x914097f3_a821_46ea_b3d9_feafe5f7c4a9
);
impl core::ops::Deref for IFabricTransportMessageDisposer {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTransportMessageDisposer, windows_core::IUnknown);
impl IFabricTransportMessageDisposer {
    pub unsafe fn Dispose(&self, messages: &[Option<IFabricTransportMessage>]) {
        (windows_core::Interface::vtable(self).Dispose)(
            windows_core::Interface::as_raw(self),
            messages.len().try_into().unwrap(),
            core::mem::transmute(messages.as_ptr()),
        )
    }
}
unsafe impl Send for IFabricTransportMessageDisposer {}
unsafe impl Sync for IFabricTransportMessageDisposer {}
#[repr(C)]
pub struct IFabricTransportMessageDisposer_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub Dispose:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32, *const *mut core::ffi::c_void),
}
windows_core::imp::define_interface!(
    IFabricTransportMessageHandler,
    IFabricTransportMessageHandler_Vtbl,
    0x6815bdb4_1479_4c44_8b9d_57d6d0cc9d64
);
impl core::ops::Deref for IFabricTransportMessageHandler {
    type Target = windows_core::IUnknown;
    fn deref(&self) -> &Self::Target {
        unsafe { core::mem::transmute(self) }
    }
}
windows_core::imp::interface_hierarchy!(IFabricTransportMessageHandler, windows_core::IUnknown);
impl IFabricTransportMessageHandler {
    pub unsafe fn BeginProcessRequest<P0, P1>(
        &self,
        clientid: *const u16,
        message: P0,
        timeoutmilliseconds: u32,
        callback: P1,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>
    where
        P0: windows_core::Param<IFabricTransportMessage>,
        P1: windows_core::Param<super::FabricCommon::IFabricAsyncOperationCallback>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).BeginProcessRequest)(
            windows_core::Interface::as_raw(self),
            clientid,
            message.param().abi(),
            timeoutmilliseconds,
            callback.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn EndProcessRequest<P0>(
        &self,
        context: P0,
    ) -> windows_core::Result<IFabricTransportMessage>
    where
        P0: windows_core::Param<super::FabricCommon::IFabricAsyncOperationContext>,
    {
        let mut result__ = core::mem::zeroed();
        (windows_core::Interface::vtable(self).EndProcessRequest)(
            windows_core::Interface::as_raw(self),
            context.param().abi(),
            &mut result__,
        )
        .and_then(|| windows_core::Type::from_abi(result__))
    }
    pub unsafe fn HandleOneWay<P0>(
        &self,
        clientid: *const u16,
        message: P0,
    ) -> windows_core::Result<()>
    where
        P0: windows_core::Param<IFabricTransportMessage>,
    {
        (windows_core::Interface::vtable(self).HandleOneWay)(
            windows_core::Interface::as_raw(self),
            clientid,
            message.param().abi(),
        )
        .ok()
    }
}
unsafe impl Send for IFabricTransportMessageHandler {}
unsafe impl Sync for IFabricTransportMessageHandler {}
#[repr(C)]
pub struct IFabricTransportMessageHandler_Vtbl {
    pub base__: windows_core::IUnknown_Vtbl,
    pub BeginProcessRequest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const u16,
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub EndProcessRequest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub HandleOneWay: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *const u16,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
#[repr(C)]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub struct FABRIC_TRANSPORT_LISTEN_ADDRESS {
    pub IPAddressOrFQDN: windows_core::PCWSTR,
    pub Port: u32,
    pub Path: windows_core::PCWSTR,
}
impl windows_core::TypeKind for FABRIC_TRANSPORT_LISTEN_ADDRESS {
    type TypeKind = windows_core::CopyType;
}
impl Default for FABRIC_TRANSPORT_LISTEN_ADDRESS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub struct FABRIC_TRANSPORT_MESSAGE_BUFFER {
    pub BufferSize: u32,
    pub Buffer: *mut u8,
}
impl windows_core::TypeKind for FABRIC_TRANSPORT_MESSAGE_BUFFER {
    type TypeKind = windows_core::CopyType;
}
impl Default for FABRIC_TRANSPORT_MESSAGE_BUFFER {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub struct FABRIC_TRANSPORT_SETTINGS {
    pub OperationTimeoutInSeconds: u32,
    pub KeepAliveTimeoutInSeconds: u32,
    pub MaxMessageSize: u32,
    pub MaxConcurrentCalls: u32,
    pub MaxQueueSize: u32,
    pub SecurityCredentials: *const super::FabricTypes::FABRIC_SECURITY_CREDENTIALS,
    pub Reserved: *mut core::ffi::c_void,
}
impl windows_core::TypeKind for FABRIC_TRANSPORT_SETTINGS {
    type TypeKind = windows_core::CopyType;
}
impl Default for FABRIC_TRANSPORT_SETTINGS {
    fn default() -> Self {
        unsafe { core::mem::zeroed() }
    }
}
pub trait IFabricTransportCallbackMessageHandler_Impl: Sized {
    fn HandleOneWay(&self, message: Option<&IFabricTransportMessage>) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricTransportCallbackMessageHandler {}
impl IFabricTransportCallbackMessageHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransportCallbackMessageHandler_Vtbl
    where
        Identity: IFabricTransportCallbackMessageHandler_Impl,
    {
        unsafe extern "system" fn HandleOneWay<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            message: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportCallbackMessageHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportCallbackMessageHandler_Impl::HandleOneWay(
                this,
                windows_core::from_raw_borrowed(&message),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            HandleOneWay: HandleOneWay::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransportCallbackMessageHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricTransportClient_Impl: Sized {
    fn BeginRequest(
        &self,
        message: Option<&IFabricTransportMessage>,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndRequest(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricTransportMessage>;
    fn Send(&self, message: Option<&IFabricTransportMessage>) -> windows_core::Result<()>;
    fn BeginOpen(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndOpen(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginClose(
        &self,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndClose(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn Abort(&self);
}
impl windows_core::RuntimeName for IFabricTransportClient {}
impl IFabricTransportClient_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransportClient_Vtbl
    where
        Identity: IFabricTransportClient_Impl,
    {
        unsafe extern "system" fn BeginRequest<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            message: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportClient_Impl::BeginRequest(
                this,
                windows_core::from_raw_borrowed(&message),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndRequest<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            reply: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportClient_Impl::EndRequest(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    reply.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Send<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            message: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportClient_Impl::Send(this, windows_core::from_raw_borrowed(&message))
                .into()
        }
        unsafe extern "system" fn BeginOpen<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportClient_Impl::BeginOpen(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndOpen<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportClient_Impl::EndOpen(this, windows_core::from_raw_borrowed(&context))
                .into()
        }
        unsafe extern "system" fn BeginClose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportClient_Impl::BeginClose(
                this,
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndClose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportClient_Impl::EndClose(this, windows_core::from_raw_borrowed(&context))
                .into()
        }
        unsafe extern "system" fn Abort<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) where
            Identity: IFabricTransportClient_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportClient_Impl::Abort(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginRequest: BeginRequest::<Identity, OFFSET>,
            EndRequest: EndRequest::<Identity, OFFSET>,
            Send: Send::<Identity, OFFSET>,
            BeginOpen: BeginOpen::<Identity, OFFSET>,
            EndOpen: EndOpen::<Identity, OFFSET>,
            BeginClose: BeginClose::<Identity, OFFSET>,
            EndClose: EndClose::<Identity, OFFSET>,
            Abort: Abort::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransportClient as windows_core::Interface>::IID
    }
}
pub trait IFabricTransportClientConnection_Impl: Sized {
    fn Send(&self, message: Option<&IFabricTransportMessage>) -> windows_core::Result<()>;
    fn get_ClientId(&self) -> *mut u16;
}
impl windows_core::RuntimeName for IFabricTransportClientConnection {}
impl IFabricTransportClientConnection_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransportClientConnection_Vtbl
    where
        Identity: IFabricTransportClientConnection_Impl,
    {
        unsafe extern "system" fn Send<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            message: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportClientConnection_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportClientConnection_Impl::Send(
                this,
                windows_core::from_raw_borrowed(&message),
            )
            .into()
        }
        unsafe extern "system" fn get_ClientId<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) -> *mut u16
        where
            Identity: IFabricTransportClientConnection_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportClientConnection_Impl::get_ClientId(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            Send: Send::<Identity, OFFSET>,
            get_ClientId: get_ClientId::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransportClientConnection as windows_core::Interface>::IID
    }
}
pub trait IFabricTransportClientEventHandler_Impl: Sized {
    fn OnConnected(&self, connectionaddress: &windows_core::PCWSTR) -> windows_core::Result<()>;
    fn OnDisconnected(
        &self,
        connectionaddress: &windows_core::PCWSTR,
        error: windows_core::HRESULT,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricTransportClientEventHandler {}
impl IFabricTransportClientEventHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransportClientEventHandler_Vtbl
    where
        Identity: IFabricTransportClientEventHandler_Impl,
    {
        unsafe extern "system" fn OnConnected<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            connectionaddress: windows_core::PCWSTR,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportClientEventHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportClientEventHandler_Impl::OnConnected(
                this,
                core::mem::transmute(&connectionaddress),
            )
            .into()
        }
        unsafe extern "system" fn OnDisconnected<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            connectionaddress: windows_core::PCWSTR,
            error: windows_core::HRESULT,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportClientEventHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportClientEventHandler_Impl::OnDisconnected(
                this,
                core::mem::transmute(&connectionaddress),
                core::mem::transmute_copy(&error),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            OnConnected: OnConnected::<Identity, OFFSET>,
            OnDisconnected: OnDisconnected::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransportClientEventHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricTransportConnectionHandler_Impl: Sized {
    fn BeginProcessConnect(
        &self,
        clientconnection: Option<&IFabricTransportClientConnection>,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndProcessConnect(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn BeginProcessDisconnect(
        &self,
        clientid: *const u16,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndProcessDisconnect(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricTransportConnectionHandler {}
impl IFabricTransportConnectionHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransportConnectionHandler_Vtbl
    where
        Identity: IFabricTransportConnectionHandler_Impl,
    {
        unsafe extern "system" fn BeginProcessConnect<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            clientconnection: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportConnectionHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportConnectionHandler_Impl::BeginProcessConnect(
                this,
                windows_core::from_raw_borrowed(&clientconnection),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProcessConnect<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportConnectionHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportConnectionHandler_Impl::EndProcessConnect(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        unsafe extern "system" fn BeginProcessDisconnect<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            clientid: *const u16,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportConnectionHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportConnectionHandler_Impl::BeginProcessDisconnect(
                this,
                core::mem::transmute_copy(&clientid),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProcessDisconnect<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportConnectionHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportConnectionHandler_Impl::EndProcessDisconnect(
                this,
                windows_core::from_raw_borrowed(&context),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginProcessConnect: BeginProcessConnect::<Identity, OFFSET>,
            EndProcessConnect: EndProcessConnect::<Identity, OFFSET>,
            BeginProcessDisconnect: BeginProcessDisconnect::<Identity, OFFSET>,
            EndProcessDisconnect: EndProcessDisconnect::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransportConnectionHandler as windows_core::Interface>::IID
    }
}
pub trait IFabricTransportListener_Impl: Sized {
    fn BeginOpen(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndOpen(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<super::FabricCommon::IFabricStringResult>;
    fn BeginClose(
        &self,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndClose(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<()>;
    fn Abort(&self);
}
impl windows_core::RuntimeName for IFabricTransportListener {}
impl IFabricTransportListener_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransportListener_Vtbl
    where
        Identity: IFabricTransportListener_Impl,
    {
        unsafe extern "system" fn BeginOpen<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportListener_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportListener_Impl::BeginOpen(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndOpen<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            serviceaddress: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportListener_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportListener_Impl::EndOpen(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    serviceaddress.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BeginClose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportListener_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportListener_Impl::BeginClose(
                this,
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndClose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportListener_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportListener_Impl::EndClose(this, windows_core::from_raw_borrowed(&context))
                .into()
        }
        unsafe extern "system" fn Abort<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) where
            Identity: IFabricTransportListener_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportListener_Impl::Abort(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginOpen: BeginOpen::<Identity, OFFSET>,
            EndOpen: EndOpen::<Identity, OFFSET>,
            BeginClose: BeginClose::<Identity, OFFSET>,
            EndClose: EndClose::<Identity, OFFSET>,
            Abort: Abort::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransportListener as windows_core::Interface>::IID
    }
}
pub trait IFabricTransportMessage_Impl: Sized {
    fn GetHeaderAndBodyBuffer(
        &self,
        headerbuffer: *mut *mut FABRIC_TRANSPORT_MESSAGE_BUFFER,
        msgbuffercount: *mut u32,
        msgbuffers: *mut *mut FABRIC_TRANSPORT_MESSAGE_BUFFER,
    );
    fn Dispose(&self);
}
impl windows_core::RuntimeName for IFabricTransportMessage {}
impl IFabricTransportMessage_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransportMessage_Vtbl
    where
        Identity: IFabricTransportMessage_Impl,
    {
        unsafe extern "system" fn GetHeaderAndBodyBuffer<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            headerbuffer: *mut *mut FABRIC_TRANSPORT_MESSAGE_BUFFER,
            msgbuffercount: *mut u32,
            msgbuffers: *mut *mut FABRIC_TRANSPORT_MESSAGE_BUFFER,
        ) where
            Identity: IFabricTransportMessage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportMessage_Impl::GetHeaderAndBodyBuffer(
                this,
                core::mem::transmute_copy(&headerbuffer),
                core::mem::transmute_copy(&msgbuffercount),
                core::mem::transmute_copy(&msgbuffers),
            )
        }
        unsafe extern "system" fn Dispose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
        ) where
            Identity: IFabricTransportMessage_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportMessage_Impl::Dispose(this)
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            GetHeaderAndBodyBuffer: GetHeaderAndBodyBuffer::<Identity, OFFSET>,
            Dispose: Dispose::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransportMessage as windows_core::Interface>::IID
    }
}
pub trait IFabricTransportMessageDisposer_Impl: Sized {
    fn Dispose(&self, count: u32, messages: *const Option<IFabricTransportMessage>);
}
impl windows_core::RuntimeName for IFabricTransportMessageDisposer {}
impl IFabricTransportMessageDisposer_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransportMessageDisposer_Vtbl
    where
        Identity: IFabricTransportMessageDisposer_Impl,
    {
        unsafe extern "system" fn Dispose<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            count: u32,
            messages: *const *mut core::ffi::c_void,
        ) where
            Identity: IFabricTransportMessageDisposer_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportMessageDisposer_Impl::Dispose(
                this,
                core::mem::transmute_copy(&count),
                core::mem::transmute_copy(&messages),
            )
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            Dispose: Dispose::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransportMessageDisposer as windows_core::Interface>::IID
    }
}
pub trait IFabricTransportMessageHandler_Impl: Sized {
    fn BeginProcessRequest(
        &self,
        clientid: *const u16,
        message: Option<&IFabricTransportMessage>,
        timeoutmilliseconds: u32,
        callback: Option<&super::FabricCommon::IFabricAsyncOperationCallback>,
    ) -> windows_core::Result<super::FabricCommon::IFabricAsyncOperationContext>;
    fn EndProcessRequest(
        &self,
        context: Option<&super::FabricCommon::IFabricAsyncOperationContext>,
    ) -> windows_core::Result<IFabricTransportMessage>;
    fn HandleOneWay(
        &self,
        clientid: *const u16,
        message: Option<&IFabricTransportMessage>,
    ) -> windows_core::Result<()>;
}
impl windows_core::RuntimeName for IFabricTransportMessageHandler {}
impl IFabricTransportMessageHandler_Vtbl {
    pub const fn new<Identity: windows_core::IUnknownImpl, const OFFSET: isize>(
    ) -> IFabricTransportMessageHandler_Vtbl
    where
        Identity: IFabricTransportMessageHandler_Impl,
    {
        unsafe extern "system" fn BeginProcessRequest<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            clientid: *const u16,
            message: *mut core::ffi::c_void,
            timeoutmilliseconds: u32,
            callback: *mut core::ffi::c_void,
            context: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportMessageHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportMessageHandler_Impl::BeginProcessRequest(
                this,
                core::mem::transmute_copy(&clientid),
                windows_core::from_raw_borrowed(&message),
                core::mem::transmute_copy(&timeoutmilliseconds),
                windows_core::from_raw_borrowed(&callback),
            ) {
                Ok(ok__) => {
                    context.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn EndProcessRequest<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            context: *mut core::ffi::c_void,
            reply: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportMessageHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            match IFabricTransportMessageHandler_Impl::EndProcessRequest(
                this,
                windows_core::from_raw_borrowed(&context),
            ) {
                Ok(ok__) => {
                    reply.write(core::mem::transmute(ok__));
                    windows_core::HRESULT(0)
                }
                Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn HandleOneWay<
            Identity: windows_core::IUnknownImpl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            clientid: *const u16,
            message: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT
        where
            Identity: IFabricTransportMessageHandler_Impl,
        {
            let this: &Identity = &*((this as *const *const ()).offset(OFFSET) as *const Identity);
            IFabricTransportMessageHandler_Impl::HandleOneWay(
                this,
                core::mem::transmute_copy(&clientid),
                windows_core::from_raw_borrowed(&message),
            )
            .into()
        }
        Self {
            base__: windows_core::IUnknown_Vtbl::new::<Identity, OFFSET>(),
            BeginProcessRequest: BeginProcessRequest::<Identity, OFFSET>,
            EndProcessRequest: EndProcessRequest::<Identity, OFFSET>,
            HandleOneWay: HandleOneWay::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IFabricTransportMessageHandler as windows_core::Interface>::IID
    }
}
